<channelGroup version="3.7.1">
  <id>a79c9fe3-7a08-42c2-abe1-caf4d426f430</id>
  <name>OBIB</name>
  <revision>1</revision>
  <lastModified>
    <time>1557439110315</time>
    <timezone>Etc/UTC</timezone>
  </lastModified>
  <description></description>
  <channels>
    <channel version="3.7.1">
      <id>e995ffe5-fe5f-4260-a385-98f81c8418fe</id>
      <nextMetaDataId>5</nextMetaDataId>
      <name>Document Storage</name>
      <description></description>
      <revision>1</revision>
      <sourceConnector version="3.7.1">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.vm.VmReceiverProperties" version="3.7.1">
          <pluginProperties/>
          <sourceConnectorProperties version="3.7.1">
            <responseVariable>None</responseVariable>
            <respondAfterProcessing>true</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>1</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
        </properties>
        <transformer version="3.7.1">
          <elements>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.7.1">
              <name>Document Storage Source</name>
              <sequenceNumber>0</sequenceNumber>
              <enabled>true</enabled>
              <script>logger.debug(&apos;Document Storage Source&apos;);

// Store the ids in the channel map
channelMap.put(&apos;locationId&apos;, msg[&apos;locationId&apos;]);
channelMap.put(&apos;documentId&apos;, msg[&apos;documentId&apos;]);

// Store the message content in the tmp message
if (msg[&apos;messageType&apos;] !== &apos;ATTACHMENT&apos;) { // DOCUMENT and RESONSE: uses the XML as template
	tmp = new XML(msg[&apos;messageContent&apos;]);
} else { // ATTACHMENT: convert the JSON to XML
	tmp = JsonUtil.toXml(msg[&apos;messageContent&apos;]);
}</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.destinationsetfilter.DestinationSetFilterStep version="3.7.1">
              <name>Filter destination(s) if &quot;msg[&apos;messageType&apos;]&quot; equals &quot;DOCUMENT&quot;</name>
              <sequenceNumber>1</sequenceNumber>
              <enabled>true</enabled>
              <behavior>REMOVE_ALL_EXCEPT</behavior>
              <metaDataIds>
                <int>1</int>
              </metaDataIds>
              <field>msg[&apos;messageType&apos;]</field>
              <condition>EQUALS</condition>
              <values>
                <string>&quot;DOCUMENT&quot;</string>
              </values>
            </com.mirth.connect.plugins.destinationsetfilter.DestinationSetFilterStep>
            <com.mirth.connect.plugins.destinationsetfilter.DestinationSetFilterStep version="3.7.1">
              <name>Filter destination(s) if &quot;msg[&apos;messageType&apos;]&quot; equals &quot;RESPONSE&quot;</name>
              <sequenceNumber>2</sequenceNumber>
              <enabled>true</enabled>
              <behavior>REMOVE_ALL_EXCEPT</behavior>
              <metaDataIds>
                <int>2</int>
              </metaDataIds>
              <field>msg[&apos;messageType&apos;]</field>
              <condition>EQUALS</condition>
              <values>
                <string>&quot;RESPONSE&quot;</string>
              </values>
            </com.mirth.connect.plugins.destinationsetfilter.DestinationSetFilterStep>
            <com.mirth.connect.plugins.destinationsetfilter.DestinationSetFilterStep version="3.7.1">
              <name>Filter destination(s) if &quot;msg[&apos;messageType&apos;]&quot; equals &quot;ATTACHMENT&quot;</name>
              <sequenceNumber>3</sequenceNumber>
              <enabled>true</enabled>
              <behavior>REMOVE_ALL_EXCEPT</behavior>
              <metaDataIds>
                <int>4</int>
              </metaDataIds>
              <field>msg[&apos;messageType&apos;]</field>
              <condition>EQUALS</condition>
              <values>
                <string>&quot;ATTACHMENT&quot;</string>
              </values>
            </com.mirth.connect.plugins.destinationsetfilter.DestinationSetFilterStep>
          </elements>
          <inboundTemplate encoding="base64">ewoJImxvY2F0aW9uSWQiOiAiIiwKCSJkb2N1bWVudElkIjogIiIsCgkibWVzc2FnZVR5cGUiOiAi
IiwKCSJtZXNzYWdlQ29udGVudCI6ICIiCn0=</inboundTemplate>
          <outboundTemplate encoding="base64">PGNvbnRlbnQvPg==</outboundTemplate>
          <inboundDataType>JSON</inboundDataType>
          <outboundDataType>HL7V3</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.7.1">
            <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.7.1">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </inboundProperties>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.7.1">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.7.1">
              <stripNamespaces>false</stripNamespaces>
            </serializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.7.1">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="3.7.1">
          <elements/>
        </filter>
        <transportName>Channel Reader</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="3.7.1">
          <metaDataId>1</metaDataId>
          <name>Store CDA Document</name>
          <properties class="com.mirth.connect.connectors.jdbc.DatabaseDispatcherProperties" version="3.7.1">
            <pluginProperties/>
            <destinationConnectorProperties version="3.7.1">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <driver>com.mysql.jdbc.Driver</driver>
            <url>jdbc:mysql://localhost:3306/OBIB_DB</url>
            <username></username>
            <password></password>
            <query>logger.debug(&apos;Store CDA Document&apos;);

try {
	// Get the Database Connection
	var dbConn = globalChannelMap.get(&apos;dbConnection&apos;);
	if (!dbConn) { // sanity check
		dbConn = getDBConnection();
		globalChannelMap.put(&apos;dbConnection&apos;, dbConn);
	}
	
	// Build the insert script
	var insertString = &quot;INSERT INTO document (document_id, document_date, document_content, location_id, destination_id) &quot; 
		+ &quot;VALUES (&apos;&quot; + $(&apos;documentId&apos;) + &quot;&apos;, &apos;&quot; + $(&apos;documentDate&apos;) + &quot;&apos;, &apos;&quot; + $(&apos;documentContent&apos;) + &quot;&apos;, &apos;&quot; + $(&apos;locationId&apos;) + &quot;&apos;, &apos;&quot; + $(&apos;destinationId&apos;) + &quot;&apos;)&quot;;

	// Execute the insertion
	try {
		var result = dbConn.executeUpdate(insertString);
	} catch(e) {
		logger.error(&apos;Error saving document &quot;&apos; + $(&apos;documentId&apos;) + &apos;&quot; into database: &apos; + e);
		dbConn.rollback();
	}
} catch(err) {
	logger.error(&apos;Error on &quot;Store CDA Document&quot;: &apos; + err);
}</query>
            <useScript>true</useScript>
          </properties>
          <transformer version="3.7.1">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.7.1">
                <name>Get Document Metadata</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>//channelMap.put(&apos;documentId&apos;, msg[&apos;id&apos;][&apos;@extension&apos;].toString()); //get on Source Transformer
channelMap.put(&apos;documentDate&apos;, parseCDADateTimeToDB(msg[&apos;effectiveTime&apos;][&apos;@value&apos;].toString()));
channelMap.put(&apos;documentContent&apos;, msg.toString());
//channelMap.put(&apos;locationId&apos;, &apos;&apos;); //get on Source Transformer
channelMap.put(&apos;destinationId&apos;, &apos;&apos;);</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64">PENsaW5pY2FsRG9jdW1lbnQgeG1sbnM9InVybjpobDctb3JnOnYzIiBjbGFzc0NvZGU9IkRPQ0NM
SU4iIG1vb2RDb2RlPSJFVk4iPgogICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkNEWCBD
bGluaWNhbCBEb2N1bWVudCBJRCIgZXh0ZW5zaW9uPSIiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgz
LjMuMjc3LjEwMC4zIi8+CiAgICA8ZWZmZWN0aXZlVGltZSB2YWx1ZT0iIi8+CiAgICA8cmVjb3Jk
VGFyZ2V0IGNvbnRleHRDb250cm9sQ29kZT0iT1AiIHR5cGVDb2RlPSJSQ1QiPgogICAgICAgIDxw
YXRpZW50Um9sZSBjbGFzc0NvZGU9IlBBVCIvPgogICAgPC9yZWNvcmRUYXJnZXQ+CiAgICA8YXV0
aG9yIGNvbnRleHRDb250cm9sQ29kZT0iT1AiIHR5cGVDb2RlPSJBVVQiPgogICAgICAgIDx0aW1l
IHZhbHVlPSIiLz4KICAgICAgICA8YXNzaWduZWRBdXRob3IgY2xhc3NDb2RlPSJBU1NJR05FRCI+
CiAgICAgICAgICAgIDxpZCBudWxsRmxhdm9yPSJOQSIvPgogICAgICAgIDwvYXNzaWduZWRBdXRo
b3I+CiAgICA8L2F1dGhvcj4KICAgIDxhdXRob3IgY29udGV4dENvbnRyb2xDb2RlPSJPUCIgdHlw
ZUNvZGU9IkFVVCI+CiAgICAgICAgPHRpbWUgdmFsdWU9IiIvPgogICAgICAgIDxhc3NpZ25lZEF1
dGhvciBjbGFzc0NvZGU9IkFTU0lHTkVEIj4KICAgICAgICAgICAgPGlkIGV4dGVuc2lvbj0iIi8+
CiAgICAgICAgPC9hc3NpZ25lZEF1dGhvcj4KICAgIDwvYXV0aG9yPgogICAgPGluZm9ybWF0aW9u
UmVjaXBpZW50IHR5cGVDb2RlPSLigJxQUkNQ4oCdIj4KICAgICAgICA8aW50ZW5kZWRSZWNpcGll
bnQgY2xhc3NDb2RlPSJBU1NJR05FRCI+CiAgICAgICAgICAgIDxpZCBleHRlbnNpb249IiIvPgog
ICAgICAgIDwvaW50ZW5kZWRSZWNpcGllbnQ+CiAgICA8L2luZm9ybWF0aW9uUmVjaXBpZW50Pgo8
L0NsaW5pY2FsRG9jdW1lbnQ+Cg==</inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>HL7V3</inboundDataType>
            <outboundDataType>HL7V3</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.7.1">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.7.1">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.7.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.7.1">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.7.1">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.7.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.7.1">
            <elements/>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>HL7V3</inboundDataType>
            <outboundDataType>HL7V3</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.7.1">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.7.1">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.7.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.7.1">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.7.1">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.7.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.7.1">
            <elements/>
          </filter>
          <transportName>Database Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
        <connector version="3.7.1">
          <metaDataId>2</metaDataId>
          <name>Store CDA Response</name>
          <properties class="com.mirth.connect.connectors.jdbc.DatabaseDispatcherProperties" version="3.7.1">
            <pluginProperties/>
            <destinationConnectorProperties version="3.7.1">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <driver>com.mysql.jdbc.Driver</driver>
            <url>jdbc:mysql://localhost:3306/OBIB_DB</url>
            <username></username>
            <password></password>
            <query>logger.debug(&apos;Store CDA Response&apos;);

try {
	// Get the Database Connection
	var dbConn = globalChannelMap.get(&apos;dbConnection&apos;);
	if (!dbConn) { // sanity check
		dbConn = getDBConnection();
		globalChannelMap.put(&apos;dbConnection&apos;, dbConn);
	}
	
	// Build the insert script
	var insertString = &quot;INSERT INTO document_response (response_id, response_date, response_status, response_content, document_id) &quot; 
		+ &quot;VALUES (&apos;&quot; + $(&apos;responseId&apos;) + &quot;&apos;, &apos;&quot; + $(&apos;responseDate&apos;) + &quot;&apos;, &apos;&quot; + $(&apos;responseStatus&apos;) + &quot;&apos;, &apos;&quot; + $(&apos;responseContent&apos;) + &quot;&apos;, &apos;&quot; + $(&apos;documentId&apos;) + &quot;&apos;)&quot;;

	// Execute the insertion
	try {
		var result = dbConn.executeUpdate(insertString);
	} catch(e) {
		logger.error(&apos;Error saving response for document &quot;&apos; + $(&apos;documentId&apos;) + &apos;&quot; into database: &apos; + e);
		dbConn.rollback();
	}
} catch(err) {
	logger.error(&apos;Error on &quot;Store CDA Response&quot;: &apos; + err);
}</query>
            <useScript>true</useScript>
          </properties>
          <transformer version="3.7.1">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.7.1">
                <name>Get Response Metadata</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>channelMap.put(&apos;responseId&apos;, msg[&apos;id&apos;][&apos;@extension&apos;].toString());
channelMap.put(&apos;responseDate&apos;, parseCDADateTimeToDB(msg[&apos;creationTime&apos;][&apos;@value&apos;].toString()));
channelMap.put(&apos;responseStatus&apos;, msg[&apos;acknowledgement&apos;][&apos;acknowledgementDetail&apos;][&apos;@typeCode&apos;].toString());
channelMap.put(&apos;responseContent&apos;, msg.toString());
//channelMap.put(&apos;documentId&apos;, &apos;&apos;); // get on Source Transformer</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64">PE1DQ0lfSU4wMDAwMDJVVjAxIHhtbG5zPSJ1cm46aGw3LW9yZzp2MyIgSVRTVmVyc2lvbj0iWE1M
XzEuMCI+CiAgICA8aWQgZXh0ZW5zaW9uPSIiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3
LjEwMC4xIi8+CiAgICA8Y3JlYXRpb25UaW1lIHZhbHVlPSIiLz4KICAgIDxhY2NlcHRBY2tDb2Rl
IGNvZGU9IiIvPgogICAgPHJlY2VpdmVyPgogICAgICAgIDxkZXZpY2UgY2xhc3NDb2RlPSJERVYi
IGRldGVybWluZXJDb2RlPSJJTlNUQU5DRSI+CiAgICAgICAgICAgIDxpZCBudWxsRmxhdm9yPSJO
QSIvPgogICAgICAgICAgICA8YXNBZ2VudCBjbGFzc0NvZGU9IkFHTlQiPgogICAgICAgICAgICAg
ICAgPHJlcHJlc2VudGVkT3JnYW5pemF0aW9uIGNsYXNzQ29kZT0iT1JHIiBkZXRlcm1pbmVyQ29k
ZT0iSU5TVEFOQ0UiLz4KICAgICAgICAgICAgPC9hc0FnZW50PgogICAgICAgIDwvZGV2aWNlPgog
ICAgPC9yZWNlaXZlcj4KICAgIDxzZW5kZXI+CiAgICAgICAgPGRldmljZSBjbGFzc0NvZGU9IkRF
ViIgZGV0ZXJtaW5lckNvZGU9IklOU1RBTkNFIj4KICAgICAgICAgICAgPGlkIG51bGxGbGF2b3I9
Ik5BIi8+CiAgICAgICAgICAgIDxhc0FnZW50IGNsYXNzQ29kZT0iQUdOVCI+CiAgICAgICAgICAg
ICAgICA8cmVwcmVzZW50ZWRPcmdhbml6YXRpb24gY2xhc3NDb2RlPSJPUkciIGRldGVybWluZXJD
b2RlPSJJTlNUQU5DRSIvPgogICAgICAgICAgICA8L2FzQWdlbnQ+CiAgICAgICAgPC9kZXZpY2U+
CiAgICA8L3NlbmRlcj4KICAgIDxhY2tub3dsZWRnZW1lbnQgdHlwZUNvZGU9IkNBIj4KICAgICAg
ICA8dGFyZ2V0TWVzc2FnZT4KICAgICAgICAgICAgPGlkIGV4dGVuc2lvbj0iIiByb290PSIyLjE2
Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuMSIvPgogICAgICAgIDwvdGFyZ2V0TWVzc2FnZT4KICAg
ICAgICA8YWNrbm93bGVkZ2VtZW50RGV0YWlsIHR5cGVDb2RlPSIiPgogICAgICAgICAgICA8dGV4
dC8+CiAgICAgICAgPC9hY2tub3dsZWRnZW1lbnREZXRhaWw+CiAgICA8L2Fja25vd2xlZGdlbWVu
dD4KPC9NQ0NJX0lOMDAwMDAyVVYwMT4K</inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>HL7V3</inboundDataType>
            <outboundDataType>HL7V3</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.7.1">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.7.1">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.7.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.7.1">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.7.1">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.7.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.7.1">
            <elements/>
            <inboundDataType>HL7V3</inboundDataType>
            <outboundDataType>HL7V3</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.7.1">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.7.1">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.7.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.7.1">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.7.1">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.7.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.7.1">
            <elements/>
          </filter>
          <transportName>Database Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>false</waitForPrevious>
        </connector>
        <connector version="3.7.1">
          <metaDataId>4</metaDataId>
          <name>Store CDA Attachment</name>
          <properties class="com.mirth.connect.connectors.jdbc.DatabaseDispatcherProperties" version="3.7.1">
            <pluginProperties/>
            <destinationConnectorProperties version="3.7.1">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <driver>com.mysql.jdbc.Driver</driver>
            <url>jdbc:mysql://localhost:3306/OBIB_DB</url>
            <username></username>
            <password></password>
            <query>logger.debug(&apos;Store CDA Attachment&apos;);

try {
	// Get the Database Connection
	var dbConn = globalChannelMap.get(&apos;dbConnection&apos;);
	if (!dbConn) { // sanity check
		dbConn = getDBConnection();
		globalChannelMap.put(&apos;dbConnection&apos;, dbConn);
	}
	
	// Build the insert script
	var insertString = &quot;INSERT INTO document_attachment (document_id, media_type, reference_name, content, hash_value) &quot; 
		+ &quot;VALUES (&apos;&quot; + $(&apos;documentId&apos;) + &quot;&apos;, &apos;&quot; + $(&apos;mediaType&apos;) + &quot;&apos;, &apos;&quot; + $(&apos;referenceName&apos;) + &quot;&apos;, &apos;&quot; + $(&apos;content&apos;) + &quot;&apos;, &apos;&quot; + $(&apos;hashValue&apos;) + &quot;&apos;)&quot;;

	// Execute the insertion
	try {
		var result = dbConn.executeUpdate(insertString);
	} catch(e) {
		logger.error(&apos;Error saving attachment &quot;&apos; + $(&apos;documentId&apos;) + &apos;&quot; into database: &apos; + e);
		dbConn.rollback();
	}
} catch(err) {
	logger.error(&apos;Error on &quot;Store CDA Attachment&quot;: &apos; + err);
}</query>
            <useScript>true</useScript>
          </properties>
          <transformer version="3.7.1">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.7.1">
                <name>Get Attachment Metadata</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>channelMap.put(&apos;mediaType&apos;, msg[&apos;mediaType&apos;].toString());
channelMap.put(&apos;referenceName&apos;, msg[&apos;reference&apos;].toString());
channelMap.put(&apos;content&apos;, msg[&apos;content&apos;].toString());
channelMap.put(&apos;hashValue&apos;, msg[&apos;hash&apos;].toString());</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64">PGF0dGFjaG1lbnRzPgogIDxtZWRpYVR5cGUvPgogIDxyZWZlcmVuY2UvPgogIDxjb250ZW50Lz4K
ICA8aGFzaC8+CjwvYXR0YWNobWVudHM+</inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>HL7V3</inboundDataType>
            <outboundDataType>HL7V3</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.7.1">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.7.1">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.7.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.7.1">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.7.1">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.7.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.7.1">
            <elements/>
            <inboundDataType>HL7V3</inboundDataType>
            <outboundDataType>HL7V3</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.7.1">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.7.1">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.7.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.7.1">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.7.1">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.7.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.7.1">
            <elements/>
          </filter>
          <transportName>Database Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>false</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data

/******** Create a Database Connection ********/
dbConn = getDBConnection();
globalChannelMap.put(&apos;dbConnection&apos;, dbConn);

return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data

/******** Close the Database Connection ********/
var dbConn = globalChannelMap.get(&apos;dbConnection&apos;);
if (!dbConn) {
	dbConn.close();
}

return;</undeployScript>
      <properties version="3.7.1">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>DEVELOPMENT</messageStorageMode>
        <encryptData>false</encryptData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>true</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TYPE</name>
            <type>STRING</type>
            <mappingName>mirth_type</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="3.7.1">
          <type>None</type>
          <properties/>
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>true</enabled>
          <lastModified>
            <time>1557261149089</time>
            <timezone>America/Vancouver</timezone>
          </lastModified>
          <pruningSettings>
            <archiveEnabled>true</archiveEnabled>
          </pruningSettings>
        </metadata>
        <codeTemplateLibraries>
          <codeTemplateLibrary version="3.7.1">
            <id>5d2a129c-da07-49cc-950c-d941a93cd271</id>
            <name>OBIB</name>
            <revision>5</revision>
            <lastModified>
              <time>1557967210347</time>
              <timezone>Canada/Pacific</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>e995ffe5-fe5f-4260-a385-98f81c8418fe</string>
              <string>b2f0c503-a881-4126-995e-844c3e7692fd</string>
              <string>2375f320-7fd5-48cd-b3bb-53c22dab182b</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.7.1">
                <id>9914a610-67bc-42b7-aa87-6a693ed1800c</id>
                <name>Build CDA Address</name>
                <revision>1</revision>
                <lastModified>
                  <time>1557439108498</time>
                  <timezone>Etc/UTC</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Build a XML address tag based on &apos;4.2.1.2. Addresses&apos;

	@param {String} use - 
	@param {String} streetAddress - 
	@param {String} city - 
	@param {String} state - 
	@param {String} postalCode - 
	@param {String} country - 
	@return {Object} return the XML address tag
*/
function buildCDAAddress(use, streetAddress, city, state, postalCode, country) {
	var addr = new XML(&quot;&lt;addr&gt;&quot; + streetAddress + &quot;&lt;delimiter/&gt;&lt;/addr&gt;&quot;); // CONF-BC0039
  	addr[&apos;@use&apos;] = use; // CONF-BC0041
  	addr[&apos;city&apos;] = city 
  	addr[&apos;state&apos;] = state; // CONF-BC0045
  	addr[&apos;postalCode&apos;] = postalCode;
  	if (country) {
  		addr[&apos;country&apos;] = country; // CONF-BC0044
  	}
  	return addr;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.7.1">
                <id>d56207a8-0d51-40fb-9437-73815405b6a2</id>
                <name>Build CDA ID</name>
                <revision>1</revision>
                <lastModified>
                  <time>1557439109018</time>
                  <timezone>Etc/UTC</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Build a XML id tag

	@param {String} root - 
	@param {String} extension - 
	@return {Object} return the XML id tag
*/
function buildCDAId(root, extension) {
	if (extension) {
		var id = new XML(&apos;&lt;id/&gt;&apos;);
	  	id[&apos;@extension&apos;] = extension;
		if (root) {
		  	id[&apos;@root&apos;] = root;
		  	// Get the authority name from the GlobalMap (loaded from database)
		  	var authName = globalMap.get(root);
		  	if (authName) {
		  		id[&apos;@assigningAuthorityName&apos;] = authName;
		  	}
		}
	  	return id;
	}
	return new XML(&apos;&lt;id nullFlavor=&quot;NA&quot; /&gt;&apos;);
}

</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.7.1">
                <id>aaee9682-0184-43e5-a80b-32615c89dae0</id>
                <name>Build CDA Name</name>
                <revision>1</revision>
                <lastModified>
                  <time>1557439108885</time>
                  <timezone>Etc/UTC</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Build a XML name tag based on &apos;4.2.1.1. Person Names&apos;

	@param {String} use -
	@param {String} family -
	@param {String} given -
	@param {String} prefix -
	@param {String} suffix -
	@return {Object} return the XML name tag
*/
function buildCDAName(use, family, given, prefix, suffix) {
	var name = new XML(&quot;&lt;name/&gt;&quot;);
  	name[&apos;@use&apos;] = use; // CONF-BC0038
  	name[&apos;family&apos;] = family;
  	if (given instanceof Array) { // CONF-BC0031, CONF-BC0034
  		for (var i = 0; i &lt; given.length; i++) {
  			name[&apos;given&apos;][i] = given[i];
  		}
  	} else {
  		name[&apos;given&apos;] = given;
  	}
  	if (prefix) { // CONF-BC0035
  		name[&apos;prefix&apos;] = prefix;
  	}
  	if (suffix) { // CONF-BC0036
  		name[&apos;suffix&apos;] = suffix;
  	}
  	return name;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.7.1">
                <id>39f73e3c-ac8d-46ee-904c-32d6a73d93c0</id>
                <name>Build CDA Telecom</name>
                <revision>1</revision>
                <lastModified>
                  <time>1557439108562</time>
                  <timezone>Etc/UTC</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Build a XML telecom tag

	@param {String} use - &apos;H&apos; = home, &apos;W&apos; = work, &apos;M&apos; = mobile
	@param {String} type - &apos;tel&apos; or &apos;email&apos;
	@param {String} value - number of telefone or email address
	@return {Object} return the XML telecom tag
*/
function buildCDATelecom(use, type, value) {
	var telecom = new XML(&quot;&lt;telecom/&gt;&quot;);
  	telecom[&apos;@use&apos;] = use;
  	telecom[&apos;@value&apos;] = type + &quot;:&quot; + value;
  	return telecom;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.7.1">
                <id>978d7943-1810-4652-a684-8f7b6bc3bc11</id>
                <name>Build CDA TemplateId</name>
                <revision>1</revision>
                <lastModified>
                  <time>1557439108192</time>
                  <timezone>Etc/UTC</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Build a XML templateId tag

	@param {String} code - 
	@return {Object} return the XML template tag
*/
function buildCDATemplateId(code) {
	var templateId = new XML(&apos;&lt;templateId/&gt;&apos;);

	// Get the attributes from the GlobalMap (loaded from database)
  	var loinc_code = globalMap.get(code);
  	
  	templateId[&apos;@root&apos;] = loinc_code[&apos;template_id&apos;];
  	templateId[&apos;@assigningAuthorityName&apos;] = loinc_code[&apos;template_name&apos;];
		  	
  	return templateId;&#xd;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.7.1">
                <id>0d5c946b-11fe-4dde-8c69-7d9296ea32a0</id>
                <name>Build Document Storage Message</name>
                <revision>1</revision>
                <lastModified>
                  <time>1557439108673</time>
                  <timezone>Etc/UTC</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>importPackage(Packages.ca.uvic.leadlab.cdxconnector.messages);

/**
	Build a Document Storage Message.

	@param {String} locationId - 
	@param {String} receiverId - 
	@param {String} documentId - 
	@param {String} messageType - DOCUMENT, RESPONSE or ATTACHMENT
	@param {String} content - 
	@return {String} return the Document Storage Message JSON object
*/
function buildDocumentStorageMessage(locationId, receiverId, documentId, messageType, messageContent) {
	var storageMsg = {};
	storageMsg[&apos;locationId&apos;] = locationId;
	storageMsg[&apos;receiverId&apos;] = receiverId;
	storageMsg[&apos;documentId&apos;] = documentId;
	storageMsg[&apos;messageType&apos;] = messageType;
	storageMsg[&apos;messageContent&apos;] = messageContent;
	return storageMsg;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.7.1">
                <id>d55c3c9d-e151-4034-9d14-35f86a4a58f1</id>
                <name>Check Segment</name>
                <revision>1</revision>
                <lastModified>
                  <time>1557439108774</time>
                  <timezone>Etc/UTC</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Verify that the segment exists.

	@param {Object} segment - 
	@return {boolean} return true if the segment exists
*/
function segmentExist(segment) {
	return getArrayOrXmlLength(segment) &gt; 0;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.7.1">
                <id>738d81a1-d04c-482e-a011-30c61a09b3d3</id>
                <name>Create Array of DocumentAttachment</name>
                <revision>4</revision>
                <lastModified>
                  <time>1557514941299</time>
                  <timezone>Etc/UTC</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Create an Array of DocumentAttachment objects from a JSON object

	@param {Object[]} jsonAttachments - 
	@return {DocumentAttachment[]} return the Array of DocumentAttachment
*/
function createDocumentAttachmentArray(jsonAttachments) {
	var attachments = [];
	if (jsonAttachments != null) {
		for (var i = 0; i &lt; jsonAttachments.length; i++) {
			var attachment = jsonAttachments[i];
			attachments.push(new Packages.ca.uvic.leadlab.cdxconnector.messages.DocumentAttachment(
				attachment[&apos;mediaType&apos;],
				attachment[&apos;content&apos;],
				attachment[&apos;hash&apos;],
				attachment[&apos;reference&apos;]));
		}
	}
	return attachments;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.7.1">
                <id>bcd2a30d-111f-4fd3-9724-0e9a2e7dfe50</id>
                <name>Create DatabaseConnection</name>
                <revision>1</revision>
                <lastModified>
                  <time>1557439108932</time>
                  <timezone>Etc/UTC</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get the DatabaseConnection object

	@return {DatabaseConnection} return the DatabaseConnection object
*/
function getDBConnection() {
	return DatabaseConnectionFactory.createDatabaseConnection(
			globalMap.get(&apos;obib.db.driver&apos;), 
			globalMap.get(&apos;obib.db.url&apos;), 
			globalMap.get(&apos;obib.db.username&apos;) , 
			globalMap.get(&apos;obib.db.password&apos;));
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.7.1">
                <id>60bfd3ac-552a-4d59-ac1d-48fbe4f430b2</id>
                <name>Create Error Message</name>
                <revision>12</revision>
                <lastModified>
                  <time>1557795952834</time>
                  <timezone>Etc/UTC</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Create JSON error message

	@param {String} error - Error message
	@param {Object} obibErrors - Associative Array of errors
	@return {String} return the JSON response
*/
function createErrorMessage(error, obibErrors) {
	return JSON.stringify({&apos;status&apos;: &apos;ERROR&apos;, &apos;message&apos;: error, &apos;obibErrors&apos;: obibErrors})
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.7.1">
                <id>f1de696c-f547-49ae-8225-f7e40ed2c87c</id>
                <name>Create Segment Before</name>
                <revision>1</revision>
                <lastModified>
                  <time>1557439108424</time>
                  <timezone>Etc/UTC</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Create a new segment and insert it before the target segment.
	
	@param {String} name - The name of the segment to create.
	@param {String} segment - The existing segment that the new segment will be inserted before.
	@return {String} return The existing segment that the new segment will be inserted after.
*/
function createSegmentBefore(name, segment) {
	var msgObj = segment;
   	while (msgObj.parent() != undefined) { 
		msgObj = msgObj.parent(); 
	}
     msgObj.insertChildBefore(segment[0], new XML(&apos;&lt;&apos; + name + &apos;&gt;&lt;/&apos; + name + &apos;&gt;&apos;));
   	return msgObj.child(segment[0].childIndex() - 1);
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.7.1">
                <id>0b2ecd99-756c-4a93-9bba-230bf83b0c62</id>
                <name>Format CDA Date</name>
                <revision>8</revision>
                <lastModified>
                  <time>1557969826591</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Format the date for the CDA format &apos;yyyyMMdd&apos;

	@param {Date/String} date -
	@return {String} return the formated date
*/
function formatCDADate(date) {
	return DateUtil.convertDate(&quot;yyyy-MM-dd&quot;, &quot;yyyyMMdd&quot;, date);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.7.1">
                <id>07a8a226-a4d4-4248-b816-00011d888d0f</id>
                <name>Format CDA Date/Time</name>
                <revision>7</revision>
                <lastModified>
                  <time>1557969321208</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Format the date/time for the CDA format &apos;yyyyMMddHHmmZZZ&apos;

	@param {Date/String} dateTime - 
	@return {String} return the formated dateTime
*/
function formatCDADateTime(dateTime) {
	return DateUtil.formatDate(&apos;yyyyMMddHHmmZZZ&apos;, new Date(dateTime));
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.7.1">
                <id>e83b8bbf-433a-4c3d-88a2-16f4132b38af</id>
                <name>Handle Return Message</name>
                <revision>1</revision>
                <lastModified>
                  <time>1557439108623</time>
                  <timezone>Etc/UTC</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Handle the return message creation.

	@param {Object} responseStatus - 
	@param {Object} responseStatusMessage - 
	@param {Object} responseMessage - 
	@param {Function} createMessage - Callback function responsible for creating and return the result message.
	@return {String} return the stringify json message
*/
function handleResponseMessage(responseStatus, responseStatusMessage, responseMessage, createMessage) {
	if (responseStatus === SENT) { // process only SENT messages
		return JSON.stringify(createMessage()); // Convert the json to string and return it
	} else if (responseStatus === ERROR) {
		throw &quot;Error Message: &apos;&quot; + responseStatusMessage.toString() 
			+ &quot;&apos;\n Original Message: &apos;&quot; + msg.toString() + &quot;&apos;&quot;;
	} else {
		throw &quot;Not able to handle the response code: &apos;&quot; + responseStatus 
		+ &quot;&apos; \n Error Message: &apos;&quot; + responseStatusMessage.toString() 
		+ &quot;&apos;\n Original Message: &apos;&quot; + msg.toString() + &quot;&apos;&quot;;
	}
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.7.1">
                <id>f4743440-d5d2-44f2-acd9-35746c48d9b3</id>
                <name>Parse CDA Address</name>
                <revision>1</revision>
                <lastModified>
                  <time>1557439108023</time>
                  <timezone>Etc/UTC</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Parse the CDA Address to JSON Object

	@param {String} cdaAddress - 
	@return {String} return the parsed Address object
*/
function parseCDAAddress(cdaAddress) {
	var addr = {};
	addr[&apos;use&apos;] = cdaAddress[&apos;@use&apos;].toString();
	// Try to get the street address from the body of the tag &lt;addr&gt; (Document format)
	var strtAddr = cdaAddress.toString().match(/&lt;addr.*&gt;(.+?)(?=&lt;delimiter\/&gt;)/); // return array of matchs
	if (strtAddr) {
		addr[&apos;streetAddress&apos;] = strtAddr[1]; //.replace(/(&lt;\/?[^&gt;]+&gt;)/gi, &apos;&apos;); // strip xml tags?
	}
	// Try to append the list of &apos;delimiters&apos; (List clinics/providers format)
	if (segmentExist(cdaAddress[&apos;delimiter&apos;])) {
		for (var i = 0; i &lt; getArrayOrXmlLength(cdaAddress[&apos;delimiter&apos;]); i++) {
			addr[&apos;streetAddress&apos;] = (addr[&apos;streetAddress&apos;] ? addr[&apos;streetAddress&apos;] + &apos; &apos; : &apos;&apos;) + cdaAddress[&apos;delimiter&apos;][i].toString();
		}
		addr[&apos;streetAddress&apos;] = addr[&apos;streetAddress&apos;].trim(); // trim any whitespace from both side of the address
	}
	if (segmentExist(cdaAddress[&apos;city&apos;])) {
		addr[&apos;city&apos;] = cdaAddress[&apos;city&apos;].toString();
	}
	if (segmentExist(cdaAddress[&apos;province&apos;])) {
		addr[&apos;province&apos;] = cdaAddress[&apos;state&apos;].toString();
	}
	if (segmentExist(cdaAddress[&apos;postalCode&apos;])) {
		addr[&apos;postalCode&apos;] = cdaAddress[&apos;postalCode&apos;].toString();
	}
	if (segmentExist(cdaAddress[&apos;country&apos;])) {
		addr[&apos;country&apos;] = cdaAddress[&apos;country&apos;].toString();
	}
	return addr;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.7.1">
                <id>41f1daa2-e22b-439a-b0b5-16bc108c007e</id>
                <name>Parse CDA Date/Time</name>
                <revision>1</revision>
                <lastModified>
                  <time>1557439108842</time>
                  <timezone>Etc/UTC</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Parse the CDA Date/Time to Date object

	@param {String} cdaDateTime - 
	@return {String} return the Date object
*/
function parseCDADateTime(cdaDateTime) {
	if (cdaDateTime &amp;&amp; cdaDateTime.length &lt;= 8) {
		return DateUtil.convertDate(&quot;yyyyMMdd&quot;, &quot;yyyy-MM-dd&quot;, cdaDateTime);
	}
	return DateUtil.convertDate(&quot;yyyyMMddHHmmZZZ&quot;, &quot;yyyy-MM-dd\&apos;T\&apos;HH:mm:ssZ&quot;, cdaDateTime);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.7.1">
                <id>1dc8b8fe-b046-4292-a7c2-218c37bd0d2d</id>
                <name>Parse CDA Date/TIme to DB format</name>
                <revision>1</revision>
                <lastModified>
                  <time>1557439108977</time>
                  <timezone>Etc/UTC</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Parse the CDA Date/Time to Date in DB format

	@param {String} cdaDateTime - 
	@return {String} return the Date in DB format
*/
function parseCDADateTimeToDB(cdaDateTime) {
	if (cdaDateTime &amp;&amp; cdaDateTime.length &lt;= 8) {
		return DateUtil.convertDate(&quot;yyyyMMdd&quot;, &quot;yyyy-MM-dd&quot;, cdaDateTime);
	}
	return DateUtil.convertDate(&quot;yyyyMMddHHmmZZZ&quot;, &quot;yyyy-MM-dd hh:mm:ss&quot;, cdaDateTime);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.7.1">
                <id>a2f73260-eb70-4dcc-8b8a-9350c3bec9fd</id>
                <name>Parse CDA ID</name>
                <revision>1</revision>
                <lastModified>
                  <time>1557439107886</time>
                  <timezone>Etc/UTC</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Parse the CDA Id to JSON object

	@param {String} cdaID - 
	@return {String} return the parsed ID object
*/
function parseCDAId(cdaID) {
	var id = {};
	if (cdaID[&apos;@extension&apos;]) {
		id[&apos;code&apos;] = cdaID[&apos;@extension&apos;].toString();
	}
	if (cdaID[&apos;@root&apos;]) {
		id[&apos;type&apos;] = cdaID[&apos;@root&apos;].toString();
	}
	return id;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.7.1">
                <id>a0354d90-ffa8-47c5-9776-e41927d2f0d0</id>
                <name>Parse CDA Name</name>
                <revision>1</revision>
                <lastModified>
                  <time>1557439108115</time>
                  <timezone>Etc/UTC</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Parse the CDA Name to JSON object

	@param {String} cdaName - 
	@return {String} return the parsed Name object
*/
function parseCDAName(cdaName) {
	var name = {};
	name[&apos;use&apos;] = cdaName[&apos;@use&apos;].toString();
	name[&apos;family&apos;] = cdaName[&apos;family&apos;].toString();
	name[&apos;given&apos;] = [];
	for (var i = 0; i &lt; getArrayOrXmlLength(cdaName[&apos;given&apos;]); i++) {
		name[&apos;given&apos;][i] = cdaName[&apos;given&apos;][i].toString();
	}
	if (segmentExist(cdaName[&apos;prefix&apos;])) {
		name[&apos;prefix&apos;] = cdaName[&apos;prefix&apos;].toString();
	}
	if (segmentExist(cdaName[&apos;suffix&apos;])) {
		name[&apos;suffix&apos;] = cdaName[&apos;suffix&apos;].toString();
	}
	return name;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.7.1">
                <id>407e6d63-57cf-42f8-b555-5d6c575f4f55</id>
                <name>Parse CDA Telecom</name>
                <revision>1</revision>
                <lastModified>
                  <time>1557439109060</time>
                  <timezone>Etc/UTC</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Parse the CDA Telecom to JSON object

	@param {String} telecom - 
	@return {String} return the parsed Telecom object
*/
function parseCDATelecom(cdaTelecom) {
	var telecom = {};
	telecom[&apos;use&apos;] = cdaTelecom[&apos;@use&apos;].toString();
	var telParts = cdaTelecom[&apos;@value&apos;].split(&apos;:&apos;);
	telecom[&apos;type&apos;] = telParts[0];	
	telecom[&apos;value&apos;] = telParts[1];
	return telecom;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.7.1">
                <id>dfd86988-26e1-4d97-b81d-fee49e303272</id>
                <name>Store OBIB Error</name>
                <revision>14</revision>
                <lastModified>
                  <time>1557795722702</time>
                  <timezone>Etc/UTC</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Store the error as an &apos;associative array&apos; in the channel map.
	To retrieve the array of errors use &apos;channelMap.get(&apos;obibErrors&apos;)&apos;

	@param {String} errorCode - the key of the associative array
	@param {String} errorMessage - the value of the associative array
*/
function storeOBIBError(errorCode, errorMessage) {
	var obibErrors = channelMap.get(&apos;obibErrors&apos;);
	if (obibErrors == null) {
		obibErrors = new Object();
	}
	obibErrors[errorCode] = errorMessage;
	channelMap.put(&apos;obibErrors&apos;, obibErrors);
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
        </codeTemplateLibraries>
      </exportData>
    </channel>
    <channel version="3.7.1">
      <id>b2f0c503-a881-4126-995e-844c3e7692fd</id>
      <nextMetaDataId>17</nextMetaDataId>
      <name>OBIB Services</name>
      <description>- Receive JSON messages via REST API [&quot;HTTP Listener&quot; source connector]
- Route the messages to the appropriate destination connector according to the REST path [&quot;Destination Set Filter&quot; source transformer]
- Transform the JSON messages to BCCDA documents [&quot;Javascript&quot; destination transformers]
- Send the HL7 messages to CDX WebServices using the CDXConnector Java Library [&quot;Javascript Writer&quot; destination connector]</description>
      <revision>189</revision>
      <sourceConnector version="3.7.1">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.http.HttpReceiverProperties" version="3.7.1">
          <pluginProperties>
            <com.mirth.connect.plugins.httpauth.NoneHttpAuthProperties version="3.7.1">
  <authType>NONE</authType>
            </com.mirth.connect.plugins.httpauth.NoneHttpAuthProperties>
          </pluginProperties>
          <listenerConnectorProperties version="3.7.1">
            <host>0.0.0.0</host>
            <port>8081</port>
          </listenerConnectorProperties>
          <sourceConnectorProperties version="3.7.1">
            <responseVariable>responseMessage</responseVariable>
            <respondAfterProcessing>true</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>1</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
              <entry>
                <string>3ee0c1db-83b0-49f6-9323-8884b5bd43da</string>
                <string>CDA Parser</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
          <xmlBody>false</xmlBody>
          <parseMultipart>true</parseMultipart>
          <includeMetadata>true</includeMetadata>
          <binaryMimeTypes>application/.*(?&lt;!json|xml)$|image/.*|video/.*|audio/.*</binaryMimeTypes>
          <binaryMimeTypesRegex>true</binaryMimeTypesRegex>
          <responseContentType>application/json</responseContentType>
          <responseDataTypeBinary>false</responseDataTypeBinary>
          <responseStatusCode>${responseStatus}</responseStatusCode>
          <responseHeaders class="linked-hash-map"/>
          <charset>UTF-8</charset>
          <contextPath></contextPath>
          <timeout>30000</timeout>
          <staticResources/>
        </properties>
        <transformer version="3.7.1">
          <elements>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.7.1">
              <name>Get Clinic Credentials</name>
              <sequenceNumber>0</sequenceNumber>
              <enabled>true</enabled>
              <script>logger.debug(&quot;Get Clinic Credentials&quot;);

try {
	// Get the Database Connection
	var dbConn = globalChannelMap.get(&apos;dbConnection&apos;);
	if (!dbConn) { // sanity check
		dbConn = getDBConnection();
		globalChannelMap.put(&apos;dbConnection&apos;, dbConn);
	}
	
	// Get the clinic credentials by id
	var locationId = sourceMap.get(&apos;headers&apos;).getHeader(&apos;locationId&apos;);
	
	var result = dbConn.executeCachedQuery(&quot;SELECT * FROM clinic_credential WHERE clinic_id = &apos;&quot; + locationId + &quot;&apos;&quot;);
	while (result &amp;&amp; result.next()) {
		// store the clinic credentials, necessary to call the cdx services
		channelMap.put(&apos;locationId&apos;, result.getString(&apos;clinic_id&apos;));
		channelMap.put(&apos;locationName&apos;, result.getString(&apos;clinic_name&apos;));
		channelMap.put(&apos;username&apos;, result.getString(&apos;clinic_username&apos;));
		channelMap.put(&apos;password&apos;, result.getString(&apos;clinic_password&apos;));
		channelMap.put(&apos;certPath&apos;, $(&apos;obib.certificates.path&apos;) + result.getString(&apos;certificate_file&apos;));
		channelMap.put(&apos;certPass&apos;, result.getString(&apos;certificate_password&apos;));
	}
	result.close()
} catch (e) {
	logger.error(&quot;Error on &apos;Get Clinic Credentials&apos;: &quot; + e);
}

/* Validate the clinic credentials */
var error = &quot;&quot;;

// Is the clinic properly registered?
if (!channelMap.get(&apos;locationId&apos;) || !channelMap.get(&apos;locationName&apos;) 
|| !channelMap.get(&apos;username&apos;) || !channelMap.get(&apos;password&apos;)
|| !channelMap.get(&apos;certPath&apos;) || !channelMap.get(&apos;certPass&apos;)) {
	error += &quot;The clinic is not correctly registered within OBIB. &quot;;
}

// Does the certificate file exist?
if (!new Packages.java.io.File(&quot;&quot; + channelMap.get(&apos;certPath&apos;)).exists()) {
	error += &quot;The clinic certificate cannot be found. &quot;;
}

if (error.length &gt; 0) {
	logger.error(error);  // log the error
	
	responseMap.put(&apos;responseMessage&apos;, createErrorMessage(error)); // create the response
	responseMap.put(&apos;responseStatus&apos;, &apos;500&apos;);

	throw error; // stop the processing
}</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.destinationsetfilter.DestinationSetFilterStep version="3.7.1">
              <name>Filter destination(s) if &quot;sourceMap.get(&apos;contextPath&apos;)&quot; equals &apos;/SubmitCDA&apos;</name>
              <sequenceNumber>1</sequenceNumber>
              <enabled>true</enabled>
              <behavior>REMOVE_ALL_EXCEPT</behavior>
              <metaDataIds>
                <int>1</int>
              </metaDataIds>
              <field>sourceMap.get(&apos;contextPath&apos;)</field>
              <condition>EQUALS</condition>
              <values>
                <string>&apos;/SubmitCDA&apos;</string>
              </values>
            </com.mirth.connect.plugins.destinationsetfilter.DestinationSetFilterStep>
            <com.mirth.connect.plugins.destinationsetfilter.DestinationSetFilterStep version="3.7.1">
              <name>Filter destination(s) if &quot;sourceMap.get(&apos;contextPath&apos;)&quot; equals &apos;/ListDocuments&apos;</name>
              <sequenceNumber>2</sequenceNumber>
              <enabled>true</enabled>
              <behavior>REMOVE_ALL_EXCEPT</behavior>
              <metaDataIds>
                <int>2</int>
              </metaDataIds>
              <field>sourceMap.get(&apos;contextPath&apos;)</field>
              <condition>EQUALS</condition>
              <values>
                <string>&apos;/ListDocuments&apos;</string>
              </values>
            </com.mirth.connect.plugins.destinationsetfilter.DestinationSetFilterStep>
            <com.mirth.connect.plugins.destinationsetfilter.DestinationSetFilterStep version="3.7.1">
              <name>Filter destination(s) if &quot;sourceMap.get(&apos;contextPath&apos;)&quot; equals &apos;/SearchDocuments&apos;</name>
              <sequenceNumber>3</sequenceNumber>
              <enabled>true</enabled>
              <behavior>REMOVE_ALL_EXCEPT</behavior>
              <metaDataIds>
                <int>16</int>
              </metaDataIds>
              <field>sourceMap.get(&apos;contextPath&apos;)</field>
              <condition>EQUALS</condition>
              <values>
                <string>&apos;/SearchDocuments&apos;</string>
              </values>
            </com.mirth.connect.plugins.destinationsetfilter.DestinationSetFilterStep>
            <com.mirth.connect.plugins.destinationsetfilter.DestinationSetFilterStep version="3.7.1">
              <name>Filter destination(s) if &quot;sourceMap.get(&apos;contextPath&apos;)&quot; equals &apos;/GetDocument&apos;</name>
              <sequenceNumber>4</sequenceNumber>
              <enabled>true</enabled>
              <behavior>REMOVE_ALL_EXCEPT</behavior>
              <metaDataIds>
                <int>11</int>
              </metaDataIds>
              <field>sourceMap.get(&apos;contextPath&apos;)</field>
              <condition>EQUALS</condition>
              <values>
                <string>&apos;/GetDocument&apos;</string>
              </values>
            </com.mirth.connect.plugins.destinationsetfilter.DestinationSetFilterStep>
            <com.mirth.connect.plugins.destinationsetfilter.DestinationSetFilterStep version="3.7.1">
              <name>Filter destination(s) if &quot;sourceMap.get(&apos;contextPath&apos;)&quot; equals &apos;/ListClinics&apos;</name>
              <sequenceNumber>5</sequenceNumber>
              <enabled>true</enabled>
              <behavior>REMOVE_ALL_EXCEPT</behavior>
              <metaDataIds>
                <int>14</int>
              </metaDataIds>
              <field>sourceMap.get(&apos;contextPath&apos;)</field>
              <condition>EQUALS</condition>
              <values>
                <string>&apos;/ListClinics&apos;</string>
              </values>
            </com.mirth.connect.plugins.destinationsetfilter.DestinationSetFilterStep>
            <com.mirth.connect.plugins.destinationsetfilter.DestinationSetFilterStep version="3.7.1">
              <name>Filter destination(s) if &quot;sourceMap.get(&apos;contextPath&apos;)&quot; equals &apos;/ListProviders&apos;</name>
              <sequenceNumber>6</sequenceNumber>
              <enabled>true</enabled>
              <behavior>REMOVE_ALL_EXCEPT</behavior>
              <metaDataIds>
                <int>15</int>
              </metaDataIds>
              <field>sourceMap.get(&apos;contextPath&apos;)</field>
              <condition>EQUALS</condition>
              <values>
                <string>&apos;/ListProviders&apos;</string>
              </values>
            </com.mirth.connect.plugins.destinationsetfilter.DestinationSetFilterStep>
          </elements>
          <inboundTemplate encoding="base64"></inboundTemplate>
          <outboundTemplate encoding="base64"></outboundTemplate>
          <inboundDataType>JSON</inboundDataType>
          <outboundDataType>JSON</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.7.1">
            <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.7.1">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </inboundProperties>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.7.1">
            <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.7.1">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="3.7.1">
          <elements/>
        </filter>
        <transportName>HTTP Listener</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="3.7.1">
          <metaDataId>1</metaDataId>
          <name>Service Submit Document</name>
          <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.7.1">
            <pluginProperties/>
            <destinationConnectorProperties version="3.7.1">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>true</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
                <entry>
                  <string>3ee0c1db-83b0-49f6-9323-8884b5bd43da</string>
                  <string>CDA Parser</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <script>logger.debug(&apos;Service Submit Document&apos;);

importPackage(Packages.ca.uvic.leadlab.cdxconnector);

try {		
	var client = new WSClientDocument($(&apos;cdx.base.url&apos;), $(&apos;username&apos;), $(&apos;password&apos;), $(&apos;certPath&apos;), $(&apos;certPass&apos;));

	// Get the message with the default namespace
	default xml namespace = &quot;urn:hl7-org:v3&quot;;
	var document = new XML(connectorMessage.getEncodedData());
	//logger.debug(&quot;DOCUMENT:\n&quot; + XmlUtil.prettyPrint(document));

	// Store the document, necessary in the response
	channelMap.put(&apos;document&apos;, document.toString());

	/* TODO Send the document to &quot;Document Storage&quot; channel
	var storeDoc = buildDocumentStorageMessage($(&apos;locationId&apos;), $(&apos;receivers&apos;)[0], $(&apos;documentId&apos;), &apos;DOCUMENT&apos;, document.toString());
	router.routeMessage(&quot;Document Storage&quot;, JSON.stringify(storeDoc));
	*/

	// Get the attachments, if exist any
	var attachments = channelMap.get(&apos;attachments&apos;);
	/*if (attachments !== null &amp;&amp; attachments.length &gt; 0) {
		logger.debug(&apos;Service Submit Document - Handling Attachments&apos;);
		// TODO Save attachment - Transformer error ERROR MESSAGE: Error evaluating transformer
		for (var i = 0; i &lt; attachments.length; i++) {
			var storeAttach = buildDocumentStorageMessage($(&apos;locationId&apos;), $(&apos;receivers&apos;)[0], $(&apos;documentId&apos;), &apos;ATTACHMENT&apos;, attachments[i]);
			router.routeMessage(&quot;Document Storage&quot;, storeAttach);
		}
	}*/

	// Call the WS method
	var cdxResponse = client.submitDocument($(&apos;locationId&apos;), document, createDocumentAttachmentArray(attachments), $(&apos;receivers&apos;));

	/* TODO Send the response to &quot;Document Storage&quot; channel
	var storeResp = buildDocumentStorageMessage($(&apos;locationId&apos;), $(&apos;receivers&apos;)[0], $(&apos;documentId&apos;), &apos;RESPONSE&apos;, cdxResponse.toString());
	router.routeMessage(&quot;Document Storage&quot;, JSON.stringify(storeResp));
	*/

	// return the raw response to be processed by the &apos;response transformers&apos;
	return ResponseFactory.getSentResponse(cdxResponse); 
} catch (e) {
	logger.error(&quot;Error on &apos;Service Submit Document&apos;: &quot; + e);
	return ResponseFactory.getErrorResponse(&quot;Error on &apos;Service Submit Document&apos;: &quot; + e)
}</script>
          </properties>
          <transformer version="3.7.1">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.7.1">
                <name>Get Receivers</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>logger.debug(&apos;Get Receivers&apos;);

try {
	// CONF-CDXOD023: RCMR_IN000002UV01 SHALL have one or more [1..*] receiver
	var receivers = [];
	for (var i = 0; i &lt; getArrayOrXmlLength(msg[&apos;receivers&apos;]); i++) {
    		receivers[i] = msg[&apos;receivers&apos;][i];
	}
	
	// store the receivers, necessary to call &apos;send document service&apos;
	channelMap.put(&apos;receivers&apos;, receivers);
} catch (e) {
    	var error = &apos;Error on &quot;Get Receivers&quot;: &apos; + e;
	logger.error(error); // log the error
    	storeOBIBError(&apos;obib.cda.build.error&apos;, error);
}

/* Validate the receivers */
var receivers = channelMap.get(&apos;receivers&apos;);
if (!receivers || receivers.length == 0) {
	storeOBIBError(&apos;obib.receiver.error&apos;, &apos;At least one receiver is required to submit document&apos;);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.7.1">
                <name>Header Attributes</name>
                <sequenceNumber>1</sequenceNumber>
                <enabled>true</enabled>
                <script>try {
	// 4.1. Header Attributes
	
	// CONF-BC0001, CONF-BC0502, CONF-BC0002, CONF-BC0003, CONF-BC0004, CONF-BC0005 (fixed in the message template)
	//default xml namespace = &quot;urn:hl7-org:v3&quot;;

	// Check if the loinc is present
	if (!msg[&apos;loinc&apos;] || !msg[&apos;loinc&apos;][&apos;loincCode&apos;] || !msg[&apos;loinc&apos;][&apos;displayName&apos;]) {
		storeOBIBError(&apos;obib.loinc.error&apos;, &apos;LOINC is required&apos;);
	}

	// ClinicalDocument/templateId
	tmp[&apos;templateId&apos;] = buildCDATemplateId(msg[&apos;loinc&apos;][&apos;loincCode&apos;]);
	
	// CONF-BC0014, CONF-BC0015
	var documentId = UUIDGenerator.getUUID();
	tmp[&apos;id&apos;] = buildCDAId(&quot;2.16.840.1.113883.3.277.100.3&quot;, documentId);
	channelMap.put(&apos;documentId&apos;, documentId); // store the documentId, necessary in the response
	
	// CONF-BC0016, CONF-BC0552, CONF-BC0553, CONF-BC0017, CONF-BC0018, CONF-BC0019, CONF-BC0020, CONF-BC0554, CONF-BC0555
	// TODO &apos;setId&apos; and &apos;versionNumber&apos; are not implemented
	
	// ClinicalDocument/code CONF-BC0021, CONF-BC0022
	tmp[&apos;code&apos;][&apos;@code&apos;] = msg[&apos;loinc&apos;][&apos;loincCode&apos;];
	tmp[&apos;code&apos;][&apos;@displayName&apos;] = msg[&apos;loinc&apos;][&apos;displayName&apos;];
	
	// ClinicalDocument/title CONF-BC0023, CONF-BC0024
	tmp[&apos;title&apos;] = msg[&apos;loinc&apos;][&apos;displayName&apos;];
	
	// ClinicalDocument/effectiveTime CONF-BC0025, CONF-BC0026 
	tmp[&apos;effectiveTime&apos;][&apos;@value&apos;] = formatCDADateTime(new Date());
	
	// ClinicalDocument/confidentialityCode CONF-BC0027, CONF-BC0028, CONF-BC0503 (fixed in the message template)
	
	// ClinicalDocument/languageCode CONF-BC0029, CONF-BC0030 (fixed in the message template)
} catch (e) {
	var error = &apos;Error on &quot;Header Attributes&quot;: &apos; + e;
    	logger.error(error); // log the error
    	storeOBIBError(&apos;obib.cda.build.error&apos;, error);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.7.1">
                <name>Record Target (Patient Identifiers)</name>
                <sequenceNumber>2</sequenceNumber>
                <enabled>true</enabled>
                <script>try {
	// 4.2.2. Record Target (Patient Identifiers) - Mandatory - 1..1

	var msgPatient = msg[&apos;patient&apos;]; // inbound object
	
	// CONF-BC0047, CONF-BC0507, CONF-BC0508 (fixed in the message template)

	var patientRole = tmp[&apos;recordTarget&apos;][&apos;patientRole&apos;];

	// CONF-BC0048: patientRole SHALL contain at least one or more [1..*] id
	if (getArrayOrXmlLength(msgPatient[&apos;ids&apos;]) == 0) {
		storeOBIBError(&apos;obib.patient.id.error&apos;, &apos;Patient shall contain at least one id&apos;);
	}
	// CONF-BC0049, CONF-BC0050
	for (var i = 0; i &lt; getArrayOrXmlLength(msgPatient[&apos;ids&apos;]); i++) {
		// Insert IDs as first children of &apos;patientRole&apos;
		patientRole.prependChild(buildCDAId(msgPatient[&apos;ids&apos;][i][&apos;type&apos;], 
								      msgPatient[&apos;ids&apos;][i][&apos;code&apos;]));
	}
	
	// CONF-BC0051: patientRole MAY contain zero or more [0..*] addr (address)
	for (var i = 0; i &lt; getArrayOrXmlLength(msgPatient[&apos;addresses&apos;]); i++) {
		patientRole[&apos;addr&apos;][i] = buildCDAAddress(msgPatient[&apos;addresses&apos;][i][&apos;use&apos;], 
										 msgPatient[&apos;addresses&apos;][i][&apos;streetAddress&apos;], 
										 msgPatient[&apos;addresses&apos;][i][&apos;city&apos;], 
										 msgPatient[&apos;addresses&apos;][i][&apos;province&apos;], 
										 msgPatient[&apos;addresses&apos;][i][&apos;postalCode&apos;], 
										 msgPatient[&apos;addresses&apos;][i][&apos;contry&apos;]);
	}
	
	// CONF-BC0052: patientRole MAY contain zero or more [0..*] telecom (address)
	for (var i = 0; i &lt; getArrayOrXmlLength(msgPatient[&apos;telecoms&apos;]); i++) {
		patientRole[&apos;telecom&apos;][i] = buildCDATelecom(msgPatient[&apos;telecoms&apos;][i][&apos;use&apos;], 
										    msgPatient[&apos;telecoms&apos;][i][&apos;type&apos;], 
										    msgPatient[&apos;telecoms&apos;][i][&apos;value&apos;]);
	}
	
	// CONF-BC0053, CONF-BC0509
	patientRole[&apos;patient&apos;] = new XML(&apos;&lt;patient classCode=&quot;PSN&quot;/&gt;&apos;);
	
	// CONF-BC0054: patient SHALL contain at least 1 [1..*] name
	if (getArrayOrXmlLength(msgPatient[&apos;names&apos;]) == 0) {
		storeOBIBError(&apos;obib.patient.name.error&apos;, &apos;Patient shall contain at least one name&apos;);
	}
	for (var i = 0; i &lt; getArrayOrXmlLength(msgPatient[&apos;names&apos;]); i++) {  
		patientRole[&apos;patient&apos;][&apos;name&apos;][i] = buildCDAName(msgPatient[&apos;names&apos;][i][&apos;use&apos;], 
											    msgPatient[&apos;names&apos;][i][&apos;family&apos;], 
											    msgPatient[&apos;names&apos;][i][&apos;given&apos;], 
											    msgPatient[&apos;names&apos;][i][&apos;prefix&apos;], 
											    msgPatient[&apos;names&apos;][i][&apos;suffix&apos;]);
	}
	
	// CONF-BC0055
	patientRole[&apos;patient&apos;][&apos;administrativeGenderCode&apos;][&apos;@code&apos;] = msgPatient[&apos;genderCode&apos;];
	
	// CONF-BC0056
	patientRole[&apos;patient&apos;][&apos;birthTime&apos;][&apos;@value&apos;] = formatCDADate(msgPatient[&apos;birthday&apos;]);
	
	// CONF-BC0057 TODO languageCommunication?
} catch (e) {
	var error = &apos;Error on &quot;Record Target&quot;: &apos; + e;
    	logger.error(error); // log the error
    	storeOBIBError(&apos;obib.cda.build.error&apos;, error);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.7.1">
                <name>Author</name>
                <sequenceNumber>3</sequenceNumber>
                <enabled>true</enabled>
                <script>try {
	// 4.2.3. Author - Mandatory - 1..*

	// Update the time for the first author, who is the system author, fixed in the message template
	tmp[&apos;author&apos;][0][&apos;time&apos;][&apos;@value&apos;] = formatCDADateTime(new Date());
	
	for (var i = 0; i &lt; getArrayOrXmlLength(msg[&apos;authors&apos;]); i++) {

		var msgAuthor = msg[&apos;authors&apos;][i]; // inbound object
		
		// CONF-BC0058, CONF-BC0510
	  	var author = new XML(&apos;&lt;author typeCode=&quot;AUT&quot; contextControlCode=&quot;OP&quot; /&gt;&apos;);

		// CONF-BC0059: author SHALL contain exactly one [1..1] time
	  	if (!msgAuthor[&apos;time&apos;]) {
			storeOBIBError(&apos;obib.author.time.error&apos;, &apos;Author shall contain one time&apos;);
		}
		// CONF-BC0060
	  	author[&apos;time&apos;][&apos;@value&apos;] = formatCDADateTime(msgAuthor[&apos;time&apos;]);
	
	  	// CONF-BC0061, CONF-BC0511
	  	author[&apos;assignedAuthor&apos;][&apos;@classCode&apos;] = &apos;ASSIGNED&apos;;
	  	
	  	// CONF-BC0062: assignedAuthor SHALL contain one or more [1..*] id
	  	if (getArrayOrXmlLength(msgAuthor[&apos;ids&apos;]) == 0) {
			storeOBIBError(&apos;obib.author.id.error&apos;, &apos;Author shall contain at least one id&apos;);
		}
	  	for (var j = 0; j &lt; getArrayOrXmlLength(msgAuthor[&apos;ids&apos;]); j++) {
			author[&apos;assignedAuthor&apos;][&apos;id&apos;][j] = buildCDAId(msgAuthor[&apos;ids&apos;][j][&apos;type&apos;], 
										  		  msgAuthor[&apos;ids&apos;][j][&apos;code&apos;]);
	  	}
	  	
	  	// CONF-BC0066: assignedAuthor MAY contain zero or more [0..*] addr (address)
		for (var j = 0; j &lt; getArrayOrXmlLength(msgAuthor[&apos;addresses&apos;]); j++) {
			author[&apos;assignedAuthor&apos;][&apos;addr&apos;][i] = buildCDAAddress(msgAuthor[&apos;addresses&apos;][j][&apos;use&apos;], 
													    msgAuthor[&apos;addresses&apos;][j][&apos;streetAddress&apos;], 
													    msgAuthor[&apos;addresses&apos;][j][&apos;city&apos;], 
													    msgAuthor[&apos;addresses&apos;][j][&apos;province&apos;], 
													    msgAuthor[&apos;addresses&apos;][j][&apos;postalCode&apos;], 
													    msgAuthor[&apos;addresses&apos;][j][&apos;contry&apos;]);
		}
		
		// CONF-BC0067: assignedAuthor MAY contain zero or more [0..*] telecom
		for (var j = 0; j &lt; getArrayOrXmlLength(msgAuthor[&apos;telecoms&apos;]); j++) {
			author[&apos;assignedAuthor&apos;][&apos;telecom&apos;][i] = buildCDATelecom(msgAuthor[&apos;telecoms&apos;][j][&apos;use&apos;], 
														  msgAuthor[&apos;telecoms&apos;][j][&apos;type&apos;], 
														  msgAuthor[&apos;telecoms&apos;][j][&apos;value&apos;]);
		}
		
		// CONF-BC0512
		var assignedPerson = new XML(&apos;&lt;assignedPerson classCode=&quot;PSN&quot; determinerCode=&quot;INSTANCE&quot;/&gt;&apos;);
	
	  	// CONF-BC0068: assignedPerson SHALL contain exactly one [1..1] name
	  	if (!msgAuthor[&apos;name&apos;]) {
			storeOBIBError(&apos;obib.author.name.error&apos;, &apos;Author shall contain one name&apos;);
		}
	  	assignedPerson[&apos;name&apos;] = buildCDAName(msgAuthor[&apos;name&apos;][&apos;use&apos;], 
	  								   msgAuthor[&apos;name&apos;][&apos;family&apos;], 
	  								   msgAuthor[&apos;name&apos;][&apos;given&apos;], 
	  								   msgAuthor[&apos;name&apos;][&apos;prefix&apos;], 
	  								   msgAuthor[&apos;name&apos;][&apos;suffix&apos;]);
		
		// CONF-BC0065
		author[&apos;assignedAuthor&apos;][&apos;assignedPerson&apos;] = assignedPerson;
		
		// Insert authors after the first &apos;author&apos;
		tmp.insertChildAfter(tmp[&apos;author&apos;][0], author);
		
		// CONF-BC0513, CONF-BC0069 (fixed in the template)
	}
} catch (e) {
	var error = &apos;Error on &quot;Author&quot;: &apos; + e;
    	logger.error(error); // log the error
    	storeOBIBError(&apos;obib.cda.build.error&apos;, error);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.7.1">
                <name>Custodian</name>
                <sequenceNumber>4</sequenceNumber>
                <enabled>true</enabled>
                <script>try {
	// 4.2.6. Custodian - Mandatory - 1..1
	
	// CONF-BC0082, CONF-BC0083, CONF-BC0084, CONF-BC0514, CONF-BC0515 implemented by the message template
	
	// CONF-BC0086 If the clinical document is generated from an EMR, this id SHALL NOT contain the root OID of a Health Authority or of the BC Ministry of Health.
	tmp[&apos;custodian&apos;][&apos;assignedCustodian&apos;][&apos;representedCustodianOrganization&apos;][&apos;id&apos;] = buildCDAId(&quot;2.16.840.1.113883.3.277.100.2&quot;, $(&apos;locationId&apos;));
	
	// CONF-BC0087 contain zero or one [0..1] name
	tmp[&apos;custodian&apos;][&apos;assignedCustodian&apos;][&apos;representedCustodianOrganization&apos;][&apos;name&apos;] = $(&apos;locationName&apos;);
} catch (e) {
    	var error = &apos;Error on &quot;Custodian&quot;: &apos; + e;
    	logger.error(error); // log the error
    	storeOBIBError(&apos;obib.cda.build.error&apos;, error);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.7.1">
                <name>Information Recipient</name>
                <sequenceNumber>5</sequenceNumber>
                <enabled>true</enabled>
                <script>try {
	// 4.2.4. Information Recipient - Optional - 0..*
	for (var i = 0; i &lt; getArrayOrXmlLength(msg[&apos;recipients&apos;]); i++) {

		var msgRecipient = msg[&apos;recipients&apos;][i]; // inbound object
		
		// CONF-BC0070 (Insert &apos;informationRecipients&apos; after &apos;custodian&apos;)
		var recipient = createSegmentAfter(&apos;informationRecipient&apos;, tmp[&apos;custodian&apos;]);
	
	  	// CONF-BC0071
	  	// TODO Validate? There SHALL be at least one [1..*] primary recipient (“PRCP”).
	  	recipient[&apos;@typeCode&apos;] = msgRecipient[&apos;typeCode&apos;];
	
	  	// CONF-BC0072, CONF-BC0074
	  	recipient[&apos;intendedRecipient&apos;] = new XML(&apos;&lt;intendedRecipient classCode=&quot;ASSIGNED&quot;/&gt;&apos;);

		// CONF-BC0073: intendedRecipient SHOULD contain one to two [1..2] id
		if (getArrayOrXmlLength(msgRecipient[&apos;ids&apos;]) == 0) {
			storeOBIBError(&apos;obib.recipient.id.error&apos;, &apos;Recipient should contain one or two id&apos;);
		}
		// CONF-BC0075, CONF-BC0076
		for (var j = 0; j &lt; getArrayOrXmlLength(msgRecipient[&apos;ids&apos;]); j++) {
			recipient[&apos;intendedRecipient&apos;][&apos;id&apos;][j] = buildCDAId(msgRecipient[&apos;ids&apos;][j][&apos;type&apos;], 
										  		        msgRecipient[&apos;ids&apos;][j][&apos;code&apos;]);
	  	}
	  	
	  	// CONF-BC0077: intendedRecipient MAY contain zero or more [0..*] addr
		for (var j = 0; j &lt; getArrayOrXmlLength(msgRecipient[&apos;addresses&apos;]); j++) {
			recipient[&apos;intendedRecipient&apos;][&apos;addr&apos;][i] = buildCDAAddress(msgRecipient[&apos;addresses&apos;][j][&apos;use&apos;], 
												       		msgRecipient[&apos;addresses&apos;][j][&apos;streetAddress&apos;], 
													       	msgRecipient[&apos;addresses&apos;][j][&apos;city&apos;], 
													       	msgRecipient[&apos;addresses&apos;][j][&apos;province&apos;], 
													       	msgRecipient[&apos;addresses&apos;][j][&apos;postalCode&apos;], 
													       	msgRecipient[&apos;addresses&apos;][j][&apos;contry&apos;]);
		}
		
		// CONF-BC0078: intendedRecipient MAY contain zero or more [0..*] telecom
		for (var j = 0; j &lt; getArrayOrXmlLength(msgRecipient[&apos;telecoms&apos;]); j++) {
			recipient[&apos;intendedRecipient&apos;][&apos;telecom&apos;][i] = buildCDATelecom(msgRecipient[&apos;telecoms&apos;][j][&apos;use&apos;], 
															   msgRecipient[&apos;telecoms&apos;][j][&apos;type&apos;], 
															   msgRecipient[&apos;telecoms&apos;][j][&apos;value&apos;]);
		}
	
		// CONF-BC0079: intendedRecipient SHALL contain exactly one [1..1] name
		if (!msgRecipient[&apos;name&apos;]) {
			storeOBIBError(&apos;obib.recipient.name.error&apos;, &apos;Recipient shall contain one name&apos;);
		}
		var recipientName = new XML(&apos;&lt;informationRecipient classCode=&quot;PSN&quot; determinerCode=&quot;INSTANCE&quot; /&gt;&apos;);
	  	recipientName[&apos;name&apos;] = buildCDAName(msgRecipient[&apos;name&apos;][&apos;use&apos;], 
	  								  msgRecipient[&apos;name&apos;][&apos;family&apos;], 
	  								  msgRecipient[&apos;name&apos;][&apos;given&apos;], 
									  msgRecipient[&apos;name&apos;][&apos;prefix&apos;], 
	  								  msgRecipient[&apos;name&apos;][&apos;suffix&apos;]);
		recipient[&apos;intendedRecipient&apos;][&apos;informationRecipient&apos;] = recipientName;
	
		// CONF-BC0080: intendedRecipient MAY contain zero or one [0..1] receivedOrganization
		if (msgRecipient[&apos;receivedOrganization&apos;]) {
			var receivedOrganization = new XML(&apos;&lt;receivedOrganization /&gt;&apos;);

			var orgazination = msgRecipient[&apos;receivedOrganization&apos;];

			// CONF-BC0545: receivedOrganization SHALL contain at least one [1..*] id
			if (getArrayOrXmlLength(orgazination[&apos;ids&apos;]) == 0) {
				storeOBIBError(&apos;obib.receivedorgazination.id.error&apos;, &apos;Received Organization shall contain at least one id&apos;);
			}
			for (var j = 0; j &lt; getArrayOrXmlLength(orgazination[&apos;ids&apos;]); j++) {
				receivedOrganization[&apos;id&apos;][j] = buildCDAId(orgazination[&apos;ids&apos;][j][&apos;type&apos;], 
							  		                  orgazination[&apos;ids&apos;][j][&apos;code&apos;]);
		  	}
		  	// CONF-BC0081: receivedOrganization, SHALL contain exactly one [1..1] name
		  	if (!orgazination[&apos;name&apos;]) {
				storeOBIBError(&apos;obib.receivedorgazination.name.error&apos;, &apos;Received Organization shall contain one name&apos;);
			}
			receivedOrganization[&apos;name&apos;] = orgazination[&apos;name&apos;]; // CONF-BC0081
			recipient[&apos;intendedRecipient&apos;][&apos;receivedOrganization&apos;] = receivedOrganization;
		}
	}
} catch (e) {
	var error = &apos;Error on &quot;Information Recipient&quot;: &apos; + e;
    	logger.error(error); // log the error
    	storeOBIBError(&apos;obib.cda.build.error&apos;, error);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.7.1">
                <name>Data Enterer</name>
                <sequenceNumber>6</sequenceNumber>
                <enabled>true</enabled>
                <script>try {
	// 4.2.7. Data Enterer - Optional - 0..1	
	// CONF-BC0088: MAY contain zero or one [0..1] dataEnterer
	if (msg[&apos;dataEnterer&apos;]) {

		var msgDataEnterer = msg[&apos;dataEnterer&apos;]; // inbound object
		
		// CONF-BC0516 (Insert &apos;dataEnterer&apos; before &apos;component&apos;) 
		var dataEnterer = createSegmentBefore(&apos;dataEnterer&apos;, tmp[&apos;component&apos;]);
		dataEnterer[&apos;@typeCode&apos;] = &apos;ENT&apos;;
		dataEnterer[&apos;@contextControlCode&apos;] = &apos;OP&apos;;
	
		// CONF-BC0090, CONF-BC0517
		dataEnterer[&apos;assignedEntity&apos;][&apos;@classCode&apos;] = &quot;ASSIGNED&quot;;
	
		// CONF-BC0550: dataEnterer SHALL contain exactly one [1..1] time
		if (!msgDataEnterer[&apos;time&apos;]) {
			storeOBIBError(&apos;obib.dataenterer.time.error&apos;, &apos;Data Enterer shall contain one time&apos;);
		}
		dataEnterer[&apos;time&apos;][&apos;@value&apos;] = formatCDADateTime(msgDataEnterer[&apos;time&apos;]);
	
		// CONF-BC0091: assignedEntity SHOULD contain zero or one [0..1] id, which MAY be a local identifier
		if (msgDataEnterer[&apos;id&apos;]) {
			dataEnterer[&apos;assignedEntity&apos;][&apos;id&apos;] = buildCDAId(msgDataEnterer[&apos;ids&apos;][j][&apos;type&apos;], 
										  		    msgDataEnterer[&apos;ids&apos;][j][&apos;code&apos;]);
		}
	  
	  	// CONF-BC0092: assignedEntity MAY contain zero or more [0..*] addr elements
		for (var j = 0; j &lt; getArrayOrXmlLength(msgDataEnterer[&apos;addresses&apos;]); j++) {
			dataEnterer[&apos;assignedEntity&apos;][&apos;addr&apos;][i] = buildCDAAddress(msgDataEnterer[&apos;addresses&apos;][j][&apos;use&apos;], 
													    	    msgDataEnterer[&apos;addresses&apos;][j][&apos;streetAddress&apos;], 
													    	    msgDataEnterer[&apos;addresses&apos;][j][&apos;city&apos;], 
													    	    msgDataEnterer[&apos;addresses&apos;][j][&apos;province&apos;], 
													    	    msgDataEnterer[&apos;addresses&apos;][j][&apos;postalCode&apos;], 
													    	    msgDataEnterer[&apos;addresses&apos;][j][&apos;contry&apos;]);
		}
		
		// CONF-BC0093: assignedEntity MAY contain zero or more [0..*] telecom elements
		for (var j = 0; j &lt; getArrayOrXmlLength(msgDataEnterer[&apos;telecoms&apos;]); j++) {
			dataEnterer[&apos;assignedEntity&apos;][&apos;telecom&apos;][i] = buildCDATelecom(msgDataEnterer[&apos;telecoms&apos;][j][&apos;use&apos;], 
														       msgDataEnterer[&apos;telecoms&apos;][j][&apos;type&apos;], 
														       msgDataEnterer[&apos;telecoms&apos;][j][&apos;value&apos;]);
		}
	
		// CONF-BC0094: assignedEntity SHOULD contain zero or one [0..1]
		if (msgDataEnterer[&apos;name&apos;]) {
			// CONF-BC0518
			var assignedPerson = new XML(&apos;&lt;assignedPerson classCode=&quot;PSN&quot; determinerCode=&quot;INSTANCE&quot;/&gt;&apos;);
	
	  		// CONF-BC0095
	  		assignedPerson[&apos;name&apos;] = buildCDAName(msgDataEnterer[&apos;name&apos;][&apos;use&apos;], 
	  									   msgDataEnterer[&apos;name&apos;][&apos;family&apos;], 
	  									   msgDataEnterer[&apos;name&apos;][&apos;given&apos;], 
	  									   msgDataEnterer[&apos;name&apos;][&apos;prefix&apos;], 
	  									   msgDataEnterer[&apos;name&apos;][&apos;suffix&apos;]);
		
			dataEnterer[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;] = assignedPerson;
		}
	}
} catch (e) {
    	var error = &apos;Error on &quot;Data Enterer&quot;: &apos; + e;
    	logger.error(error); // log the error
    	storeOBIBError(&apos;obib.cda.build.error&apos;, error);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.7.1">
                <name>Authenticator</name>
                <sequenceNumber>7</sequenceNumber>
                <enabled>true</enabled>
                <script>// 4.2.8. Authenticator and Legal Authenticator - Optional - 0..*
	
// CONF-BC0096 TODO ? Authenticator is the person or persons who attest to the content of the document.</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.7.1">
                <name>Generic Participant</name>
                <sequenceNumber>8</sequenceNumber>
                <enabled>true</enabled>
                <script>try { 
	// 4.2.9. Generic Participant - Optional - 0..*
	for (var i = 0; i &lt; getArrayOrXmlLength(msg[&apos;participants&apos;]); i++) {

		var msgParticipant = msg[&apos;participants&apos;][i]; // inbound object
		
		// CONF-8504 (Insert &apos;participant&apos; before &apos;component&apos;) 
		var participant = createSegmentBefore(&apos;participant&apos;, tmp[&apos;component&apos;]);
		
		// CONF-8505
		if (msgParticipant[&apos;typeCode&apos;]) {
			participant[&apos;@typeCode&apos;] = msgParticipant[&apos;typeCode&apos;];
		} else {
			participant[&apos;@typeCode&apos;] = &apos;IND&apos;;
		}
		participant[&apos;@contextControlCode&apos;] = &apos;OP&apos;;
	
		// CONF-8506
		participant[&apos;functionCode&apos;] = new XML(&apos;&lt;functionCode code=&quot;&apos; + msgParticipant[&apos;functionCode&apos;] + &apos;&quot; \
										codeSystem=&quot;2.16.840.1.113883.2.20.3.88&quot; \
									     codeSystemName=&quot;HL7ParticipationFunction&quot; displayName=&quot;Primary Care Physician&quot; /&gt;&apos;);
	
		// CONF-8507
		participant[&apos;associatedEntity&apos;][&apos;@classCode&apos;] = &quot;PROV&quot;;

		// CONF-BC0097: associatedEntity SHOULD contain exactly one to two [1..2] id
		if (getArrayOrXmlLength(msgParticipant[&apos;ids&apos;]) == 0) {
			storeOBIBError(&apos;obib.participant.id.error&apos;, &apos;Participant should contain one or two id&apos;);
		}
		// CONF-BC0098, CONF-BC0099
		for (var j = 0; j &lt; getArrayOrXmlLength(msgParticipant[&apos;ids&apos;]); j++) {
			participant[&apos;associatedEntity&apos;][&apos;id&apos;][j] = buildCDAId(msgParticipant[&apos;ids&apos;][j][&apos;type&apos;], 
										  		         msgParticipant[&apos;ids&apos;][j][&apos;code&apos;]);
	  	}
	
		// CONF-BC0101: associatedEntity MAY contain zero or more [0..*] addr
		for (var j = 0; j &lt; getArrayOrXmlLength(msgParticipant[&apos;addresses&apos;]); j++) {
			participant[&apos;associatedEntity&apos;][&apos;addr&apos;][i] = buildCDAAddress(msgParticipant[&apos;addresses&apos;][j][&apos;use&apos;], 
															 msgParticipant[&apos;addresses&apos;][j][&apos;streetAddress&apos;], 
															 msgParticipant[&apos;addresses&apos;][j][&apos;city&apos;], 
															 msgParticipant[&apos;addresses&apos;][j][&apos;province&apos;], 
															 msgParticipant[&apos;addresses&apos;][j][&apos;postalCode&apos;], 
															 msgParticipant[&apos;addresses&apos;][j][&apos;contry&apos;]);
		}
		
		// CONF-BC0102: associatedEntity MAY contain zero or more [0..*] telecom
		for (var j = 0; j &lt; getArrayOrXmlLength(msgParticipant[&apos;telecoms&apos;]); j++) {
			participant[&apos;associatedEntity&apos;][&apos;telecom&apos;][i] = buildCDATelecom(msgParticipant[&apos;telecoms&apos;][j][&apos;use&apos;], 
															    msgParticipant[&apos;telecoms&apos;][j][&apos;type&apos;], 
															    msgParticipant[&apos;telecoms&apos;][j][&apos;value&apos;]);
		}

		// CONF-8508, CONF-BC0519
		participant[&apos;associatedEntity&apos;][&apos;associatedPerson&apos;] = new XML(&apos;&lt;associatedPerson classCode=&quot;PSN&quot; determinerCode=&quot;INSTANCE&quot; /&gt;&apos;);
	
		// CONF-BC0100: associatedEntity/associatedPerson SHALL contain exactly one [1..1] name
		if (!msgParticipant[&apos;name&apos;]) {
			storeOBIBError(&apos;obib.participant.name.error&apos;, &apos;Participant shall contain one name&apos;);
		}
		participant[&apos;associatedEntity&apos;][&apos;associatedPerson&apos;][&apos;name&apos;] = buildCDAName(msgParticipant[&apos;name&apos;][&apos;use&apos;], 
																     msgParticipant[&apos;name&apos;][&apos;family&apos;], 
																     msgParticipant[&apos;name&apos;][&apos;given&apos;], 
																     msgParticipant[&apos;name&apos;][&apos;prefix&apos;], 
																     msgParticipant[&apos;name&apos;][&apos;suffix&apos;]);
	}
} catch (e) {
    	var error = &apos;Error on &quot;Generic Participant&quot;: &apos; + e;
    	logger.error(error); // log the error
    	storeOBIBError(&apos;obib.cda.build.error&apos;, error);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.7.1">
                <name>Order (InFulfillmentOf)</name>
                <sequenceNumber>9</sequenceNumber>
                <enabled>true</enabled>
                <script>try { 
	// 4.3.2. Order - Optional - 0..* (zero or more)
	for (var i = 0; i &lt; getArrayOrXmlLength(msg[&apos;orders&apos;]); i++) {
		
		var msgOrder = msg[&apos;orders&apos;][i];  // inbound object
		
		// CONF-BC0524 (Insert &apos;inFulfillmentOf&apos; before &apos;component&apos;) 
		var inFulfillmentOf = createSegmentBefore(&apos;inFulfillmentOf&apos;, tmp[&apos;component&apos;]);
		
		// CONF-BC0524
		inFulfillmentOf[&apos;@typeCode&apos;] = &apos;FLFS&apos;; 
		
		// CONF-BC0123, CONF-BC0525
		inFulfillmentOf[&apos;order&apos;] = new XML(&apos;&lt;order classCode=&quot;ENC&quot; moodCode=&quot;RQO&quot;/&gt;&apos;); 
		
		// CONF-BC0124: inFulfillmentOf/order SHALL contain at least one [1..*] id
		if (getArrayOrXmlLength(msgOrder[&apos;ids&apos;]) == 0) {
			storeOBIBError(&apos;obib.infulfillmentof.id.error&apos;, &apos;InFulfillmentOf shall contain at least one id&apos;);
		}
		for (var j = 0; j &lt; getArrayOrXmlLength(msgOrder[&apos;ids&apos;]); j++) {
			inFulfillmentOf[&apos;order&apos;][&apos;id&apos;][j] = buildCDAId(msgOrder[&apos;ids&apos;][j][&apos;type&apos;], 
										  		  msgOrder[&apos;ids&apos;][j][&apos;code&apos;]);
	  	}
		inFulfillmentOf[&apos;order&apos;][&apos;id&apos;] = buildCDAId(null, msgOrder[&apos;id&apos;]);
		
		// CONF-BC0526 TODO ? xpath is quite different from xml
		//if (msgOrder[&apos;statusCode&apos;]) {&#xd;
			// XPath: /ClinicalDocument/inFulfillmentOf/order/statusCode/@code
			// XML: &lt;code code=&quot;NW&quot; codeSystemName=&quot;Order Status (Order Control[:Order Status][:Response Flag])&quot; /&gt;
		//}
	}
} catch (e) {
    	var error = &apos;Error on &quot;Order (InFulfillmentOf)&quot;: &apos; + e;
    	logger.error(error); // log the error
    	storeOBIBError(&apos;obib.cda.build.error&apos;, error);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.7.1">
                <name>ServiceEvent (documentationOf)</name>
                <sequenceNumber>10</sequenceNumber>
                <enabled>true</enabled>
                <script>// 4.3.1. Service Event - Optional - 0..* (zero or more)

// TODO CONF-BC0520, CONF-BC0103, ...</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.7.1">
                <name>Document Body</name>
                <sequenceNumber>11</sequenceNumber>
                <enabled>true</enabled>
                <script>try { 
	// 2.3. CDA LEVEL 1 NARRATIVE TEXT AND ATTACHMENTS

	var msgNonXMLBody = msg[&apos;nonXMLBody&apos;]; // inbound object
	
	// CONF-BC0009, CONF-BC0010
	if (msg[&apos;nonXMLBody&apos;][&apos;mediaType&apos;] === &quot;text/plain&quot;) {
		// CONF-BC0011: text.mediaType=”text/plain”
		tmp[&apos;component&apos;][&apos;nonXMLBody&apos;][&apos;text&apos;] = new XML(&apos;&lt;text mediaType=&quot;&apos; + msgNonXMLBody[&apos;mediaType&apos;] + &apos;&quot; \
			representation=&quot;TXT&quot;&gt;&apos; + msgNonXMLBody[&apos;content&apos;] + &apos;&lt;/text&gt;&apos;);
	} else { 
		// CONF-BC0012: text.mediaType=”text/rtf”, or “application/pdf”
		tmp[&apos;component&apos;][&apos;nonXMLBody&apos;][&apos;text&apos;] = new XML(&apos;&lt;text mediaType=&quot;&apos; + msgNonXMLBody[&apos;mediaType&apos;] + &apos;&quot;/&gt;&apos;);
		tmp[&apos;component&apos;][&apos;nonXMLBody&apos;][&apos;text&apos;][&apos;reference&apos;] = new XML(&apos;&lt;reference value=&quot;&apos; + msgNonXMLBody[&apos;content&apos;] + &apos;&quot;/&gt;&apos;);
	}
} catch (e) {
    	var error = &apos;Error on &quot;Document Body&quot;: &apos; + e;
    	logger.error(error); // log the error
    	storeOBIBError(&apos;obib.cda.build.error&apos;, error);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.7.1">
                <name>Attachments</name>
                <sequenceNumber>12</sequenceNumber>
                <enabled>true</enabled>
                <script>try {
	var attachments = [];
	for (var i = 0; i &lt; getArrayOrXmlLength(msg[&apos;attachments&apos;]); i++) {
		attachments.push(msg[&apos;attachments&apos;][i]); // inbound object
	}
	
	if (attachments.length &gt; 0) { // store the attachments in the channel map to be send by the connector
		logger.debug(&apos;Attachments being submitted: &apos; + attachments.length);
		channelMap.put(&apos;attachments&apos;, attachments);
	}
} catch (e) {
    	var error = &apos;Error on &quot;Attachments&quot;: &apos; + e;
    	logger.error(error); // log the error
    	storeOBIBError(&apos;obib.cda.build.error&apos;, error);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.7.1">
                <name>Document Validation</name>
                <sequenceNumber>13</sequenceNumber>
                <enabled>true</enabled>
                <script>logger.debug(&quot;Document Validation&quot;);

/* Validate the CDA using the XML Schemas */
try {
	// build the XML with correct namespaces
	default xml namespace = &quot;urn:hl7-org:v3&quot;;
	var msgValidate = new XML(tmp.toString());
	msgValidate.addNamespace(new Namespace(&apos;xsi&apos;,&apos;http://www.w3.org/2001/XMLSchema-instance&apos;));

	// get the validator using the xml schemas
	var factory = new Packages.javax.xml.validation.SchemaFactory.newInstance(&apos;http://www.w3.org/2001/XMLSchema&apos;);
	var schemaLocation = new Packages.java.io.File($(&apos;custom-lib&apos;) + &apos;CDA_with_BcCdaExtensions/&apos; + globalMap.get(&apos;CDASchema&apos;));
	var schema = factory.newSchema(schemaLocation);
	var validator = schema.newValidator();

	// transform the xml into a stream
	var reader = new Packages.java.io.StringReader(msgValidate);
	var source = new Packages.javax.xml.transform.stream.StreamSource(reader);

	// validate the stream
	try {
		validator.validate(source);
	} catch(e) {
		var error = &apos;CDA XML validation errors: &apos; + e.message.replace(&apos;org.xml.sax.SAXParseException:&apos;,&apos;&apos;).replace(/(&quot;|&apos;)/g, &apos;&apos;);
		logger.error(error); // log the error
    		// storeOBIBError(&apos;obib.cda.validation.error&apos;, &apos;CDA XML validation errors: &apos; + error);
	}
} catch(e) {
	var error = &apos;Error on &quot;Document Validation&quot;: &apos; + e;
	logger.error(error); // log the error
    	storeOBIBError(&apos;obib.cda.build.error&apos;, error);
}

// check for errors in the cda building
var obibErrors = channelMap.get(&apos;obibErrors&apos;);
if (obibErrors != null) {
	var error = &apos;Errors building CDA&apos;;
	
	responseMap.put(&apos;responseMessage&apos;, createErrorMessage(error, obibErrors)); // create the response
	responseMap.put(&apos;responseStatus&apos;, &apos;500&apos;);

	throw error + &apos;: &apos; + JSON.stringify(obibErrors); // stop the processing
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64">ewogICJkb2N1bWVudElkIjoiIiwKICAidGVtcGxhdGUiOnsKICAgICJ0ZW1wbGF0ZUlkIjoiIiwK
ICAgICJ0ZW1wbGF0ZU5hbWUiOiIiCiAgfSwKICAibG9pbmMiOnsKICAgICJsb2luY0NvZGUiOiIi
LAogICAgImRpc3BsYXlOYW1lIjoiIgogIH0sCiAgImVmZmVjdGl2ZVRpbWUiOiIiLAogICJ0aXRs
ZSI6IiIsCiAgInBhdGllbnQiOnsKICAgICJpZHMiOlsKICAgICAgewogICAgICAgICJjb2RlIjoi
IiwKICAgICAgICAidHlwZSI6IiIKICAgICAgfQogICAgXSwKICAgICJhZGRyZXNzZXMiOlsKICAg
ICAgewogICAgICAgICJ1c2UiOiIiLAogICAgICAgICJzdHJlZXRBZGRyZXNzIjoiIiwKICAgICAg
ICAiY2l0eSI6IiIsCiAgICAgICAgInByb3ZpbmNlIjoiIiwKICAgICAgICAicG9zdGFsQ29kZSI6
IiIsCiAgICAgICAgImNvdW50cnkiOiIiCiAgICAgIH0KICAgIF0sCiAgICAidGVsZWNvbXMiOlsK
ICAgICAgewogICAgICAgICJ1c2UiOiIiLAogICAgICAgICJ0eXBlIjoiIiwKICAgICAgICAidmFs
dWUiOiIiCiAgICAgIH0KICAgIF0sCiAgICAibmFtZXMiOlsKICAgICAgewogICAgICAgICJ1c2Ui
OiIiLAogICAgICAgICJnaXZlbiI6WwogICAgICAgICAgIiIKICAgICAgICBdLAogICAgICAgICJm
YW1pbHkiOiIiLAogICAgICAgICJwcmVmaXgiOiIiLAogICAgICAgICJzdWZmaXgiOiIiCiAgICAg
IH0KICAgIF0sCiAgICAiZ2VuZGVyQ29kZSI6IiIsCiAgICAiYmlydGhkYXkiOiIiCiAgfSwKICAi
YXV0aG9ycyI6WwogICAgewogICAgICAidGltZSI6IiIsCiAgICAgICJpZHMiOlsKICAgICAgICB7
CiAgICAgICAgICAiY29kZSI6IiIsCiAgICAgICAgICAidHlwZSI6IiIKICAgICAgICB9CiAgICAg
IF0sCiAgICAgICJhZGRyZXNzZXMiOlsKICAgICAgICB7CiAgICAgICAgICAidXNlIjoiIiwKICAg
ICAgICAgICJzdHJlZXRBZGRyZXNzIjoiIiwKICAgICAgICAgICJjaXR5IjoiIiwKICAgICAgICAg
ICJwcm92aW5jZSI6IiIsCiAgICAgICAgICAicG9zdGFsQ29kZSI6IiIsCiAgICAgICAgICAiY291
bnRyeSI6IiIKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJ0ZWxlY29tcyI6WwogICAgICAgIHsK
ICAgICAgICAgICJ1c2UiOiIiLAogICAgICAgICAgInR5cGUiOiIiLAogICAgICAgICAgInZhbHVl
IjoiIgogICAgICAgIH0KICAgICAgXSwKICAgICAgIm5hbWUiOnsKICAgICAgICAidXNlIjoiIiwK
ICAgICAgICAiZ2l2ZW4iOlsKICAgICAgICAgICIiCiAgICAgICAgXSwKICAgICAgICAiZmFtaWx5
IjoiIiwKICAgICAgICAicHJlZml4IjoiIiwKICAgICAgICAic3VmZml4IjoiIgogICAgICB9LAog
ICAgICAic29mdHdhcmUiOnsKICAgICAgICAibmFtZSI6IiIsCiAgICAgICAgImNvZGUiOiIiCiAg
ICAgIH0KICAgIH0KICBdLAogICJyZWNpcGllbnRzIjpbCiAgICB7CiAgICAgICJpZHMiOlsKICAg
ICAgICB7CiAgICAgICAgICAiY29kZSI6IiIsCiAgICAgICAgICAidHlwZSI6IiIKICAgICAgICB9
CiAgICAgIF0sCiAgICAgICJhZGRyZXNzZXMiOlsKICAgICAgICB7CiAgICAgICAgICAidXNlIjoi
IiwKICAgICAgICAgICJzdHJlZXRBZGRyZXNzIjoiIiwKICAgICAgICAgICJjaXR5IjoiIiwKICAg
ICAgICAgICJwcm92aW5jZSI6IiIsCiAgICAgICAgICAicG9zdGFsQ29kZSI6IiIsCiAgICAgICAg
ICAiY291bnRyeSI6IiIKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJ0ZWxlY29tcyI6WwogICAg
ICAgIHsKICAgICAgICAgICJ1c2UiOiIiLAogICAgICAgICAgInR5cGUiOiIiLAogICAgICAgICAg
InZhbHVlIjoiIgogICAgICAgIH0KICAgICAgXSwKICAgICAgIm5hbWUiOnsKICAgICAgICAidXNl
IjoiIiwKICAgICAgICAiZ2l2ZW4iOlsKICAgICAgICAgICIiCiAgICAgICAgXSwKICAgICAgICAi
ZmFtaWx5IjoiIiwKICAgICAgICAicHJlZml4IjoiIiwKICAgICAgICAic3VmZml4IjoiIgogICAg
ICB9LAogICAgICAidHlwZUNvZGUiOiIiLAogICAgICAicmVjZWl2ZWRPcmdhbml6YXRpb24iOnsK
ICAgICAgICAiaWRzIjpbCiAgICAgICAgICB7CiAgICAgICAgICAgICJjb2RlIjoiIiwKICAgICAg
ICAgICAgInR5cGUiOiIiCiAgICAgICAgICB9CiAgICAgICAgXSwKICAgICAgICAibmFtZSI6IiIK
ICAgICAgfQogICAgfQogIF0sCiAgImN1c3RvZGlhbiI6ewogICAgImlkIjp7CiAgICAgICJjb2Rl
IjoiIiwKICAgICAgInR5cGUiOiIiCiAgICB9LAogICAgIm5hbWUiOiIiCiAgfSwKICAiZGF0YUVu
dGVyZXIiOnsKICAgICJ0aW1lIjoiIiwKICAgICJpZCI6ewogICAgICAiY29kZSI6IiIsCiAgICAg
ICJ0eXBlIjoiIgogICAgfSwKICAgICJhZGRyZXNzZXMiOlsKICAgICAgewogICAgICAgICJ1c2Ui
OiIiLAogICAgICAgICJzdHJlZXRBZGRyZXNzIjoiIiwKICAgICAgICAiY2l0eSI6IiIsCiAgICAg
ICAgInByb3ZpbmNlIjoiIiwKICAgICAgICAicG9zdGFsQ29kZSI6IiIsCiAgICAgICAgImNvdW50
cnkiOiIiCiAgICAgIH0KICAgIF0sCiAgICAidGVsZWNvbXMiOlsKICAgICAgewogICAgICAgICJ1
c2UiOiIiLAogICAgICAgICJ0eXBlIjoiIiwKICAgICAgICAidmFsdWUiOiIiCiAgICAgIH0KICAg
IF0sCiAgICAibmFtZSI6ewogICAgICAidXNlIjoiIiwKICAgICAgImdpdmVuIjpbCiAgICAgICAg
IiIKICAgICAgXSwKICAgICAgImZhbWlseSI6IiIsCiAgICAgICJwcmVmaXgiOiIiLAogICAgICAi
c3VmZml4IjoiIgogICAgfQogIH0sCiAgImF1dGhlbnRpY2F0b3JzIjpbCiAgICB7CiAgICAgICJp
ZHMiOlsKICAgICAgICB7CiAgICAgICAgICAiY29kZSI6IiIsCiAgICAgICAgICAidHlwZSI6IiIK
ICAgICAgICB9CiAgICAgIF0sCiAgICAgICJhZGRyZXNzZXMiOlsKICAgICAgICB7CiAgICAgICAg
ICAidXNlIjoiIiwKICAgICAgICAgICJzdHJlZXRBZGRyZXNzIjoiIiwKICAgICAgICAgICJjaXR5
IjoiIiwKICAgICAgICAgICJwcm92aW5jZSI6IiIsCiAgICAgICAgICAicG9zdGFsQ29kZSI6IiIs
CiAgICAgICAgICAiY291bnRyeSI6IiIKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJ0ZWxlY29t
cyI6WwogICAgICAgIHsKICAgICAgICAgICJ1c2UiOiIiLAogICAgICAgICAgInR5cGUiOiIiLAog
ICAgICAgICAgInZhbHVlIjoiIgogICAgICAgIH0KICAgICAgXSwKICAgICAgIm5hbWUiOnsKICAg
ICAgICAidXNlIjoiIiwKICAgICAgICAiZ2l2ZW4iOlsKICAgICAgICAgICIiCiAgICAgICAgXSwK
ICAgICAgICAiZmFtaWx5IjoiIiwKICAgICAgICAicHJlZml4IjoiIiwKICAgICAgICAic3VmZml4
IjoiIgogICAgICB9CiAgICB9CiAgXSwKICAicGFydGljaXBhbnRzIjpbCiAgICB7CiAgICAgICJp
ZHMiOlsKICAgICAgICB7CiAgICAgICAgICAiY29kZSI6IiIsCiAgICAgICAgICAidHlwZSI6IiIK
ICAgICAgICB9CiAgICAgIF0sCiAgICAgICJhZGRyZXNzZXMiOlsKICAgICAgICB7CiAgICAgICAg
ICAidXNlIjoiIiwKICAgICAgICAgICJzdHJlZXRBZGRyZXNzIjoiIiwKICAgICAgICAgICJjaXR5
IjoiIiwKICAgICAgICAgICJwcm92aW5jZSI6IiIsCiAgICAgICAgICAicG9zdGFsQ29kZSI6IiIs
CiAgICAgICAgICAiY291bnRyeSI6IiIKICAgICAgICB9CiAgICAgIF0sCiAgICAgICJ0ZWxlY29t
cyI6WwogICAgICAgIHsKICAgICAgICAgICJ1c2UiOiIiLAogICAgICAgICAgInR5cGUiOiIiLAog
ICAgICAgICAgInZhbHVlIjoiIgogICAgICAgIH0KICAgICAgXSwKICAgICAgIm5hbWUiOnsKICAg
ICAgICAidXNlIjoiIiwKICAgICAgICAiZ2l2ZW4iOlsKICAgICAgICAgICIiCiAgICAgICAgXSwK
ICAgICAgICAiZmFtaWx5IjoiIiwKICAgICAgICAicHJlZml4IjoiIiwKICAgICAgICAic3VmZml4
IjoiIgogICAgICB9LAogICAgICAidHlwZUNvZGUiOiIiLAogICAgICAiZnVuY3Rpb25Db2RlIjoi
IgogICAgfQogIF0sCiAgIm9yZGVycyI6WwogICAgewogICAgICAiaWQiOiIiLAogICAgICAic3Rh
dHVzQ29kZSI6IiIKICAgIH0KICBdLAogICJub25YTUxCb2R5Ijp7CiAgICAibWVkaWFUeXBlIjoi
IiwKICAgICJjb250ZW50IjoiIgogIH0sCiAgImF0dGFjaG1lbnRzIjpbCiAgICB7CiAgICAgICJt
ZWRpYVR5cGUiOiIiLAogICAgICAiY29udGVudCI6IiIsCiAgICAgICJoYXNoIjoiIiwKICAgICAg
InJlZmVyZW5jZSI6IiIKICAgIH0KICBdLAogICJyZWNlaXZlcnMiOlsKICAgICIiCiAgXQp9</inboundTemplate>
            <outboundTemplate encoding="base64">PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPENsaW5pY2FsRG9jdW1lbnQg
eG1sbnM9InVybjpobDctb3JnOnYzIiB4bWxuczpiY2NkYT0idXJuOmJjY2RhIiB4bWxuczpuczA9
Imh0dHA6Ly9taWNyb3NvZnQuY29tL0hlYWx0aENhcmUvSEw3LzJYIiB4bWxuczp4YWxhbj0iaHR0
cDovL3htbC5hcGFjaGUub3JnL3hzbHQiIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAw
MS9YTUxTY2hlbWEtaW5zdGFuY2UiIGNsYXNzQ29kZT0iRE9DQ0xJTiIgbW9vZENvZGU9IkVWTiI+
CiAgPHJlYWxtQ29kZSBjb2RlPSJDQS1CQyIgLz4NCiAgPHR5cGVJZCByb290PSIyLjE2Ljg0MC4x
LjExMzg4My4xLjMiIGV4dGVuc2lvbj0iUE9DRF9IRDAwMDA0MCIgYXNzaWduaW5nQXV0aG9yaXR5
TmFtZT0iSEw3IENEQSBSMiIgLz4NCiAgPHRlbXBsYXRlSWQgcm9vdD0iIiBhc3NpZ25pbmdBdXRo
b3JpdHlOYW1lPSIiIC8+DQogIDxpZCByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAu
MyIgZXh0ZW5zaW9uPSIiIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkNEWCBDbGluaWNhbCBEb2N1
bWVudCBJRCIgLz4NCiAgPGNvZGUgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi4xIiBj
b2RlPSIiIGNvZGVTeXN0ZW1OYW1lPSJMT0lOQyBDb2RlIiBkaXNwbGF5TmFtZT0iIiAvPg0KICA8
dGl0bGU+PC90aXRsZT4NCiAgPGVmZmVjdGl2ZVRpbWUgdmFsdWU9IiIgLz4NCiAgPGNvbmZpZGVu
dGlhbGl0eUNvZGUgY29kZT0iTiIgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNS4yNSIg
Y29kZVN5c3RlbU5hbWU9IkNvbmZpZGVudGlhbGl0eSIgLz4NCiAgPGxhbmd1YWdlQ29kZSBjb2Rl
PSJlbi1DQSIgLz4KCiAgPHJlY29yZFRhcmdldCB0eXBlQ29kZT0iUkNUIiBjb250ZXh0Q29udHJv
bENvZGU9Ik9QIj4NCiAgICA8cGF0aWVudFJvbGUgY2xhc3NDb2RlPSJQQVQiPgogICAgIDwvcGF0
aWVudFJvbGU+CiAgPC9yZWNvcmRUYXJnZXQ+CgogIDxhdXRob3IgdHlwZUNvZGU9IkFVVCIgY29u
dGV4dENvbnRyb2xDb2RlPSJPUCI+DQogICAgPHRpbWUgdmFsdWU9IiIgLz4NCiAgICA8YXNzaWdu
ZWRBdXRob3IgY2xhc3NDb2RlPSJBU1NJR05FRCI+DQogICAgICA8aWQgbnVsbEZsYXZvcj0iTkEi
IC8+DQogICAgICA8YXNzaWduZWRBdXRob3JpbmdEZXZpY2U+DQogICAgICAgIDxzb2Z0d2FyZU5h
bWUgY29kZT0iT1NDQVJTUCIgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMS4x
MiIgY29kZVN5c3RlbU5hbWU9Ik9zY2FyIFNlcnZpY2UgUHJvdmlkZXIiIGRpc3BsYXlOYW1lPSJP
c2NhciBTZXJ2aWNlIFByb3ZpZGVyIiAvPg0KICAgICAgPC9hc3NpZ25lZEF1dGhvcmluZ0Rldmlj
ZT4NCiAgICA8L2Fzc2lnbmVkQXV0aG9yPg0KICA8L2F1dGhvcj4KCiAgPGN1c3RvZGlhbiB0eXBl
Q29kZT0iQ1NUIj4NCiAgICA8YXNzaWduZWRDdXN0b2RpYW4gY2xhc3NDb2RlPSJBU1NJR05FRCI+
DQogICAgICA8cmVwcmVzZW50ZWRDdXN0b2RpYW5Pcmdhbml6YXRpb24gY2xhc3NDb2RlPSJPUkci
IGRldGVybWluZXJDb2RlPSJJTlNUQU5DRSI+DQogICAgICA8L3JlcHJlc2VudGVkQ3VzdG9kaWFu
T3JnYW5pemF0aW9uPg0KICAgIDwvYXNzaWduZWRDdXN0b2RpYW4+DQogIDwvY3VzdG9kaWFuPgoK
ICA8Y29tcG9uZW50IHR5cGVDb2RlPSJDT01QIj4KICAgIDxub25YTUxCb2R5IGNsYXNzQ29kZT0i
RE9DQk9EWSIgbW9vZENvZGU9IkVWTiI+CiAgICA8L25vblhNTEJvZHk+CiAgPC9jb21wb25lbnQ+
CjwvQ2xpbmljYWxEb2N1bWVudD4=</outboundTemplate>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>HL7V3</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.7.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.7.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.7.1">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.7.1">
                <stripNamespaces>true</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.7.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.7.1">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.7.1">
                <name>Submit Document Response</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>logger.debug(&apos;Submit Document Response&apos;);

try {
	// Store the response to be returned by the &quot;Source Connector&quot;
	responseMap.put(&apos;responseMessage&apos;, handleResponseMessage(responseStatus, responseStatusMessage, msg, function() {
		// Ack details
		tmp[&apos;ackDetail&apos;][&apos;ackId&apos;] = msg[&apos;id&apos;][&apos;@extension&apos;].toString();
		tmp[&apos;ackDetail&apos;][&apos;ackTime&apos;] = parseCDADateTime(msg[&apos;creationTime&apos;][&apos;@value&apos;].toString());
		tmp[&apos;ackDetail&apos;][&apos;messageId&apos;] = msg[&apos;acknowledgement&apos;][&apos;targetMessage&apos;][&apos;id&apos;][&apos;@extension&apos;].toString();
		tmp[&apos;ackDetail&apos;][&apos;status&apos;] = msg[&apos;acknowledgement&apos;][&apos;acknowledgementDetail&apos;][&apos;@typeCode&apos;].toString();
		
		// Payload
        	tmp[&apos;documentId&apos;] = channelMap.get(&apos;documentId&apos;);

        	// Process the CDA Document in &apos;CDA Document Parser&apos; channel, and return it in the response
        	var chResponse = router.routeMessage(&quot;CDA Document Parser&quot;, new XML(channelMap.get(&apos;document&apos;)));
		if (chResponse.status === SENT) {
			tmp[&apos;document&apos;] = JSON.parse(chResponse.message);
			tmp[&apos;document&apos;][&apos;cdaXML&apos;] = channelMap.get(&apos;document&apos;);

			var attachments = channelMap.get(&apos;attachments&apos;);
			if (attachments !== null) {
				tmp[&apos;document&apos;][&apos;attachments&apos;] = attachments;
			}
		} else {
			logger.error(&apos;Error parsing CDA Document &apos; + chResponse.statusMessage);
		}
        	
		// Message status
		if (tmp[&apos;ackDetail&apos;][&apos;status&apos;] === &apos;E&apos;) {
			tmp[&apos;message&apos;] = msg[&apos;acknowledgement&apos;][&apos;acknowledgementDetail&apos;][&apos;text&apos;].toString();
			tmp[&apos;status&apos;] = &quot;ERROR&quot;;
			
			logger.error(&apos;MessagId &apos; + tmp[&apos;ackDetail&apos;][&apos;messageId&apos;] + &apos; returned the error: &apos; + tmp[&apos;message&apos;] + &quot;&apos;&quot;);
		} else {
			tmp[&apos;status&apos;] = &quot;SUCCESS&quot;;
			
			logger.debug(&apos;MessageId &apos; + tmp[&apos;ackDetail&apos;][&apos;messageId&apos;] + &apos; was successfully sent.&apos;);
		}

		return tmp; // Return the transformed message to be converted on &apos;handleResponseMessage&apos;
	}));
	responseMap.put(&apos;responseStatus&apos;, &apos;200&apos;);
} catch(e) {
	logger.error(&quot;Error on &apos;Submit Document Response&apos;: &quot; + e);

	responseMap.put(&apos;responseMessage&apos;, createErrorMessage(e));
	responseMap.put(&apos;responseStatus&apos;, &apos;500&apos;);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64">PE1DQ0lfSU4wMDAwMDJVVjAxIElUU1ZlcnNpb249IlhNTF8xLjAiIHhtbG5zPSJ1cm46aGw3LW9y
Zzp2MyI+CiAgICA8aWQgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjEiIGV4dGVu
c2lvbj0iMzA5M2RiYTItMTRjOC00OWU1LTkzYzUtMTk1NTVjN2FiYWNkIi8+CiAgICA8Y3JlYXRp
b25UaW1lIHZhbHVlPSIyMDE5MDMxNDAwMDMtMDcwMCIvPgogICAgPHZlcnNpb25Db2RlIGNvZGU9
IkJhbGxvdDIwMDlNYXkiLz4KICAgIDxpbnRlcmFjdGlvbklkIHJvb3Q9IjIuMTYuODQwLjEuMTEz
ODgzLjEuNiIgZXh0ZW5zaW9uPSJNQ0NJX0lOMDAwMDAyVVYwMSIvPgogICAgPHByb2Nlc3NpbmdD
b2RlIGNvZGU9IlAiLz4KICAgIDxwcm9jZXNzaW5nTW9kZUNvZGUgY29kZT0iVCIvPgogICAgPGFj
Y2VwdEFja0NvZGUgY29kZT0iTkUiLz4KICAgIDxyZWNlaXZlcj4KICAgICAgICA8ZGV2aWNlIGNs
YXNzQ29kZT0iREVWIiBkZXRlcm1pbmVyQ29kZT0iSU5TVEFOQ0UiPgogICAgICAgICAgICA8aWQg
bnVsbEZsYXZvcj0iTkEiLz4KICAgICAgICAgICAgPGFzQWdlbnQgY2xhc3NDb2RlPSJBR05UIj4K
ICAgICAgICAgICAgICAgIDxyZXByZXNlbnRlZE9yZ2FuaXphdGlvbiBjbGFzc0NvZGU9Ik9SRyIg
ZGV0ZXJtaW5lckNvZGU9IklOU1RBTkNFIj4KICAgICAgICAgICAgICAgICAgICA8aWQgcm9vdD0i
Mi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjIiIGV4dGVuc2lvbj0iY2R4cG9zdHByb2Qtb3Rj
YSIgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQ0RYIENsaW5pYyBJRCIvPgogICAgICAgICAgICAg
ICAgICAgIDxub3RpZmljYXRpb25QYXJ0eSB4c2k6bmlsPSJ0cnVlIiB4bWxuczp4c2k9Imh0dHA6
Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIi8+CiAgICAgICAgICAgICAgICA8
L3JlcHJlc2VudGVkT3JnYW5pemF0aW9uPgogICAgICAgICAgICA8L2FzQWdlbnQ+CiAgICAgICAg
PC9kZXZpY2U+CiAgICA8L3JlY2VpdmVyPgogICAgPHNlbmRlcj4KICAgICAgICA8ZGV2aWNlIGNs
YXNzQ29kZT0iREVWIiBkZXRlcm1pbmVyQ29kZT0iSU5TVEFOQ0UiPgogICAgICAgICAgICA8aWQg
bnVsbEZsYXZvcj0iTkEiLz4KICAgICAgICAgICAgPGFzQWdlbnQgY2xhc3NDb2RlPSJBR05UIj4K
ICAgICAgICAgICAgICAgIDxyZXByZXNlbnRlZE9yZ2FuaXphdGlvbiBjbGFzc0NvZGU9Ik9SRyIg
ZGV0ZXJtaW5lckNvZGU9IklOU1RBTkNFIj4KICAgICAgICAgICAgICAgICAgICA8aWQgcm9vdD0i
Mi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjIiIGV4dGVuc2lvbj0iW29iamVjdCBPYmplY3Rd
LFtvYmplY3QgT2JqZWN0XSIgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQ0RYIENsaW5pYyBJRCIv
PgogICAgICAgICAgICAgICAgICAgIDxub3RpZmljYXRpb25QYXJ0eSB4c2k6bmlsPSJ0cnVlIiB4
bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIi8+CiAg
ICAgICAgICAgICAgICA8L3JlcHJlc2VudGVkT3JnYW5pemF0aW9uPgogICAgICAgICAgICA8L2Fz
QWdlbnQ+CiAgICAgICAgPC9kZXZpY2U+CiAgICA8L3NlbmRlcj4KICAgIDxhY2tub3dsZWRnZW1l
bnQgdHlwZUNvZGU9IkNFIj4KICAgICAgICA8dGFyZ2V0TWVzc2FnZT4KICAgICAgICAgICAgPGlk
IHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC4xIiBleHRlbnNpb249IjZmZGZmZjJj
LTA2MTQtNGE3MS05NDg0LTU5YjA0NTFiZTc3ZCIvPgogICAgICAgIDwvdGFyZ2V0TWVzc2FnZT4K
ICAgICAgICA8YWNrbm93bGVkZ2VtZW50RGV0YWlsIHR5cGVDb2RlPSJFIj4KICAgICAgICAgICAg
PHRleHQ+CiAgICAgICAgRG9jdW1lbnQgZXJyb3JzICgyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4x
MDAuMyA0ZTRiN2VlMC1kMWQ4LTQ4NDQtYjA3NC05N2FhMzEyYWQ0MTYpOgpOb2RlIE5hbWU6ICdp
ZCcsIEF0dHJpYnV0ZSBOYW1lOiAnJyBOYW1lU3BhY2U6ICd1cm46aGw3LW9yZzp2MycsIFR5cGU6
ICdFbGVtZW50JywgTGluZTogMSwgUG9zaXRpb24gMTE1OCwgVmFsdWU6ICcnLCBTZXZlcml0eTog
J0Vycm9yJy4gICBEZXNjcmlwdGlvbjogVGhlIGVsZW1lbnQgJ3BhdGllbnRSb2xlJyBpbiBuYW1l
c3BhY2UgJ3VybjpobDctb3JnOnYzJyBoYXMgaW52YWxpZCBjaGlsZCBlbGVtZW50ICdpZCcgaW4g
bmFtZXNwYWNlICd1cm46aGw3LW9yZzp2MycuIExpc3Qgb2YgcG9zc2libGUgZWxlbWVudHMgZXhw
ZWN0ZWQ6ICdwcm92aWRlck9yZ2FuaXphdGlvbicgaW4gbmFtZXNwYWNlICd1cm46aGw3LW9yZzp2
MycuCk5vZGUgTmFtZTogJ2luZm9ybWF0aW9uUmVjaXBpZW50JywgQXR0cmlidXRlIE5hbWU6ICcn
IE5hbWVTcGFjZTogJ3VybjpobDctb3JnOnYzJywgVHlwZTogJ0VsZW1lbnQnLCBMaW5lOiAxLCBQ
b3NpdGlvbiAyNTM3LCBWYWx1ZTogJycsIFNldmVyaXR5OiAnRXJyb3InLiAgIERlc2NyaXB0aW9u
OiBUaGUgZWxlbWVudCAnQ2xpbmljYWxEb2N1bWVudCcgaW4gbmFtZXNwYWNlICd1cm46aGw3LW9y
Zzp2MycgaGFzIGludmFsaWQgY2hpbGQgZWxlbWVudCAnaW5mb3JtYXRpb25SZWNpcGllbnQnIGlu
IG5hbWVzcGFjZSAndXJuOmhsNy1vcmc6djMnLgogICAgICA8L3RleHQ+CiAgICAgICAgPC9hY2tu
b3dsZWRnZW1lbnREZXRhaWw+CiAgICA8L2Fja25vd2xlZGdlbWVudD4KPC9NQ0NJX0lOMDAwMDAy
VVYwMT4=</inboundTemplate>
            <outboundTemplate encoding="base64">ewoJInN0YXR1cyI6ICIiLAoJIm1lc3NhZ2UiOiAiIiwKCSJhY2tEZXRhaWwiOiB7CgkJImFja0lk
IjogIiIsCgkJImFja1RpbWUiOiAiIiwKCQkibWVzc2FnZUlkIjogIiIsCgkJInN0YXR1cyI6ICIi
Cgl9LAoJImRvY3VtZW50SWQiOiAiIiwKCSJkb2N1bWVudCI6IHt9Cn0=</outboundTemplate>
            <inboundDataType>HL7V3</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.7.1">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.7.1">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.7.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.7.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.7.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.7.1">
            <elements/>
          </filter>
          <transportName>JavaScript Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
        <connector version="3.7.1">
          <metaDataId>2</metaDataId>
          <name>Service List New Documents</name>
          <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.7.1">
            <pluginProperties/>
            <destinationConnectorProperties version="3.7.1">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>true</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
                <entry>
                  <string>3ee0c1db-83b0-49f6-9323-8884b5bd43da</string>
                  <string>CDA Parser</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <script>logger.debug(&apos;Service List New Documents&apos;);

importPackage(Packages.ca.uvic.leadlab.cdxconnector);

try {
	var client = new WSClientDocument($(&apos;cdx.base.url&apos;), $(&apos;username&apos;), $(&apos;password&apos;), $(&apos;certPath&apos;), $(&apos;certPass&apos;));
	
	var cdxResponse = client.listNewDocuments($(&apos;locationId&apos;));
	
	return ResponseFactory.getSentResponse(cdxResponse);
} catch (e) {
	logger.error(&quot;Error on &apos;Service List New Documents&apos;: &quot; + e);
	return ResponseFactory.getErrorResponse(&quot;Error on &apos;Service List New Documents&apos;: &quot; + e)
}</script>
          </properties>
          <transformer version="3.7.1">
            <elements/>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>HL7V3</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.7.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.7.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.7.1">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.7.1">
                <stripNamespaces>true</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.7.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.7.1">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.7.1">
                <name>List New Documents Response</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>logger.debug(&apos;List New Documents Response&apos;);

try {
	// Store the response to be returned by the &quot;Source Connector&quot;
	responseMap.put(&apos;responseMessage&apos;, handleResponseMessage(responseStatus, responseStatusMessage, msg, function() {
		// Ack details
		tmp[&apos;ackDetail&apos;][&apos;ackId&apos;] = msg[&apos;id&apos;][&apos;@extension&apos;].toString();
		tmp[&apos;ackDetail&apos;][&apos;ackTime&apos;] = parseCDADateTime(msg[&apos;creationTime&apos;][&apos;@value&apos;].toString());
		tmp[&apos;ackDetail&apos;][&apos;messageId&apos;] = msg[&apos;acknowledgement&apos;][&apos;targetMessage&apos;][&apos;id&apos;][&apos;@extension&apos;].toString();
		tmp[&apos;ackDetail&apos;][&apos;status&apos;] = msg[&apos;controlActProcess&apos;][&apos;queryAck&apos;][&apos;queryResponseCode&apos;][&apos;@code&apos;].toString();
		
		// Payload
		for (var i = 0; i &lt; getArrayOrXmlLength(msg[&apos;controlActProcess&apos;][&apos;subject&apos;]); i++) { // Document list
			var target = msg[&apos;controlActProcess&apos;][&apos;subject&apos;][i][&apos;target&apos;];
			var document = {};
			
			document[&apos;documentId&apos;] = target[&apos;id&apos;][&apos;@extension&apos;].toString();
			
			document[&apos;template&apos;] = {};
			document[&apos;template&apos;][&apos;templateId&apos;] = target[&apos;templateId&apos;][&apos;@extension&apos;].toString();
			document[&apos;template&apos;][&apos;templateName&apos;] = target[&apos;templateId&apos;][&apos;@assigningAuthorityName&apos;].toString();
			
			document[&apos;loinc&apos;] = {};
			document[&apos;loinc&apos;][&apos;loincCode&apos;] = target[&apos;code&apos;][&apos;@code&apos;].toString();
			document[&apos;loinc&apos;][&apos;displayName&apos;] = target[&apos;code&apos;][&apos;@displayName&apos;].toString();
			
			document[&apos;effectiveTime&apos;] = parseCDADateTime(target[&apos;effectiveTime&apos;][&apos;@value&apos;].toString());
			
			tmp[&apos;documents&apos;][i] = document;
		}

		// Message status
		if (tmp[&apos;ackDetail&apos;][&apos;status&apos;] === &apos;QE&apos;) {
			tmp[&apos;message&apos;] = msg[&apos;acknowledgement&apos;][&apos;acknowledgementDetail&apos;][&apos;text&apos;].toString();
			tmp[&apos;status&apos;] = &quot;ERROR&quot;;
			
			logger.error(&apos;MessagId &apos; + tmp[&apos;ackDetail&apos;][&apos;messageId&apos;] + &apos; returned the error: &apos; + tmp[&apos;message&apos;] + &quot;&apos;&quot;);
		} else {
			tmp[&apos;status&apos;] = &quot;SUCCESS&quot;;
		}

		return tmp; // Return the transformed message to be converted on &apos;handleResponseMessage&apos;
	}));
	responseMap.put(&apos;responseStatus&apos;, &apos;200&apos;);
} catch(e) {
	logger.error(&quot;Error on &apos;List New Documents Response&apos;: &quot; + e);

	responseMap.put(&apos;responseMessage&apos;, createErrorMessage(e));
	responseMap.put(&apos;responseStatus&apos;, &apos;500&apos;);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64">PFJDTVJfSU4wMDAwMzBVVjAxIHhtbG5zPSJ1cm46aGw3LW9yZzp2MyIgSVRTVmVyc2lvbj0iWE1M
XzEuMCI+CiAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQ0RYIE1lc3NhZ2UgSUQiIGV4
dGVuc2lvbj0iY2EzMGM5YzUtNWUyNy00OTlhLTg0MjEtNTQ0MmFmNDU1MDQwIiByb290PSIyLjE2
Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuMSIvPgogICAgPGNyZWF0aW9uVGltZSB2YWx1ZT0iMjAx
OTA0MDExNDQxLTA3MDAiLz4KICAgIDx2ZXJzaW9uQ29kZSBjb2RlPSJCYWxsb3QyMDA5TWF5Ii8+
CiAgICA8aW50ZXJhY3Rpb25JZCByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xLjYiLz4KICAgIDxw
cm9jZXNzaW5nQ29kZSBjb2RlPSJQIi8+CiAgICA8cHJvY2Vzc2luZ01vZGVDb2RlIGNvZGU9IlQi
Lz4KICAgIDxhY2NlcHRBY2tDb2RlIGNvZGU9Ik5FIi8+CiAgICA8cmVjZWl2ZXI+CiAgICAgICAg
PGRldmljZSBjbGFzc0NvZGU9IkRFViIgZGV0ZXJtaW5lckNvZGU9IklOU1RBTkNFIj4KICAgICAg
ICAgICAgPGlkIG51bGxGbGF2b3I9Ik5BIi8+CiAgICAgICAgICAgIDxhc0FnZW50IGNsYXNzQ29k
ZT0iQUdOVCI+CiAgICAgICAgICAgICAgICA8cmVwcmVzZW50ZWRPcmdhbml6YXRpb24gY2xhc3ND
b2RlPSJPUkciIGRldGVybWluZXJDb2RlPSJJTlNUQU5DRSI+CiAgICAgICAgICAgICAgICAgICAg
PGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkNEWCBDbGluaWMgSUQiIGV4dGVuc2lvbj0iY2R4
cG9zdHByb2Qtb3RjYSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjIiLz4KICAg
ICAgICAgICAgICAgIDwvcmVwcmVzZW50ZWRPcmdhbml6YXRpb24+CiAgICAgICAgICAgIDwvYXNB
Z2VudD4KICAgICAgICA8L2RldmljZT4KICAgIDwvcmVjZWl2ZXI+CiAgICA8c2VuZGVyPgogICAg
ICAgIDxkZXZpY2UgY2xhc3NDb2RlPSJERVYiIGRldGVybWluZXJDb2RlPSJJTlNUQU5DRSI+CiAg
ICAgICAgICAgIDxpZCBudWxsRmxhdm9yPSJOQSIvPgogICAgICAgICAgICA8YXNBZ2VudCBjbGFz
c0NvZGU9IkFHTlQiPgogICAgICAgICAgICAgICAgPHJlcHJlc2VudGVkT3JnYW5pemF0aW9uIGNs
YXNzQ29kZT0iT1JHIiBkZXRlcm1pbmVyQ29kZT0iSU5TVEFOQ0UiPgogICAgICAgICAgICAgICAg
ICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJDRFggQ2xpbmljIElEIiBleHRlbnNpb249
IkNEWElIQSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjIiLz4KICAgICAgICAg
ICAgICAgIDwvcmVwcmVzZW50ZWRPcmdhbml6YXRpb24+CiAgICAgICAgICAgIDwvYXNBZ2VudD4K
ICAgICAgICA8L2RldmljZT4KICAgIDwvc2VuZGVyPgogICAgPGFja25vd2xlZGdlbWVudCB0eXBl
Q29kZT0iQUEiPgogICAgICAgIDx0YXJnZXRNZXNzYWdlPgogICAgICAgICAgICA8aWQgYXNzaWdu
aW5nQXV0aG9yaXR5TmFtZT0iQ0RYIE1lc3NhZ2UgSUQiIGV4dGVuc2lvbj0iYWQwNTQxZTYtY2Vl
Mi00NDk3LWJmMzktNzM1NjIxZWZiZjMzIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4x
MDAuMSIvPgogICAgICAgIDwvdGFyZ2V0TWVzc2FnZT4KICAgIDwvYWNrbm93bGVkZ2VtZW50Pgog
ICAgPGNvbnRyb2xBY3RQcm9jZXNzIGNsYXNzQ29kZT0iQ0FDVCIgbW9vZENvZGU9IkFQVCI+CiAg
ICAgICAgPHN1YmplY3QgdHlwZUNvZGU9IlNVQkoiPgogICAgICAgICAgICA8dGFyZ2V0IGNsYXNz
Q29kZT0iRE9DQ0xJTiIgbW9vZENvZGU9IkVWTiI+CiAgICAgICAgICAgICAgICA8dGVtcGxhdGVJ
ZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJDRFggQ29udGVudCBUeXBlIiBleHRlbnNpb249IkNE
QSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjIwIi8+CiAgICAgICAgICAgICAg
ICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQ0RYIE1lc3NhZ2UgSUQiIGV4dGVuc2lvbj0i
OGE5NmMxZDctMjgyMy1lOTExLWE5NmEtMDA1MDU2OGM1NWE2IiByb290PSIyLjE2Ljg0MC4xLjEx
Mzg4My4zLjI3Ny4xMDAuMSIvPgogICAgICAgICAgICAgICAgPGNvZGUgY29kZT0iMi4xNi44NDAu
MS4xMTM4ODMuMy41MS42MC4yLjEiIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuMSIg
ZGlzcGxheU5hbWU9IkxhYiBSZXBvcnQgVGVtcGxhdGUiLz4KICAgICAgICAgICAgICAgIDx0ZXh0
IG1lZGlhVHlwZT0idGV4dC94bWwiPkF0dGFjaG1lbnRDb3VudDowfFRvdGFsQXR0YWNobWVudFNp
emU6MDwvdGV4dD4KICAgICAgICAgICAgICAgIDxzdGF0dXNDb2RlIGNvZGU9ImNvbXBsZXRlZCIv
PgogICAgICAgICAgICAgICAgPGVmZmVjdGl2ZVRpbWUgdmFsdWU9IjIwMTkwMTI4MTAxNS0wODAw
Ii8+CiAgICAgICAgICAgICAgICA8Y29uZmlkZW50aWFsaXR5Q29kZSBjb2RlPSJOIiBjb2RlU3lz
dGVtPSIyLjE2Ljg0MC4xLjExMzg4My42LjEiLz4KICAgICAgICAgICAgICAgIDxyZWNvcmRUYXJn
ZXQgbnVsbEZsYXZvcj0iTkEiIHR5cGVDb2RlPSJSQ1QiPgogICAgICAgICAgICAgICAgICAgIDxw
YXRpZW50IGNsYXNzQ29kZT0iUEFUIiBudWxsRmxhdm9yPSJOQSI+CiAgICAgICAgICAgICAgICAg
ICAgICAgIDxwYXRpZW50Tm9uUGVyc29uTGl2aW5nU3ViamVjdCB4bWxuczp4c2k9Imh0dHA6Ly93
d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6bmlsPSJ0cnVlIi8+CiAgICAg
ICAgICAgICAgICAgICAgICAgIDxwYXRpZW50UGVyc29uIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53
My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTpuaWw9InRydWUiLz4KICAgICAgICAg
ICAgICAgICAgICA8L3BhdGllbnQ+CiAgICAgICAgICAgICAgICA8L3JlY29yZFRhcmdldD4KICAg
ICAgICAgICAgICAgIDxhdXRob3IgbnVsbEZsYXZvcj0iTkEiIHR5cGVDb2RlPSJBVVQiPgogICAg
ICAgICAgICAgICAgICAgIDx0aW1lIG51bGxGbGF2b3I9Ik5BIi8+CiAgICAgICAgICAgICAgICAg
ICAgPGFzc2lnbmVkQXV0aG9yIGNsYXNzQ29kZT0iQVNTSUdORUQiIG51bGxGbGF2b3I9Ik5BIj4K
ICAgICAgICAgICAgICAgICAgICAgICAgPGlkIG51bGxGbGF2b3I9Ik5BIi8+CiAgICAgICAgICAg
ICAgICAgICAgICAgIDxhc3NpZ25lZEF1dGhvcmluZ0RldmljZSB4bWxuczp4c2k9Imh0dHA6Ly93
d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6bmlsPSJ0cnVlIi8+CiAgICAg
ICAgICAgICAgICAgICAgICAgIDxhc3NpZ25lZFBlcnNvbiB4bWxuczp4c2k9Imh0dHA6Ly93d3cu
dzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6bmlsPSJ0cnVlIi8+CiAgICAgICAg
ICAgICAgICAgICAgPC9hc3NpZ25lZEF1dGhvcj4KICAgICAgICAgICAgICAgIDwvYXV0aG9yPgog
ICAgICAgICAgICAgICAgPGN1c3RvZGlhbiBudWxsRmxhdm9yPSJOQSIgdHlwZUNvZGU9IkNTVCI+
CiAgICAgICAgICAgICAgICAgICAgPGFzc2lnbmVkQ3VzdG9kaWFuIGNsYXNzQ29kZT0iQVNTSUdO
RUQiIG51bGxGbGF2b3I9Ik5BIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHJlcHJlc2VudGVk
T3JnYW5pemF0aW9uIGNsYXNzQ29kZT0iTkFUIiBkZXRlcm1pbmVyQ29kZT0iSU5TVEFOQ0UiIG51
bGxGbGF2b3I9Ik5BIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZCBudWxsRmxhdm9y
PSJOQSIvPgogICAgICAgICAgICAgICAgICAgICAgICA8L3JlcHJlc2VudGVkT3JnYW5pemF0aW9u
PgogICAgICAgICAgICAgICAgICAgIDwvYXNzaWduZWRDdXN0b2RpYW4+CiAgICAgICAgICAgICAg
ICA8L2N1c3RvZGlhbj4KICAgICAgICAgICAgPC90YXJnZXQ+CiAgICAgICAgPC9zdWJqZWN0Pgog
ICAgICAgIDxzdWJqZWN0IHR5cGVDb2RlPSJTVUJKIj4KICAgICAgICAgICAgPHRhcmdldCBjbGFz
c0NvZGU9IkRPQ0NMSU4iIG1vb2RDb2RlPSJFVk4iPgogICAgICAgICAgICAgICAgPHRlbXBsYXRl
SWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQ0RYIENvbnRlbnQgVHlwZSIgZXh0ZW5zaW9uPSJD
REEiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC4yMCIvPgogICAgICAgICAgICAg
ICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkNEWCBNZXNzYWdlIElEIiBleHRlbnNpb249
IjFiOTIwYWM3LWUyMjQtZTkxMS1hOTZhLTAwNTA1NjhjNTVhNiIgcm9vdD0iMi4xNi44NDAuMS4x
MTM4ODMuMy4yNzcuMTAwLjEiLz4KICAgICAgICAgICAgICAgIDxjb2RlIGNvZGU9IjIuMTYuODQw
LjEuMTEzODgzLjMuNTEuNjAuMi4xIiBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42LjEi
IGRpc3BsYXlOYW1lPSJMYWIgUmVwb3J0IFRlbXBsYXRlIi8+CiAgICAgICAgICAgICAgICA8dGV4
dCBtZWRpYVR5cGU9InRleHQveG1sIj5BdHRhY2htZW50Q291bnQ6MHxUb3RhbEF0dGFjaG1lbnRT
aXplOjA8L3RleHQ+CiAgICAgICAgICAgICAgICA8c3RhdHVzQ29kZSBjb2RlPSJjb21wbGV0ZWQi
Lz4KICAgICAgICAgICAgICAgIDxlZmZlY3RpdmVUaW1lIHZhbHVlPSIyMDE5MDEzMDE0NTktMDgw
MCIvPgogICAgICAgICAgICAgICAgPGNvbmZpZGVudGlhbGl0eUNvZGUgY29kZT0iTiIgY29kZVN5
c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi4xIi8+CiAgICAgICAgICAgICAgICA8cmVjb3JkVGFy
Z2V0IG51bGxGbGF2b3I9Ik5BIiB0eXBlQ29kZT0iUkNUIj4KICAgICAgICAgICAgICAgICAgICA8
cGF0aWVudCBjbGFzc0NvZGU9IlBBVCIgbnVsbEZsYXZvcj0iTkEiPgogICAgICAgICAgICAgICAg
ICAgICAgICA8cGF0aWVudE5vblBlcnNvbkxpdmluZ1N1YmplY3QgeG1sbnM6eHNpPSJodHRwOi8v
d3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOm5pbD0idHJ1ZSIvPgogICAg
ICAgICAgICAgICAgICAgICAgICA8cGF0aWVudFBlcnNvbiB4bWxuczp4c2k9Imh0dHA6Ly93d3cu
dzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6bmlsPSJ0cnVlIi8+CiAgICAgICAg
ICAgICAgICAgICAgPC9wYXRpZW50PgogICAgICAgICAgICAgICAgPC9yZWNvcmRUYXJnZXQ+CiAg
ICAgICAgICAgICAgICA8YXV0aG9yIG51bGxGbGF2b3I9Ik5BIiB0eXBlQ29kZT0iQVVUIj4KICAg
ICAgICAgICAgICAgICAgICA8dGltZSBudWxsRmxhdm9yPSJOQSIvPgogICAgICAgICAgICAgICAg
ICAgIDxhc3NpZ25lZEF1dGhvciBjbGFzc0NvZGU9IkFTU0lHTkVEIiBudWxsRmxhdm9yPSJOQSI+
CiAgICAgICAgICAgICAgICAgICAgICAgIDxpZCBudWxsRmxhdm9yPSJOQSIvPgogICAgICAgICAg
ICAgICAgICAgICAgICA8YXNzaWduZWRBdXRob3JpbmdEZXZpY2UgeG1sbnM6eHNpPSJodHRwOi8v
d3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOm5pbD0idHJ1ZSIvPgogICAg
ICAgICAgICAgICAgICAgICAgICA8YXNzaWduZWRQZXJzb24geG1sbnM6eHNpPSJodHRwOi8vd3d3
LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOm5pbD0idHJ1ZSIvPgogICAgICAg
ICAgICAgICAgICAgIDwvYXNzaWduZWRBdXRob3I+CiAgICAgICAgICAgICAgICA8L2F1dGhvcj4K
ICAgICAgICAgICAgICAgIDxjdXN0b2RpYW4gbnVsbEZsYXZvcj0iTkEiIHR5cGVDb2RlPSJDU1Qi
PgogICAgICAgICAgICAgICAgICAgIDxhc3NpZ25lZEN1c3RvZGlhbiBjbGFzc0NvZGU9IkFTU0lH
TkVEIiBudWxsRmxhdm9yPSJOQSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxyZXByZXNlbnRl
ZE9yZ2FuaXphdGlvbiBjbGFzc0NvZGU9Ik5BVCIgZGV0ZXJtaW5lckNvZGU9IklOU1RBTkNFIiBu
dWxsRmxhdm9yPSJOQSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQgbnVsbEZsYXZv
cj0iTkEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9yZXByZXNlbnRlZE9yZ2FuaXphdGlv
bj4KICAgICAgICAgICAgICAgICAgICA8L2Fzc2lnbmVkQ3VzdG9kaWFuPgogICAgICAgICAgICAg
ICAgPC9jdXN0b2RpYW4+CiAgICAgICAgICAgIDwvdGFyZ2V0PgogICAgICAgIDwvc3ViamVjdD4K
ICAgICAgICA8c3ViamVjdCB0eXBlQ29kZT0iU1VCSiI+CiAgICAgICAgICAgIDx0YXJnZXQgY2xh
c3NDb2RlPSJET0NDTElOIiBtb29kQ29kZT0iRVZOIj4KICAgICAgICAgICAgICAgIDx0ZW1wbGF0
ZUlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkNEWCBDb250ZW50IFR5cGUiIGV4dGVuc2lvbj0i
Q0RBIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuMjAiLz4KICAgICAgICAgICAg
ICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJDRFggTWVzc2FnZSBJRCIgZXh0ZW5zaW9u
PSJhOWRkMDVkOC05ZTI1LWU5MTEtYTk2YS0wMDUwNTY4YzU1YTYiIHJvb3Q9IjIuMTYuODQwLjEu
MTEzODgzLjMuMjc3LjEwMC4xIi8+CiAgICAgICAgICAgICAgICA8Y29kZSBjb2RlPSIyLjE2Ljg0
MC4xLjExMzg4My4zLjUxLjYwLjIuMSIgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi4x
IiBkaXNwbGF5TmFtZT0iTGFiIFJlcG9ydCBUZW1wbGF0ZSIvPgogICAgICAgICAgICAgICAgPHRl
eHQgbWVkaWFUeXBlPSJ0ZXh0L3htbCI+QXR0YWNobWVudENvdW50OjB8VG90YWxBdHRhY2htZW50
U2l6ZTowPC90ZXh0PgogICAgICAgICAgICAgICAgPHN0YXR1c0NvZGUgY29kZT0iY29tcGxldGVk
Ii8+CiAgICAgICAgICAgICAgICA8ZWZmZWN0aXZlVGltZSB2YWx1ZT0iMjAxOTAxMzExMzI1LTA4
MDAiLz4KICAgICAgICAgICAgICAgIDxjb25maWRlbnRpYWxpdHlDb2RlIGNvZGU9Ik4iIGNvZGVT
eXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuMSIvPgogICAgICAgICAgICAgICAgPHJlY29yZFRh
cmdldCBudWxsRmxhdm9yPSJOQSIgdHlwZUNvZGU9IlJDVCI+CiAgICAgICAgICAgICAgICAgICAg
PHBhdGllbnQgY2xhc3NDb2RlPSJQQVQiIG51bGxGbGF2b3I9Ik5BIj4KICAgICAgICAgICAgICAg
ICAgICAgICAgPHBhdGllbnROb25QZXJzb25MaXZpbmdTdWJqZWN0IHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTpuaWw9InRydWUiLz4KICAg
ICAgICAgICAgICAgICAgICAgICAgPHBhdGllbnRQZXJzb24geG1sbnM6eHNpPSJodHRwOi8vd3d3
LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOm5pbD0idHJ1ZSIvPgogICAgICAg
ICAgICAgICAgICAgIDwvcGF0aWVudD4KICAgICAgICAgICAgICAgIDwvcmVjb3JkVGFyZ2V0Pgog
ICAgICAgICAgICAgICAgPGF1dGhvciBudWxsRmxhdm9yPSJOQSIgdHlwZUNvZGU9IkFVVCI+CiAg
ICAgICAgICAgICAgICAgICAgPHRpbWUgbnVsbEZsYXZvcj0iTkEiLz4KICAgICAgICAgICAgICAg
ICAgICA8YXNzaWduZWRBdXRob3IgY2xhc3NDb2RlPSJBU1NJR05FRCIgbnVsbEZsYXZvcj0iTkEi
PgogICAgICAgICAgICAgICAgICAgICAgICA8aWQgbnVsbEZsYXZvcj0iTkEiLz4KICAgICAgICAg
ICAgICAgICAgICAgICAgPGFzc2lnbmVkQXV0aG9yaW5nRGV2aWNlIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTpuaWw9InRydWUiLz4KICAg
ICAgICAgICAgICAgICAgICAgICAgPGFzc2lnbmVkUGVyc29uIHhtbG5zOnhzaT0iaHR0cDovL3d3
dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTpuaWw9InRydWUiLz4KICAgICAg
ICAgICAgICAgICAgICA8L2Fzc2lnbmVkQXV0aG9yPgogICAgICAgICAgICAgICAgPC9hdXRob3I+
CiAgICAgICAgICAgICAgICA8Y3VzdG9kaWFuIG51bGxGbGF2b3I9Ik5BIiB0eXBlQ29kZT0iQ1NU
Ij4KICAgICAgICAgICAgICAgICAgICA8YXNzaWduZWRDdXN0b2RpYW4gY2xhc3NDb2RlPSJBU1NJ
R05FRCIgbnVsbEZsYXZvcj0iTkEiPgogICAgICAgICAgICAgICAgICAgICAgICA8cmVwcmVzZW50
ZWRPcmdhbml6YXRpb24gY2xhc3NDb2RlPSJOQVQiIGRldGVybWluZXJDb2RlPSJJTlNUQU5DRSIg
bnVsbEZsYXZvcj0iTkEiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkIG51bGxGbGF2
b3I9Ik5BIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcmVwcmVzZW50ZWRPcmdhbml6YXRp
b24+CiAgICAgICAgICAgICAgICAgICAgPC9hc3NpZ25lZEN1c3RvZGlhbj4KICAgICAgICAgICAg
ICAgIDwvY3VzdG9kaWFuPgogICAgICAgICAgICA8L3RhcmdldD4KICAgICAgICA8L3N1YmplY3Q+
CiAgICAgICAgPHN1YmplY3QgdHlwZUNvZGU9IlNVQkoiPgogICAgICAgICAgICA8dGFyZ2V0IGNs
YXNzQ29kZT0iRE9DQ0xJTiIgbW9vZENvZGU9IkVWTiI+CiAgICAgICAgICAgICAgICA8dGVtcGxh
dGVJZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJDRFggQ29udGVudCBUeXBlIiBleHRlbnNpb249
IkNEQSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjIwIi8+CiAgICAgICAgICAg
ICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQ0RYIE1lc3NhZ2UgSUQiIGV4dGVuc2lv
bj0iZTdhNGVmMGEtNzEyOS1lOTExLWE5NmEtMDA1MDU2OGM1NWE2IiByb290PSIyLjE2Ljg0MC4x
LjExMzg4My4zLjI3Ny4xMDAuMSIvPgogICAgICAgICAgICAgICAgPGNvZGUgY29kZT0iMi4xNi44
NDAuMS4xMTM4ODMuMy41MS42MC4yLjEiIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYu
MSIgZGlzcGxheU5hbWU9IkxhYiBSZXBvcnQgVGVtcGxhdGUiLz4KICAgICAgICAgICAgICAgIDx0
ZXh0IG1lZGlhVHlwZT0idGV4dC94bWwiPkF0dGFjaG1lbnRDb3VudDowfFRvdGFsQXR0YWNobWVu
dFNpemU6MDwvdGV4dD4KICAgICAgICAgICAgICAgIDxzdGF0dXNDb2RlIGNvZGU9ImNvbXBsZXRl
ZCIvPgogICAgICAgICAgICAgICAgPGVmZmVjdGl2ZVRpbWUgdmFsdWU9IjIwMTkwMjA1MTAwNy0w
ODAwIi8+CiAgICAgICAgICAgICAgICA8Y29uZmlkZW50aWFsaXR5Q29kZSBjb2RlPSJOIiBjb2Rl
U3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42LjEiLz4KICAgICAgICAgICAgICAgIDxyZWNvcmRU
YXJnZXQgbnVsbEZsYXZvcj0iTkEiIHR5cGVDb2RlPSJSQ1QiPgogICAgICAgICAgICAgICAgICAg
IDxwYXRpZW50IGNsYXNzQ29kZT0iUEFUIiBudWxsRmxhdm9yPSJOQSI+CiAgICAgICAgICAgICAg
ICAgICAgICAgIDxwYXRpZW50Tm9uUGVyc29uTGl2aW5nU3ViamVjdCB4bWxuczp4c2k9Imh0dHA6
Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6bmlsPSJ0cnVlIi8+CiAg
ICAgICAgICAgICAgICAgICAgICAgIDxwYXRpZW50UGVyc29uIHhtbG5zOnhzaT0iaHR0cDovL3d3
dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTpuaWw9InRydWUiLz4KICAgICAg
ICAgICAgICAgICAgICA8L3BhdGllbnQ+CiAgICAgICAgICAgICAgICA8L3JlY29yZFRhcmdldD4K
ICAgICAgICAgICAgICAgIDxhdXRob3IgbnVsbEZsYXZvcj0iTkEiIHR5cGVDb2RlPSJBVVQiPgog
ICAgICAgICAgICAgICAgICAgIDx0aW1lIG51bGxGbGF2b3I9Ik5BIi8+CiAgICAgICAgICAgICAg
ICAgICAgPGFzc2lnbmVkQXV0aG9yIGNsYXNzQ29kZT0iQVNTSUdORUQiIG51bGxGbGF2b3I9Ik5B
Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGlkIG51bGxGbGF2b3I9Ik5BIi8+CiAgICAgICAg
ICAgICAgICAgICAgICAgIDxhc3NpZ25lZEF1dGhvcmluZ0RldmljZSB4bWxuczp4c2k9Imh0dHA6
Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6bmlsPSJ0cnVlIi8+CiAg
ICAgICAgICAgICAgICAgICAgICAgIDxhc3NpZ25lZFBlcnNvbiB4bWxuczp4c2k9Imh0dHA6Ly93
d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6bmlsPSJ0cnVlIi8+CiAgICAg
ICAgICAgICAgICAgICAgPC9hc3NpZ25lZEF1dGhvcj4KICAgICAgICAgICAgICAgIDwvYXV0aG9y
PgogICAgICAgICAgICAgICAgPGN1c3RvZGlhbiBudWxsRmxhdm9yPSJOQSIgdHlwZUNvZGU9IkNT
VCI+CiAgICAgICAgICAgICAgICAgICAgPGFzc2lnbmVkQ3VzdG9kaWFuIGNsYXNzQ29kZT0iQVNT
SUdORUQiIG51bGxGbGF2b3I9Ik5BIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHJlcHJlc2Vu
dGVkT3JnYW5pemF0aW9uIGNsYXNzQ29kZT0iTkFUIiBkZXRlcm1pbmVyQ29kZT0iSU5TVEFOQ0Ui
IG51bGxGbGF2b3I9Ik5BIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZCBudWxsRmxh
dm9yPSJOQSIvPgogICAgICAgICAgICAgICAgICAgICAgICA8L3JlcHJlc2VudGVkT3JnYW5pemF0
aW9uPgogICAgICAgICAgICAgICAgICAgIDwvYXNzaWduZWRDdXN0b2RpYW4+CiAgICAgICAgICAg
ICAgICA8L2N1c3RvZGlhbj4KICAgICAgICAgICAgPC90YXJnZXQ+CiAgICAgICAgPC9zdWJqZWN0
PgogICAgICAgIDxzdWJqZWN0IHR5cGVDb2RlPSJTVUJKIj4KICAgICAgICAgICAgPHRhcmdldCBj
bGFzc0NvZGU9IkRPQ0NMSU4iIG1vb2RDb2RlPSJFVk4iPgogICAgICAgICAgICAgICAgPHRlbXBs
YXRlSWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQ0RYIENvbnRlbnQgVHlwZSIgZXh0ZW5zaW9u
PSJDREEiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC4yMCIvPgogICAgICAgICAg
ICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkNEWCBNZXNzYWdlIElEIiBleHRlbnNp
b249IjE4NzBiMzE4LTcxMjktZTkxMS1hOTZhLTAwNTA1NjhjNTVhNiIgcm9vdD0iMi4xNi44NDAu
MS4xMTM4ODMuMy4yNzcuMTAwLjEiLz4KICAgICAgICAgICAgICAgIDxjb2RlIGNvZGU9IjIuMTYu
ODQwLjEuMTEzODgzLjMuNTEuNjAuMi4xIiBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42
LjEiIGRpc3BsYXlOYW1lPSJMYWIgUmVwb3J0IFRlbXBsYXRlIi8+CiAgICAgICAgICAgICAgICA8
dGV4dCBtZWRpYVR5cGU9InRleHQveG1sIj5BdHRhY2htZW50Q291bnQ6MHxUb3RhbEF0dGFjaG1l
bnRTaXplOjA8L3RleHQ+CiAgICAgICAgICAgICAgICA8c3RhdHVzQ29kZSBjb2RlPSJjb21wbGV0
ZWQiLz4KICAgICAgICAgICAgICAgIDxlZmZlY3RpdmVUaW1lIHZhbHVlPSIyMDE5MDIwNTEwMDgt
MDgwMCIvPgogICAgICAgICAgICAgICAgPGNvbmZpZGVudGlhbGl0eUNvZGUgY29kZT0iTiIgY29k
ZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi4xIi8+CiAgICAgICAgICAgICAgICA8cmVjb3Jk
VGFyZ2V0IG51bGxGbGF2b3I9Ik5BIiB0eXBlQ29kZT0iUkNUIj4KICAgICAgICAgICAgICAgICAg
ICA8cGF0aWVudCBjbGFzc0NvZGU9IlBBVCIgbnVsbEZsYXZvcj0iTkEiPgogICAgICAgICAgICAg
ICAgICAgICAgICA8cGF0aWVudE5vblBlcnNvbkxpdmluZ1N1YmplY3QgeG1sbnM6eHNpPSJodHRw
Oi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOm5pbD0idHJ1ZSIvPgog
ICAgICAgICAgICAgICAgICAgICAgICA8cGF0aWVudFBlcnNvbiB4bWxuczp4c2k9Imh0dHA6Ly93
d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6bmlsPSJ0cnVlIi8+CiAgICAg
ICAgICAgICAgICAgICAgPC9wYXRpZW50PgogICAgICAgICAgICAgICAgPC9yZWNvcmRUYXJnZXQ+
CiAgICAgICAgICAgICAgICA8YXV0aG9yIG51bGxGbGF2b3I9Ik5BIiB0eXBlQ29kZT0iQVVUIj4K
ICAgICAgICAgICAgICAgICAgICA8dGltZSBudWxsRmxhdm9yPSJOQSIvPgogICAgICAgICAgICAg
ICAgICAgIDxhc3NpZ25lZEF1dGhvciBjbGFzc0NvZGU9IkFTU0lHTkVEIiBudWxsRmxhdm9yPSJO
QSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpZCBudWxsRmxhdm9yPSJOQSIvPgogICAgICAg
ICAgICAgICAgICAgICAgICA8YXNzaWduZWRBdXRob3JpbmdEZXZpY2UgeG1sbnM6eHNpPSJodHRw
Oi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOm5pbD0idHJ1ZSIvPgog
ICAgICAgICAgICAgICAgICAgICAgICA8YXNzaWduZWRQZXJzb24geG1sbnM6eHNpPSJodHRwOi8v
d3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOm5pbD0idHJ1ZSIvPgogICAg
ICAgICAgICAgICAgICAgIDwvYXNzaWduZWRBdXRob3I+CiAgICAgICAgICAgICAgICA8L2F1dGhv
cj4KICAgICAgICAgICAgICAgIDxjdXN0b2RpYW4gbnVsbEZsYXZvcj0iTkEiIHR5cGVDb2RlPSJD
U1QiPgogICAgICAgICAgICAgICAgICAgIDxhc3NpZ25lZEN1c3RvZGlhbiBjbGFzc0NvZGU9IkFT
U0lHTkVEIiBudWxsRmxhdm9yPSJOQSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxyZXByZXNl
bnRlZE9yZ2FuaXphdGlvbiBjbGFzc0NvZGU9Ik5BVCIgZGV0ZXJtaW5lckNvZGU9IklOU1RBTkNF
IiBudWxsRmxhdm9yPSJOQSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQgbnVsbEZs
YXZvcj0iTkEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9yZXByZXNlbnRlZE9yZ2FuaXph
dGlvbj4KICAgICAgICAgICAgICAgICAgICA8L2Fzc2lnbmVkQ3VzdG9kaWFuPgogICAgICAgICAg
ICAgICAgPC9jdXN0b2RpYW4+CiAgICAgICAgICAgIDwvdGFyZ2V0PgogICAgICAgIDwvc3ViamVj
dD4KICAgICAgICA8c3ViamVjdCB0eXBlQ29kZT0iU1VCSiI+CiAgICAgICAgICAgIDx0YXJnZXQg
Y2xhc3NDb2RlPSJET0NDTElOIiBtb29kQ29kZT0iRVZOIj4KICAgICAgICAgICAgICAgIDx0ZW1w
bGF0ZUlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkNEWCBDb250ZW50IFR5cGUiIGV4dGVuc2lv
bj0iQ0RBIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuMjAiLz4KICAgICAgICAg
ICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJDRFggTWVzc2FnZSBJRCIgZXh0ZW5z
aW9uPSI2ZWQ5NGY3NC03MTI5LWU5MTEtYTk2YS0wMDUwNTY4YzU1YTYiIHJvb3Q9IjIuMTYuODQw
LjEuMTEzODgzLjMuMjc3LjEwMC4xIi8+CiAgICAgICAgICAgICAgICA8Y29kZSBjb2RlPSIyLjE2
Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuMSIgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMu
Ni4xIiBkaXNwbGF5TmFtZT0iTGFiIFJlcG9ydCBUZW1wbGF0ZSIvPgogICAgICAgICAgICAgICAg
PHRleHQgbWVkaWFUeXBlPSJ0ZXh0L3htbCI+QXR0YWNobWVudENvdW50OjB8VG90YWxBdHRhY2ht
ZW50U2l6ZTowPC90ZXh0PgogICAgICAgICAgICAgICAgPHN0YXR1c0NvZGUgY29kZT0iY29tcGxl
dGVkIi8+CiAgICAgICAgICAgICAgICA8ZWZmZWN0aXZlVGltZSB2YWx1ZT0iMjAxOTAyMDUxMDEw
LTA4MDAiLz4KICAgICAgICAgICAgICAgIDxjb25maWRlbnRpYWxpdHlDb2RlIGNvZGU9Ik4iIGNv
ZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuMSIvPgogICAgICAgICAgICAgICAgPHJlY29y
ZFRhcmdldCBudWxsRmxhdm9yPSJOQSIgdHlwZUNvZGU9IlJDVCI+CiAgICAgICAgICAgICAgICAg
ICAgPHBhdGllbnQgY2xhc3NDb2RlPSJQQVQiIG51bGxGbGF2b3I9Ik5BIj4KICAgICAgICAgICAg
ICAgICAgICAgICAgPHBhdGllbnROb25QZXJzb25MaXZpbmdTdWJqZWN0IHhtbG5zOnhzaT0iaHR0
cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTpuaWw9InRydWUiLz4K
ICAgICAgICAgICAgICAgICAgICAgICAgPHBhdGllbnRQZXJzb24geG1sbnM6eHNpPSJodHRwOi8v
d3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOm5pbD0idHJ1ZSIvPgogICAg
ICAgICAgICAgICAgICAgIDwvcGF0aWVudD4KICAgICAgICAgICAgICAgIDwvcmVjb3JkVGFyZ2V0
PgogICAgICAgICAgICAgICAgPGF1dGhvciBudWxsRmxhdm9yPSJOQSIgdHlwZUNvZGU9IkFVVCI+
CiAgICAgICAgICAgICAgICAgICAgPHRpbWUgbnVsbEZsYXZvcj0iTkEiLz4KICAgICAgICAgICAg
ICAgICAgICA8YXNzaWduZWRBdXRob3IgY2xhc3NDb2RlPSJBU1NJR05FRCIgbnVsbEZsYXZvcj0i
TkEiPgogICAgICAgICAgICAgICAgICAgICAgICA8aWQgbnVsbEZsYXZvcj0iTkEiLz4KICAgICAg
ICAgICAgICAgICAgICAgICAgPGFzc2lnbmVkQXV0aG9yaW5nRGV2aWNlIHhtbG5zOnhzaT0iaHR0
cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTpuaWw9InRydWUiLz4K
ICAgICAgICAgICAgICAgICAgICAgICAgPGFzc2lnbmVkUGVyc29uIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTpuaWw9InRydWUiLz4KICAg
ICAgICAgICAgICAgICAgICA8L2Fzc2lnbmVkQXV0aG9yPgogICAgICAgICAgICAgICAgPC9hdXRo
b3I+CiAgICAgICAgICAgICAgICA8Y3VzdG9kaWFuIG51bGxGbGF2b3I9Ik5BIiB0eXBlQ29kZT0i
Q1NUIj4KICAgICAgICAgICAgICAgICAgICA8YXNzaWduZWRDdXN0b2RpYW4gY2xhc3NDb2RlPSJB
U1NJR05FRCIgbnVsbEZsYXZvcj0iTkEiPgogICAgICAgICAgICAgICAgICAgICAgICA8cmVwcmVz
ZW50ZWRPcmdhbml6YXRpb24gY2xhc3NDb2RlPSJOQVQiIGRldGVybWluZXJDb2RlPSJJTlNUQU5D
RSIgbnVsbEZsYXZvcj0iTkEiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkIG51bGxG
bGF2b3I9Ik5BIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcmVwcmVzZW50ZWRPcmdhbml6
YXRpb24+CiAgICAgICAgICAgICAgICAgICAgPC9hc3NpZ25lZEN1c3RvZGlhbj4KICAgICAgICAg
ICAgICAgIDwvY3VzdG9kaWFuPgogICAgICAgICAgICA8L3RhcmdldD4KICAgICAgICA8L3N1Ympl
Y3Q+CiAgICAgICAgPHN1YmplY3QgdHlwZUNvZGU9IlNVQkoiPgogICAgICAgICAgICA8dGFyZ2V0
IGNsYXNzQ29kZT0iRE9DQ0xJTiIgbW9vZENvZGU9IkVWTiI+CiAgICAgICAgICAgICAgICA8dGVt
cGxhdGVJZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJDRFggQ29udGVudCBUeXBlIiBleHRlbnNp
b249IkNEQSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjIwIi8+CiAgICAgICAg
ICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQ0RYIE1lc3NhZ2UgSUQiIGV4dGVu
c2lvbj0iMTE0NGI4MjYtN2EyZC1lOTExLWE5NmEtMDA1MDU2OGM1NWE2IiByb290PSIyLjE2Ljg0
MC4xLjExMzg4My4zLjI3Ny4xMDAuMSIvPgogICAgICAgICAgICAgICAgPGNvZGUgY29kZT0iMi4x
Ni44NDAuMS4xMTM4ODMuMy41MS42MC4yLjEiIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgz
LjYuMSIgZGlzcGxheU5hbWU9IkxhYiBSZXBvcnQgVGVtcGxhdGUiLz4KICAgICAgICAgICAgICAg
IDx0ZXh0IG1lZGlhVHlwZT0idGV4dC94bWwiPkF0dGFjaG1lbnRDb3VudDowfFRvdGFsQXR0YWNo
bWVudFNpemU6MDwvdGV4dD4KICAgICAgICAgICAgICAgIDxzdGF0dXNDb2RlIGNvZGU9ImNvbXBs
ZXRlZCIvPgogICAgICAgICAgICAgICAgPGVmZmVjdGl2ZVRpbWUgdmFsdWU9IjIwMTkwMjEwMTMy
My0wODAwIi8+CiAgICAgICAgICAgICAgICA8Y29uZmlkZW50aWFsaXR5Q29kZSBjb2RlPSJOIiBj
b2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42LjEiLz4KICAgICAgICAgICAgICAgIDxyZWNv
cmRUYXJnZXQgbnVsbEZsYXZvcj0iTkEiIHR5cGVDb2RlPSJSQ1QiPgogICAgICAgICAgICAgICAg
ICAgIDxwYXRpZW50IGNsYXNzQ29kZT0iUEFUIiBudWxsRmxhdm9yPSJOQSI+CiAgICAgICAgICAg
ICAgICAgICAgICAgIDxwYXRpZW50Tm9uUGVyc29uTGl2aW5nU3ViamVjdCB4bWxuczp4c2k9Imh0
dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6bmlsPSJ0cnVlIi8+
CiAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRpZW50UGVyc29uIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTpuaWw9InRydWUiLz4KICAg
ICAgICAgICAgICAgICAgICA8L3BhdGllbnQ+CiAgICAgICAgICAgICAgICA8L3JlY29yZFRhcmdl
dD4KICAgICAgICAgICAgICAgIDxhdXRob3IgbnVsbEZsYXZvcj0iTkEiIHR5cGVDb2RlPSJBVVQi
PgogICAgICAgICAgICAgICAgICAgIDx0aW1lIG51bGxGbGF2b3I9Ik5BIi8+CiAgICAgICAgICAg
ICAgICAgICAgPGFzc2lnbmVkQXV0aG9yIGNsYXNzQ29kZT0iQVNTSUdORUQiIG51bGxGbGF2b3I9
Ik5BIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGlkIG51bGxGbGF2b3I9Ik5BIi8+CiAgICAg
ICAgICAgICAgICAgICAgICAgIDxhc3NpZ25lZEF1dGhvcmluZ0RldmljZSB4bWxuczp4c2k9Imh0
dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6bmlsPSJ0cnVlIi8+
CiAgICAgICAgICAgICAgICAgICAgICAgIDxhc3NpZ25lZFBlcnNvbiB4bWxuczp4c2k9Imh0dHA6
Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6bmlsPSJ0cnVlIi8+CiAg
ICAgICAgICAgICAgICAgICAgPC9hc3NpZ25lZEF1dGhvcj4KICAgICAgICAgICAgICAgIDwvYXV0
aG9yPgogICAgICAgICAgICAgICAgPGN1c3RvZGlhbiBudWxsRmxhdm9yPSJOQSIgdHlwZUNvZGU9
IkNTVCI+CiAgICAgICAgICAgICAgICAgICAgPGFzc2lnbmVkQ3VzdG9kaWFuIGNsYXNzQ29kZT0i
QVNTSUdORUQiIG51bGxGbGF2b3I9Ik5BIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHJlcHJl
c2VudGVkT3JnYW5pemF0aW9uIGNsYXNzQ29kZT0iTkFUIiBkZXRlcm1pbmVyQ29kZT0iSU5TVEFO
Q0UiIG51bGxGbGF2b3I9Ik5BIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZCBudWxs
Rmxhdm9yPSJOQSIvPgogICAgICAgICAgICAgICAgICAgICAgICA8L3JlcHJlc2VudGVkT3JnYW5p
emF0aW9uPgogICAgICAgICAgICAgICAgICAgIDwvYXNzaWduZWRDdXN0b2RpYW4+CiAgICAgICAg
ICAgICAgICA8L2N1c3RvZGlhbj4KICAgICAgICAgICAgPC90YXJnZXQ+CiAgICAgICAgPC9zdWJq
ZWN0PgogICAgICAgIDxzdWJqZWN0IHR5cGVDb2RlPSJTVUJKIj4KICAgICAgICAgICAgPHRhcmdl
dCBjbGFzc0NvZGU9IkRPQ0NMSU4iIG1vb2RDb2RlPSJFVk4iPgogICAgICAgICAgICAgICAgPHRl
bXBsYXRlSWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQ0RYIENvbnRlbnQgVHlwZSIgZXh0ZW5z
aW9uPSJDREEiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC4yMCIvPgogICAgICAg
ICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkNEWCBNZXNzYWdlIElEIiBleHRl
bnNpb249ImUwMDVmOWNjLTFkM2EtZTkxMS1hOTZhLTAwNTA1NjhjNTVhNiIgcm9vdD0iMi4xNi44
NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjEiLz4KICAgICAgICAgICAgICAgIDxjb2RlIGNvZGU9IjIu
MTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi4xIiBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4
My42LjEiIGRpc3BsYXlOYW1lPSJMYWIgUmVwb3J0IFRlbXBsYXRlIi8+CiAgICAgICAgICAgICAg
ICA8dGV4dCBtZWRpYVR5cGU9InRleHQveG1sIj5BdHRhY2htZW50Q291bnQ6MHxUb3RhbEF0dGFj
aG1lbnRTaXplOjA8L3RleHQ+CiAgICAgICAgICAgICAgICA8c3RhdHVzQ29kZSBjb2RlPSJjb21w
bGV0ZWQiLz4KICAgICAgICAgICAgICAgIDxlZmZlY3RpdmVUaW1lIHZhbHVlPSIyMDE5MDIyNjE1
MjUtMDgwMCIvPgogICAgICAgICAgICAgICAgPGNvbmZpZGVudGlhbGl0eUNvZGUgY29kZT0iTiIg
Y29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi4xIi8+CiAgICAgICAgICAgICAgICA8cmVj
b3JkVGFyZ2V0IG51bGxGbGF2b3I9Ik5BIiB0eXBlQ29kZT0iUkNUIj4KICAgICAgICAgICAgICAg
ICAgICA8cGF0aWVudCBjbGFzc0NvZGU9IlBBVCIgbnVsbEZsYXZvcj0iTkEiPgogICAgICAgICAg
ICAgICAgICAgICAgICA8cGF0aWVudE5vblBlcnNvbkxpdmluZ1N1YmplY3QgeG1sbnM6eHNpPSJo
dHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOm5pbD0idHJ1ZSIv
PgogICAgICAgICAgICAgICAgICAgICAgICA8cGF0aWVudFBlcnNvbiB4bWxuczp4c2k9Imh0dHA6
Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6bmlsPSJ0cnVlIi8+CiAg
ICAgICAgICAgICAgICAgICAgPC9wYXRpZW50PgogICAgICAgICAgICAgICAgPC9yZWNvcmRUYXJn
ZXQ+CiAgICAgICAgICAgICAgICA8YXV0aG9yIG51bGxGbGF2b3I9Ik5BIiB0eXBlQ29kZT0iQVVU
Ij4KICAgICAgICAgICAgICAgICAgICA8dGltZSBudWxsRmxhdm9yPSJOQSIvPgogICAgICAgICAg
ICAgICAgICAgIDxhc3NpZ25lZEF1dGhvciBjbGFzc0NvZGU9IkFTU0lHTkVEIiBudWxsRmxhdm9y
PSJOQSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpZCBudWxsRmxhdm9yPSJOQSIvPgogICAg
ICAgICAgICAgICAgICAgICAgICA8YXNzaWduZWRBdXRob3JpbmdEZXZpY2UgeG1sbnM6eHNpPSJo
dHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOm5pbD0idHJ1ZSIv
PgogICAgICAgICAgICAgICAgICAgICAgICA8YXNzaWduZWRQZXJzb24geG1sbnM6eHNpPSJodHRw
Oi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOm5pbD0idHJ1ZSIvPgog
ICAgICAgICAgICAgICAgICAgIDwvYXNzaWduZWRBdXRob3I+CiAgICAgICAgICAgICAgICA8L2F1
dGhvcj4KICAgICAgICAgICAgICAgIDxjdXN0b2RpYW4gbnVsbEZsYXZvcj0iTkEiIHR5cGVDb2Rl
PSJDU1QiPgogICAgICAgICAgICAgICAgICAgIDxhc3NpZ25lZEN1c3RvZGlhbiBjbGFzc0NvZGU9
IkFTU0lHTkVEIiBudWxsRmxhdm9yPSJOQSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxyZXBy
ZXNlbnRlZE9yZ2FuaXphdGlvbiBjbGFzc0NvZGU9Ik5BVCIgZGV0ZXJtaW5lckNvZGU9IklOU1RB
TkNFIiBudWxsRmxhdm9yPSJOQSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQgbnVs
bEZsYXZvcj0iTkEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9yZXByZXNlbnRlZE9yZ2Fu
aXphdGlvbj4KICAgICAgICAgICAgICAgICAgICA8L2Fzc2lnbmVkQ3VzdG9kaWFuPgogICAgICAg
ICAgICAgICAgPC9jdXN0b2RpYW4+CiAgICAgICAgICAgIDwvdGFyZ2V0PgogICAgICAgIDwvc3Vi
amVjdD4KICAgICAgICA8c3ViamVjdCB0eXBlQ29kZT0iU1VCSiI+CiAgICAgICAgICAgIDx0YXJn
ZXQgY2xhc3NDb2RlPSJET0NDTElOIiBtb29kQ29kZT0iRVZOIj4KICAgICAgICAgICAgICAgIDx0
ZW1wbGF0ZUlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkNEWCBDb250ZW50IFR5cGUiIGV4dGVu
c2lvbj0iQ0RBIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuMjAiLz4KICAgICAg
ICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJDRFggTWVzc2FnZSBJRCIgZXh0
ZW5zaW9uPSJhZDAwMDdiNS1jODQ2LWU5MTEtYTk2YS0wMDUwNTY4YzU1YTYiIHJvb3Q9IjIuMTYu
ODQwLjEuMTEzODgzLjMuMjc3LjEwMC4xIi8+CiAgICAgICAgICAgICAgICA8Y29kZSBjb2RlPSIy
LjE2Ljg0MC4xLjExMzg4My4zLjE4MTguMTAuMS41IiBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjEx
Mzg4My42LjEiIGRpc3BsYXlOYW1lPSJlMmUgR2VuZXJpYyBVbnN0cnVjdHVyZWQgUmVmZXJyYWwi
Lz4KICAgICAgICAgICAgICAgIDx0ZXh0IG1lZGlhVHlwZT0idGV4dC94bWwiPkF0dGFjaG1lbnRD
b3VudDowfFRvdGFsQXR0YWNobWVudFNpemU6MDwvdGV4dD4KICAgICAgICAgICAgICAgIDxzdGF0
dXNDb2RlIGNvZGU9ImNvbXBsZXRlZCIvPgogICAgICAgICAgICAgICAgPGVmZmVjdGl2ZVRpbWUg
dmFsdWU9IjIwMTkwMzE0MTkwMy0wNzAwIi8+CiAgICAgICAgICAgICAgICA8Y29uZmlkZW50aWFs
aXR5Q29kZSBjb2RlPSJOIiBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42LjEiLz4KICAg
ICAgICAgICAgICAgIDxyZWNvcmRUYXJnZXQgbnVsbEZsYXZvcj0iTkEiIHR5cGVDb2RlPSJSQ1Qi
PgogICAgICAgICAgICAgICAgICAgIDxwYXRpZW50IGNsYXNzQ29kZT0iUEFUIiBudWxsRmxhdm9y
PSJOQSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRpZW50Tm9uUGVyc29uTGl2aW5nU3Vi
amVjdCB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNl
IiB4c2k6bmlsPSJ0cnVlIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRpZW50UGVyc29u
IHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhz
aTpuaWw9InRydWUiLz4KICAgICAgICAgICAgICAgICAgICA8L3BhdGllbnQ+CiAgICAgICAgICAg
ICAgICA8L3JlY29yZFRhcmdldD4KICAgICAgICAgICAgICAgIDxhdXRob3IgbnVsbEZsYXZvcj0i
TkEiIHR5cGVDb2RlPSJBVVQiPgogICAgICAgICAgICAgICAgICAgIDx0aW1lIG51bGxGbGF2b3I9
Ik5BIi8+CiAgICAgICAgICAgICAgICAgICAgPGFzc2lnbmVkQXV0aG9yIGNsYXNzQ29kZT0iQVNT
SUdORUQiIG51bGxGbGF2b3I9Ik5BIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGlkIG51bGxG
bGF2b3I9Ik5BIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhc3NpZ25lZEF1dGhvcmluZ0Rl
dmljZSB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNl
IiB4c2k6bmlsPSJ0cnVlIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhc3NpZ25lZFBlcnNv
biB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4
c2k6bmlsPSJ0cnVlIi8+CiAgICAgICAgICAgICAgICAgICAgPC9hc3NpZ25lZEF1dGhvcj4KICAg
ICAgICAgICAgICAgIDwvYXV0aG9yPgogICAgICAgICAgICAgICAgPGN1c3RvZGlhbiBudWxsRmxh
dm9yPSJOQSIgdHlwZUNvZGU9IkNTVCI+CiAgICAgICAgICAgICAgICAgICAgPGFzc2lnbmVkQ3Vz
dG9kaWFuIGNsYXNzQ29kZT0iQVNTSUdORUQiIG51bGxGbGF2b3I9Ik5BIj4KICAgICAgICAgICAg
ICAgICAgICAgICAgPHJlcHJlc2VudGVkT3JnYW5pemF0aW9uIGNsYXNzQ29kZT0iTkFUIiBkZXRl
cm1pbmVyQ29kZT0iSU5TVEFOQ0UiIG51bGxGbGF2b3I9Ik5BIj4KICAgICAgICAgICAgICAgICAg
ICAgICAgICAgIDxpZCBudWxsRmxhdm9yPSJOQSIvPgogICAgICAgICAgICAgICAgICAgICAgICA8
L3JlcHJlc2VudGVkT3JnYW5pemF0aW9uPgogICAgICAgICAgICAgICAgICAgIDwvYXNzaWduZWRD
dXN0b2RpYW4+CiAgICAgICAgICAgICAgICA8L2N1c3RvZGlhbj4KICAgICAgICAgICAgPC90YXJn
ZXQ+CiAgICAgICAgPC9zdWJqZWN0PgogICAgICAgIDxzdWJqZWN0IHR5cGVDb2RlPSJTVUJKIj4K
ICAgICAgICAgICAgPHRhcmdldCBjbGFzc0NvZGU9IkRPQ0NMSU4iIG1vb2RDb2RlPSJFVk4iPgog
ICAgICAgICAgICAgICAgPHRlbXBsYXRlSWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQ0RYIENv
bnRlbnQgVHlwZSIgZXh0ZW5zaW9uPSJDREEiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3
LjEwMC4yMCIvPgogICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkNE
WCBNZXNzYWdlIElEIiBleHRlbnNpb249ImRiMGU1ZmI4LWM5NDYtZTkxMS1hOTZhLTAwNTA1Njhj
NTVhNiIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjEiLz4KICAgICAgICAgICAg
ICAgIDxjb2RlIGNvZGU9IjIuMTYuODQwLjEuMTEzODgzLjMuMTgxOC4xMC4xLjUiIGNvZGVTeXN0
ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuMSIgZGlzcGxheU5hbWU9ImUyZSBHZW5lcmljIFVuc3Ry
dWN0dXJlZCBSZWZlcnJhbCIvPgogICAgICAgICAgICAgICAgPHRleHQgbWVkaWFUeXBlPSJ0ZXh0
L3htbCI+QXR0YWNobWVudENvdW50OjB8VG90YWxBdHRhY2htZW50U2l6ZTowPC90ZXh0PgogICAg
ICAgICAgICAgICAgPHN0YXR1c0NvZGUgY29kZT0iY29tcGxldGVkIi8+CiAgICAgICAgICAgICAg
ICA8ZWZmZWN0aXZlVGltZSB2YWx1ZT0iMjAxOTAzMTQxOTAzLTA3MDAiLz4KICAgICAgICAgICAg
ICAgIDxjb25maWRlbnRpYWxpdHlDb2RlIGNvZGU9Ik4iIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEu
MTEzODgzLjYuMSIvPgogICAgICAgICAgICAgICAgPHJlY29yZFRhcmdldCBudWxsRmxhdm9yPSJO
QSIgdHlwZUNvZGU9IlJDVCI+CiAgICAgICAgICAgICAgICAgICAgPHBhdGllbnQgY2xhc3NDb2Rl
PSJQQVQiIG51bGxGbGF2b3I9Ik5BIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHBhdGllbnRO
b25QZXJzb25MaXZpbmdTdWJqZWN0IHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9Y
TUxTY2hlbWEtaW5zdGFuY2UiIHhzaTpuaWw9InRydWUiLz4KICAgICAgICAgICAgICAgICAgICAg
ICAgPHBhdGllbnRQZXJzb24geG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNj
aGVtYS1pbnN0YW5jZSIgeHNpOm5pbD0idHJ1ZSIvPgogICAgICAgICAgICAgICAgICAgIDwvcGF0
aWVudD4KICAgICAgICAgICAgICAgIDwvcmVjb3JkVGFyZ2V0PgogICAgICAgICAgICAgICAgPGF1
dGhvciBudWxsRmxhdm9yPSJOQSIgdHlwZUNvZGU9IkFVVCI+CiAgICAgICAgICAgICAgICAgICAg
PHRpbWUgbnVsbEZsYXZvcj0iTkEiLz4KICAgICAgICAgICAgICAgICAgICA8YXNzaWduZWRBdXRo
b3IgY2xhc3NDb2RlPSJBU1NJR05FRCIgbnVsbEZsYXZvcj0iTkEiPgogICAgICAgICAgICAgICAg
ICAgICAgICA8aWQgbnVsbEZsYXZvcj0iTkEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPGFz
c2lnbmVkQXV0aG9yaW5nRGV2aWNlIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9Y
TUxTY2hlbWEtaW5zdGFuY2UiIHhzaTpuaWw9InRydWUiLz4KICAgICAgICAgICAgICAgICAgICAg
ICAgPGFzc2lnbmVkUGVyc29uIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxT
Y2hlbWEtaW5zdGFuY2UiIHhzaTpuaWw9InRydWUiLz4KICAgICAgICAgICAgICAgICAgICA8L2Fz
c2lnbmVkQXV0aG9yPgogICAgICAgICAgICAgICAgPC9hdXRob3I+CiAgICAgICAgICAgICAgICA8
Y3VzdG9kaWFuIG51bGxGbGF2b3I9Ik5BIiB0eXBlQ29kZT0iQ1NUIj4KICAgICAgICAgICAgICAg
ICAgICA8YXNzaWduZWRDdXN0b2RpYW4gY2xhc3NDb2RlPSJBU1NJR05FRCIgbnVsbEZsYXZvcj0i
TkEiPgogICAgICAgICAgICAgICAgICAgICAgICA8cmVwcmVzZW50ZWRPcmdhbml6YXRpb24gY2xh
c3NDb2RlPSJOQVQiIGRldGVybWluZXJDb2RlPSJJTlNUQU5DRSIgbnVsbEZsYXZvcj0iTkEiPgog
ICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkIG51bGxGbGF2b3I9Ik5BIi8+CiAgICAgICAg
ICAgICAgICAgICAgICAgIDwvcmVwcmVzZW50ZWRPcmdhbml6YXRpb24+CiAgICAgICAgICAgICAg
ICAgICAgPC9hc3NpZ25lZEN1c3RvZGlhbj4KICAgICAgICAgICAgICAgIDwvY3VzdG9kaWFuPgog
ICAgICAgICAgICA8L3RhcmdldD4KICAgICAgICA8L3N1YmplY3Q+CiAgICAgICAgPHN1YmplY3Qg
dHlwZUNvZGU9IlNVQkoiPgogICAgICAgICAgICA8dGFyZ2V0IGNsYXNzQ29kZT0iRE9DQ0xJTiIg
bW9vZENvZGU9IkVWTiI+CiAgICAgICAgICAgICAgICA8dGVtcGxhdGVJZCBhc3NpZ25pbmdBdXRo
b3JpdHlOYW1lPSJDRFggQ29udGVudCBUeXBlIiBleHRlbnNpb249IkNEQSIgcm9vdD0iMi4xNi44
NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjIwIi8+CiAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5n
QXV0aG9yaXR5TmFtZT0iQ0RYIE1lc3NhZ2UgSUQiIGV4dGVuc2lvbj0iMjE1ZjhiZDAtZTg0Yy1l
OTExLWE5NmEtMDA1MDU2OGM1NWE2IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAu
MSIvPgogICAgICAgICAgICAgICAgPGNvZGUgY29kZT0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42
MC4yLjEiIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuMSIgZGlzcGxheU5hbWU9Ikxh
YiBSZXBvcnQgVGVtcGxhdGUiLz4KICAgICAgICAgICAgICAgIDx0ZXh0IG1lZGlhVHlwZT0idGV4
dC94bWwiPkF0dGFjaG1lbnRDb3VudDowfFRvdGFsQXR0YWNobWVudFNpemU6MDwvdGV4dD4KICAg
ICAgICAgICAgICAgIDxzdGF0dXNDb2RlIGNvZGU9ImNvbXBsZXRlZCIvPgogICAgICAgICAgICAg
ICAgPGVmZmVjdGl2ZVRpbWUgdmFsdWU9IjIwMTkwMzIyMTQyMy0wNzAwIi8+CiAgICAgICAgICAg
ICAgICA8Y29uZmlkZW50aWFsaXR5Q29kZSBjb2RlPSJOIiBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4x
LjExMzg4My42LjEiLz4KICAgICAgICAgICAgICAgIDxyZWNvcmRUYXJnZXQgbnVsbEZsYXZvcj0i
TkEiIHR5cGVDb2RlPSJSQ1QiPgogICAgICAgICAgICAgICAgICAgIDxwYXRpZW50IGNsYXNzQ29k
ZT0iUEFUIiBudWxsRmxhdm9yPSJOQSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRpZW50
Tm9uUGVyc29uTGl2aW5nU3ViamVjdCB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEv
WE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6bmlsPSJ0cnVlIi8+CiAgICAgICAgICAgICAgICAgICAg
ICAgIDxwYXRpZW50UGVyc29uIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxT
Y2hlbWEtaW5zdGFuY2UiIHhzaTpuaWw9InRydWUiLz4KICAgICAgICAgICAgICAgICAgICA8L3Bh
dGllbnQ+CiAgICAgICAgICAgICAgICA8L3JlY29yZFRhcmdldD4KICAgICAgICAgICAgICAgIDxh
dXRob3IgbnVsbEZsYXZvcj0iTkEiIHR5cGVDb2RlPSJBVVQiPgogICAgICAgICAgICAgICAgICAg
IDx0aW1lIG51bGxGbGF2b3I9Ik5BIi8+CiAgICAgICAgICAgICAgICAgICAgPGFzc2lnbmVkQXV0
aG9yIGNsYXNzQ29kZT0iQVNTSUdORUQiIG51bGxGbGF2b3I9Ik5BIj4KICAgICAgICAgICAgICAg
ICAgICAgICAgPGlkIG51bGxGbGF2b3I9Ik5BIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxh
c3NpZ25lZEF1dGhvcmluZ0RldmljZSB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEv
WE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6bmlsPSJ0cnVlIi8+CiAgICAgICAgICAgICAgICAgICAg
ICAgIDxhc3NpZ25lZFBlcnNvbiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1M
U2NoZW1hLWluc3RhbmNlIiB4c2k6bmlsPSJ0cnVlIi8+CiAgICAgICAgICAgICAgICAgICAgPC9h
c3NpZ25lZEF1dGhvcj4KICAgICAgICAgICAgICAgIDwvYXV0aG9yPgogICAgICAgICAgICAgICAg
PGN1c3RvZGlhbiBudWxsRmxhdm9yPSJOQSIgdHlwZUNvZGU9IkNTVCI+CiAgICAgICAgICAgICAg
ICAgICAgPGFzc2lnbmVkQ3VzdG9kaWFuIGNsYXNzQ29kZT0iQVNTSUdORUQiIG51bGxGbGF2b3I9
Ik5BIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHJlcHJlc2VudGVkT3JnYW5pemF0aW9uIGNs
YXNzQ29kZT0iTkFUIiBkZXRlcm1pbmVyQ29kZT0iSU5TVEFOQ0UiIG51bGxGbGF2b3I9Ik5BIj4K
ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZCBudWxsRmxhdm9yPSJOQSIvPgogICAgICAg
ICAgICAgICAgICAgICAgICA8L3JlcHJlc2VudGVkT3JnYW5pemF0aW9uPgogICAgICAgICAgICAg
ICAgICAgIDwvYXNzaWduZWRDdXN0b2RpYW4+CiAgICAgICAgICAgICAgICA8L2N1c3RvZGlhbj4K
ICAgICAgICAgICAgPC90YXJnZXQ+CiAgICAgICAgPC9zdWJqZWN0PgogICAgICAgIDxzdWJqZWN0
IHR5cGVDb2RlPSJTVUJKIj4KICAgICAgICAgICAgPHRhcmdldCBjbGFzc0NvZGU9IkRPQ0NMSU4i
IG1vb2RDb2RlPSJFVk4iPgogICAgICAgICAgICAgICAgPHRlbXBsYXRlSWQgYXNzaWduaW5nQXV0
aG9yaXR5TmFtZT0iQ0RYIENvbnRlbnQgVHlwZSIgZXh0ZW5zaW9uPSJDREEiIHJvb3Q9IjIuMTYu
ODQwLjEuMTEzODgzLjMuMjc3LjEwMC4yMCIvPgogICAgICAgICAgICAgICAgPGlkIGFzc2lnbmlu
Z0F1dGhvcml0eU5hbWU9IkNEWCBNZXNzYWdlIElEIiBleHRlbnNpb249IjQ4OTM0NzI4LWU5NGMt
ZTkxMS1hOTZhLTAwNTA1NjhjNTVhNiIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAw
LjEiLz4KICAgICAgICAgICAgICAgIDxjb2RlIGNvZGU9IjIuMTYuODQwLjEuMTEzODgzLjMuNTEu
NjAuMi4xIiBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42LjEiIGRpc3BsYXlOYW1lPSJM
YWIgUmVwb3J0IFRlbXBsYXRlIi8+CiAgICAgICAgICAgICAgICA8dGV4dCBtZWRpYVR5cGU9InRl
eHQveG1sIj5BdHRhY2htZW50Q291bnQ6MHxUb3RhbEF0dGFjaG1lbnRTaXplOjA8L3RleHQ+CiAg
ICAgICAgICAgICAgICA8c3RhdHVzQ29kZSBjb2RlPSJjb21wbGV0ZWQiLz4KICAgICAgICAgICAg
ICAgIDxlZmZlY3RpdmVUaW1lIHZhbHVlPSIyMDE5MDMyMjE0MjYtMDcwMCIvPgogICAgICAgICAg
ICAgICAgPGNvbmZpZGVudGlhbGl0eUNvZGUgY29kZT0iTiIgY29kZVN5c3RlbT0iMi4xNi44NDAu
MS4xMTM4ODMuNi4xIi8+CiAgICAgICAgICAgICAgICA8cmVjb3JkVGFyZ2V0IG51bGxGbGF2b3I9
Ik5BIiB0eXBlQ29kZT0iUkNUIj4KICAgICAgICAgICAgICAgICAgICA8cGF0aWVudCBjbGFzc0Nv
ZGU9IlBBVCIgbnVsbEZsYXZvcj0iTkEiPgogICAgICAgICAgICAgICAgICAgICAgICA8cGF0aWVu
dE5vblBlcnNvbkxpdmluZ1N1YmplY3QgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAx
L1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOm5pbD0idHJ1ZSIvPgogICAgICAgICAgICAgICAgICAg
ICAgICA8cGF0aWVudFBlcnNvbiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1M
U2NoZW1hLWluc3RhbmNlIiB4c2k6bmlsPSJ0cnVlIi8+CiAgICAgICAgICAgICAgICAgICAgPC9w
YXRpZW50PgogICAgICAgICAgICAgICAgPC9yZWNvcmRUYXJnZXQ+CiAgICAgICAgICAgICAgICA8
YXV0aG9yIG51bGxGbGF2b3I9Ik5BIiB0eXBlQ29kZT0iQVVUIj4KICAgICAgICAgICAgICAgICAg
ICA8dGltZSBudWxsRmxhdm9yPSJOQSIvPgogICAgICAgICAgICAgICAgICAgIDxhc3NpZ25lZEF1
dGhvciBjbGFzc0NvZGU9IkFTU0lHTkVEIiBudWxsRmxhdm9yPSJOQSI+CiAgICAgICAgICAgICAg
ICAgICAgICAgIDxpZCBudWxsRmxhdm9yPSJOQSIvPgogICAgICAgICAgICAgICAgICAgICAgICA8
YXNzaWduZWRBdXRob3JpbmdEZXZpY2UgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAx
L1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOm5pbD0idHJ1ZSIvPgogICAgICAgICAgICAgICAgICAg
ICAgICA8YXNzaWduZWRQZXJzb24geG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hN
TFNjaGVtYS1pbnN0YW5jZSIgeHNpOm5pbD0idHJ1ZSIvPgogICAgICAgICAgICAgICAgICAgIDwv
YXNzaWduZWRBdXRob3I+CiAgICAgICAgICAgICAgICA8L2F1dGhvcj4KICAgICAgICAgICAgICAg
IDxjdXN0b2RpYW4gbnVsbEZsYXZvcj0iTkEiIHR5cGVDb2RlPSJDU1QiPgogICAgICAgICAgICAg
ICAgICAgIDxhc3NpZ25lZEN1c3RvZGlhbiBjbGFzc0NvZGU9IkFTU0lHTkVEIiBudWxsRmxhdm9y
PSJOQSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxyZXByZXNlbnRlZE9yZ2FuaXphdGlvbiBj
bGFzc0NvZGU9Ik5BVCIgZGV0ZXJtaW5lckNvZGU9IklOU1RBTkNFIiBudWxsRmxhdm9yPSJOQSI+
CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQgbnVsbEZsYXZvcj0iTkEiLz4KICAgICAg
ICAgICAgICAgICAgICAgICAgPC9yZXByZXNlbnRlZE9yZ2FuaXphdGlvbj4KICAgICAgICAgICAg
ICAgICAgICA8L2Fzc2lnbmVkQ3VzdG9kaWFuPgogICAgICAgICAgICAgICAgPC9jdXN0b2RpYW4+
CiAgICAgICAgICAgIDwvdGFyZ2V0PgogICAgICAgIDwvc3ViamVjdD4KICAgICAgICA8c3ViamVj
dCB0eXBlQ29kZT0iU1VCSiI+CiAgICAgICAgICAgIDx0YXJnZXQgY2xhc3NDb2RlPSJET0NDTElO
IiBtb29kQ29kZT0iRVZOIj4KICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkIGFzc2lnbmluZ0F1
dGhvcml0eU5hbWU9IkNEWCBDb250ZW50IFR5cGUiIGV4dGVuc2lvbj0iQ0RBIiByb290PSIyLjE2
Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuMjAiLz4KICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25p
bmdBdXRob3JpdHlOYW1lPSJDRFggTWVzc2FnZSBJRCIgZXh0ZW5zaW9uPSJkMjQ2MDc2Yy1mNDRj
LWU5MTEtYTk2YS0wMDUwNTY4YzU1YTYiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEw
MC4xIi8+CiAgICAgICAgICAgICAgICA8Y29kZSBjb2RlPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUx
LjYwLjIuMSIgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi4xIiBkaXNwbGF5TmFtZT0i
TGFiIFJlcG9ydCBUZW1wbGF0ZSIvPgogICAgICAgICAgICAgICAgPHRleHQgbWVkaWFUeXBlPSJ0
ZXh0L3htbCI+QXR0YWNobWVudENvdW50OjB8VG90YWxBdHRhY2htZW50U2l6ZTowPC90ZXh0Pgog
ICAgICAgICAgICAgICAgPHN0YXR1c0NvZGUgY29kZT0iY29tcGxldGVkIi8+CiAgICAgICAgICAg
ICAgICA8ZWZmZWN0aXZlVGltZSB2YWx1ZT0iMjAxOTAzMjIxNTQ2LTA3MDAiLz4KICAgICAgICAg
ICAgICAgIDxjb25maWRlbnRpYWxpdHlDb2RlIGNvZGU9Ik4iIGNvZGVTeXN0ZW09IjIuMTYuODQw
LjEuMTEzODgzLjYuMSIvPgogICAgICAgICAgICAgICAgPHJlY29yZFRhcmdldCBudWxsRmxhdm9y
PSJOQSIgdHlwZUNvZGU9IlJDVCI+CiAgICAgICAgICAgICAgICAgICAgPHBhdGllbnQgY2xhc3ND
b2RlPSJQQVQiIG51bGxGbGF2b3I9Ik5BIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHBhdGll
bnROb25QZXJzb25MaXZpbmdTdWJqZWN0IHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAw
MS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTpuaWw9InRydWUiLz4KICAgICAgICAgICAgICAgICAg
ICAgICAgPHBhdGllbnRQZXJzb24geG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hN
TFNjaGVtYS1pbnN0YW5jZSIgeHNpOm5pbD0idHJ1ZSIvPgogICAgICAgICAgICAgICAgICAgIDwv
cGF0aWVudD4KICAgICAgICAgICAgICAgIDwvcmVjb3JkVGFyZ2V0PgogICAgICAgICAgICAgICAg
PGF1dGhvciBudWxsRmxhdm9yPSJOQSIgdHlwZUNvZGU9IkFVVCI+CiAgICAgICAgICAgICAgICAg
ICAgPHRpbWUgbnVsbEZsYXZvcj0iTkEiLz4KICAgICAgICAgICAgICAgICAgICA8YXNzaWduZWRB
dXRob3IgY2xhc3NDb2RlPSJBU1NJR05FRCIgbnVsbEZsYXZvcj0iTkEiPgogICAgICAgICAgICAg
ICAgICAgICAgICA8aWQgbnVsbEZsYXZvcj0iTkEiLz4KICAgICAgICAgICAgICAgICAgICAgICAg
PGFzc2lnbmVkQXV0aG9yaW5nRGV2aWNlIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAw
MS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTpuaWw9InRydWUiLz4KICAgICAgICAgICAgICAgICAg
ICAgICAgPGFzc2lnbmVkUGVyc29uIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9Y
TUxTY2hlbWEtaW5zdGFuY2UiIHhzaTpuaWw9InRydWUiLz4KICAgICAgICAgICAgICAgICAgICA8
L2Fzc2lnbmVkQXV0aG9yPgogICAgICAgICAgICAgICAgPC9hdXRob3I+CiAgICAgICAgICAgICAg
ICA8Y3VzdG9kaWFuIG51bGxGbGF2b3I9Ik5BIiB0eXBlQ29kZT0iQ1NUIj4KICAgICAgICAgICAg
ICAgICAgICA8YXNzaWduZWRDdXN0b2RpYW4gY2xhc3NDb2RlPSJBU1NJR05FRCIgbnVsbEZsYXZv
cj0iTkEiPgogICAgICAgICAgICAgICAgICAgICAgICA8cmVwcmVzZW50ZWRPcmdhbml6YXRpb24g
Y2xhc3NDb2RlPSJOQVQiIGRldGVybWluZXJDb2RlPSJJTlNUQU5DRSIgbnVsbEZsYXZvcj0iTkEi
PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkIG51bGxGbGF2b3I9Ik5BIi8+CiAgICAg
ICAgICAgICAgICAgICAgICAgIDwvcmVwcmVzZW50ZWRPcmdhbml6YXRpb24+CiAgICAgICAgICAg
ICAgICAgICAgPC9hc3NpZ25lZEN1c3RvZGlhbj4KICAgICAgICAgICAgICAgIDwvY3VzdG9kaWFu
PgogICAgICAgICAgICA8L3RhcmdldD4KICAgICAgICA8L3N1YmplY3Q+CiAgICAgICAgPHF1ZXJ5
QWNrPgogICAgICAgICAgICA8cXVlcnlSZXNwb25zZUNvZGUgY29kZT0iT0siLz4KICAgICAgICAg
ICAgPHJlc3VsdFRvdGFsUXVhbnRpdHkgdmFsdWU9IjEzIi8+CiAgICAgICAgICAgIDxyZXN1bHRD
dXJyZW50UXVhbnRpdHkgdmFsdWU9IjEzIi8+CiAgICAgICAgICAgIDxyZXN1bHRSZW1haW5pbmdR
dWFudGl0eSB2YWx1ZT0iMCIvPgogICAgICAgIDwvcXVlcnlBY2s+CiAgICA8L2NvbnRyb2xBY3RQ
cm9jZXNzPgo8L1JDTVJfSU4wMDAwMzBVVjAxPgo=</inboundTemplate>
            <outboundTemplate encoding="base64">ewoJInN0YXR1cyI6ICIiLAoJIm1lc3NhZ2UiOiAiIiwKCSJhY2tEZXRhaWwiOiB7CgkJImFja0lk
IjogIiIsCgkJImFja1RpbWUiOiAiIiwKCQkibWVzc2FnZUlkIjogIiIsCgkJInN0YXR1cyI6ICIi
Cgl9LAoJImRvY3VtZW50cyI6IFtdCn0=</outboundTemplate>
            <inboundDataType>HL7V3</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.7.1">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.7.1">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.7.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.7.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.7.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.7.1">
            <elements/>
          </filter>
          <transportName>JavaScript Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>false</waitForPrevious>
        </connector>
        <connector version="3.7.1">
          <metaDataId>16</metaDataId>
          <name>Service Search Document</name>
          <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.7.1">
            <pluginProperties/>
            <destinationConnectorProperties version="3.7.1">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <script>logger.debug(&apos;Service Search Documents&apos;);

importPackage(Packages.ca.uvic.leadlab.cdxconnector);

try {
	var client = new WSClientDocument($(&apos;cdx.base.url&apos;), $(&apos;username&apos;), $(&apos;password&apos;), $(&apos;certPath&apos;), $(&apos;certPass&apos;));

	var effectiveTime = null;
	if ($(&apos;effectiveTime_start&apos;).length() &gt; 0 &amp;&amp; $(&apos;effectiveTime_end&apos;).length() &gt; 0) {
		effectiveTime = new DateRange(new Date($(&apos;effectiveTime_start&apos;)), true, new Date($(&apos;effectiveTime_end&apos;)), true);
	}
	
	var eventTime = null;
	if ($(&apos;eventTime_start&apos;).length() &gt; 0 &amp;&amp; $(&apos;eventTime_end&apos;).length() &gt; 0) {
		eventTime = new DateRange(new Date($(&apos;eventTime_start&apos;)), true, new Date($(&apos;eventTime_end&apos;)), true);
	}
	
	var cdxResponse = client.searchDocuments($(&apos;locationId&apos;), $(&apos;clinicId&apos;), $(&apos;documentId&apos;), effectiveTime, eventTime);
	
	return ResponseFactory.getSentResponse(cdxResponse);
} catch (e) {
	logger.error(&quot;Error on &apos;Service Search Documents&apos;: &quot; + e);
	return ResponseFactory.getErrorResponse(&quot;Error on &apos;Service Search Documents&apos;: &quot; + e)
}</script>
          </properties>
          <transformer version="3.7.1">
            <elements>
              <com.mirth.connect.plugins.mapper.MapperStep version="3.7.1">
                <name>clinicId</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <variable>clinicId</variable>
                <mapping>msg[&apos;clinicId&apos;]</mapping>
                <defaultValue>&quot;&quot;</defaultValue>
                <replacements/>
                <scope>CHANNEL</scope>
              </com.mirth.connect.plugins.mapper.MapperStep>
              <com.mirth.connect.plugins.mapper.MapperStep version="3.7.1">
                <name>documentId</name>
                <sequenceNumber>1</sequenceNumber>
                <enabled>true</enabled>
                <variable>documentId</variable>
                <mapping>msg[&apos;documentId&apos;]</mapping>
                <defaultValue>&quot;&quot;</defaultValue>
                <replacements/>
                <scope>CHANNEL</scope>
              </com.mirth.connect.plugins.mapper.MapperStep>
              <com.mirth.connect.plugins.mapper.MapperStep version="3.7.1">
                <name>effectiveTime_start</name>
                <sequenceNumber>2</sequenceNumber>
                <enabled>true</enabled>
                <variable>effectiveTime_start</variable>
                <mapping>msg[&apos;effectiveTime&apos;][&apos;start&apos;]</mapping>
                <defaultValue>&quot;&quot;</defaultValue>
                <replacements/>
                <scope>CHANNEL</scope>
              </com.mirth.connect.plugins.mapper.MapperStep>
              <com.mirth.connect.plugins.mapper.MapperStep version="3.7.1">
                <name>effectiveTime_end</name>
                <sequenceNumber>3</sequenceNumber>
                <enabled>true</enabled>
                <variable>effectiveTime_end</variable>
                <mapping>msg[&apos;effectiveTime&apos;][&apos;end&apos;]</mapping>
                <defaultValue>&quot;&quot;</defaultValue>
                <replacements/>
                <scope>CHANNEL</scope>
              </com.mirth.connect.plugins.mapper.MapperStep>
              <com.mirth.connect.plugins.mapper.MapperStep version="3.7.1">
                <name>eventTime_start</name>
                <sequenceNumber>4</sequenceNumber>
                <enabled>true</enabled>
                <variable>eventTime_start</variable>
                <mapping>msg[&apos;eventTime&apos;][&apos;start&apos;]</mapping>
                <defaultValue>&quot;&quot;</defaultValue>
                <replacements/>
                <scope>CHANNEL</scope>
              </com.mirth.connect.plugins.mapper.MapperStep>
              <com.mirth.connect.plugins.mapper.MapperStep version="3.7.1">
                <name>eventTime_end</name>
                <sequenceNumber>5</sequenceNumber>
                <enabled>true</enabled>
                <variable>eventTime_end</variable>
                <mapping>msg[&apos;eventTime&apos;][&apos;end&apos;]</mapping>
                <defaultValue>&quot;&quot;</defaultValue>
                <replacements/>
                <scope>CHANNEL</scope>
              </com.mirth.connect.plugins.mapper.MapperStep>
            </elements>
            <inboundTemplate encoding="base64">ewoJImVmZmVjdGl2ZVRpbWUiOiB7CgkJInN0YXJ0IjogIiIsCgkJImVuZCI6ICIiCgl9LAoJImV2
ZW50VGltZSI6IHsKCQkic3RhcnQiOiAiIiwKCQkiZW5kIjogIiIKCX0sCgkiY2xpbmljSWQiOiAi
IiwKCSJkb2N1bWVudElkIjogIiIKfQ==</inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>HL7V3</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.7.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.7.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.7.1">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.7.1">
                <stripNamespaces>true</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.7.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.7.1">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.7.1">
                <name>Search Documents Response</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>logger.debug(&apos;Search Documents Response&apos;);

try {
	// Store the response to be returned by the &quot;Source Connector&quot;
	responseMap.put(&apos;responseMessage&apos;, handleResponseMessage(responseStatus, responseStatusMessage, msg, function() {
		// Ack details
		tmp[&apos;ackDetail&apos;][&apos;ackId&apos;] = msg[&apos;id&apos;][&apos;@extension&apos;].toString();
		tmp[&apos;ackDetail&apos;][&apos;ackTime&apos;] = parseCDADateTime(msg[&apos;creationTime&apos;][&apos;@value&apos;].toString());
		tmp[&apos;ackDetail&apos;][&apos;messageId&apos;] = msg[&apos;acknowledgement&apos;][&apos;targetMessage&apos;][&apos;id&apos;][&apos;@extension&apos;].toString();
		tmp[&apos;ackDetail&apos;][&apos;status&apos;] = msg[&apos;controlActProcess&apos;][&apos;queryAck&apos;][&apos;queryResponseCode&apos;][&apos;@code&apos;].toString();
		
		// Payload
		for (var i = 0; i &lt; getArrayOrXmlLength(msg[&apos;controlActProcess&apos;][&apos;subject&apos;]); i++) { // Document list
			var target = msg[&apos;controlActProcess&apos;][&apos;subject&apos;][i][&apos;target&apos;];
			var document = {};
			
			document[&apos;documentId&apos;] = target[&apos;id&apos;][&apos;@extension&apos;].toString();
			
			document[&apos;template&apos;] = {};
			document[&apos;template&apos;][&apos;templateId&apos;] = target[&apos;templateId&apos;][&apos;@extension&apos;].toString();
			document[&apos;template&apos;][&apos;templateName&apos;] = target[&apos;templateId&apos;][&apos;@assigningAuthorityName&apos;].toString();
			
			document[&apos;loinc&apos;] = {};
			document[&apos;loinc&apos;][&apos;loincCode&apos;] = target[&apos;code&apos;][&apos;@code&apos;].toString();
			document[&apos;loinc&apos;][&apos;displayName&apos;] = target[&apos;code&apos;][&apos;@displayName&apos;].toString();
			
			document[&apos;effectiveTime&apos;] = parseCDADateTime(target[&apos;effectiveTime&apos;][&apos;@value&apos;].toString());
			
			tmp[&apos;documents&apos;][i] = document;
		}

		// Message status
		if (tmp[&apos;ackDetail&apos;][&apos;status&apos;] === &apos;QE&apos;) {
			tmp[&apos;message&apos;] = msg[&apos;acknowledgement&apos;][&apos;acknowledgementDetail&apos;][&apos;text&apos;].toString();
			tmp[&apos;status&apos;] = &quot;ERROR&quot;;
			
			logger.error(&apos;MessagId &apos; + tmp[&apos;ackDetail&apos;][&apos;messageId&apos;] + &apos; returned the error: &apos; + tmp[&apos;message&apos;] + &quot;&apos;&quot;);
		} else {
			tmp[&apos;status&apos;] = &quot;SUCCESS&quot;;
		}
		
		return tmp; // Return the transformed message to be converted on &apos;handleResponseMessage&apos;
	}));
	responseMap.put(&apos;responseStatus&apos;, &apos;200&apos;);
} catch(e) {
	logger.error(&quot;Error on &apos;Search Documents Response&apos;: &quot; + e);

	responseMap.put(&apos;responseMessage&apos;, createErrorMessage(e));
	responseMap.put(&apos;responseStatus&apos;, &apos;500&apos;);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64">ewoJInN0YXR1cyI6ICIiLAoJIm1lc3NhZ2UiOiAiIiwKCSJhY2tEZXRhaWwiOiB7CgkJImFja0lk
IjogIiIsCgkJImFja1RpbWUiOiAiIiwKCQkibWVzc2FnZUlkIjogIiIsCgkJInN0YXR1cyI6ICIi
Cgl9LAoJImRvY3VtZW50cyI6IFtdCn0=</outboundTemplate>
            <inboundDataType>HL7V3</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.7.1">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.7.1">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.7.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.7.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.7.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.7.1">
            <elements/>
          </filter>
          <transportName>JavaScript Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>false</waitForPrevious>
        </connector>
        <connector version="3.7.1">
          <metaDataId>11</metaDataId>
          <name>Service Get Document</name>
          <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.7.1">
            <pluginProperties/>
            <destinationConnectorProperties version="3.7.1">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>true</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <script>logger.debug(&apos;Service Get Document&apos;);

importPackage(Packages.ca.uvic.leadlab.cdxconnector);

try {
	var client = new WSClientDocument($(&apos;cdx.base.url&apos;), $(&apos;username&apos;), $(&apos;password&apos;), $(&apos;certPath&apos;), $(&apos;certPass&apos;));

	var cdxResponse = client.getDocument($(&apos;locationId&apos;), $(&apos;documentId&apos;));
	
	return ResponseFactory.getSentResponse(cdxResponse);
} catch (e) {
	logger.error(&quot;Error on &apos;Service Get Document&apos;: &quot; + e);
	return ResponseFactory.getErrorResponse(&quot;Error on &apos;Service Get Document&apos;: &quot; + e)
}
</script>
          </properties>
          <transformer version="3.7.1">
            <elements>
              <com.mirth.connect.plugins.mapper.MapperStep version="3.7.1">
                <name>documentId</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <variable>documentId</variable>
                <mapping>msg[&apos;documentId&apos;]</mapping>
                <defaultValue>&quot;&quot;</defaultValue>
                <replacements/>
                <scope>CHANNEL</scope>
              </com.mirth.connect.plugins.mapper.MapperStep>
            </elements>
            <inboundTemplate encoding="base64">ewoJImRvY3VtZW50SWQiOiAiIgp9</inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>HL7V3</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.7.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.7.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.7.1">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.7.1">
                <stripNamespaces>true</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.7.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.7.1">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.7.1">
                <name>Build Response Document</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>try {
	if (responseStatus === SENT) { // process only SENT messages
		// Document list, CONF-CDXMCR069
		for (var i = 0; i &lt; getArrayOrXmlLength(msg[&apos;controlActProcess&apos;][&apos;subject&apos;]); i++) { 
			var target = msg[&apos;controlActProcess&apos;][&apos;subject&apos;][i][&apos;target&apos;]; // CONF-CDXMCR071

			// Process the CDA Document in &apos;CDA Document Parser&apos; channel
			var chResponse = router.routeMessage(&quot;CDA Document Parser&quot;, new XML(target[&apos;text&apos;].toString())); // CONF-CDXMCR082
			
			if (chResponse.status === SENT) {
				tmp[&apos;documents&apos;][i] = JSON.parse(chResponse.message);
				tmp[&apos;documents&apos;][i][&apos;cdaXML&apos;] = target[&apos;text&apos;].toString();
			} else {
				throw &apos;Error parsing CDA Document &apos; + chResponse.statusMessage;
			}
		}
	}
} catch(e) {
	logger.error(&quot;Error on &apos;Build Response Document&apos;: &quot; + e);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.7.1">
                <name>Get Attachments Response</name>
                <sequenceNumber>1</sequenceNumber>
                <enabled>true</enabled>
                <script>try {
	if (responseStatus === SENT) { // process only SENT messages
		if (segmentExist(msg[&apos;attachmentText&apos;])) { // Attachment list, CONF-CDXMCR103
			tmp[&apos;documents&apos;][0][&apos;attachments&apos;] = [];
			for (var i = 0; i &lt; getArrayOrXmlLength(msg[&apos;attachmentText&apos;]); i++) { 
				var attachmentText = msg[&apos;attachmentText&apos;][i];

				var attachment = {};

				attachment[&apos;hash&apos;] = attachmentText[&apos;@integrityCheck&apos;].toString(); // CONF-CDXMCR105
				attachment[&apos;mediaType&apos;] = attachmentText[&apos;@mediaType&apos;].toString(); // CONF-CDXMCR107
				attachment[&apos;content&apos;] = attachmentText.toString(); // CONF-CDXMCR108

				// Attachment only has name with it is embedeed in the document
				if (tmp[&apos;documents&apos;][0][&apos;nonXMLBody&apos;][&apos;mediaType&apos;] !== &quot;text/plain&quot;) {
					attachment[&apos;reference&apos;] = tmp[&apos;documents&apos;][0][&apos;nonXMLBody&apos;][&apos;content&apos;];
				}
				
				// Save the attachment in the first and only returned document
				tmp[&apos;documents&apos;][0][&apos;attachments&apos;][i] = attachment; 
			}
		}
	}
} catch(e) {
	logger.error(&quot;Error on &apos;Get Attachments Response&apos;: &quot; + e);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.7.1">
                <name>Get Document Response</name>
                <sequenceNumber>2</sequenceNumber>
                <enabled>true</enabled>
                <script>try {
	// Store the response to be returned by the &quot;Source Connector&quot;
	responseMap.put(&apos;responseMessage&apos;, handleResponseMessage(responseStatus, responseStatusMessage, msg, function() {
		// Ack details
		tmp[&apos;ackDetail&apos;][&apos;ackId&apos;] = msg[&apos;id&apos;][&apos;@extension&apos;].toString();
		tmp[&apos;ackDetail&apos;][&apos;ackTime&apos;] = parseCDADateTime(msg[&apos;creationTime&apos;][&apos;@value&apos;].toString());
		tmp[&apos;ackDetail&apos;][&apos;messageId&apos;] = msg[&apos;acknowledgement&apos;][&apos;targetMessage&apos;][&apos;id&apos;][&apos;@extension&apos;].toString();
		tmp[&apos;ackDetail&apos;][&apos;status&apos;] = msg[&apos;controlActProcess&apos;][&apos;queryAck&apos;][&apos;queryResponseCode&apos;][&apos;@code&apos;].toString();

		// Payload set by the previous transformers

		// Message status
		if (tmp[&apos;ackDetail&apos;][&apos;status&apos;] === &apos;QE&apos;) {
			tmp[&apos;message&apos;] = msg[&apos;acknowledgement&apos;][&apos;acknowledgementDetail&apos;][&apos;text&apos;].toString();
			tmp[&apos;status&apos;] = &quot;ERROR&quot;;
			
			logger.error(&apos;MessagId &apos; + tmp[&apos;ackDetail&apos;][&apos;messageId&apos;] + &apos; returned the error: &apos; + tmp[&apos;message&apos;] + &quot;&apos;&quot;);
		} else {
			tmp[&apos;status&apos;] = &quot;SUCCESS&quot;;
		}
		
		return tmp; // Return the transformed message to be converted on &apos;handleResponseMessage&apos;
	}));
	responseMap.put(&apos;responseStatus&apos;, &apos;200&apos;);
} catch(e) {
	logger.error(&quot;Error on &apos;Get Document Response&apos;: &quot; + e);

	responseMap.put(&apos;responseMessage&apos;, createErrorMessage(e));
	responseMap.put(&apos;responseStatus&apos;, &apos;500&apos;);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64">PENsaW5pY2FsRG9jdW1lbnQgeG1sbnM9InVybjpobDctb3JnOnYzIiBjbGFzc0NvZGU9IkRPQ0NM
SU4iIG1vb2RDb2RlPSJFVk4iPjxyZWFsbUNvZGUgY29kZT0iQ0EtQkMiIC8+PHR5cGVJZCBhc3Np
Z25pbmdBdXRob3JpdHlOYW1lPSJITDcgQ0RBIFIyIiBleHRlbnNpb249IlBPQ0RfSEQwMDAwNDAi
IHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEuMyIgLz48dGVtcGxhdGVJZCBhc3NpZ25pbmdBdXRo
b3JpdHlOYW1lPSJlMmUgUmVmZXJyYWwgKFVuc3RydWN0dXJlZCkiIHJvb3Q9IjIuMTYuODQwLjEu
MTEzODgzLjMuMTgxOC4xMC4xLjUiIC8+PGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkNEWCBD
bGluaWNhbCBEb2N1bWVudCBJRCIgZXh0ZW5zaW9uPSI3ZmZhYWNhMS01MTg5LTQwNzgtYjQ0Yi1h
N2EyZDk0MWJmY2MiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC4zIiAvPjxjb2Rl
IGNvZGU9IjU3MTMzLTEiIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuMSIgY29kZVN5
c3RlbU5hbWU9IkxPSU5DIENvZGUiIGRpc3BsYXlOYW1lPSJlUmVmZXJyYWwgTm90ZSIgLz48dGl0
bGU+ZVJlZmVycmFsIE5vdGU8L3RpdGxlPjxlZmZlY3RpdmVUaW1lIHZhbHVlPSIyMDE5MDUwOTE4
NTgrMDAwMCIgLz48Y29uZmlkZW50aWFsaXR5Q29kZSBjb2RlPSJOIiBjb2RlU3lzdGVtPSIyLjE2
Ljg0MC4xLjExMzg4My41LjI1IiBjb2RlU3lzdGVtTmFtZT0iQ29uZmlkZW50aWFsaXR5IiAvPjxs
YW5ndWFnZUNvZGUgY29kZT0iZW4tQ0EiIC8+PHJlY29yZFRhcmdldCBjb250ZXh0Q29udHJvbENv
ZGU9Ik9QIiB0eXBlQ29kZT0iUkNUIj48cGF0aWVudFJvbGUgY2xhc3NDb2RlPSJQQVQiPjxpZCBh
c3NpZ25pbmdBdXRob3JpdHlOYW1lPSJCQyBQYXRpZW50IEhlYWx0aCBOdW1iZXIiIGV4dGVuc2lv
bj0iODg4ODk5OTkwNCIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuNC41MCIgLz48YWRkciB1c2U9
IkgiPjQ1NiBNYWluIFN0cmVldDxkZWxpbWl0ZXIgLz48Y2l0eT5Ub3JvbnRvPC9jaXR5PjxzdGF0
ZT5udWxsPC9zdGF0ZT48cG9zdGFsQ29kZT5NNlAgNEo0PC9wb3N0YWxDb2RlPjwvYWRkcj48dGVs
ZWNvbSB1c2U9IkgiIHZhbHVlPSJ0ZWw6NDE2LTU1NS02Nzg5IiAvPjxwYXRpZW50IGNsYXNzQ29k
ZT0iUFNOIj48bmFtZSB1c2U9IkwiPjxmYW1pbHk+SlVORTwvZmFtaWx5PjxnaXZlbj5FTERFUjwv
Z2l2ZW4+PC9uYW1lPjxhZG1pbmlzdHJhdGl2ZUdlbmRlckNvZGUgY29kZT0iRiIgLz48YmlydGhU
aW1lIHZhbHVlPSIxOTQyMDYwNiIgLz48L3BhdGllbnQ+PC9wYXRpZW50Um9sZT48L3JlY29yZFRh
cmdldD48YXV0aG9yIGNvbnRleHRDb250cm9sQ29kZT0iT1AiIHR5cGVDb2RlPSJBVVQiPjx0aW1l
IHZhbHVlPSIyMDE5MDUwOTE4NTgrMDAwMCIgLz48YXNzaWduZWRBdXRob3IgY2xhc3NDb2RlPSJB
U1NJR05FRCI+PGlkIG51bGxGbGF2b3I9Ik5BIiAvPjxhc3NpZ25lZEF1dGhvcmluZ0RldmljZT48
c29mdHdhcmVOYW1lIGNvZGU9Ik9TQ0FSU1AiIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgz
LjMuMjc3LjEuMTIiIGNvZGVTeXN0ZW1OYW1lPSJPc2NhciBTZXJ2aWNlIFByb3ZpZGVyIiBkaXNw
bGF5TmFtZT0iT3NjYXIgU2VydmljZSBQcm92aWRlciIgLz48L2Fzc2lnbmVkQXV0aG9yaW5nRGV2
aWNlPjwvYXNzaWduZWRBdXRob3I+PC9hdXRob3I+PGF1dGhvciBjb250ZXh0Q29udHJvbENvZGU9
Ik9QIiB0eXBlQ29kZT0iQVVUIj48dGltZSB2YWx1ZT0iMjAxOTA1MDkxODU4KzAwMDAiIC8+PGFz
c2lnbmVkQXV0aG9yIGNsYXNzQ29kZT0iQVNTSUdORUQiPjxpZCBhc3NpZ25pbmdBdXRob3JpdHlO
YW1lPSJCQyBNaW5pc3RyeSBQcmFjdGl0aW9uZXIgSUQiIGV4dGVuc2lvbj0iNzAwMDA1IiByb290
PSIyLjE2Ljg0MC4xLjExMzg4My4zLjQwLjIuMTEiIC8+PGFkZHIgdXNlPSJIIj5IYW1pbHRvbjxk
ZWxpbWl0ZXIgLz48Y2l0eT5IYW1pbHRvbjwvY2l0eT48c3RhdGU+T250YXJpbzwvc3RhdGU+PHBv
c3RhbENvZGU+TDBSIDRLMzwvcG9zdGFsQ29kZT48L2FkZHI+PHRlbGVjb20gdXNlPSJIIiB2YWx1
ZT0idGVsOjU1NS01NTUtNTU1NSIgLz48YXNzaWduZWRQZXJzb24gY2xhc3NDb2RlPSJQU04iIGRl
dGVybWluZXJDb2RlPSJJTlNUQU5DRSI+PG5hbWUgdXNlPSJMIj48ZmFtaWx5Pk1hcmN1czwvZmFt
aWx5PjxnaXZlbj5XZWxieTwvZ2l2ZW4+PC9uYW1lPjwvYXNzaWduZWRQZXJzb24+PC9hc3NpZ25l
ZEF1dGhvcj48L2F1dGhvcj48Y3VzdG9kaWFuIHR5cGVDb2RlPSJDU1QiPjxhc3NpZ25lZEN1c3Rv
ZGlhbiBjbGFzc0NvZGU9IkFTU0lHTkVEIj48cmVwcmVzZW50ZWRDdXN0b2RpYW5Pcmdhbml6YXRp
b24gY2xhc3NDb2RlPSJPUkciIGRldGVybWluZXJDb2RlPSJJTlNUQU5DRSI+PGlkIGFzc2lnbmlu
Z0F1dGhvcml0eU5hbWU9IkNEWCBDbGluaWMgUmVnaXN0cnkgSUQiIGV4dGVuc2lvbj0iY2R4cG9z
dHByb2Qtb3RjYSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjIiIC8+PG5hbWU+
T3NjYXIgVGVzdCBDbGluaWMgQTwvbmFtZT48L3JlcHJlc2VudGVkQ3VzdG9kaWFuT3JnYW5pemF0
aW9uPjwvYXNzaWduZWRDdXN0b2RpYW4+PC9jdXN0b2RpYW4+PGluZm9ybWF0aW9uUmVjaXBpZW50
IHR5cGVDb2RlPSJQUkNQIj48aW50ZW5kZWRSZWNpcGllbnQgY2xhc3NDb2RlPSJBU1NJR05FRCI+
PGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkJDIE1pbmlzdHJ5IFByYWN0aXRpb25lciBJRCIg
ZXh0ZW5zaW9uPSI5MzE4OCIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy40MC4yLjExIiAvPjxh
ZGRyIHVzZT0iSCI+LDxkZWxpbWl0ZXIgLz48Y2l0eT5udWxsPC9jaXR5PjxzdGF0ZT5udWxsPC9z
dGF0ZT48cG9zdGFsQ29kZT5udWxsPC9wb3N0YWxDb2RlPjwvYWRkcj48dGVsZWNvbSB1c2U9Ikgi
IHZhbHVlPSJ0ZWw6MjUwNDE0MDM3NiIgLz48aW5mb3JtYXRpb25SZWNpcGllbnQgY2xhc3NDb2Rl
PSJQU04iIGRldGVybWluZXJDb2RlPSJJTlNUQU5DRSI+PG5hbWUgdXNlPSJMIj48ZmFtaWx5Pkx1
Y2l1czwvZmFtaWx5PjxnaXZlbj5QbGlzaWhiPC9naXZlbj48L25hbWU+PC9pbmZvcm1hdGlvblJl
Y2lwaWVudD48L2ludGVuZGVkUmVjaXBpZW50PjwvaW5mb3JtYXRpb25SZWNpcGllbnQ+PGluRnVs
ZmlsbG1lbnRPZiB0eXBlQ29kZT0iRkxGUyI+PG9yZGVyIGNsYXNzQ29kZT0iRU5DIiBtb29kQ29k
ZT0iUlFPIj48aWQgZXh0ZW5zaW9uPSI4MCIgLz48L29yZGVyPjwvaW5GdWxmaWxsbWVudE9mPjxj
b21wb25lbnQgdHlwZUNvZGU9IkNPTVAiPjxub25YTUxCb2R5IGNsYXNzQ29kZT0iRE9DQk9EWSIg
bW9vZENvZGU9IkVWTiI+PHRleHQgbWVkaWFUeXBlPSJhcHBsaWNhdGlvbi9wZGYiPjxyZWZlcmVu
Y2UgdmFsdWU9ImRvY3VtZW50LnBkZiIgLz48L3RleHQ+PC9ub25YTUxCb2R5PjwvY29tcG9uZW50
PjwvQ2xpbmljYWxEb2N1bWVudD4=</inboundTemplate>
            <outboundTemplate encoding="base64">ewoJInN0YXR1cyI6ICIiLAoJIm1lc3NhZ2UiOiAiIiwKCSJhY2tEZXRhaWwiOiB7CgkJImFja0lk
IjogIiIsCgkJImFja1RpbWUiOiAiIiwKCQkibWVzc2FnZUlkIjogIiIsCgkJInN0YXR1cyI6ICIi
Cgl9LAoJImRvY3VtZW50cyI6IFtdCn0=</outboundTemplate>
            <inboundDataType>HL7V3</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.7.1">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.7.1">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.7.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.7.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.7.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.7.1">
            <elements/>
          </filter>
          <transportName>JavaScript Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>false</waitForPrevious>
        </connector>
        <connector version="3.7.1">
          <metaDataId>14</metaDataId>
          <name>Service List Clinics</name>
          <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.7.1">
            <pluginProperties/>
            <destinationConnectorProperties version="3.7.1">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>true</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <script>logger.debug(&apos;Service List Clinics&apos;);

importPackage(Packages.ca.uvic.leadlab.cdxconnector);

try {
	var client = new WSClientClinic($(&apos;cdx.base.url&apos;), $(&apos;username&apos;), $(&apos;password&apos;), $(&apos;certPath&apos;), $(&apos;certPass&apos;));
	
	var cdxResponse = client.listClinics($(&apos;locationId&apos;), $(&apos;clinicId&apos;), $(&apos;clinicName&apos;), $(&apos;clinicAddress&apos;));
	
	return ResponseFactory.getSentResponse(cdxResponse);
} catch (e) {
	logger.error(&quot;Error on &apos;Service List Clinics&apos;: &quot; + e);
	return ResponseFactory.getErrorResponse(&quot;Error on &apos;Service List Clinics&apos;: &quot; + e)
}</script>
          </properties>
          <transformer version="3.7.1">
            <elements>
              <com.mirth.connect.plugins.mapper.MapperStep version="3.7.1">
                <name>clinicId</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <variable>clinicId</variable>
                <mapping>msg[&apos;clinicId&apos;]</mapping>
                <defaultValue>&quot;&quot;</defaultValue>
                <replacements/>
                <scope>CHANNEL</scope>
              </com.mirth.connect.plugins.mapper.MapperStep>
              <com.mirth.connect.plugins.mapper.MapperStep version="3.7.1">
                <name>clinicName</name>
                <sequenceNumber>1</sequenceNumber>
                <enabled>true</enabled>
                <variable>clinicName</variable>
                <mapping>msg[&apos;clinicName&apos;]</mapping>
                <defaultValue>&quot;&quot;</defaultValue>
                <replacements/>
                <scope>CHANNEL</scope>
              </com.mirth.connect.plugins.mapper.MapperStep>
              <com.mirth.connect.plugins.mapper.MapperStep version="3.7.1">
                <name>clinicAddress</name>
                <sequenceNumber>2</sequenceNumber>
                <enabled>true</enabled>
                <variable>clinicAddress</variable>
                <mapping>msg[&apos;clinicAddress&apos;]</mapping>
                <defaultValue>&quot;&quot;</defaultValue>
                <replacements/>
                <scope>CHANNEL</scope>
              </com.mirth.connect.plugins.mapper.MapperStep>
            </elements>
            <inboundTemplate encoding="base64">ewoJImNsaW5pY0lkIjogIiIsCgkiY2xpbmljTmFtZSI6ICIiLAoJImNsaW5pY0FkZHJlc3MiOiAi
Igp9</inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>HL7V3</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.7.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.7.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.7.1">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.7.1">
                <stripNamespaces>true</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.7.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.7.1">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.7.1">
                <name>Get Clinics Response</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>try {
	if (responseStatus === SENT) { // process only SENT messages
		for (var i = 0; i &lt; getArrayOrXmlLength(msg[&apos;controlActProcess&apos;][&apos;subject&apos;]); i++) { // Clinic list, CONF-CDXPR072
			var clinic = {};
			
			var subject = msg[&apos;controlActProcess&apos;][&apos;subject&apos;][i];
			var entity = subject[&apos;registrationEvent&apos;][&apos;subject1&apos;][&apos;assignedEntity&apos;];
			
			clinic[&apos;status&apos;] = subject[&apos;registrationEvent&apos;][&apos;statusCode&apos;][&apos;@code&apos;].toString(); // CONF-CDXPR074
			clinic[&apos;name&apos;] = entity[&apos;name&apos;].toString(); // CONF-CDXPR080 
			
			// Clinic IDs, CONF-CDXPR077, CONF-CDXPR078
			clinic[&apos;ids&apos;] = [];
			for (var j = 0; j &lt; getArrayOrXmlLength(entity[&apos;id&apos;]); j++) {
				clinic[&apos;ids&apos;][j] = parseCDAId(entity[&apos;id&apos;][j]);
			}
			
			// Clinic address, CONF-CDXPR081, CONF-CDXPR082
			clinic[&apos;address&apos;] = parseCDAAddress(entity[&apos;addr&apos;]);
			
			tmp[&apos;clinics&apos;][i] = clinic;
		}
	}
} catch(e) {
	logger.error(&quot;Error on &apos;Get Clinics Response&apos;: &quot; + e);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.7.1">
                <name>Get Providers Response</name>
                <sequenceNumber>1</sequenceNumber>
                <enabled>true</enabled>
                <script>try {
	if (responseStatus === SENT) { // process only SENT messages
		for (var i = 0; i &lt; getArrayOrXmlLength(msg[&apos;controlActProcess&apos;][&apos;subject&apos;]); i++) { // Clinic list, CONF-CDXPR072
			var clinicEntity = msg[&apos;controlActProcess&apos;][&apos;subject&apos;][i][&apos;registrationEvent&apos;][&apos;subject1&apos;][&apos;assignedEntity&apos;];

			tmp[&apos;clinics&apos;][i][&apos;providers&apos;] = [];
			// Related Providers, CONF-CDXPR083
			for (var j = 0; j &lt; getArrayOrXmlLength(clinicEntity[&apos;relatedTo&apos;]); j++) {
				var provider = {};

				var entity = clinicEntity[&apos;relatedTo&apos;][j][&apos;assignedEntity&apos;];

				//if (entity[&apos;code&apos;][&apos;@code&apos;].toString() !== &apos;Provider&apos;) { // CONF-CDXPR084b
				//	continue; // TODO Provider Groups?
				//}
				
				// Provider ids, CONF-CDXPR085, CONF-CDXPR086
				provider[&apos;ids&apos;] = [];
				for (var k = 0; k &lt; getArrayOrXmlLength(entity[&apos;id&apos;]); k++) {
					provider[&apos;ids&apos;][k] = parseCDAId(entity[&apos;id&apos;][k]);
				}
			
				// Provider name, CONF-CDXPR088
				provider[&apos;name&apos;] = parseCDAName(entity[&apos;name&apos;]);

				tmp[&apos;clinics&apos;][i][&apos;providers&apos;][j] = provider;
			}
		}
	}
} catch(e) {
	logger.error(&quot;Error on &apos;Get Providers Response&apos;: &quot; + e);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.7.1">
                <name>Get Templates Response</name>
                <sequenceNumber>2</sequenceNumber>
                <enabled>true</enabled>
                <script>try {
	if (responseStatus === SENT) { // process only SENT messages
		for (var i = 0; i &lt; getArrayOrXmlLength(msg[&apos;controlActProcess&apos;][&apos;subject&apos;]); i++) { // Clinic list, CONF-CDXPR072
			var subject = msg[&apos;controlActProcess&apos;][&apos;subject&apos;][i];
			
			if (segmentExist(subject[&apos;registrationEvent&apos;][&apos;definition&apos;])) { // CONF-CDXPR092
				var definition = subject[&apos;registrationEvent&apos;][&apos;definition&apos;][&apos;actDefinition&apos;];
				
				// Consumable document templates, CONF-CDXPR094, CONF-CDXPR094b
				tmp[&apos;clinics&apos;][i][&apos;templates&apos;] = [];
				for (var j = 0; j &lt; getArrayOrXmlLength(definition[&apos;id&apos;]); j++) {
					var template = {};
					template[&apos;templateId&apos;] = definition[&apos;id&apos;][j][&apos;@extension&apos;].toString();
					template[&apos;templateName&apos;] = definition[&apos;id&apos;][j][&apos;@assigningAuthorityName&apos;].toString();

					tmp[&apos;clinics&apos;][i][&apos;templates&apos;][j] = template;
				}
			}
		}
	}
} catch(e) {
	logger.error(&quot;Error on &apos;Get Templates Response&apos;: &quot; + e);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.7.1">
                <name>List Clinics Response</name>
                <sequenceNumber>3</sequenceNumber>
                <enabled>true</enabled>
                <script>try {
	// Store the response to be returned by the &quot;Source Connector&quot;
	responseMap.put(&apos;responseMessage&apos;, handleResponseMessage(responseStatus, responseStatusMessage, msg, function() {
		// Ack details
		tmp[&apos;ackDetail&apos;][&apos;ackId&apos;] = msg[&apos;id&apos;][&apos;@extension&apos;].toString();
		tmp[&apos;ackDetail&apos;][&apos;ackTime&apos;] = parseCDADateTime(msg[&apos;creationTime&apos;][&apos;@value&apos;].toString());
		tmp[&apos;ackDetail&apos;][&apos;messageId&apos;] = msg[&apos;acknowledgement&apos;][&apos;targetMessage&apos;][&apos;id&apos;][&apos;@extension&apos;].toString();
		tmp[&apos;ackDetail&apos;][&apos;status&apos;] = msg[&apos;controlActProcess&apos;][&apos;queryAck&apos;][&apos;queryResponseCode&apos;][&apos;@code&apos;].toString();
		
		// Payload set by the previous transformers
		
		// Message status
		if (tmp[&apos;ackDetail&apos;][&apos;status&apos;] !== &apos;OK&apos;) { // OK = ok, QE = query error, NF = no results found
			tmp[&apos;message&apos;] = msg[&apos;acknowledgement&apos;][&apos;acknowledgementDetail&apos;][&apos;text&apos;].toString();
			tmp[&apos;status&apos;] = &quot;ERROR&quot;;
			
			logger.error(&apos;MessagId &apos; + tmp[&apos;ackDetail&apos;][&apos;messageId&apos;] + &apos; returned the error: &apos; + tmp[&apos;message&apos;] + &quot;&apos;&quot;);
		} else {
			tmp[&apos;status&apos;] = &quot;SUCCESS&quot;;
		}
		
		return tmp; // Return the transformed message to be converted on &apos;handleResponseMessage&apos;
	}));
	responseMap.put(&apos;responseStatus&apos;, &apos;200&apos;);
} catch(e) {
	logger.error(&quot;Error on &apos;List Clinics Response&apos;: &quot; + e);

	responseMap.put(&apos;responseMessage&apos;, createErrorMessage(e));
	responseMap.put(&apos;responseStatus&apos;, &apos;500&apos;);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64">PFBSUE1fSU40MDYxMTBVVjAxIHhtbG5zPSJ1cm46aGw3LW9yZzp2MyIgSVRTVmVyc2lvbj0iWE1M
XzEuMCI+CiAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkNsaW5pYyBMaXN0IFJlc3BvbnNl
IFdyYXBwZXIgSUQiIGV4dGVuc2lvbj0iM2IwZGNlZTgtZTYwYi00ZmI2LTgwMjMtYTYwNWNkNDAw
MzMxIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuMSIvPgogIDxjcmVhdGlvblRp
bWUgdmFsdWU9IjIwMTkwNTA5MTExOC0wNzAwIi8+CiAgPHZlcnNpb25Db2RlIGNvZGU9IjIwMTBO
b3JtYXRpdmUiLz4KICA8aW50ZXJhY3Rpb25JZCBleHRlbnNpb249IlBSUE1fSU40MDYxMTBVVjAx
IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xLjYiLz4KICA8cHJvY2Vzc2luZ0NvZGUgY29kZT0i
UCIvPgogIDxwcm9jZXNzaW5nTW9kZUNvZGUgY29kZT0iVCIvPgogIDxhY2NlcHRBY2tDb2RlIGNv
ZGU9Ik5FIi8+CiAgPHJlY2VpdmVyPgogICAgPGRldmljZSBjbGFzc0NvZGU9IkRFViIgZGV0ZXJt
aW5lckNvZGU9IklOU1RBTkNFIj4KICAgICAgPGlkIG51bGxGbGF2b3I9Ik5BIi8+CiAgICAgIDxh
c0FnZW50IGNsYXNzQ29kZT0iQUdOVCI+CiAgICAgICAgPHJlcHJlc2VudGVkT3JnYW5pemF0aW9u
IGNsYXNzQ29kZT0iT1JHIiBkZXRlcm1pbmVyQ29kZT0iSU5TVEFOQ0UiPgogICAgICAgICAgPGlk
IGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkNEWCBDbGluaWMgUmVnaXN0cnkgSUQiIGV4dGVuc2lv
bj0iY2R4cG9zdHByb2Qtb3RjYSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjIi
Lz4KICAgICAgICA8L3JlcHJlc2VudGVkT3JnYW5pemF0aW9uPgogICAgICA8L2FzQWdlbnQ+CiAg
ICA8L2RldmljZT4KICA8L3JlY2VpdmVyPgogIDxzZW5kZXI+CiAgICA8ZGV2aWNlIGNsYXNzQ29k
ZT0iREVWIiBkZXRlcm1pbmVyQ29kZT0iSU5TVEFOQ0UiPgogICAgICA8aWQgbnVsbEZsYXZvcj0i
TkEiLz4KICAgICAgPGFzQWdlbnQgY2xhc3NDb2RlPSJBR05UIj4KICAgICAgICA8cmVwcmVzZW50
ZWRPcmdhbml6YXRpb24gY2xhc3NDb2RlPSJPUkciIGRldGVybWluZXJDb2RlPSJJTlNUQU5DRSI+
CiAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQ0RYIENsaW5pYyBSZWdpc3Ry
eSBJRCIgZXh0ZW5zaW9uPSJDRFgiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC4y
Ii8+CiAgICAgICAgPC9yZXByZXNlbnRlZE9yZ2FuaXphdGlvbj4KICAgICAgPC9hc0FnZW50Pgog
ICAgPC9kZXZpY2U+CiAgPC9zZW5kZXI+CiAgPGFja25vd2xlZGdlbWVudCB0eXBlQ29kZT0iQUEi
PgogICAgPHRhcmdldE1lc3NhZ2U+CiAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJD
RFggQ2xpbmljYWwgUmVwb3NpdG9yeSBRdWVyeSBJRCIgZXh0ZW5zaW9uPSI5ZGMwMTQzMS1iMzdj
LTQ0ZDAtOWJiZC00ZDA0OTkxOTZmYTUiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEw
MC4xIi8+CiAgICA8L3RhcmdldE1lc3NhZ2U+CiAgICA8YWNrbm93bGVkZ2VtZW50RGV0YWlsPgog
ICAgICA8dGV4dD5PSzwvdGV4dD4KICAgIDwvYWNrbm93bGVkZ2VtZW50RGV0YWlsPgogIDwvYWNr
bm93bGVkZ2VtZW50PgogIDxjb250cm9sQWN0UHJvY2VzcyBjbGFzc0NvZGU9IkNBQ1QiIG1vb2RD
b2RlPSJFVk4iPgogICAgPHN1YmplY3QgdHlwZUNvZGU9IlNVQkoiPgogICAgICA8cmVnaXN0cmF0
aW9uRXZlbnQgY2xhc3NDb2RlPSJSRUciIG1vb2RDb2RlPSJFVk4iPgogICAgICAgIDxzdGF0dXND
b2RlIGNvZGU9ImFjdGl2ZSIvPgogICAgICAgIDxzdWJqZWN0MSB0eXBlQ29kZT0iU0JKIj4KICAg
ICAgICAgIDxhc3NpZ25lZEVudGl0eSBjbGFzc0NvZGU9IkFTU0lHTkVEIj4KICAgICAgICAgICAg
PGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkNEWCBDbGluaWMgUmVnaXN0cnkgSUQiIGV4dGVu
c2lvbj0iY2R4cG9zdHByb2Qtb3RjYSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAw
LjIiLz4KICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IlBPSSBDbGluaWMg
SUQiIGV4dGVuc2lvbj0iY2R4cG9zdHByb2Qtb3RjYSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMu
My4yNzcuMTAwLjIuMSIvPgogICAgICAgICAgICA8Y29kZSBjb2RlPSJDbGluaWMiLz4KICAgICAg
ICAgICAgPG5hbWUgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1p
bnN0YW5jZSIgeHNpOnR5cGU9Ik9OIj5Pc2NhciBUZXN0IENsaW5pYyBBPC9uYW1lPgogICAgICAg
ICAgICA8YWRkcj4KICAgICAgICAgICAgICA8ZGVsaW1pdGVyPjE4MTggVGVzdCBBdmU8L2RlbGlt
aXRlcj4KICAgICAgICAgICAgICA8Y2l0eT5LZWxvd25hPC9jaXR5PgogICAgICAgICAgICAgIDxz
dGF0ZT5Ccml0aXNoIENvbHVtYmlhPC9zdGF0ZT4KICAgICAgICAgICAgICA8Y291bnRyeT5DYW5h
ZGE8L2NvdW50cnk+CiAgICAgICAgICAgICAgPHBvc3RhbENvZGU+VjFWMVYxPC9wb3N0YWxDb2Rl
PgogICAgICAgICAgICA8L2FkZHI+CiAgICAgICAgICAgIDxyZWxhdGVkVG8gdHlwZUNvZGU9IlBB
UlQiPgogICAgICAgICAgICAgIDxhc3NpZ25lZEVudGl0eSBjbGFzc0NvZGU9IkFTU0lHTkVEIj4K
ICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJCQyBNaW5pc3RyeSBQ
cmFjdGl0aW9uZXIgSUQiIGV4dGVuc2lvbj0iOTMxODgiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgz
LjMuNDAuMi4xMSIvPgogICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9
IklIQSBNZWRpdGVjaCBJRCIgZXh0ZW5zaW9uPSJQTElTSUhMVSIgcm9vdD0iMi4xNi44NDAuMS4x
MTM4ODMuMy4yNzcuMS42MSIvPgogICAgICAgICAgICAgICAgPGNvZGUgY29kZT0iUHJvdmlkZXIi
Lz4KICAgICAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgICAgICA8cHJlZml4PkRyLjwv
cHJlZml4PgogICAgICAgICAgICAgICAgICA8ZmFtaWx5PlBsaXNpaGI8L2ZhbWlseT4KICAgICAg
ICAgICAgICAgICAgPGdpdmVuPkx1Y2l1czwvZ2l2ZW4+CiAgICAgICAgICAgICAgICA8L25hbWU+
CiAgICAgICAgICAgICAgPC9hc3NpZ25lZEVudGl0eT4KICAgICAgICAgICAgICA8cXVhbGlmaWVk
RW50aXR5IHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFu
Y2UiIHhzaTpuaWw9InRydWUiLz4KICAgICAgICAgICAgPC9yZWxhdGVkVG8+CiAgICAgICAgICAg
IDxyZWxhdGVkVG8gdHlwZUNvZGU9IlBBUlQiPgogICAgICAgICAgICAgIDxhc3NpZ25lZEVudGl0
eSBjbGFzc0NvZGU9IkFTU0lHTkVEIj4KICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRo
b3JpdHlOYW1lPSJCQyBNaW5pc3RyeSBQcmFjdGl0aW9uZXIgSUQiIGV4dGVuc2lvbj0iOTMxOTAi
IHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuNDAuMi4xMSIvPgogICAgICAgICAgICAgICAgPGlk
IGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IklIQSBNZWRpdGVjaCBJRCIgZXh0ZW5zaW9uPSJQTElT
SUhBQSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMS42MSIvPgogICAgICAgICAgICAg
ICAgPGNvZGUgY29kZT0iUHJvdmlkZXIiLz4KICAgICAgICAgICAgICAgIDxuYW1lPgogICAgICAg
ICAgICAgICAgICA8cHJlZml4PkRyLjwvcHJlZml4PgogICAgICAgICAgICAgICAgICA8ZmFtaWx5
PlBsaXNpaGQ8L2ZhbWlseT4KICAgICAgICAgICAgICAgICAgPGdpdmVuPkFhcm9uPC9naXZlbj4K
ICAgICAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgICA8L2Fzc2lnbmVkRW50aXR5Pgog
ICAgICAgICAgICAgIDxxdWFsaWZpZWRFbnRpdHkgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9y
Zy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOm5pbD0idHJ1ZSIvPgogICAgICAgICAgICA8
L3JlbGF0ZWRUbz4KICAgICAgICAgICAgPHJlbGF0ZWRUbyB0eXBlQ29kZT0iUEFSVCI+CiAgICAg
ICAgICAgICAgPGFzc2lnbmVkRW50aXR5IGNsYXNzQ29kZT0iQVNTSUdORUQiPgogICAgICAgICAg
ICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkJDIE1pbmlzdHJ5IFByYWN0aXRpb25l
ciBJRCIgZXh0ZW5zaW9uPSI5MzE5MyIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy40MC4yLjEx
Ii8+CiAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iSUhBIE1lZGl0
ZWNoIElEIiBleHRlbnNpb249IlBMSVNJSE1JIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3
Ny4xLjYxIi8+CiAgICAgICAgICAgICAgICA8Y29kZSBjb2RlPSJQcm92aWRlciIvPgogICAgICAg
ICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgICAgIDxwcmVmaXg+RHIuPC9wcmVmaXg+CiAg
ICAgICAgICAgICAgICAgIDxmYW1pbHk+UGxpc2loZjwvZmFtaWx5PgogICAgICAgICAgICAgICAg
ICA8Z2l2ZW4+TWlrZWw8L2dpdmVuPgogICAgICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAg
ICAgIDwvYXNzaWduZWRFbnRpdHk+CiAgICAgICAgICAgICAgPHF1YWxpZmllZEVudGl0eSB4bWxu
czp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6bmls
PSJ0cnVlIi8+CiAgICAgICAgICAgIDwvcmVsYXRlZFRvPgogICAgICAgICAgICA8cmVsYXRlZFRv
IHR5cGVDb2RlPSJQQVJUIj4KICAgICAgICAgICAgICA8YXNzaWduZWRFbnRpdHkgY2xhc3NDb2Rl
PSJBU1NJR05FRCI+CiAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0i
QkMgTWluaXN0cnkgUHJhY3RpdGlvbmVyIElEIiBleHRlbnNpb249IjkzMTk0IiByb290PSIyLjE2
Ljg0MC4xLjExMzg4My4zLjQwLjIuMTEiLz4KICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdB
dXRob3JpdHlOYW1lPSJJSEEgTWVkaXRlY2ggSUQiIGV4dGVuc2lvbj0iUExJU0lITk8iIHJvb3Q9
IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEuNjEiLz4KICAgICAgICAgICAgICAgIDxjb2RlIGNv
ZGU9IlByb3ZpZGVyIi8+CiAgICAgICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICAgICAg
PHByZWZpeD5Eci48L3ByZWZpeD4KICAgICAgICAgICAgICAgICAgPGZhbWlseT5QbGlzaWhnPC9m
YW1pbHk+CiAgICAgICAgICAgICAgICAgIDxnaXZlbj5Ob2VsPC9naXZlbj4KICAgICAgICAgICAg
ICAgIDwvbmFtZT4KICAgICAgICAgICAgICA8L2Fzc2lnbmVkRW50aXR5PgogICAgICAgICAgICAg
IDxxdWFsaWZpZWRFbnRpdHkgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNj
aGVtYS1pbnN0YW5jZSIgeHNpOm5pbD0idHJ1ZSIvPgogICAgICAgICAgICA8L3JlbGF0ZWRUbz4K
ICAgICAgICAgICAgPHJlbGF0ZWRUbyB0eXBlQ29kZT0iUEFSVCI+CiAgICAgICAgICAgICAgPGFz
c2lnbmVkRW50aXR5IGNsYXNzQ29kZT0iQVNTSUdORUQiPgogICAgICAgICAgICAgICAgPGlkIGFz
c2lnbmluZ0F1dGhvcml0eU5hbWU9IkJDIE1pbmlzdHJ5IFByYWN0aXRpb25lciBJRCIgZXh0ZW5z
aW9uPSI5MzE5NSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy40MC4yLjExIi8+CiAgICAgICAg
ICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iSUhBIE1lZGl0ZWNoIElEIiBleHRl
bnNpb249IlBMSVNJSEhPIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xLjYxIi8+CiAg
ICAgICAgICAgICAgICA8Y29kZSBjb2RlPSJQcm92aWRlciIvPgogICAgICAgICAgICAgICAgPG5h
bWU+CiAgICAgICAgICAgICAgICAgIDxwcmVmaXg+RHIuPC9wcmVmaXg+CiAgICAgICAgICAgICAg
ICAgIDxmYW1pbHk+UGxpc2loaDwvZmFtaWx5PgogICAgICAgICAgICAgICAgICA8Z2l2ZW4+SG9t
ZXI8L2dpdmVuPgogICAgICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICAgIDwvYXNzaWdu
ZWRFbnRpdHk+CiAgICAgICAgICAgICAgPHF1YWxpZmllZEVudGl0eSB4bWxuczp4c2k9Imh0dHA6
Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6bmlsPSJ0cnVlIi8+CiAg
ICAgICAgICAgIDwvcmVsYXRlZFRvPgogICAgICAgICAgICA8cmVsYXRlZFRvIHR5cGVDb2RlPSJQ
QVJUIj4KICAgICAgICAgICAgICA8YXNzaWduZWRFbnRpdHkgY2xhc3NDb2RlPSJBU1NJR05FRCI+
CiAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQkMgTWluaXN0cnkg
UHJhY3RpdGlvbmVyIElEIiBleHRlbnNpb249Ijk0NzIyIiByb290PSIyLjE2Ljg0MC4xLjExMzg4
My4zLjQwLjIuMTEiLz4KICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1l
PSJJSEEgTWVkaXRlY2ggSUQiIGV4dGVuc2lvbj0iUExJU0lIR1IiIHJvb3Q9IjIuMTYuODQwLjEu
MTEzODgzLjMuMjc3LjEuNjEiLz4KICAgICAgICAgICAgICAgIDxjb2RlIGNvZGU9IlByb3ZpZGVy
Ii8+CiAgICAgICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICAgICAgPHByZWZpeD5Eci48
L3ByZWZpeD4KICAgICAgICAgICAgICAgICAgPGZhbWlseT5QbGlzaWhxPC9mYW1pbHk+CiAgICAg
ICAgICAgICAgICAgIDxnaXZlbj5HcmFudDwvZ2l2ZW4+CiAgICAgICAgICAgICAgICA8L25hbWU+
CiAgICAgICAgICAgICAgPC9hc3NpZ25lZEVudGl0eT4KICAgICAgICAgICAgICA8cXVhbGlmaWVk
RW50aXR5IHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFu
Y2UiIHhzaTpuaWw9InRydWUiLz4KICAgICAgICAgICAgPC9yZWxhdGVkVG8+CiAgICAgICAgICAg
IDxyZWxhdGVkVG8gdHlwZUNvZGU9IlBBUlQiPgogICAgICAgICAgICAgIDxhc3NpZ25lZEVudGl0
eSBjbGFzc0NvZGU9IkFTU0lHTkVEIj4KICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRo
b3JpdHlOYW1lPSJJSEEgTWVkaXRlY2ggSUQiIGV4dGVuc2lvbj0iUExJRiIgcm9vdD0iMi4xNi44
NDAuMS4xMTM4ODMuMy4yNzcuMS42MSIvPgogICAgICAgICAgICAgICAgPGNvZGUgY29kZT0iUHJv
dmlkZXIiLz4KICAgICAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgICAgICA8cHJlZml4
PkRyPC9wcmVmaXg+CiAgICAgICAgICAgICAgICAgIDxmYW1pbHk+UGxpczwvZmFtaWx5PgogICAg
ICAgICAgICAgICAgICA8Z2l2ZW4+RmFtaWx5PC9naXZlbj4KICAgICAgICAgICAgICAgIDwvbmFt
ZT4KICAgICAgICAgICAgICA8L2Fzc2lnbmVkRW50aXR5PgogICAgICAgICAgICAgIDxxdWFsaWZp
ZWRFbnRpdHkgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0
YW5jZSIgeHNpOm5pbD0idHJ1ZSIvPgogICAgICAgICAgICA8L3JlbGF0ZWRUbz4KICAgICAgICAg
IDwvYXNzaWduZWRFbnRpdHk+CiAgICAgICAgICA8cXVhbGlmaWVkRW50aXR5IHhtbG5zOnhzaT0i
aHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTpuaWw9InRydWUi
Lz4KICAgICAgICA8L3N1YmplY3QxPgogICAgICAgIDxjdXN0b2RpYW4gdHlwZUNvZGU9IkNTVCI+
CiAgICAgICAgICA8YXNzaWduZWRFbnRpdHkgY2xhc3NDb2RlPSJBU1NJR05FRCI+CiAgICAgICAg
ICAgIDxpZCBudWxsRmxhdm9yPSJOQSIvPgogICAgICAgICAgICA8YXNzaWduZWREZXZpY2UgeG1s
bnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOm5p
bD0idHJ1ZSIvPgogICAgICAgICAgICA8YXNzaWduZWRPcmdhbml6YXRpb24geG1sbnM6eHNpPSJo
dHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOm5pbD0idHJ1ZSIv
PgogICAgICAgICAgICA8YXNzaWduZWRQZXJzb24geG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9y
Zy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOm5pbD0idHJ1ZSIvPgogICAgICAgICAgPC9h
c3NpZ25lZEVudGl0eT4KICAgICAgICA8L2N1c3RvZGlhbj4KICAgICAgICA8ZGVmaW5pdGlvbiB0
eXBlQ29kZT0iSU5TVCI+CiAgICAgICAgICA8dGVtcGxhdGVJZCBhc3NpZ25pbmdBdXRob3JpdHlO
YW1lPSJEb2N1bWVudCBUZW1wbGF0ZSBPSUQiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3
LjEwMC40MCIvPgogICAgICAgICAgPGFjdERlZmluaXRpb24gY2xhc3NDb2RlPSJJTkZPIiBtb29k
Q29kZT0iREVGIj4KICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkFkbWl0
IE5vdGlmaWNhdGlvbiBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUx
LjYwLjIuNyIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAg
ICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkFuYXRvbWljIFBhdGhvbG9neSBSZXBv
cnQgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjIiIHJv
b3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgIDxpZCBh
c3NpZ25pbmdBdXRob3JpdHlOYW1lPSJDb25zdWx0YXRpb24gTm90ZSIgZXh0ZW5zaW9uPSIyLjE2
Ljg0MC4xLjExMzg4My4xMC4yMC40IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAu
NDAuMSIvPgogICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iRGlhZ25vc3Rp
YyBJbWFnaW5nIFJlcG9ydCBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4z
LjUxLjYwLjIuNSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAg
ICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkRpc2NoYXJnZSBOb3RpZmljYXRp
b24gVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjYiIHJv
b3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgIDxpZCBh
c3NpZ25pbmdBdXRob3JpdHlOYW1lPSJEaXNjaGFyZ2UgU3VtbWFyeSBUZW1wbGF0ZSIgZXh0ZW5z
aW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuNCIgcm9vdD0iMi4xNi44NDAuMS4xMTM4
ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5h
bWU9ImUyZSBHZW5lcmljIEVwaXNvZGljIERvY3VtZW50IiBleHRlbnNpb249IjIuMTYuODQwLjEu
MTEzODgzLjMuMTgxOC4xMC4xLjIiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40
MC4xIi8+CiAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJlMmUgR2VuZXJp
YyBVbnN0cnVjdHVyZWQgUmVmZXJyYWwiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy4x
ODE4LjEwLjEuNSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAg
ICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9ImUyZSBVbnN0cnVjdHVyZWQgRG9j
dW1lbnQiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy4xODE4LjEwLjEuNCIgcm9vdD0i
Mi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgPGlkIGFzc2ln
bmluZ0F1dGhvcml0eU5hbWU9Ikhpc3RvcnkgYW5kIFBoeXNpY2FsIE5vdGUiIGV4dGVuc2lvbj0i
Mi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMiIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcu
MTAwLjQwLjEiLz4KICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkxhYiBS
ZXBvcnQgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjEi
IHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgIDxp
ZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJPcGVyYXRpdmUgTm90ZSIgZXh0ZW5zaW9uPSIyLjE2
Ljg0MC4xLjExMzg4My4xMC4yMC43IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAu
NDAuMSIvPgogICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iUHJvY2VkdXJl
IE5vdGUgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjMi
IHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgIDxp
ZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJQcm9ncmVzcyBOb3RlIiBleHRlbnNpb249IjIuMTYu
ODQwLjEuMTEzODgzLjEwLjIwLjIxIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAu
NDAuMSIvPgogICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iVW5zdHJ1Y3R1
cmVkIFJlcG9ydCBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4x
OSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAg
PGNvZGUgbnVsbEZsYXZvcj0iVU5LIi8+CiAgICAgICAgICA8L2FjdERlZmluaXRpb24+CiAgICAg
ICAgPC9kZWZpbml0aW9uPgogICAgICA8L3JlZ2lzdHJhdGlvbkV2ZW50PgogICAgPC9zdWJqZWN0
PgogICAgPHF1ZXJ5QWNrPgogICAgICA8cXVlcnlJZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJD
RFggQ2xpbmljYWwgUmVwb3NpdG9yeSBRdWVyeSBJRCIgZXh0ZW5zaW9uPSI5ZGMwMTQzMS1iMzdj
LTQ0ZDAtOWJiZC00ZDA0OTkxOTZmYTUiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEw
MC4xIi8+CiAgICAgIDxzdGF0dXNDb2RlIGNvZGU9ImRlbGl2ZXJlZFJlc3BvbnNlIi8+CiAgICAg
IDxxdWVyeVJlc3BvbnNlQ29kZSBjb2RlPSJPSyIvPgogICAgICA8cmVzdWx0VG90YWxRdWFudGl0
eSB2YWx1ZT0iMSIvPgogICAgICA8cmVzdWx0Q3VycmVudFF1YW50aXR5IHZhbHVlPSIxIi8+CiAg
ICAgIDxyZXN1bHRSZW1haW5pbmdRdWFudGl0eSB2YWx1ZT0iMCIvPgogICAgPC9xdWVyeUFjaz4K
ICA8L2NvbnRyb2xBY3RQcm9jZXNzPgo8L1BSUE1fSU40MDYxMTBVVjAxPgo=</inboundTemplate>
            <outboundTemplate encoding="base64">ewoJInN0YXR1cyI6ICIiLAoJIm1lc3NhZ2UiOiAiIiwKCSJhY2tEZXRhaWwiOnsKCQkiYWNrSWQi
OiAiIiwKCQkiYWNrVGltZSI6ICIiLAoJCSJtZXNzYWdlSWQiOiAiIiwKCQkic3RhdHVzIjogIiIK
CX0sCgkiY2xpbmljcyI6W10KfQ==</outboundTemplate>
            <inboundDataType>HL7V3</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.7.1">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.7.1">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.7.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.7.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.7.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.7.1">
            <elements/>
          </filter>
          <transportName>JavaScript Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>false</waitForPrevious>
        </connector>
        <connector version="3.7.1">
          <metaDataId>15</metaDataId>
          <name>Service List Providers</name>
          <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.7.1">
            <pluginProperties/>
            <destinationConnectorProperties version="3.7.1">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>true</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <script>logger.debug(&apos;Service List Providers&apos;);

importPackage(Packages.ca.uvic.leadlab.cdxconnector);

try {
	var client = new WSClientProvider($(&apos;cdx.base.url&apos;), $(&apos;username&apos;), $(&apos;password&apos;), $(&apos;certPath&apos;), $(&apos;certPass&apos;));

	var cdxResponse = client.listProviders($(&apos;locationId&apos;), $(&quot;clinicId&quot;), $(&quot;providerId&quot;), $(&quot;providerName&quot;));
	
	return ResponseFactory.getSentResponse(cdxResponse);
} catch (e) {
	logger.error(&quot;Error on &apos;Service List Providers&apos;: &quot; + e);
	return ResponseFactory.getErrorResponse(&quot;Error on &apos;Service List Providers&apos;: &quot; + e)
}</script>
          </properties>
          <transformer version="3.7.1">
            <elements>
              <com.mirth.connect.plugins.mapper.MapperStep version="3.7.1">
                <name>clinicId</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <variable>clinicId</variable>
                <mapping>msg[&apos;clinicId&apos;]</mapping>
                <defaultValue>&quot;&quot;</defaultValue>
                <replacements/>
                <scope>CHANNEL</scope>
              </com.mirth.connect.plugins.mapper.MapperStep>
              <com.mirth.connect.plugins.mapper.MapperStep version="3.7.1">
                <name>providerId</name>
                <sequenceNumber>1</sequenceNumber>
                <enabled>true</enabled>
                <variable>providerId</variable>
                <mapping>msg[&apos;providerId&apos;]</mapping>
                <defaultValue>&quot;&quot;</defaultValue>
                <replacements/>
                <scope>CHANNEL</scope>
              </com.mirth.connect.plugins.mapper.MapperStep>
              <com.mirth.connect.plugins.mapper.MapperStep version="3.7.1">
                <name>providerName</name>
                <sequenceNumber>2</sequenceNumber>
                <enabled>true</enabled>
                <variable>providerName</variable>
                <mapping>msg[&apos;providerName&apos;]</mapping>
                <defaultValue>&quot;&quot;</defaultValue>
                <replacements/>
                <scope>CHANNEL</scope>
              </com.mirth.connect.plugins.mapper.MapperStep>
            </elements>
            <inboundTemplate encoding="base64">ewoJImNsaW5pY0lkIjogIiIsCgkicHJvdmlkZXJJZCI6ICIiLAoJInByb3ZpZGVyTmFtZSI6ICIi
Cn0=</inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>HL7V3</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.7.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.7.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.7.1">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.7.1">
                <stripNamespaces>true</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.7.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.7.1">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.7.1">
                <name>Get Providers Response</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>try {
	if (responseStatus === SENT) { // process only SENT messages
		for (var i = 0; i &lt; getArrayOrXmlLength(msg[&apos;controlActProcess&apos;][&apos;subject&apos;]); i++) { // Providers list, CONF-CDXPR023
			var provider = {};
			
			var subject = msg[&apos;controlActProcess&apos;][&apos;subject&apos;][i];
			var entity = subject[&apos;registrationEvent&apos;][&apos;subject1&apos;][&apos;assignedEntity&apos;];

			provider[&apos;status&apos;] = subject[&apos;registrationEvent&apos;][&apos;statusCode&apos;][&apos;@code&apos;].toString(); // CONF-CDXPR025

			//if (entity[&apos;code&apos;][&apos;@code&apos;].toString() !== &apos;Provider&apos;) { // CONF-CDXPR030
			//	continue; // TODO Provider Groups?
			//}

			// Provider ids, CONF-CDXPR029a, CONFCDXPR029b
			provider[&apos;ids&apos;] = [];
			for (var j = 0; j &lt; getArrayOrXmlLength(entity[&apos;id&apos;]); j++) {
				provider[&apos;ids&apos;][j] = parseCDAId(entity[&apos;id&apos;][j]);
			}

			// Provider name, CONF-CDXPR030
			provider[&apos;name&apos;] = parseCDAName(entity[&apos;name&apos;]);

			tmp[&apos;providers&apos;][i] = provider;
		}
	}
} catch(e) {
	logger.error(&quot;Error on &apos;Get Providers Response&apos;: &quot; + e);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.7.1">
                <name>Get Clinics Response</name>
                <sequenceNumber>1</sequenceNumber>
                <enabled>true</enabled>
                <script>try {
	if (responseStatus === SENT) { // process only SENT messages
		for (var i = 0; i &lt; getArrayOrXmlLength(msg[&apos;controlActProcess&apos;][&apos;subject&apos;]); i++) { // Providers list, CONF-CDXPR023
			var providerEntity = msg[&apos;controlActProcess&apos;][&apos;subject&apos;][i][&apos;registrationEvent&apos;][&apos;subject1&apos;][&apos;assignedEntity&apos;];

			tmp[&apos;providers&apos;][i][&apos;clinics&apos;] = [];
			// Clinics list, CONF-CDXPR034, CONF-CDXPR035
			for (var j = 0; j &lt; getArrayOrXmlLength(providerEntity[&apos;performance&apos;][&apos;actDefinitionOrEvent&apos;][&apos;location&apos;]); j++) {
				var clinic = {};

				var entity = providerEntity[&apos;performance&apos;][&apos;actDefinitionOrEvent&apos;][&apos;location&apos;][j][&apos;serviceDeliveryLocation&apos;];

				// Clinic IDs, CONF-CDXPR036, CONF-CDXPR037
				clinic[&apos;ids&apos;] = [];
				for (var k = 0; k &lt; getArrayOrXmlLength(entity[&apos;id&apos;]); k++) {
					clinic[&apos;ids&apos;][k] = parseCDAId(entity[&apos;id&apos;][k]);
				}
				
				// Clinic address, CONF-CDXPR039, CDXPR040
				clinic[&apos;address&apos;] = parseCDAAddress(entity[&apos;addr&apos;]);

				clinic[&apos;name&apos;] = entity[&apos;location&apos;][&apos;name&apos;].toString(); // CONF-CDXPR042

				tmp[&apos;providers&apos;][i][&apos;clinics&apos;][j] = clinic;
			}
		}
	}
} catch(e) {
	logger.error(&quot;Error on &apos;Get Clinics Response&apos;: &quot; + e);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.7.1">
                <name>List Providers Response</name>
                <sequenceNumber>2</sequenceNumber>
                <enabled>true</enabled>
                <script>try {
	// Store the response to be returned by the &quot;Source Connector&quot;
	responseMap.put(&apos;responseMessage&apos;, handleResponseMessage(responseStatus, responseStatusMessage, msg, function() {
		// Ack details
		tmp[&apos;ackDetail&apos;][&apos;ackId&apos;] = msg[&apos;id&apos;][&apos;@extension&apos;].toString();
		tmp[&apos;ackDetail&apos;][&apos;ackTime&apos;] = parseCDADateTime(msg[&apos;creationTime&apos;][&apos;@value&apos;].toString());
		tmp[&apos;ackDetail&apos;][&apos;messageId&apos;] = msg[&apos;acknowledgement&apos;][&apos;targetMessage&apos;][&apos;id&apos;][&apos;@extension&apos;].toString();
		tmp[&apos;ackDetail&apos;][&apos;status&apos;] = msg[&apos;controlActProcess&apos;][&apos;queryAck&apos;][&apos;queryResponseCode&apos;][&apos;@code&apos;].toString();
		
		// Payload set by the previous transformers

		// Message status
		if (tmp[&apos;ackDetail&apos;][&apos;status&apos;] !== &apos;OK&apos;) { // OK = ok, QE = query error, NF = no results found
			tmp[&apos;message&apos;] = msg[&apos;acknowledgement&apos;][&apos;acknowledgementDetail&apos;][&apos;text&apos;].toString();
			tmp[&apos;status&apos;] = &quot;ERROR&quot;;
			
			logger.error(&apos;MessagId &apos; + tmp[&apos;ackDetail&apos;][&apos;messageId&apos;] + &apos; returned the error: &apos; + tmp[&apos;message&apos;] + &quot;&apos;&quot;);
		} else {
			tmp[&apos;status&apos;] = &quot;SUCCESS&quot;;
		}
		
		return tmp; // Return the transformed message to be converted on &apos;handleResponseMessage&apos;
	}));
	responseMap.put(&apos;responseStatus&apos;, &apos;200&apos;);
} catch(e) {
	logger.error(&quot;Error on &apos;List Providers Response&apos;: &quot; + e);

	responseMap.put(&apos;responseMessage&apos;, createErrorMessage(e));
	responseMap.put(&apos;responseStatus&apos;, &apos;500&apos;);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64">PFBSUE1fSU4zMDYwMTFVViB4bWxucz0idXJuOmhsNy1vcmc6djMiIHhtbG5zOm5zMj0idXJuOmJj
Y2R4IiBJVFNWZXJzaW9uPSJYTUxfMS4wIj4KICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0i
UHJvdmlkZXIgRGV0YWlscyBSZXNwb25zZSBXcmFwcGVyIElEIiBleHRlbnNpb249ImM0ZDBlNTc4
LTdjNjctNGZkZC04ZjMwLWU0ZWE2YWIxZmFjMSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4y
NzcuMTAwLjEiLz4KICA8Y3JlYXRpb25UaW1lIHZhbHVlPSIyMDE5MDUwOTExMjUtMDcwMCIvPgog
IDx2ZXJzaW9uQ29kZSBjb2RlPSIyMDEwTm9ybWF0aXZlIi8+CiAgPGludGVyYWN0aW9uSWQgZXh0
ZW5zaW9uPSJQUlBNX0lOMzA2MDExVVYiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEuNiIvPgog
IDxwcm9jZXNzaW5nQ29kZSBjb2RlPSJQIi8+CiAgPHByb2Nlc3NpbmdNb2RlQ29kZSBjb2RlPSJU
Ii8+CiAgPGFjY2VwdEFja0NvZGUgY29kZT0iTkUiLz4KICA8cmVjZWl2ZXI+CiAgICA8ZGV2aWNl
IGNsYXNzQ29kZT0iREVWIiBkZXRlcm1pbmVyQ29kZT0iSU5TVEFOQ0UiPgogICAgICA8aWQgbnVs
bEZsYXZvcj0iTkEiLz4KICAgICAgPGFzQWdlbnQgY2xhc3NDb2RlPSJBR05UIj4KICAgICAgICA8
cmVwcmVzZW50ZWRPcmdhbml6YXRpb24gY2xhc3NDb2RlPSJPUkciIGRldGVybWluZXJDb2RlPSJJ
TlNUQU5DRSI+CiAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQ0RYIENsaW5p
YyBSZWdpc3RyeSBJRCIgZXh0ZW5zaW9uPSJjZHhwb3N0cHJvZC1vdGNhIiByb290PSIyLjE2Ljg0
MC4xLjExMzg4My4zLjI3Ny4xMDAuMiIvPgogICAgICAgIDwvcmVwcmVzZW50ZWRPcmdhbml6YXRp
b24+CiAgICAgIDwvYXNBZ2VudD4KICAgIDwvZGV2aWNlPgogIDwvcmVjZWl2ZXI+CiAgPHNlbmRl
cj4KICAgIDxkZXZpY2UgY2xhc3NDb2RlPSJERVYiIGRldGVybWluZXJDb2RlPSJJTlNUQU5DRSI+
CiAgICAgIDxpZCBudWxsRmxhdm9yPSJOQSIvPgogICAgICA8YXNBZ2VudCBjbGFzc0NvZGU9IkFH
TlQiPgogICAgICAgIDxyZXByZXNlbnRlZE9yZ2FuaXphdGlvbiBjbGFzc0NvZGU9Ik9SRyIgZGV0
ZXJtaW5lckNvZGU9IklOU1RBTkNFIj4KICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlO
YW1lPSJDRFggQ2xpbmljIFJlZ2lzdHJ5IElEIiBleHRlbnNpb249IkNEWCIgcm9vdD0iMi4xNi44
NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjIiLz4KICAgICAgICA8L3JlcHJlc2VudGVkT3JnYW5pemF0
aW9uPgogICAgICA8L2FzQWdlbnQ+CiAgICA8L2RldmljZT4KICA8L3NlbmRlcj4KICA8YWNrbm93
bGVkZ2VtZW50IHR5cGVDb2RlPSJBQSI+CiAgICA8dGFyZ2V0TWVzc2FnZT4KICAgICAgPGlkIGFz
c2lnbmluZ0F1dGhvcml0eU5hbWU9IkNEWCBQcm92aWRlciBSZXBvc2l0b3J5IFF1ZXJ5IElEIiBl
eHRlbnNpb249ImYyNGExNDI5LWFjZWItNDUzYi1iY2JlLTEyZTZhMGNkNDQwOSIgcm9vdD0iMi4x
Ni44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjEiLz4KICAgIDwvdGFyZ2V0TWVzc2FnZT4KICAgIDxh
Y2tub3dsZWRnZW1lbnREZXRhaWw+CiAgICAgIDx0ZXh0Pk9LPC90ZXh0PgogICAgPC9hY2tub3ds
ZWRnZW1lbnREZXRhaWw+CiAgPC9hY2tub3dsZWRnZW1lbnQ+CiAgPGNvbnRyb2xBY3RQcm9jZXNz
IGNsYXNzQ29kZT0iQ0FDVCIgbW9vZENvZGU9IkVWTiI+CiAgICA8aWQgbnVsbEZsYXZvcj0iTkEi
Lz4KICAgIDxzdWJqZWN0IHR5cGVDb2RlPSJTVUJKIj4KICAgICAgPHJlZ2lzdHJhdGlvbkV2ZW50
IGNsYXNzQ29kZT0iUkVHIiBtb29kQ29kZT0iRVZOIj4KICAgICAgICA8c3RhdHVzQ29kZSBjb2Rl
PSJhY3RpdmUiLz4KICAgICAgICA8c3ViamVjdDEgdHlwZUNvZGU9IlNCSiI+CiAgICAgICAgICA8
YXNzaWduZWRFbnRpdHkgY2xhc3NDb2RlPSJBU1NJR05FRCI+CiAgICAgICAgICAgIDxpZCBhc3Np
Z25pbmdBdXRob3JpdHlOYW1lPSJCQyBNaW5pc3RyeSBQcmFjdGl0aW9uZXIgSUQiIGV4dGVuc2lv
bj0iOTMxODgiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuNDAuMi4xMSIvPgogICAgICAgICAg
ICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iSUhBIE1lZGl0ZWNoIElEIiBleHRlbnNpb249
IlBMSVNJSExVIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xLjYxIi8+CiAgICAgICAg
ICAgIDxjb2RlIGNvZGU9IlByb3ZpZGVyIi8+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAg
ICAgIDxwcmVmaXg+RHIuPC9wcmVmaXg+CiAgICAgICAgICAgICAgPGZhbWlseT5QbGlzaWhiPC9m
YW1pbHk+CiAgICAgICAgICAgICAgPGdpdmVuPkx1Y2l1czwvZ2l2ZW4+CiAgICAgICAgICAgIDwv
bmFtZT4KICAgICAgICAgICAgPHBlcmZvcm1hbmNlIHR5cGVDb2RlPSJQUFJGIj4KICAgICAgICAg
ICAgICA8YWN0RGVmaW5pdGlvbk9yRXZlbnQgY2xhc3NDb2RlPSJDQUNUIiBtb29kQ29kZT0iREVG
Ij4KICAgICAgICAgICAgICAgIDxsb2NhdGlvbiB0eXBlQ29kZT0iTE9DIj4KICAgICAgICAgICAg
ICAgICAgPHNlcXVlbmNlTnVtYmVyIHZhbHVlPSIxIi8+CiAgICAgICAgICAgICAgICAgIDxzZXJ2
aWNlRGVsaXZlcnlMb2NhdGlvbiBjbGFzc0NvZGU9IlNETE9DIj4KICAgICAgICAgICAgICAgICAg
ICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQ0RYIENsaW5pYyBSZWdpc3RyeSBJRCIgZXh0
ZW5zaW9uPSJDRFhDUjAwMDIxIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuMiIv
PgogICAgICAgICAgICAgICAgICAgIDxjb2RlIGNvZGU9IkNsaW5pYyIvPgogICAgICAgICAgICAg
ICAgICAgIDxhZGRyPgogICAgICAgICAgICAgICAgICAgICAgPGRlbGltaXRlcj4xNTAgS2luZyBT
dC4gVy4gU3RlIDEzMDA8L2RlbGltaXRlcj4KICAgICAgICAgICAgICAgICAgICAgIDxjaXR5PlRv
cm9udG88L2NpdHk+CiAgICAgICAgICAgICAgICAgICAgICA8c3RhdGU+QnJpdGlzaCBDb2x1bWJp
YTwvc3RhdGU+CiAgICAgICAgICAgICAgICAgICAgICA8Y291bnRyeT5DYW5hZGE8L2NvdW50cnk+
CiAgICAgICAgICAgICAgICAgICAgICA8cG9zdGFsQ29kZT5NNUggMUo5PC9wb3N0YWxDb2RlPgog
ICAgICAgICAgICAgICAgICAgIDwvYWRkcj4KICAgICAgICAgICAgICAgICAgICA8bG9jYXRpb24g
Y2xhc3NDb2RlPSJQTEMiIGRldGVybWluZXJDb2RlPSJJTlNUQU5DRSI+CiAgICAgICAgICAgICAg
ICAgICAgICA8bmFtZT5DYW5hZGEgSGVhbHRoIEluZm93YXkgVGVzdCBDbGluaWM8L25hbWU+CiAg
ICAgICAgICAgICAgICAgICAgPC9sb2NhdGlvbj4KICAgICAgICAgICAgICAgICAgPC9zZXJ2aWNl
RGVsaXZlcnlMb2NhdGlvbj4KICAgICAgICAgICAgICAgICAgPG5zMjpkZWZpbml0aW9uIHR5cGVD
b2RlPSJJTlNUIj4KICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGVJZCBhc3NpZ25pbmdBdXRo
b3JpdHlOYW1lPSJEb2N1bWVudCBUZW1wbGF0ZSBPSUQiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgz
LjMuMjc3LjEwMC40MCIvPgogICAgICAgICAgICAgICAgICAgIDxhY3REZWZpbml0aW9uIGNsYXNz
Q29kZT0iSU5GTyIgbW9vZENvZGU9IkRFRiI+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNz
aWduaW5nQXV0aG9yaXR5TmFtZT0iQW5hdG9taWMgUGF0aG9sb2d5IFJlcG9ydCBUZW1wbGF0ZSIg
ZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuMiIgcm9vdD0iMi4xNi44NDAu
MS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3Np
Z25pbmdBdXRob3JpdHlOYW1lPSJDb25zdWx0YXRpb24gTm90ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0
MC4xLjExMzg4My4xMC4yMC40IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAu
MSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkRp
YWdub3N0aWMgSW1hZ2luZyBSZXBvcnQgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4x
MTM4ODMuMy41MS42MC4yLjUiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4x
Ii8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iRGlz
Y2hhcmdlIFN1bW1hcnkgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41
MS42MC4yLjQiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAg
ICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iZTJlIEdlbmVyaWMg
RXBpc29kaWMgRG9jdW1lbnQiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy4xODE4LjEw
LjEuMiIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAg
ICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJlMmUgR2VuZXJpYyBVbnN0
cnVjdHVyZWQgUmVmZXJyYWwiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy4xODE4LjEw
LjEuNSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAg
ICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJlMmUgVW5zdHJ1Y3R1cmVk
IERvY3VtZW50IiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuMTgxOC4xMC4xLjQiIHJv
b3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAg
ICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iSGlzdG9yeSBhbmQgUGh5c2ljYWwgTm90
ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yIiByb290PSIyLjE2Ljg0MC4x
LjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2ln
bmluZ0F1dGhvcml0eU5hbWU9IkxhYiBSZXBvcnQgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44
NDAuMS4xMTM4ODMuMy41MS42MC4yLjEiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEw
MC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFt
ZT0iT3BlcmF0aXZlIE5vdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuNyIg
cm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAg
ICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJQcm9jZWR1cmUgTm90ZSBUZW1wbGF0
ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuMyIgcm9vdD0iMi4xNi44
NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBh
c3NpZ25pbmdBdXRob3JpdHlOYW1lPSJQcm9ncmVzcyBOb3RlIiBleHRlbnNpb249IjIuMTYuODQw
LjEuMTEzODgzLjEwLjIwLjIxIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAu
MSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IlVu
c3RydWN0dXJlZCBSZXBvcnQgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMu
MTAuMjAuMTkiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAg
ICAgICAgICAgICAgICAgICA8Y29kZSBudWxsRmxhdm9yPSJVTksiLz4KICAgICAgICAgICAgICAg
ICAgICA8L2FjdERlZmluaXRpb24+CiAgICAgICAgICAgICAgICAgIDwvbnMyOmRlZmluaXRpb24+
CiAgICAgICAgICAgICAgICA8L2xvY2F0aW9uPgogICAgICAgICAgICAgICAgPGxvY2F0aW9uIHR5
cGVDb2RlPSJMT0MiPgogICAgICAgICAgICAgICAgICA8c2VxdWVuY2VOdW1iZXIgdmFsdWU9IjIi
Lz4KICAgICAgICAgICAgICAgICAgPHNlcnZpY2VEZWxpdmVyeUxvY2F0aW9uIGNsYXNzQ29kZT0i
U0RMT0MiPgogICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJD
RFggQ2xpbmljIFJlZ2lzdHJ5IElEIiBleHRlbnNpb249ImNkeHRlc3QtY2hzIiByb290PSIyLjE2
Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuMiIvPgogICAgICAgICAgICAgICAgICAgIDxjb2RlIGNv
ZGU9IkNsaW5pYyIvPgogICAgICAgICAgICAgICAgICAgIDxhZGRyPgogICAgICAgICAgICAgICAg
ICAgICAgPHN0YXRlPkJyaXRpc2ggQ29sdW1iaWE8L3N0YXRlPgogICAgICAgICAgICAgICAgICAg
ICAgPGNvdW50cnk+Q2FuYWRhPC9jb3VudHJ5PgogICAgICAgICAgICAgICAgICAgIDwvYWRkcj4K
ICAgICAgICAgICAgICAgICAgICA8bG9jYXRpb24gY2xhc3NDb2RlPSJQTEMiIGRldGVybWluZXJD
b2RlPSJJTlNUQU5DRSI+CiAgICAgICAgICAgICAgICAgICAgICA8bmFtZT5DYW5kaWFuIEhlYWx0
aCBTeXN0ZW1zPC9uYW1lPgogICAgICAgICAgICAgICAgICAgIDwvbG9jYXRpb24+CiAgICAgICAg
ICAgICAgICAgIDwvc2VydmljZURlbGl2ZXJ5TG9jYXRpb24+CiAgICAgICAgICAgICAgICAgIDxu
czI6ZGVmaW5pdGlvbiB0eXBlQ29kZT0iSU5TVCI+CiAgICAgICAgICAgICAgICAgICAgPHRlbXBs
YXRlSWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iRG9jdW1lbnQgVGVtcGxhdGUgT0lEIiByb290
PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAiLz4KICAgICAgICAgICAgICAgICAgICA8
YWN0RGVmaW5pdGlvbiBjbGFzc0NvZGU9IklORk8iIG1vb2RDb2RlPSJERUYiPgogICAgICAgICAg
ICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkFkbWl0IE5vdGlmaWNhdGlv
biBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuNyIgcm9v
dD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAg
ICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJBbmF0b21pYyBQYXRob2xvZ3kgUmVwb3J0
IFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi4yIiByb290
PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAg
ICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkNvbnN1bHRhdGlvbiBOb3RlIiBleHRlbnNp
b249IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjQiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMu
Mjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9y
aXR5TmFtZT0iRGlhZ25vc3RpYyBJbWFnaW5nIFJlcG9ydCBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIy
LjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuNSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4y
NzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3Jp
dHlOYW1lPSJEaXNjaGFyZ2UgTm90aWZpY2F0aW9uIFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYu
ODQwLjEuMTEzODgzLjMuNTEuNjAuMi42IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4x
MDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5h
bWU9IkRpc2NoYXJnZSBTdW1tYXJ5IFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEz
ODgzLjMuNTEuNjAuMi40IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIv
PgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9ImUyZSBH
ZW5lcmljIEVwaXNvZGljIERvY3VtZW50IiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMu
MTgxOC4xMC4xLjIiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAg
ICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iZTJlIEdlbmVy
aWMgVW5zdHJ1Y3R1cmVkIFJlZmVycmFsIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMu
MTgxOC4xMC4xLjUiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAg
ICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iZTJlIFVuc3Ry
dWN0dXJlZCBEb2N1bWVudCIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjE4MTguMTAu
MS40IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAg
ICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9Ikhpc3RvcnkgYW5kIFBoeXNp
Y2FsIE5vdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMiIgcm9vdD0iMi4x
Ni44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxp
ZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJMYWIgUmVwb3J0IFRlbXBsYXRlIiBleHRlbnNpb249
IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi4xIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4z
LjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhv
cml0eU5hbWU9Ik9wZXJhdGl2ZSBOb3RlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjEw
LjIwLjciIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAg
ICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iUHJvY2VkdXJlIE5vdGUg
VGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjMiIHJvb3Q9
IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAg
ICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iUHJvZ3Jlc3MgTm90ZSIgZXh0ZW5zaW9uPSIy
LjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcu
MTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlO
YW1lPSJVbnN0cnVjdHVyZWQgUmVwb3J0IFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEu
MTEzODgzLjEwLjIwLjE5IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIv
PgogICAgICAgICAgICAgICAgICAgICAgPGNvZGUgbnVsbEZsYXZvcj0iVU5LIi8+CiAgICAgICAg
ICAgICAgICAgICAgPC9hY3REZWZpbml0aW9uPgogICAgICAgICAgICAgICAgICA8L25zMjpkZWZp
bml0aW9uPgogICAgICAgICAgICAgICAgPC9sb2NhdGlvbj4KICAgICAgICAgICAgICAgIDxsb2Nh
dGlvbiB0eXBlQ29kZT0iTE9DIj4KICAgICAgICAgICAgICAgICAgPHNlcXVlbmNlTnVtYmVyIHZh
bHVlPSIzIi8+CiAgICAgICAgICAgICAgICAgIDxzZXJ2aWNlRGVsaXZlcnlMb2NhdGlvbiBjbGFz
c0NvZGU9IlNETE9DIj4KICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5
TmFtZT0iQ0RYIENsaW5pYyBSZWdpc3RyeSBJRCIgZXh0ZW5zaW9uPSJDRFhDUjAwMDU1IiByb290
PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuMiIvPgogICAgICAgICAgICAgICAgICAgIDxj
b2RlIGNvZGU9IkNsaW5pYyIvPgogICAgICAgICAgICAgICAgICAgIDxhZGRyPgogICAgICAgICAg
ICAgICAgICAgICAgPHN0YXRlPkJyaXRpc2ggQ29sdW1iaWE8L3N0YXRlPgogICAgICAgICAgICAg
ICAgICAgICAgPGNvdW50cnk+Q2FuYWRhPC9jb3VudHJ5PgogICAgICAgICAgICAgICAgICAgIDwv
YWRkcj4KICAgICAgICAgICAgICAgICAgICA8bG9jYXRpb24gY2xhc3NDb2RlPSJQTEMiIGRldGVy
bWluZXJDb2RlPSJJTlNUQU5DRSI+CiAgICAgICAgICAgICAgICAgICAgICA8bmFtZT5Db25zdGFi
bGUgQ29uc3VsdGluZzwvbmFtZT4KICAgICAgICAgICAgICAgICAgICA8L2xvY2F0aW9uPgogICAg
ICAgICAgICAgICAgICA8L3NlcnZpY2VEZWxpdmVyeUxvY2F0aW9uPgogICAgICAgICAgICAgICAg
PC9sb2NhdGlvbj4KICAgICAgICAgICAgICAgIDxsb2NhdGlvbiB0eXBlQ29kZT0iTE9DIj4KICAg
ICAgICAgICAgICAgICAgPHNlcXVlbmNlTnVtYmVyIHZhbHVlPSI0Ii8+CiAgICAgICAgICAgICAg
ICAgIDxzZXJ2aWNlRGVsaXZlcnlMb2NhdGlvbiBjbGFzc0NvZGU9IlNETE9DIj4KICAgICAgICAg
ICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQ0RYIENsaW5pYyBSZWdpc3Ry
eSBJRCIgZXh0ZW5zaW9uPSJDRFgwMDAwMiIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcu
MTAwLjIiLz4KICAgICAgICAgICAgICAgICAgICA8Y29kZSBjb2RlPSJDbGluaWMiLz4KICAgICAg
ICAgICAgICAgICAgICA8YWRkcj4KICAgICAgICAgICAgICAgICAgICAgIDxkZWxpbWl0ZXI+U3Vp
dGUgMzkwLCA4ODkgSGFyYm91cnNpZGUgRHJpdmU8L2RlbGltaXRlcj4KICAgICAgICAgICAgICAg
ICAgICAgIDxjaXR5Pk5vcnRoIFZhbmNvdXZlcjwvY2l0eT4KICAgICAgICAgICAgICAgICAgICAg
IDxzdGF0ZT5Ccml0aXNoIENvbHVtYmlhPC9zdGF0ZT4KICAgICAgICAgICAgICAgICAgICAgIDxj
b3VudHJ5PkNhbmFkYTwvY291bnRyeT4KICAgICAgICAgICAgICAgICAgICAgIDxwb3N0YWxDb2Rl
PlY3UCAzUzE8L3Bvc3RhbENvZGU+CiAgICAgICAgICAgICAgICAgICAgPC9hZGRyPgogICAgICAg
ICAgICAgICAgICAgIDxsb2NhdGlvbiBjbGFzc0NvZGU9IlBMQyIgZGV0ZXJtaW5lckNvZGU9IklO
U1RBTkNFIj4KICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPkV4dGVybmFsIEludHJhaGVhbHRo
IFRlc3QgQ2xpbmljPC9uYW1lPgogICAgICAgICAgICAgICAgICAgIDwvbG9jYXRpb24+CiAgICAg
ICAgICAgICAgICAgIDwvc2VydmljZURlbGl2ZXJ5TG9jYXRpb24+CiAgICAgICAgICAgICAgICAg
IDxuczI6ZGVmaW5pdGlvbiB0eXBlQ29kZT0iSU5TVCI+CiAgICAgICAgICAgICAgICAgICAgPHRl
bXBsYXRlSWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iRG9jdW1lbnQgVGVtcGxhdGUgT0lEIiBy
b290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAiLz4KICAgICAgICAgICAgICAgICAg
ICA8YWN0RGVmaW5pdGlvbiBjbGFzc0NvZGU9IklORk8iIG1vb2RDb2RlPSJERUYiPgogICAgICAg
ICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkFkbWl0IE5vdGlmaWNh
dGlvbiBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuNyIg
cm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAg
ICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJBbmF0b21pYyBQYXRob2xvZ3kgUmVw
b3J0IFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi4yIiBy
b290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAg
ICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkNvbnN1bHRhdGlvbiBOb3RlIiBleHRl
bnNpb249IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjQiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgz
LjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0
aG9yaXR5TmFtZT0iRGlhZ25vc3RpYyBJbWFnaW5nIFJlcG9ydCBUZW1wbGF0ZSIgZXh0ZW5zaW9u
PSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuNSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMu
My4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRo
b3JpdHlOYW1lPSJEaXNjaGFyZ2UgTm90aWZpY2F0aW9uIFRlbXBsYXRlIiBleHRlbnNpb249IjIu
MTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi42IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3
Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0
eU5hbWU9IkRpc2NoYXJnZSBTdW1tYXJ5IFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEu
MTEzODgzLjMuNTEuNjAuMi40IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAu
MSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9ImUy
ZSBHZW5lcmljIEVwaXNvZGljIERvY3VtZW50IiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgz
LjMuMTgxOC4xMC4xLjIiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+
CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iZTJlIEdl
bmVyaWMgVW5zdHJ1Y3R1cmVkIFJlZmVycmFsIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgz
LjMuMTgxOC4xMC4xLjUiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+
CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iZTJlIFVu
c3RydWN0dXJlZCBEb2N1bWVudCIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjE4MTgu
MTAuMS40IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAg
ICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9Ikhpc3RvcnkgYW5kIFBo
eXNpY2FsIE5vdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMiIgcm9vdD0i
Mi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAg
IDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJMYWIgUmVwb3J0IFRlbXBsYXRlIiBleHRlbnNp
b249IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi4xIiByb290PSIyLjE2Ljg0MC4xLjExMzg4
My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1
dGhvcml0eU5hbWU9Ik9wZXJhdGl2ZSBOb3RlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgz
LjEwLjIwLjciIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAg
ICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iUHJvY2VkdXJlIE5v
dGUgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjMiIHJv
b3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAg
ICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iUHJvZ3Jlc3MgTm90ZSIgZXh0ZW5zaW9u
PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4y
NzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3Jp
dHlOYW1lPSJVbnN0cnVjdHVyZWQgUmVwb3J0IFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQw
LjEuMTEzODgzLjEwLjIwLjE5IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAu
MSIvPgogICAgICAgICAgICAgICAgICAgICAgPGNvZGUgbnVsbEZsYXZvcj0iVU5LIi8+CiAgICAg
ICAgICAgICAgICAgICAgPC9hY3REZWZpbml0aW9uPgogICAgICAgICAgICAgICAgICA8L25zMjpk
ZWZpbml0aW9uPgogICAgICAgICAgICAgICAgPC9sb2NhdGlvbj4KICAgICAgICAgICAgICAgIDxs
b2NhdGlvbiB0eXBlQ29kZT0iTE9DIj4KICAgICAgICAgICAgICAgICAgPHNlcXVlbmNlTnVtYmVy
IHZhbHVlPSI1Ii8+CiAgICAgICAgICAgICAgICAgIDxzZXJ2aWNlRGVsaXZlcnlMb2NhdGlvbiBj
bGFzc0NvZGU9IlNETE9DIj4KICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9y
aXR5TmFtZT0iQ0RYIENsaW5pYyBSZWdpc3RyeSBJRCIgZXh0ZW5zaW9uPSJDRFgwMDAwMyIgcm9v
dD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjIiLz4KICAgICAgICAgICAgICAgICAgICA8
Y29kZSBjb2RlPSJDbGluaWMiLz4KICAgICAgICAgICAgICAgICAgICA8YWRkcj4KICAgICAgICAg
ICAgICAgICAgICAgIDxkZWxpbWl0ZXI+U3VpdGUgMzkwLCA4ODkgSGFyYm91cnNpZGUgRHJpdmU8
L2RlbGltaXRlcj4KICAgICAgICAgICAgICAgICAgICAgIDxjaXR5Pk5vcnRoIFZhbmNvdXZlcjwv
Y2l0eT4KICAgICAgICAgICAgICAgICAgICAgIDxzdGF0ZT5Ccml0aXNoIENvbHVtYmlhPC9zdGF0
ZT4KICAgICAgICAgICAgICAgICAgICAgIDxjb3VudHJ5PkNhbmFkYTwvY291bnRyeT4KICAgICAg
ICAgICAgICAgICAgICAgIDxwb3N0YWxDb2RlPlY3UCAzUzE8L3Bvc3RhbENvZGU+CiAgICAgICAg
ICAgICAgICAgICAgPC9hZGRyPgogICAgICAgICAgICAgICAgICAgIDxsb2NhdGlvbiBjbGFzc0Nv
ZGU9IlBMQyIgZGV0ZXJtaW5lckNvZGU9IklOU1RBTkNFIj4KICAgICAgICAgICAgICAgICAgICAg
IDxuYW1lPkV4dGVybmFsIEludHJhaGVhbHRoIFRlc3RpbmcgQ2xpbmljIDI8L25hbWU+CiAgICAg
ICAgICAgICAgICAgICAgPC9sb2NhdGlvbj4KICAgICAgICAgICAgICAgICAgPC9zZXJ2aWNlRGVs
aXZlcnlMb2NhdGlvbj4KICAgICAgICAgICAgICAgICAgPG5zMjpkZWZpbml0aW9uIHR5cGVDb2Rl
PSJJTlNUIj4KICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGVJZCBhc3NpZ25pbmdBdXRob3Jp
dHlOYW1lPSJEb2N1bWVudCBUZW1wbGF0ZSBPSUQiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMu
Mjc3LjEwMC40MCIvPgogICAgICAgICAgICAgICAgICAgIDxhY3REZWZpbml0aW9uIGNsYXNzQ29k
ZT0iSU5GTyIgbW9vZENvZGU9IkRFRiI+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWdu
aW5nQXV0aG9yaXR5TmFtZT0iQW5hdG9taWMgUGF0aG9sb2d5IFJlcG9ydCBUZW1wbGF0ZSIgZXh0
ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuMiIgcm9vdD0iMi4xNi44NDAuMS4x
MTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25p
bmdBdXRob3JpdHlOYW1lPSJDb25zdWx0YXRpb24gTm90ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4x
LjExMzg4My4xMC4yMC40IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIv
PgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkRpYWdu
b3N0aWMgSW1hZ2luZyBSZXBvcnQgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4
ODMuMy41MS42MC4yLjUiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+
CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iRGlzY2hh
cmdlIFN1bW1hcnkgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42
MC4yLjQiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAg
ICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iZTJlIEdlbmVyaWMgRXBp
c29kaWMgRG9jdW1lbnQiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy4xODE4LjEwLjEu
MiIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAg
ICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJlMmUgR2VuZXJpYyBVbnN0cnVj
dHVyZWQgUmVmZXJyYWwiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy4xODE4LjEwLjEu
NSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAg
ICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJlMmUgVW5zdHJ1Y3R1cmVkIERv
Y3VtZW50IiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuMTgxOC4xMC4xLjQiIHJvb3Q9
IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAg
ICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iSGlzdG9yeSBhbmQgUGh5c2ljYWwgTm90ZSIg
ZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yIiByb290PSIyLjE2Ljg0MC4xLjEx
Mzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmlu
Z0F1dGhvcml0eU5hbWU9IkxhYiBSZXBvcnQgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAu
MS4xMTM4ODMuMy41MS42MC4yLjEiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40
MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0i
T3BlcmF0aXZlIE5vdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuNyIgcm9v
dD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAg
ICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJQcm9jZWR1cmUgTm90ZSBUZW1wbGF0ZSIg
ZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuMyIgcm9vdD0iMi4xNi44NDAu
MS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3Np
Z25pbmdBdXRob3JpdHlOYW1lPSJQcm9ncmVzcyBOb3RlIiBleHRlbnNpb249IjIuMTYuODQwLjEu
MTEzODgzLjEwLjIwLjIxIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIv
PgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IlVuc3Ry
dWN0dXJlZCBSZXBvcnQgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMTAu
MjAuMTkiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAg
ICAgICAgICAgICAgICA8Y29kZSBudWxsRmxhdm9yPSJVTksiLz4KICAgICAgICAgICAgICAgICAg
ICA8L2FjdERlZmluaXRpb24+CiAgICAgICAgICAgICAgICAgIDwvbnMyOmRlZmluaXRpb24+CiAg
ICAgICAgICAgICAgICA8L2xvY2F0aW9uPgogICAgICAgICAgICAgICAgPGxvY2F0aW9uIHR5cGVD
b2RlPSJMT0MiPgogICAgICAgICAgICAgICAgICA8c2VxdWVuY2VOdW1iZXIgdmFsdWU9IjYiLz4K
ICAgICAgICAgICAgICAgICAgPHNlcnZpY2VEZWxpdmVyeUxvY2F0aW9uIGNsYXNzQ29kZT0iU0RM
T0MiPgogICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJDRFgg
Q2xpbmljIFJlZ2lzdHJ5IElEIiBleHRlbnNpb249IkNEWENSMDAwMDciIHJvb3Q9IjIuMTYuODQw
LjEuMTEzODgzLjMuMjc3LjEwMC4yIi8+CiAgICAgICAgICAgICAgICAgICAgPGNvZGUgY29kZT0i
Q2xpbmljIi8+CiAgICAgICAgICAgICAgICAgICAgPGFkZHI+CiAgICAgICAgICAgICAgICAgICAg
ICA8ZGVsaW1pdGVyPjEyMyBBSUhTIFJvYWQ8L2RlbGltaXRlcj4KICAgICAgICAgICAgICAgICAg
ICAgIDxjaXR5PlByaW5jZSBHZW9yZ2U8L2NpdHk+CiAgICAgICAgICAgICAgICAgICAgICA8c3Rh
dGU+QnJpdGlzaCBDb2x1bWJpYTwvc3RhdGU+CiAgICAgICAgICAgICAgICAgICAgICA8Y291bnRy
eT5DYW5hZGE8L2NvdW50cnk+CiAgICAgICAgICAgICAgICAgICAgICA8cG9zdGFsQ29kZT5WMVgg
OUU0PC9wb3N0YWxDb2RlPgogICAgICAgICAgICAgICAgICAgIDwvYWRkcj4KICAgICAgICAgICAg
ICAgICAgICA8bG9jYXRpb24gY2xhc3NDb2RlPSJQTEMiIGRldGVybWluZXJDb2RlPSJJTlNUQU5D
RSI+CiAgICAgICAgICAgICAgICAgICAgICA8bmFtZT5NT0lTIENEWC1BSUhTPC9uYW1lPgogICAg
ICAgICAgICAgICAgICAgIDwvbG9jYXRpb24+CiAgICAgICAgICAgICAgICAgIDwvc2VydmljZURl
bGl2ZXJ5TG9jYXRpb24+CiAgICAgICAgICAgICAgICAgIDxuczI6ZGVmaW5pdGlvbiB0eXBlQ29k
ZT0iSU5TVCI+CiAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlSWQgYXNzaWduaW5nQXV0aG9y
aXR5TmFtZT0iRG9jdW1lbnQgVGVtcGxhdGUgT0lEIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4z
LjI3Ny4xMDAuNDAiLz4KICAgICAgICAgICAgICAgICAgICA8YWN0RGVmaW5pdGlvbiBjbGFzc0Nv
ZGU9IklORk8iIG1vb2RDb2RlPSJERUYiPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2ln
bmluZ0F1dGhvcml0eU5hbWU9IkFkbWl0IE5vdGlmaWNhdGlvbiBUZW1wbGF0ZSIgZXh0ZW5zaW9u
PSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuNyIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMu
My4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRo
b3JpdHlOYW1lPSJBbmF0b21pYyBQYXRob2xvZ3kgUmVwb3J0IFRlbXBsYXRlIiBleHRlbnNpb249
IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi4yIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4z
LjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhv
cml0eU5hbWU9IkNvbnN1bHRhdGlvbiBOb3RlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgz
LjEwLjIwLjQiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAg
ICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iRGlhZ25vc3RpYyBJ
bWFnaW5nIFJlcG9ydCBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUx
LjYwLjIuNSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAg
ICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJEaXNjaGFyZ2UgTm90
aWZpY2F0aW9uIFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAu
Mi42IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAg
ICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkRpc2NoYXJnZSBTdW1tYXJ5
IFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi40IiByb290
PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAg
ICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9ImUyZSBHZW5lcmljIEVwaXNvZGljIERvY3Vt
ZW50IiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuMTgxOC4xMC4xLjIiIHJvb3Q9IjIu
MTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8
aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iZTJlIEdlbmVyaWMgVW5zdHJ1Y3R1cmVkIFJlZmVy
cmFsIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuMTgxOC4xMC4xLjUiIHJvb3Q9IjIu
MTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8
aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iZTJlIFVuc3RydWN0dXJlZCBEb2N1bWVudCIgZXh0
ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjE4MTguMTAuMS40IiByb290PSIyLjE2Ljg0MC4x
LjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2ln
bmluZ0F1dGhvcml0eU5hbWU9Ikhpc3RvcnkgYW5kIFBoeXNpY2FsIE5vdGUiIGV4dGVuc2lvbj0i
Mi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMiIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcu
MTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlO
YW1lPSJMYWIgUmVwb3J0IFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMu
NTEuNjAuMi4xIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAg
ICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9Ik9wZXJhdGl2ZSBO
b3RlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjciIHJvb3Q9IjIuMTYuODQw
LjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNz
aWduaW5nQXV0aG9yaXR5TmFtZT0iUHJvY2VkdXJlIE5vdGUgVGVtcGxhdGUiIGV4dGVuc2lvbj0i
Mi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjMiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMu
Mjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9y
aXR5TmFtZT0iUHJvZ3Jlc3MgTm90ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4xMC4y
MC4yMSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAg
ICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJVbnN0cnVjdHVyZWQgUmVw
b3J0IFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjE5IiByb290
PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAg
ICAgPGNvZGUgbnVsbEZsYXZvcj0iVU5LIi8+CiAgICAgICAgICAgICAgICAgICAgPC9hY3REZWZp
bml0aW9uPgogICAgICAgICAgICAgICAgICA8L25zMjpkZWZpbml0aW9uPgogICAgICAgICAgICAg
ICAgPC9sb2NhdGlvbj4KICAgICAgICAgICAgICAgIDxsb2NhdGlvbiB0eXBlQ29kZT0iTE9DIj4K
ICAgICAgICAgICAgICAgICAgPHNlcXVlbmNlTnVtYmVyIHZhbHVlPSI3Ii8+CiAgICAgICAgICAg
ICAgICAgIDxzZXJ2aWNlRGVsaXZlcnlMb2NhdGlvbiBjbGFzc0NvZGU9IlNETE9DIj4KICAgICAg
ICAgICAgICAgICAgICA8aWQgbnVsbEZsYXZvcj0iTkEiLz4KICAgICAgICAgICAgICAgICAgICA8
Y29kZSBjb2RlPSJDbGluaWMiLz4KICAgICAgICAgICAgICAgICAgICA8YWRkcj4KICAgICAgICAg
ICAgICAgICAgICAgIDxkZWxpbWl0ZXI+MTIxMiBUd2VsZnRoIFN0LjwvZGVsaW1pdGVyPgogICAg
ICAgICAgICAgICAgICAgICAgPGNpdHk+VGVzdGluZ3RvbjwvY2l0eT4KICAgICAgICAgICAgICAg
ICAgICAgIDxzdGF0ZT5Ccml0aXNoIENvbHVtYmlhPC9zdGF0ZT4KICAgICAgICAgICAgICAgICAg
ICAgIDxjb3VudHJ5PkNhbmFkYTwvY291bnRyeT4KICAgICAgICAgICAgICAgICAgICA8L2FkZHI+
CiAgICAgICAgICAgICAgICAgICAgPGxvY2F0aW9uIGNsYXNzQ29kZT0iUExDIiBkZXRlcm1pbmVy
Q29kZT0iSU5TVEFOQ0UiPgogICAgICAgICAgICAgICAgICAgICAgPG5hbWU+TU9JUyBDRFgtQUlI
UyBUZXN0MjwvbmFtZT4KICAgICAgICAgICAgICAgICAgICA8L2xvY2F0aW9uPgogICAgICAgICAg
ICAgICAgICA8L3NlcnZpY2VEZWxpdmVyeUxvY2F0aW9uPgogICAgICAgICAgICAgICAgICA8bnMy
OmRlZmluaXRpb24gdHlwZUNvZGU9IklOU1QiPgogICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0
ZUlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkRvY3VtZW50IFRlbXBsYXRlIE9JRCIgcm9vdD0i
Mi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwIi8+CiAgICAgICAgICAgICAgICAgICAgPGFj
dERlZmluaXRpb24gY2xhc3NDb2RlPSJJTkZPIiBtb29kQ29kZT0iREVGIj4KICAgICAgICAgICAg
ICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJBbmF0b21pYyBQYXRob2xvZ3kg
UmVwb3J0IFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi4y
IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAg
ICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkNvbnN1bHRhdGlvbiBOb3RlIiBl
eHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjQiIHJvb3Q9IjIuMTYuODQwLjEuMTEz
ODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5n
QXV0aG9yaXR5TmFtZT0iRGlhZ25vc3RpYyBJbWFnaW5nIFJlcG9ydCBUZW1wbGF0ZSIgZXh0ZW5z
aW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuNSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4
ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdB
dXRob3JpdHlOYW1lPSJEaXNjaGFyZ2UgU3VtbWFyeSBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2
Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuNCIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcu
MTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlO
YW1lPSJlMmUgR2VuZXJpYyBFcGlzb2RpYyBEb2N1bWVudCIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4x
LjExMzg4My4zLjE4MTguMTAuMS4yIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAu
NDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9
ImUyZSBHZW5lcmljIFVuc3RydWN0dXJlZCBSZWZlcnJhbCIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4x
LjExMzg4My4zLjE4MTguMTAuMS41IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAu
NDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9
ImUyZSBVbnN0cnVjdHVyZWQgRG9jdW1lbnQiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMu
My4xODE4LjEwLjEuNCIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4K
ICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJIaXN0b3J5
IGFuZCBQaHlzaWNhbCBOb3RlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIi
IHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAg
ICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iTGFiIFJlcG9ydCBUZW1wbGF0ZSIg
ZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuMSIgcm9vdD0iMi4xNi44NDAu
MS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3Np
Z25pbmdBdXRob3JpdHlOYW1lPSJPcGVyYXRpdmUgTm90ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4x
LjExMzg4My4xMC4yMC43IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIv
PgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IlByb2Nl
ZHVyZSBOb3RlIFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAu
Mi4zIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAg
ICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IlByb2dyZXNzIE5vdGUiIGV4
dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjEiIHJvb3Q9IjIuMTYuODQwLjEuMTEz
ODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5n
QXV0aG9yaXR5TmFtZT0iVW5zdHJ1Y3R1cmVkIFJlcG9ydCBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIy
LjE2Ljg0MC4xLjExMzg4My4xMC4yMC4xOSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcu
MTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxjb2RlIG51bGxGbGF2b3I9IlVOSyIv
PgogICAgICAgICAgICAgICAgICAgIDwvYWN0RGVmaW5pdGlvbj4KICAgICAgICAgICAgICAgICAg
PC9uczI6ZGVmaW5pdGlvbj4KICAgICAgICAgICAgICAgIDwvbG9jYXRpb24+CiAgICAgICAgICAg
ICAgICA8bG9jYXRpb24gdHlwZUNvZGU9IkxPQyI+CiAgICAgICAgICAgICAgICAgIDxzZXF1ZW5j
ZU51bWJlciB2YWx1ZT0iOCIvPgogICAgICAgICAgICAgICAgICA8c2VydmljZURlbGl2ZXJ5TG9j
YXRpb24gY2xhc3NDb2RlPSJTRExPQyI+CiAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmlu
Z0F1dGhvcml0eU5hbWU9IkNEWCBDbGluaWMgUmVnaXN0cnkgSUQiIGV4dGVuc2lvbj0iQ0RYQ1Iw
MDAxOCIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjIiLz4KICAgICAgICAgICAg
ICAgICAgICA8Y29kZSBjb2RlPSJDbGluaWMiLz4KICAgICAgICAgICAgICAgICAgICA8YWRkcj4K
ICAgICAgICAgICAgICAgICAgICAgIDxkZWxpbWl0ZXI+MjAwIC0gMTExMCA2dGggQXZlPC9kZWxp
bWl0ZXI+CiAgICAgICAgICAgICAgICAgICAgICA8Y2l0eT5QcmluY2UgR2VvcmdlPC9jaXR5Pgog
ICAgICAgICAgICAgICAgICAgICAgPHN0YXRlPkJyaXRpc2ggQ29sdW1iaWE8L3N0YXRlPgogICAg
ICAgICAgICAgICAgICAgICAgPGNvdW50cnk+Q2FuYWRhPC9jb3VudHJ5PgogICAgICAgICAgICAg
ICAgICAgICAgPHBvc3RhbENvZGU+VjJMIDNNNjwvcG9zdGFsQ29kZT4KICAgICAgICAgICAgICAg
ICAgICA8L2FkZHI+CiAgICAgICAgICAgICAgICAgICAgPGxvY2F0aW9uIGNsYXNzQ29kZT0iUExD
IiBkZXRlcm1pbmVyQ29kZT0iSU5TVEFOQ0UiPgogICAgICAgICAgICAgICAgICAgICAgPG5hbWU+
TU9JUyBDb25mb3JtYW5jZSBPbmU8L25hbWU+CiAgICAgICAgICAgICAgICAgICAgPC9sb2NhdGlv
bj4KICAgICAgICAgICAgICAgICAgPC9zZXJ2aWNlRGVsaXZlcnlMb2NhdGlvbj4KICAgICAgICAg
ICAgICAgICAgPG5zMjpkZWZpbml0aW9uIHR5cGVDb2RlPSJJTlNUIj4KICAgICAgICAgICAgICAg
ICAgICA8dGVtcGxhdGVJZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJEb2N1bWVudCBUZW1wbGF0
ZSBPSUQiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MCIvPgogICAgICAgICAg
ICAgICAgICAgIDxhY3REZWZpbml0aW9uIGNsYXNzQ29kZT0iSU5GTyIgbW9vZENvZGU9IkRFRiI+
CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQW5hdG9t
aWMgUGF0aG9sb2d5IFJlcG9ydCBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4
My4zLjUxLjYwLjIuMiIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4K
ICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJDb25zdWx0
YXRpb24gTm90ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC40IiByb290PSIy
LjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAg
PGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkRpYWdub3N0aWMgSW1hZ2luZyBSZXBvcnQgVGVt
cGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjUiIHJvb3Q9IjIu
MTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8
aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iRGlzY2hhcmdlIFN1bW1hcnkgVGVtcGxhdGUiIGV4
dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjQiIHJvb3Q9IjIuMTYuODQwLjEu
MTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWdu
aW5nQXV0aG9yaXR5TmFtZT0iZTJlIEdlbmVyaWMgRXBpc29kaWMgRG9jdW1lbnQiIGV4dGVuc2lv
bj0iMi4xNi44NDAuMS4xMTM4ODMuMy4xODE4LjEwLjEuMiIgcm9vdD0iMi4xNi44NDAuMS4xMTM4
ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdB
dXRob3JpdHlOYW1lPSJlMmUgR2VuZXJpYyBVbnN0cnVjdHVyZWQgUmVmZXJyYWwiIGV4dGVuc2lv
bj0iMi4xNi44NDAuMS4xMTM4ODMuMy4xODE4LjEwLjEuNSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4
ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdB
dXRob3JpdHlOYW1lPSJlMmUgVW5zdHJ1Y3R1cmVkIERvY3VtZW50IiBleHRlbnNpb249IjIuMTYu
ODQwLjEuMTEzODgzLjMuMTgxOC4xMC4xLjQiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3
LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5
TmFtZT0iSGlzdG9yeSBhbmQgUGh5c2ljYWwgTm90ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjEx
Mzg4My4xMC4yMC4yIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgog
ICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkxhYiBSZXBv
cnQgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjEiIHJv
b3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAg
ICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iT3BlcmF0aXZlIE5vdGUiIGV4dGVuc2lv
bj0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuNyIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4y
NzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3Jp
dHlOYW1lPSJQcm9jZWR1cmUgTm90ZSBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjEx
Mzg4My4zLjUxLjYwLjIuMyIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEi
Lz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJQcm9n
cmVzcyBOb3RlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIxIiByb290PSIy
LjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAg
PGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IlVuc3RydWN0dXJlZCBSZXBvcnQgVGVtcGxhdGUi
IGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMTkiIHJvb3Q9IjIuMTYuODQwLjEu
MTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8Y29kZSBudWxs
Rmxhdm9yPSJVTksiLz4KICAgICAgICAgICAgICAgICAgICA8L2FjdERlZmluaXRpb24+CiAgICAg
ICAgICAgICAgICAgIDwvbnMyOmRlZmluaXRpb24+CiAgICAgICAgICAgICAgICA8L2xvY2F0aW9u
PgogICAgICAgICAgICAgICAgPGxvY2F0aW9uIHR5cGVDb2RlPSJMT0MiPgogICAgICAgICAgICAg
ICAgICA8c2VxdWVuY2VOdW1iZXIgdmFsdWU9IjkiLz4KICAgICAgICAgICAgICAgICAgPHNlcnZp
Y2VEZWxpdmVyeUxvY2F0aW9uIGNsYXNzQ29kZT0iU0RMT0MiPgogICAgICAgICAgICAgICAgICAg
IDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJDRFggQ2xpbmljIFJlZ2lzdHJ5IElEIiBleHRl
bnNpb249IkNEWENSMDAwMTIiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC4yIi8+
CiAgICAgICAgICAgICAgICAgICAgPGNvZGUgY29kZT0iQ2xpbmljIi8+CiAgICAgICAgICAgICAg
ICAgICAgPGFkZHI+CiAgICAgICAgICAgICAgICAgICAgICA8ZGVsaW1pdGVyPjEyMyBBSUhTIFN0
cmVldDwvZGVsaW1pdGVyPgogICAgICAgICAgICAgICAgICAgICAgPGNpdHk+UEc8L2NpdHk+CiAg
ICAgICAgICAgICAgICAgICAgICA8c3RhdGU+QnJpdGlzaCBDb2x1bWJpYTwvc3RhdGU+CiAgICAg
ICAgICAgICAgICAgICAgICA8Y291bnRyeT5DYW5hZGE8L2NvdW50cnk+CiAgICAgICAgICAgICAg
ICAgICAgICA8cG9zdGFsQ29kZT5IMEggMEgwPC9wb3N0YWxDb2RlPgogICAgICAgICAgICAgICAg
ICAgIDwvYWRkcj4KICAgICAgICAgICAgICAgICAgICA8bG9jYXRpb24gY2xhc3NDb2RlPSJQTEMi
IGRldGVybWluZXJDb2RlPSJJTlNUQU5DRSI+CiAgICAgICAgICAgICAgICAgICAgICA8bmFtZT5N
T0lTIERldiBBY2NvdW50MTwvbmFtZT4KICAgICAgICAgICAgICAgICAgICA8L2xvY2F0aW9uPgog
ICAgICAgICAgICAgICAgICA8L3NlcnZpY2VEZWxpdmVyeUxvY2F0aW9uPgogICAgICAgICAgICAg
ICAgICA8bnMyOmRlZmluaXRpb24gdHlwZUNvZGU9IklOU1QiPgogICAgICAgICAgICAgICAgICAg
IDx0ZW1wbGF0ZUlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkRvY3VtZW50IFRlbXBsYXRlIE9J
RCIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwIi8+CiAgICAgICAgICAgICAg
ICAgICAgPGFjdERlZmluaXRpb24gY2xhc3NDb2RlPSJJTkZPIiBtb29kQ29kZT0iREVGIj4KICAg
ICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJBbmF0b21pYyBQ
YXRob2xvZ3kgUmVwb3J0IFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMu
NTEuNjAuMi4yIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAg
ICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkNvbnN1bHRhdGlv
biBOb3RlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjQiIHJvb3Q9IjIuMTYu
ODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQg
YXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iRGlhZ25vc3RpYyBJbWFnaW5nIFJlcG9ydCBUZW1wbGF0
ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuNSIgcm9vdD0iMi4xNi44
NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBh
c3NpZ25pbmdBdXRob3JpdHlOYW1lPSJEaXNjaGFyZ2UgU3VtbWFyeSBUZW1wbGF0ZSIgZXh0ZW5z
aW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuNCIgcm9vdD0iMi4xNi44NDAuMS4xMTM4
ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdB
dXRob3JpdHlOYW1lPSJlMmUgR2VuZXJpYyBFcGlzb2RpYyBEb2N1bWVudCIgZXh0ZW5zaW9uPSIy
LjE2Ljg0MC4xLjExMzg4My4zLjE4MTguMTAuMS4yIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4z
LjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhv
cml0eU5hbWU9ImUyZSBHZW5lcmljIFVuc3RydWN0dXJlZCBSZWZlcnJhbCIgZXh0ZW5zaW9uPSIy
LjE2Ljg0MC4xLjExMzg4My4zLjE4MTguMTAuMS41IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4z
LjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhv
cml0eU5hbWU9ImUyZSBVbnN0cnVjdHVyZWQgRG9jdW1lbnQiIGV4dGVuc2lvbj0iMi4xNi44NDAu
MS4xMTM4ODMuMy4xODE4LjEwLjEuNCIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAw
LjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1l
PSJIaXN0b3J5IGFuZCBQaHlzaWNhbCBOb3RlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgz
LjEwLjIwLjIiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAg
ICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iTGFiIFJlcG9ydCBU
ZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuMSIgcm9vdD0i
Mi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAg
IDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJPcGVyYXRpdmUgTm90ZSIgZXh0ZW5zaW9uPSIy
LjE2Ljg0MC4xLjExMzg4My4xMC4yMC43IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4x
MDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5h
bWU9IlByb2NlZHVyZSBOb3RlIFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgz
LjMuNTEuNjAuMi4zIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgog
ICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IlByb2dyZXNz
IE5vdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjEiIHJvb3Q9IjIuMTYu
ODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQg
YXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iVW5zdHJ1Y3R1cmVkIFJlcG9ydCBUZW1wbGF0ZSIgZXh0
ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4xOSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4
ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxjb2RlIG51bGxGbGF2
b3I9IlVOSyIvPgogICAgICAgICAgICAgICAgICAgIDwvYWN0RGVmaW5pdGlvbj4KICAgICAgICAg
ICAgICAgICAgPC9uczI6ZGVmaW5pdGlvbj4KICAgICAgICAgICAgICAgIDwvbG9jYXRpb24+CiAg
ICAgICAgICAgICAgICA8bG9jYXRpb24gdHlwZUNvZGU9IkxPQyI+CiAgICAgICAgICAgICAgICAg
IDxzZXF1ZW5jZU51bWJlciB2YWx1ZT0iMTAiLz4KICAgICAgICAgICAgICAgICAgPHNlcnZpY2VE
ZWxpdmVyeUxvY2F0aW9uIGNsYXNzQ29kZT0iU0RMT0MiPgogICAgICAgICAgICAgICAgICAgIDxp
ZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJDRFggQ2xpbmljIFJlZ2lzdHJ5IElEIiBleHRlbnNp
b249IkNEWENSMDAwMTMiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC4yIi8+CiAg
ICAgICAgICAgICAgICAgICAgPGNvZGUgY29kZT0iQ2xpbmljIi8+CiAgICAgICAgICAgICAgICAg
ICAgPGFkZHI+CiAgICAgICAgICAgICAgICAgICAgICA8ZGVsaW1pdGVyPlVOQkMgU3RyZWV0PC9k
ZWxpbWl0ZXI+CiAgICAgICAgICAgICAgICAgICAgICA8Y2l0eT5QRzwvY2l0eT4KICAgICAgICAg
ICAgICAgICAgICAgIDxzdGF0ZT5Ccml0aXNoIENvbHVtYmlhPC9zdGF0ZT4KICAgICAgICAgICAg
ICAgICAgICAgIDxjb3VudHJ5PkNhbmFkYTwvY291bnRyeT4KICAgICAgICAgICAgICAgICAgICAg
IDxwb3N0YWxDb2RlPkgwSCAwSDA8L3Bvc3RhbENvZGU+CiAgICAgICAgICAgICAgICAgICAgPC9h
ZGRyPgogICAgICAgICAgICAgICAgICAgIDxsb2NhdGlvbiBjbGFzc0NvZGU9IlBMQyIgZGV0ZXJt
aW5lckNvZGU9IklOU1RBTkNFIj4KICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPk1PSVMgRGV2
IEFjY291bnQyIFVOQkM8L25hbWU+CiAgICAgICAgICAgICAgICAgICAgPC9sb2NhdGlvbj4KICAg
ICAgICAgICAgICAgICAgPC9zZXJ2aWNlRGVsaXZlcnlMb2NhdGlvbj4KICAgICAgICAgICAgICAg
ICAgPG5zMjpkZWZpbml0aW9uIHR5cGVDb2RlPSJJTlNUIj4KICAgICAgICAgICAgICAgICAgICA8
dGVtcGxhdGVJZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJEb2N1bWVudCBUZW1wbGF0ZSBPSUQi
IHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MCIvPgogICAgICAgICAgICAgICAg
ICAgIDxhY3REZWZpbml0aW9uIGNsYXNzQ29kZT0iSU5GTyIgbW9vZENvZGU9IkRFRiI+CiAgICAg
ICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQW5hdG9taWMgUGF0
aG9sb2d5IFJlcG9ydCBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUx
LjYwLjIuMiIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAg
ICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJDb25zdWx0YXRpb24g
Tm90ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC40IiByb290PSIyLjE2Ljg0
MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFz
c2lnbmluZ0F1dGhvcml0eU5hbWU9IkRpYWdub3N0aWMgSW1hZ2luZyBSZXBvcnQgVGVtcGxhdGUi
IGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjUiIHJvb3Q9IjIuMTYuODQw
LjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNz
aWduaW5nQXV0aG9yaXR5TmFtZT0iRGlzY2hhcmdlIFN1bW1hcnkgVGVtcGxhdGUiIGV4dGVuc2lv
bj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjQiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgz
LjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0
aG9yaXR5TmFtZT0iZTJlIEdlbmVyaWMgRXBpc29kaWMgRG9jdW1lbnQiIGV4dGVuc2lvbj0iMi4x
Ni44NDAuMS4xMTM4ODMuMy4xODE4LjEwLjEuMiIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4y
NzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3Jp
dHlOYW1lPSJlMmUgR2VuZXJpYyBVbnN0cnVjdHVyZWQgUmVmZXJyYWwiIGV4dGVuc2lvbj0iMi4x
Ni44NDAuMS4xMTM4ODMuMy4xODE4LjEwLjEuNSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4y
NzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3Jp
dHlOYW1lPSJlMmUgVW5zdHJ1Y3R1cmVkIERvY3VtZW50IiBleHRlbnNpb249IjIuMTYuODQwLjEu
MTEzODgzLjMuMTgxOC4xMC4xLjQiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40
MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0i
SGlzdG9yeSBhbmQgUGh5c2ljYWwgTm90ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4x
MC4yMC4yIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAg
ICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkxhYiBSZXBvcnQgVGVt
cGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjEiIHJvb3Q9IjIu
MTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8
aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iT3BlcmF0aXZlIE5vdGUiIGV4dGVuc2lvbj0iMi4x
Ni44NDAuMS4xMTM4ODMuMTAuMjAuNyIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAw
LjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1l
PSJQcm9jZWR1cmUgTm90ZSBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4z
LjUxLjYwLjIuMyIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAg
ICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJQcm9ncmVzcyBO
b3RlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIxIiByb290PSIyLjE2Ljg0
MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFz
c2lnbmluZ0F1dGhvcml0eU5hbWU9IlVuc3RydWN0dXJlZCBSZXBvcnQgVGVtcGxhdGUiIGV4dGVu
c2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMTkiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgz
LjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8Y29kZSBudWxsRmxhdm9y
PSJVTksiLz4KICAgICAgICAgICAgICAgICAgICA8L2FjdERlZmluaXRpb24+CiAgICAgICAgICAg
ICAgICAgIDwvbnMyOmRlZmluaXRpb24+CiAgICAgICAgICAgICAgICA8L2xvY2F0aW9uPgogICAg
ICAgICAgICAgICAgPGxvY2F0aW9uIHR5cGVDb2RlPSJMT0MiPgogICAgICAgICAgICAgICAgICA8
c2VxdWVuY2VOdW1iZXIgdmFsdWU9IjExIi8+CiAgICAgICAgICAgICAgICAgIDxzZXJ2aWNlRGVs
aXZlcnlMb2NhdGlvbiBjbGFzc0NvZGU9IlNETE9DIj4KICAgICAgICAgICAgICAgICAgICA8aWQg
YXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQ0RYIENsaW5pYyBSZWdpc3RyeSBJRCIgZXh0ZW5zaW9u
PSJjZHh0ZXN0LW5oOCIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjIiLz4KICAg
ICAgICAgICAgICAgICAgICA8Y29kZSBjb2RlPSJDbGluaWMiLz4KICAgICAgICAgICAgICAgICAg
ICA8YWRkcj4KICAgICAgICAgICAgICAgICAgICAgIDxjaXR5PlZhbmNvdXZlcjwvY2l0eT4KICAg
ICAgICAgICAgICAgICAgICAgIDxzdGF0ZT5Ccml0aXNoIENvbHVtYmlhPC9zdGF0ZT4KICAgICAg
ICAgICAgICAgICAgICAgIDxjb3VudHJ5PkNhbmFkYTwvY291bnRyeT4KICAgICAgICAgICAgICAg
ICAgICA8L2FkZHI+CiAgICAgICAgICAgICAgICAgICAgPGxvY2F0aW9uIGNsYXNzQ29kZT0iUExD
IiBkZXRlcm1pbmVyQ29kZT0iSU5TVEFOQ0UiPgogICAgICAgICAgICAgICAgICAgICAgPG5hbWU+
TmV3IEhpcHBvIEhlYWx0aCBDbGluaWM8L25hbWU+CiAgICAgICAgICAgICAgICAgICAgPC9sb2Nh
dGlvbj4KICAgICAgICAgICAgICAgICAgPC9zZXJ2aWNlRGVsaXZlcnlMb2NhdGlvbj4KICAgICAg
ICAgICAgICAgICAgPG5zMjpkZWZpbml0aW9uIHR5cGVDb2RlPSJJTlNUIj4KICAgICAgICAgICAg
ICAgICAgICA8dGVtcGxhdGVJZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJEb2N1bWVudCBUZW1w
bGF0ZSBPSUQiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MCIvPgogICAgICAg
ICAgICAgICAgICAgIDxhY3REZWZpbml0aW9uIGNsYXNzQ29kZT0iSU5GTyIgbW9vZENvZGU9IkRF
RiI+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQWRt
aXQgTm90aWZpY2F0aW9uIFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMu
NTEuNjAuMi43IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAg
ICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkFuYXRvbWljIFBh
dGhvbG9neSBSZXBvcnQgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41
MS42MC4yLjIiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAg
ICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQ29uc3VsdGF0aW9u
IE5vdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuNCIgcm9vdD0iMi4xNi44
NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBh
c3NpZ25pbmdBdXRob3JpdHlOYW1lPSJEaWFnbm9zdGljIEltYWdpbmcgUmVwb3J0IFRlbXBsYXRl
IiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi41IiByb290PSIyLjE2Ljg0
MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFz
c2lnbmluZ0F1dGhvcml0eU5hbWU9IkRpc2NoYXJnZSBOb3RpZmljYXRpb24gVGVtcGxhdGUiIGV4
dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjYiIHJvb3Q9IjIuMTYuODQwLjEu
MTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWdu
aW5nQXV0aG9yaXR5TmFtZT0iRGlzY2hhcmdlIFN1bW1hcnkgVGVtcGxhdGUiIGV4dGVuc2lvbj0i
Mi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjQiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMu
Mjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9y
aXR5TmFtZT0iZTJlIEdlbmVyaWMgRXBpc29kaWMgRG9jdW1lbnQiIGV4dGVuc2lvbj0iMi4xNi44
NDAuMS4xMTM4ODMuMy4xODE4LjEwLjEuMiIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcu
MTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlO
YW1lPSJlMmUgR2VuZXJpYyBVbnN0cnVjdHVyZWQgUmVmZXJyYWwiIGV4dGVuc2lvbj0iMi4xNi44
NDAuMS4xMTM4ODMuMy4xODE4LjEwLjEuNSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcu
MTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlO
YW1lPSJlMmUgVW5zdHJ1Y3R1cmVkIERvY3VtZW50IiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEz
ODgzLjMuMTgxOC4xMC4xLjQiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4x
Ii8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iSGlz
dG9yeSBhbmQgUGh5c2ljYWwgTm90ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4xMC4y
MC4yIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAg
ICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkxhYiBSZXBvcnQgVGVtcGxh
dGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjEiIHJvb3Q9IjIuMTYu
ODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQg
YXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iT3BlcmF0aXZlIE5vdGUiIGV4dGVuc2lvbj0iMi4xNi44
NDAuMS4xMTM4ODMuMTAuMjAuNyIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQw
LjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJQ
cm9jZWR1cmUgTm90ZSBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUx
LjYwLjIuMyIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAg
ICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJQcm9ncmVzcyBOb3Rl
IiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIxIiByb290PSIyLjE2Ljg0MC4x
LjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2ln
bmluZ0F1dGhvcml0eU5hbWU9IlVuc3RydWN0dXJlZCBSZXBvcnQgVGVtcGxhdGUiIGV4dGVuc2lv
bj0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMTkiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMu
Mjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8Y29kZSBudWxsRmxhdm9yPSJV
TksiLz4KICAgICAgICAgICAgICAgICAgICA8L2FjdERlZmluaXRpb24+CiAgICAgICAgICAgICAg
ICAgIDwvbnMyOmRlZmluaXRpb24+CiAgICAgICAgICAgICAgICA8L2xvY2F0aW9uPgogICAgICAg
ICAgICAgICAgPGxvY2F0aW9uIHR5cGVDb2RlPSJMT0MiPgogICAgICAgICAgICAgICAgICA8c2Vx
dWVuY2VOdW1iZXIgdmFsdWU9IjEyIi8+CiAgICAgICAgICAgICAgICAgIDxzZXJ2aWNlRGVsaXZl
cnlMb2NhdGlvbiBjbGFzc0NvZGU9IlNETE9DIj4KICAgICAgICAgICAgICAgICAgICA8aWQgYXNz
aWduaW5nQXV0aG9yaXR5TmFtZT0iQ0RYIENsaW5pYyBSZWdpc3RyeSBJRCIgZXh0ZW5zaW9uPSIx
MDAxMDA0IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuMiIvPgogICAgICAgICAg
ICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJDSVggQ2xpbmljIElEIiBleHRl
bnNpb249ImNkeHRlc3QtdGEiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC4yLjIi
Lz4KICAgICAgICAgICAgICAgICAgICA8Y29kZSBjb2RlPSJDbGluaWMiLz4KICAgICAgICAgICAg
ICAgICAgICA8YWRkcj4KICAgICAgICAgICAgICAgICAgICAgIDxzdGF0ZT5Ccml0aXNoIENvbHVt
YmlhPC9zdGF0ZT4KICAgICAgICAgICAgICAgICAgICAgIDxjb3VudHJ5PkNhbmFkYTwvY291bnRy
eT4KICAgICAgICAgICAgICAgICAgICA8L2FkZHI+CiAgICAgICAgICAgICAgICAgICAgPGxvY2F0
aW9uIGNsYXNzQ29kZT0iUExDIiBkZXRlcm1pbmVyQ29kZT0iSU5TVEFOQ0UiPgogICAgICAgICAg
ICAgICAgICAgICAgPG5hbWU+TkhBIFRlc3QgQ2xpbmljIC0gQUlIUzwvbmFtZT4KICAgICAgICAg
ICAgICAgICAgICA8L2xvY2F0aW9uPgogICAgICAgICAgICAgICAgICA8L3NlcnZpY2VEZWxpdmVy
eUxvY2F0aW9uPgogICAgICAgICAgICAgICAgICA8bnMyOmRlZmluaXRpb24gdHlwZUNvZGU9IklO
U1QiPgogICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkIGFzc2lnbmluZ0F1dGhvcml0eU5h
bWU9IkRvY3VtZW50IFRlbXBsYXRlIE9JRCIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcu
MTAwLjQwIi8+CiAgICAgICAgICAgICAgICAgICAgPGFjdERlZmluaXRpb24gY2xhc3NDb2RlPSJJ
TkZPIiBtb29kQ29kZT0iREVGIj4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdB
dXRob3JpdHlOYW1lPSJBZG1pdCBOb3RpZmljYXRpb24gVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4x
Ni44NDAuMS4xMTM4ODMuMy41MS42MC4yLjciIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3
LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5
TmFtZT0iQW5hdG9taWMgUGF0aG9sb2d5IFJlcG9ydCBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2
Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuMiIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcu
MTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlO
YW1lPSJDb25zdWx0YXRpb24gTm90ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4xMC4y
MC40IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAg
ICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkRpYWdub3N0aWMgSW1hZ2lu
ZyBSZXBvcnQgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4y
LjUiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAg
ICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iRGlzY2hhcmdlIE5vdGlmaWNh
dGlvbiBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuNiIg
cm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAg
ICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJEaXNjaGFyZ2UgU3VtbWFyeSBUZW1w
bGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuNCIgcm9vdD0iMi4x
Ni44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxp
ZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJlMmUgR2VuZXJpYyBFcGlzb2RpYyBEb2N1bWVudCIg
ZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjE4MTguMTAuMS4yIiByb290PSIyLjE2Ljg0
MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFz
c2lnbmluZ0F1dGhvcml0eU5hbWU9ImUyZSBHZW5lcmljIFVuc3RydWN0dXJlZCBSZWZlcnJhbCIg
ZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjE4MTguMTAuMS41IiByb290PSIyLjE2Ljg0
MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFz
c2lnbmluZ0F1dGhvcml0eU5hbWU9ImUyZSBVbnN0cnVjdHVyZWQgRG9jdW1lbnQiIGV4dGVuc2lv
bj0iMi4xNi44NDAuMS4xMTM4ODMuMy4xODE4LjEwLjEuNCIgcm9vdD0iMi4xNi44NDAuMS4xMTM4
ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdB
dXRob3JpdHlOYW1lPSJIaXN0b3J5IGFuZCBQaHlzaWNhbCBOb3RlIiBleHRlbnNpb249IjIuMTYu
ODQwLjEuMTEzODgzLjEwLjIwLjIiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40
MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0i
TGFiIFJlcG9ydCBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYw
LjIuMSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAg
ICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJPcGVyYXRpdmUgTm90ZSIg
ZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC43IiByb290PSIyLjE2Ljg0MC4xLjEx
Mzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmlu
Z0F1dGhvcml0eU5hbWU9IlByb2NlZHVyZSBOb3RlIFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYu
ODQwLjEuMTEzODgzLjMuNTEuNjAuMi4zIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4x
MDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5h
bWU9IlByb2dyZXNzIE5vdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjEi
IHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAg
ICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iVW5zdHJ1Y3R1cmVkIFJlcG9ydCBU
ZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4xOSIgcm9vdD0iMi4x
Ni44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxj
b2RlIG51bGxGbGF2b3I9IlVOSyIvPgogICAgICAgICAgICAgICAgICAgIDwvYWN0RGVmaW5pdGlv
bj4KICAgICAgICAgICAgICAgICAgPC9uczI6ZGVmaW5pdGlvbj4KICAgICAgICAgICAgICAgIDwv
bG9jYXRpb24+CiAgICAgICAgICAgICAgICA8bG9jYXRpb24gdHlwZUNvZGU9IkxPQyI+CiAgICAg
ICAgICAgICAgICAgIDxzZXF1ZW5jZU51bWJlciB2YWx1ZT0iMTMiLz4KICAgICAgICAgICAgICAg
ICAgPHNlcnZpY2VEZWxpdmVyeUxvY2F0aW9uIGNsYXNzQ29kZT0iU0RMT0MiPgogICAgICAgICAg
ICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJDRFggQ2xpbmljIFJlZ2lzdHJ5
IElEIiBleHRlbnNpb249IjEwMDEwMDIiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEw
MC4yIi8+CiAgICAgICAgICAgICAgICAgICAgPGNvZGUgY29kZT0iQ2xpbmljIi8+CiAgICAgICAg
ICAgICAgICAgICAgPGFkZHI+CiAgICAgICAgICAgICAgICAgICAgICA8c3RhdGU+QnJpdGlzaCBD
b2x1bWJpYTwvc3RhdGU+CiAgICAgICAgICAgICAgICAgICAgICA8Y291bnRyeT5DYW5hZGE8L2Nv
dW50cnk+CiAgICAgICAgICAgICAgICAgICAgPC9hZGRyPgogICAgICAgICAgICAgICAgICAgIDxs
b2NhdGlvbiBjbGFzc0NvZGU9IlBMQyIgZGV0ZXJtaW5lckNvZGU9IklOU1RBTkNFIj4KICAgICAg
ICAgICAgICAgICAgICAgIDxuYW1lPk5IQSBUZXN0IENsaW5pYyAtIGlDbGluaWM8L25hbWU+CiAg
ICAgICAgICAgICAgICAgICAgPC9sb2NhdGlvbj4KICAgICAgICAgICAgICAgICAgPC9zZXJ2aWNl
RGVsaXZlcnlMb2NhdGlvbj4KICAgICAgICAgICAgICAgICAgPG5zMjpkZWZpbml0aW9uIHR5cGVD
b2RlPSJJTlNUIj4KICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGVJZCBhc3NpZ25pbmdBdXRo
b3JpdHlOYW1lPSJEb2N1bWVudCBUZW1wbGF0ZSBPSUQiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgz
LjMuMjc3LjEwMC40MCIvPgogICAgICAgICAgICAgICAgICAgIDxhY3REZWZpbml0aW9uIGNsYXNz
Q29kZT0iSU5GTyIgbW9vZENvZGU9IkRFRiI+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNz
aWduaW5nQXV0aG9yaXR5TmFtZT0iQWRtaXQgTm90aWZpY2F0aW9uIFRlbXBsYXRlIiBleHRlbnNp
b249IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi43IiByb290PSIyLjE2Ljg0MC4xLjExMzg4
My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1
dGhvcml0eU5hbWU9IkFuYXRvbWljIFBhdGhvbG9neSBSZXBvcnQgVGVtcGxhdGUiIGV4dGVuc2lv
bj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjIiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgz
LjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0
aG9yaXR5TmFtZT0iQ29uc3VsdGF0aW9uIE5vdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4
ODMuMTAuMjAuNCIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAg
ICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJEaWFnbm9zdGlj
IEltYWdpbmcgUmVwb3J0IFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMu
NTEuNjAuMi41IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAg
ICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkRpc2NoYXJnZSBO
b3RpZmljYXRpb24gVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42
MC4yLjYiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAg
ICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iRGlzY2hhcmdlIFN1bW1h
cnkgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjQiIHJv
b3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAg
ICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iZTJlIEdlbmVyaWMgRXBpc29kaWMgRG9j
dW1lbnQiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy4xODE4LjEwLjEuMiIgcm9vdD0i
Mi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAg
IDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJlMmUgR2VuZXJpYyBVbnN0cnVjdHVyZWQgUmVm
ZXJyYWwiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy4xODE4LjEwLjEuNSIgcm9vdD0i
Mi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAg
IDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJlMmUgVW5zdHJ1Y3R1cmVkIERvY3VtZW50IiBl
eHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuMTgxOC4xMC4xLjQiIHJvb3Q9IjIuMTYuODQw
LjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNz
aWduaW5nQXV0aG9yaXR5TmFtZT0iSGlzdG9yeSBhbmQgUGh5c2ljYWwgTm90ZSIgZXh0ZW5zaW9u
PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3
Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0
eU5hbWU9IkxhYiBSZXBvcnQgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMu
My41MS42MC4yLjEiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAg
ICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iT3BlcmF0aXZl
IE5vdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuNyIgcm9vdD0iMi4xNi44
NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBh
c3NpZ25pbmdBdXRob3JpdHlOYW1lPSJQcm9jZWR1cmUgTm90ZSBUZW1wbGF0ZSIgZXh0ZW5zaW9u
PSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuMyIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMu
My4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRo
b3JpdHlOYW1lPSJQcm9ncmVzcyBOb3RlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjEw
LjIwLjIxIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAg
ICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IlVuc3RydWN0dXJlZCBS
ZXBvcnQgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMTkiIHJv
b3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAg
ICAgICA8Y29kZSBudWxsRmxhdm9yPSJVTksiLz4KICAgICAgICAgICAgICAgICAgICA8L2FjdERl
ZmluaXRpb24+CiAgICAgICAgICAgICAgICAgIDwvbnMyOmRlZmluaXRpb24+CiAgICAgICAgICAg
ICAgICA8L2xvY2F0aW9uPgogICAgICAgICAgICAgICAgPGxvY2F0aW9uIHR5cGVDb2RlPSJMT0Mi
PgogICAgICAgICAgICAgICAgICA8c2VxdWVuY2VOdW1iZXIgdmFsdWU9IjE0Ii8+CiAgICAgICAg
ICAgICAgICAgIDxzZXJ2aWNlRGVsaXZlcnlMb2NhdGlvbiBjbGFzc0NvZGU9IlNETE9DIj4KICAg
ICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQ0RYIENsaW5pYyBS
ZWdpc3RyeSBJRCIgZXh0ZW5zaW9uPSIxMDAxMDAxIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4z
LjI3Ny4xMDAuMiIvPgogICAgICAgICAgICAgICAgICAgIDxjb2RlIGNvZGU9IkNsaW5pYyIvPgog
ICAgICAgICAgICAgICAgICAgIDxhZGRyPgogICAgICAgICAgICAgICAgICAgICAgPHN0YXRlPkJy
aXRpc2ggQ29sdW1iaWE8L3N0YXRlPgogICAgICAgICAgICAgICAgICAgICAgPGNvdW50cnk+Q2Fu
YWRhPC9jb3VudHJ5PgogICAgICAgICAgICAgICAgICAgIDwvYWRkcj4KICAgICAgICAgICAgICAg
ICAgICA8bG9jYXRpb24gY2xhc3NDb2RlPSJQTEMiIGRldGVybWluZXJDb2RlPSJJTlNUQU5DRSI+
CiAgICAgICAgICAgICAgICAgICAgICA8bmFtZT5OSEEgVGVzdCBDbGluaWMgLSBJbnRyYWhlYWx0
aDwvbmFtZT4KICAgICAgICAgICAgICAgICAgICA8L2xvY2F0aW9uPgogICAgICAgICAgICAgICAg
ICA8L3NlcnZpY2VEZWxpdmVyeUxvY2F0aW9uPgogICAgICAgICAgICAgICAgICA8bnMyOmRlZmlu
aXRpb24gdHlwZUNvZGU9IklOU1QiPgogICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkIGFz
c2lnbmluZ0F1dGhvcml0eU5hbWU9IkRvY3VtZW50IFRlbXBsYXRlIE9JRCIgcm9vdD0iMi4xNi44
NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwIi8+CiAgICAgICAgICAgICAgICAgICAgPGFjdERlZmlu
aXRpb24gY2xhc3NDb2RlPSJJTkZPIiBtb29kQ29kZT0iREVGIj4KICAgICAgICAgICAgICAgICAg
ICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJBZG1pdCBOb3RpZmljYXRpb24gVGVtcGxh
dGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjciIHJvb3Q9IjIuMTYu
ODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQg
YXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQW5hdG9taWMgUGF0aG9sb2d5IFJlcG9ydCBUZW1wbGF0
ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuMiIgcm9vdD0iMi4xNi44
NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBh
c3NpZ25pbmdBdXRob3JpdHlOYW1lPSJDb25zdWx0YXRpb24gTm90ZSIgZXh0ZW5zaW9uPSIyLjE2
Ljg0MC4xLjExMzg4My4xMC4yMC40IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAu
NDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9
IkRpYWdub3N0aWMgSW1hZ2luZyBSZXBvcnQgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAu
MS4xMTM4ODMuMy41MS42MC4yLjUiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40
MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0i
RGlzY2hhcmdlIE5vdGlmaWNhdGlvbiBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjEx
Mzg4My4zLjUxLjYwLjIuNiIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEi
Lz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJEaXNj
aGFyZ2UgU3VtbWFyeSBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUx
LjYwLjIuNCIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAg
ICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJlMmUgR2VuZXJpYyBF
cGlzb2RpYyBEb2N1bWVudCIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjE4MTguMTAu
MS4yIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAg
ICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9ImUyZSBHZW5lcmljIFVuc3Ry
dWN0dXJlZCBSZWZlcnJhbCIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjE4MTguMTAu
MS41IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAg
ICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9ImUyZSBVbnN0cnVjdHVyZWQg
RG9jdW1lbnQiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy4xODE4LjEwLjEuNCIgcm9v
dD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAg
ICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJIaXN0b3J5IGFuZCBQaHlzaWNhbCBOb3Rl
IiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIiIHJvb3Q9IjIuMTYuODQwLjEu
MTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWdu
aW5nQXV0aG9yaXR5TmFtZT0iTGFiIFJlcG9ydCBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0
MC4xLjExMzg4My4zLjUxLjYwLjIuMSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAw
LjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1l
PSJPcGVyYXRpdmUgTm90ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC43IiBy
b290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAg
ICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IlByb2NlZHVyZSBOb3RlIFRlbXBsYXRl
IiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi4zIiByb290PSIyLjE2Ljg0
MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFz
c2lnbmluZ0F1dGhvcml0eU5hbWU9IlByb2dyZXNzIE5vdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAu
MS4xMTM4ODMuMTAuMjAuMjEiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4x
Ii8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iVW5z
dHJ1Y3R1cmVkIFJlcG9ydCBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4x
MC4yMC4xOSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAg
ICAgICAgICAgICAgICAgIDxjb2RlIG51bGxGbGF2b3I9IlVOSyIvPgogICAgICAgICAgICAgICAg
ICAgIDwvYWN0RGVmaW5pdGlvbj4KICAgICAgICAgICAgICAgICAgPC9uczI6ZGVmaW5pdGlvbj4K
ICAgICAgICAgICAgICAgIDwvbG9jYXRpb24+CiAgICAgICAgICAgICAgICA8bG9jYXRpb24gdHlw
ZUNvZGU9IkxPQyI+CiAgICAgICAgICAgICAgICAgIDxzZXF1ZW5jZU51bWJlciB2YWx1ZT0iMTUi
Lz4KICAgICAgICAgICAgICAgICAgPHNlcnZpY2VEZWxpdmVyeUxvY2F0aW9uIGNsYXNzQ29kZT0i
U0RMT0MiPgogICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJD
RFggQ2xpbmljIFJlZ2lzdHJ5IElEIiBleHRlbnNpb249IjEwMDEwMDMiIHJvb3Q9IjIuMTYuODQw
LjEuMTEzODgzLjMuMjc3LjEwMC4yIi8+CiAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmlu
Z0F1dGhvcml0eU5hbWU9IkNJWCBDbGluaWMgSUQiIGV4dGVuc2lvbj0iNDE1MzQ4NTIiIHJvb3Q9
IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC4yLjIiLz4KICAgICAgICAgICAgICAgICAgICA8
Y29kZSBjb2RlPSJDbGluaWMiLz4KICAgICAgICAgICAgICAgICAgICA8YWRkcj4KICAgICAgICAg
ICAgICAgICAgICAgIDxzdGF0ZT5Ccml0aXNoIENvbHVtYmlhPC9zdGF0ZT4KICAgICAgICAgICAg
ICAgICAgICAgIDxjb3VudHJ5PkNhbmFkYTwvY291bnRyeT4KICAgICAgICAgICAgICAgICAgICA8
L2FkZHI+CiAgICAgICAgICAgICAgICAgICAgPGxvY2F0aW9uIGNsYXNzQ29kZT0iUExDIiBkZXRl
cm1pbmVyQ29kZT0iSU5TVEFOQ0UiPgogICAgICAgICAgICAgICAgICAgICAgPG5hbWU+TkhBIFRl
c3QgQ2xpbmljIC0gUUhSPC9uYW1lPgogICAgICAgICAgICAgICAgICAgIDwvbG9jYXRpb24+CiAg
ICAgICAgICAgICAgICAgIDwvc2VydmljZURlbGl2ZXJ5TG9jYXRpb24+CiAgICAgICAgICAgICAg
ICAgIDxuczI6ZGVmaW5pdGlvbiB0eXBlQ29kZT0iSU5TVCI+CiAgICAgICAgICAgICAgICAgICAg
PHRlbXBsYXRlSWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iRG9jdW1lbnQgVGVtcGxhdGUgT0lE
IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAiLz4KICAgICAgICAgICAgICAg
ICAgICA8YWN0RGVmaW5pdGlvbiBjbGFzc0NvZGU9IklORk8iIG1vb2RDb2RlPSJERUYiPgogICAg
ICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkFkbWl0IE5vdGlm
aWNhdGlvbiBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIu
NyIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAg
ICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJBbmF0b21pYyBQYXRob2xvZ3kg
UmVwb3J0IFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi4y
IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAg
ICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkNvbnN1bHRhdGlvbiBOb3RlIiBl
eHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjQiIHJvb3Q9IjIuMTYuODQwLjEuMTEz
ODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5n
QXV0aG9yaXR5TmFtZT0iRGlhZ25vc3RpYyBJbWFnaW5nIFJlcG9ydCBUZW1wbGF0ZSIgZXh0ZW5z
aW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuNSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4
ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdB
dXRob3JpdHlOYW1lPSJEaXNjaGFyZ2UgTm90aWZpY2F0aW9uIFRlbXBsYXRlIiBleHRlbnNpb249
IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi42IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4z
LjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhv
cml0eU5hbWU9IkRpc2NoYXJnZSBTdW1tYXJ5IFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQw
LjEuMTEzODgzLjMuNTEuNjAuMi40IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAu
NDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9
ImUyZSBHZW5lcmljIEVwaXNvZGljIERvY3VtZW50IiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEz
ODgzLjMuMTgxOC4xMC4xLjIiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4x
Ii8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iZTJl
IEdlbmVyaWMgVW5zdHJ1Y3R1cmVkIFJlZmVycmFsIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEz
ODgzLjMuMTgxOC4xMC4xLjUiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4x
Ii8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iZTJl
IFVuc3RydWN0dXJlZCBEb2N1bWVudCIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjE4
MTguMTAuMS40IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAg
ICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9Ikhpc3RvcnkgYW5k
IFBoeXNpY2FsIE5vdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMiIgcm9v
dD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAg
ICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJMYWIgUmVwb3J0IFRlbXBsYXRlIiBleHRl
bnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi4xIiByb290PSIyLjE2Ljg0MC4xLjEx
Mzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmlu
Z0F1dGhvcml0eU5hbWU9Ik9wZXJhdGl2ZSBOb3RlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEz
ODgzLjEwLjIwLjciIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAg
ICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iUHJvY2VkdXJl
IE5vdGUgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjMi
IHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAg
ICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iUHJvZ3Jlc3MgTm90ZSIgZXh0ZW5z
aW9uPSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMu
My4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRo
b3JpdHlOYW1lPSJVbnN0cnVjdHVyZWQgUmVwb3J0IFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYu
ODQwLjEuMTEzODgzLjEwLjIwLjE5IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAu
NDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGNvZGUgbnVsbEZsYXZvcj0iVU5LIi8+CiAg
ICAgICAgICAgICAgICAgICAgPC9hY3REZWZpbml0aW9uPgogICAgICAgICAgICAgICAgICA8L25z
MjpkZWZpbml0aW9uPgogICAgICAgICAgICAgICAgPC9sb2NhdGlvbj4KICAgICAgICAgICAgICAg
IDxsb2NhdGlvbiB0eXBlQ29kZT0iTE9DIj4KICAgICAgICAgICAgICAgICAgPHNlcXVlbmNlTnVt
YmVyIHZhbHVlPSIxNiIvPgogICAgICAgICAgICAgICAgICA8c2VydmljZURlbGl2ZXJ5TG9jYXRp
b24gY2xhc3NDb2RlPSJTRExPQyI+CiAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1
dGhvcml0eU5hbWU9IkNEWCBDbGluaWMgUmVnaXN0cnkgSUQiIGV4dGVuc2lvbj0iY2R4cG9zdHBy
b2Qtb3RjYSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjIiLz4KICAgICAgICAg
ICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iUE9JIENsaW5pYyBJRCIgZXh0
ZW5zaW9uPSJjZHhwb3N0cHJvZC1vdGNhIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4x
MDAuMi4xIi8+CiAgICAgICAgICAgICAgICAgICAgPGNvZGUgY29kZT0iQ2xpbmljIi8+CiAgICAg
ICAgICAgICAgICAgICAgPGFkZHI+CiAgICAgICAgICAgICAgICAgICAgICA8ZGVsaW1pdGVyPjE4
MTggVGVzdCBBdmU8L2RlbGltaXRlcj4KICAgICAgICAgICAgICAgICAgICAgIDxjaXR5PktlbG93
bmE8L2NpdHk+CiAgICAgICAgICAgICAgICAgICAgICA8c3RhdGU+QnJpdGlzaCBDb2x1bWJpYTwv
c3RhdGU+CiAgICAgICAgICAgICAgICAgICAgICA8Y291bnRyeT5DYW5hZGE8L2NvdW50cnk+CiAg
ICAgICAgICAgICAgICAgICAgICA8cG9zdGFsQ29kZT5WMVYxVjE8L3Bvc3RhbENvZGU+CiAgICAg
ICAgICAgICAgICAgICAgPC9hZGRyPgogICAgICAgICAgICAgICAgICAgIDxsb2NhdGlvbiBjbGFz
c0NvZGU9IlBMQyIgZGV0ZXJtaW5lckNvZGU9IklOU1RBTkNFIj4KICAgICAgICAgICAgICAgICAg
ICAgIDxuYW1lPk9zY2FyIFRlc3QgQ2xpbmljIEE8L25hbWU+CiAgICAgICAgICAgICAgICAgICAg
PC9sb2NhdGlvbj4KICAgICAgICAgICAgICAgICAgPC9zZXJ2aWNlRGVsaXZlcnlMb2NhdGlvbj4K
ICAgICAgICAgICAgICAgICAgPG5zMjpkZWZpbml0aW9uIHR5cGVDb2RlPSJJTlNUIj4KICAgICAg
ICAgICAgICAgICAgICA8dGVtcGxhdGVJZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJEb2N1bWVu
dCBUZW1wbGF0ZSBPSUQiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MCIvPgog
ICAgICAgICAgICAgICAgICAgIDxhY3REZWZpbml0aW9uIGNsYXNzQ29kZT0iSU5GTyIgbW9vZENv
ZGU9IkRFRiI+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFt
ZT0iQWRtaXQgTm90aWZpY2F0aW9uIFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEz
ODgzLjMuNTEuNjAuMi43IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIv
PgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkFuYXRv
bWljIFBhdGhvbG9neSBSZXBvcnQgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4
ODMuMy41MS42MC4yLjIiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+
CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQ29uc3Vs
dGF0aW9uIE5vdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuNCIgcm9vdD0i
Mi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAg
IDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJEaWFnbm9zdGljIEltYWdpbmcgUmVwb3J0IFRl
bXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi41IiByb290PSIy
LjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAg
PGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkRpc2NoYXJnZSBOb3RpZmljYXRpb24gVGVtcGxh
dGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjYiIHJvb3Q9IjIuMTYu
ODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQg
YXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iRGlzY2hhcmdlIFN1bW1hcnkgVGVtcGxhdGUiIGV4dGVu
c2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjQiIHJvb3Q9IjIuMTYuODQwLjEuMTEz
ODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5n
QXV0aG9yaXR5TmFtZT0iZTJlIEdlbmVyaWMgRXBpc29kaWMgRG9jdW1lbnQiIGV4dGVuc2lvbj0i
Mi4xNi44NDAuMS4xMTM4ODMuMy4xODE4LjEwLjEuMiIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMu
My4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRo
b3JpdHlOYW1lPSJlMmUgR2VuZXJpYyBVbnN0cnVjdHVyZWQgUmVmZXJyYWwiIGV4dGVuc2lvbj0i
Mi4xNi44NDAuMS4xMTM4ODMuMy4xODE4LjEwLjEuNSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMu
My4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRo
b3JpdHlOYW1lPSJlMmUgVW5zdHJ1Y3R1cmVkIERvY3VtZW50IiBleHRlbnNpb249IjIuMTYuODQw
LjEuMTEzODgzLjMuMTgxOC4xMC4xLjQiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEw
MC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFt
ZT0iSGlzdG9yeSBhbmQgUGh5c2ljYWwgTm90ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4
My4xMC4yMC4yIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAg
ICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkxhYiBSZXBvcnQg
VGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjEiIHJvb3Q9
IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAg
ICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iT3BlcmF0aXZlIE5vdGUiIGV4dGVuc2lvbj0i
Mi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuNyIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcu
MTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlO
YW1lPSJQcm9jZWR1cmUgTm90ZSBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4
My4zLjUxLjYwLjIuMyIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4K
ICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJQcm9ncmVz
cyBOb3RlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIxIiByb290PSIyLjE2
Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlk
IGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IlVuc3RydWN0dXJlZCBSZXBvcnQgVGVtcGxhdGUiIGV4
dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMTkiIHJvb3Q9IjIuMTYuODQwLjEuMTEz
ODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8Y29kZSBudWxsRmxh
dm9yPSJVTksiLz4KICAgICAgICAgICAgICAgICAgICA8L2FjdERlZmluaXRpb24+CiAgICAgICAg
ICAgICAgICAgIDwvbnMyOmRlZmluaXRpb24+CiAgICAgICAgICAgICAgICA8L2xvY2F0aW9uPgog
ICAgICAgICAgICAgICAgPGxvY2F0aW9uIHR5cGVDb2RlPSJMT0MiPgogICAgICAgICAgICAgICAg
ICA8c2VxdWVuY2VOdW1iZXIgdmFsdWU9IjE3Ii8+CiAgICAgICAgICAgICAgICAgIDxzZXJ2aWNl
RGVsaXZlcnlMb2NhdGlvbiBjbGFzc0NvZGU9IlNETE9DIj4KICAgICAgICAgICAgICAgICAgICA8
aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQ0RYIENsaW5pYyBSZWdpc3RyeSBJRCIgZXh0ZW5z
aW9uPSJDRFhDUjY2NiIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjIiLz4KICAg
ICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iUE9JIENsaW5pYyBJ
RCIgZXh0ZW5zaW9uPSJjZHh0ZXN0LXB0ciIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcu
MTAwLjIuMSIvPgogICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1l
PSJDSVggQ2xpbmljIElEIiBleHRlbnNpb249ImNkeHRlc3QtcHRyMiIgcm9vdD0iMi4xNi44NDAu
MS4xMTM4ODMuMy4yNzcuMTAwLjIuMiIvPgogICAgICAgICAgICAgICAgICAgIDxjb2RlIGNvZGU9
IkNsaW5pYyIvPgogICAgICAgICAgICAgICAgICAgIDxhZGRyPgogICAgICAgICAgICAgICAgICAg
ICAgPHN0YXRlPkJyaXRpc2ggQ29sdW1iaWE8L3N0YXRlPgogICAgICAgICAgICAgICAgICAgICAg
PGNvdW50cnk+Q2FuYWRhPC9jb3VudHJ5PgogICAgICAgICAgICAgICAgICAgIDwvYWRkcj4KICAg
ICAgICAgICAgICAgICAgICA8bG9jYXRpb24gY2xhc3NDb2RlPSJQTEMiIGRldGVybWluZXJDb2Rl
PSJJTlNUQU5DRSI+CiAgICAgICAgICAgICAgICAgICAgICA8bmFtZT5QT0kgVGVzdCBSZWNpcGll
bnQxPC9uYW1lPgogICAgICAgICAgICAgICAgICAgIDwvbG9jYXRpb24+CiAgICAgICAgICAgICAg
ICAgIDwvc2VydmljZURlbGl2ZXJ5TG9jYXRpb24+CiAgICAgICAgICAgICAgICAgIDxuczI6ZGVm
aW5pdGlvbiB0eXBlQ29kZT0iSU5TVCI+CiAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlSWQg
YXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iRG9jdW1lbnQgVGVtcGxhdGUgT0lEIiByb290PSIyLjE2
Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAiLz4KICAgICAgICAgICAgICAgICAgICA8YWN0RGVm
aW5pdGlvbiBjbGFzc0NvZGU9IklORk8iIG1vb2RDb2RlPSJERUYiPgogICAgICAgICAgICAgICAg
ICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkFkbWl0IE5vdGlmaWNhdGlvbiBUZW1w
bGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuNyIgcm9vdD0iMi4x
Ni44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxp
ZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJBbmF0b21pYyBQYXRob2xvZ3kgUmVwb3J0IFRlbXBs
YXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi4yIiByb290PSIyLjE2
Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlk
IGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkNvbnN1bHRhdGlvbiBOb3RlIiBleHRlbnNpb249IjIu
MTYuODQwLjEuMTEzODgzLjEwLjIwLjQiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEw
MC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFt
ZT0iRGlhZ25vc3RpYyBJbWFnaW5nIFJlcG9ydCBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0
MC4xLjExMzg4My4zLjUxLjYwLjIuNSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAw
LjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1l
PSJEaXNjaGFyZ2UgTm90aWZpY2F0aW9uIFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEu
MTEzODgzLjMuNTEuNjAuMi42IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAu
MSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkRp
c2NoYXJnZSBTdW1tYXJ5IFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMu
NTEuNjAuMi40IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAg
ICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9ImUyZSBHZW5lcmlj
IEVwaXNvZGljIERvY3VtZW50IiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuMTgxOC4x
MC4xLjIiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAg
ICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iZTJlIEdlbmVyaWMgVW5z
dHJ1Y3R1cmVkIFJlZmVycmFsIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuMTgxOC4x
MC4xLjUiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAg
ICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iZTJlIFVuc3RydWN0dXJl
ZCBEb2N1bWVudCIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjE4MTguMTAuMS40IiBy
b290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAg
ICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9Ikhpc3RvcnkgYW5kIFBoeXNpY2FsIE5v
dGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMiIgcm9vdD0iMi4xNi44NDAu
MS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3Np
Z25pbmdBdXRob3JpdHlOYW1lPSJMYWIgUmVwb3J0IFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYu
ODQwLjEuMTEzODgzLjMuNTEuNjAuMi4xIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4x
MDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5h
bWU9Ik9wZXJhdGl2ZSBOb3RlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjci
IHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAg
ICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iUHJvY2VkdXJlIE5vdGUgVGVtcGxh
dGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjMiIHJvb3Q9IjIuMTYu
ODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQg
YXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iUHJvZ3Jlc3MgTm90ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0
MC4xLjExMzg4My4xMC4yMC4yMSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQw
LjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJV
bnN0cnVjdHVyZWQgUmVwb3J0IFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgz
LjEwLjIwLjE5IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAg
ICAgICAgICAgICAgICAgICAgPGNvZGUgbnVsbEZsYXZvcj0iVU5LIi8+CiAgICAgICAgICAgICAg
ICAgICAgPC9hY3REZWZpbml0aW9uPgogICAgICAgICAgICAgICAgICA8L25zMjpkZWZpbml0aW9u
PgogICAgICAgICAgICAgICAgPC9sb2NhdGlvbj4KICAgICAgICAgICAgICAgIDxsb2NhdGlvbiB0
eXBlQ29kZT0iTE9DIj4KICAgICAgICAgICAgICAgICAgPHNlcXVlbmNlTnVtYmVyIHZhbHVlPSIx
OCIvPgogICAgICAgICAgICAgICAgICA8c2VydmljZURlbGl2ZXJ5TG9jYXRpb24gY2xhc3NDb2Rl
PSJTRExPQyI+CiAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9
IkNEWCBDbGluaWMgUmVnaXN0cnkgSUQiIGV4dGVuc2lvbj0iQ0RYQ1IwMDAyMCIgcm9vdD0iMi4x
Ni44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjIiLz4KICAgICAgICAgICAgICAgICAgICA8Y29kZSBj
b2RlPSJDbGluaWMiLz4KICAgICAgICAgICAgICAgICAgICA8YWRkcj4KICAgICAgICAgICAgICAg
ICAgICAgIDxkZWxpbWl0ZXI+MzAxLCAzMjEwLTI1dGggQXZlPC9kZWxpbWl0ZXI+CiAgICAgICAg
ICAgICAgICAgICAgICA8Y2l0eT5WZXJub248L2NpdHk+CiAgICAgICAgICAgICAgICAgICAgICA8
c3RhdGU+QnJpdGlzaCBDb2x1bWJpYTwvc3RhdGU+CiAgICAgICAgICAgICAgICAgICAgICA8Y291
bnRyeT5DYW5hZGE8L2NvdW50cnk+CiAgICAgICAgICAgICAgICAgICAgICA8cG9zdGFsQ29kZT5W
MVQgMVAxPC9wb3N0YWxDb2RlPgogICAgICAgICAgICAgICAgICAgIDwvYWRkcj4KICAgICAgICAg
ICAgICAgICAgICA8bG9jYXRpb24gY2xhc3NDb2RlPSJQTEMiIGRldGVybWluZXJDb2RlPSJJTlNU
QU5DRSI+CiAgICAgICAgICAgICAgICAgICAgICA8bmFtZT5Qb3VsaW4gVGVzdCBDbGluaWM8L25h
bWU+CiAgICAgICAgICAgICAgICAgICAgPC9sb2NhdGlvbj4KICAgICAgICAgICAgICAgICAgPC9z
ZXJ2aWNlRGVsaXZlcnlMb2NhdGlvbj4KICAgICAgICAgICAgICAgICAgPG5zMjpkZWZpbml0aW9u
IHR5cGVDb2RlPSJJTlNUIj4KICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGVJZCBhc3NpZ25p
bmdBdXRob3JpdHlOYW1lPSJEb2N1bWVudCBUZW1wbGF0ZSBPSUQiIHJvb3Q9IjIuMTYuODQwLjEu
MTEzODgzLjMuMjc3LjEwMC40MCIvPgogICAgICAgICAgICAgICAgICAgIDxhY3REZWZpbml0aW9u
IGNsYXNzQ29kZT0iSU5GTyIgbW9vZENvZGU9IkRFRiI+CiAgICAgICAgICAgICAgICAgICAgICA8
aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQW5hdG9taWMgUGF0aG9sb2d5IFJlcG9ydCBUZW1w
bGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuMiIgcm9vdD0iMi4x
Ni44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxp
ZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJDb25zdWx0YXRpb24gTm90ZSIgZXh0ZW5zaW9uPSIy
LjE2Ljg0MC4xLjExMzg4My4xMC4yMC40IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4x
MDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5h
bWU9IkRpYWdub3N0aWMgSW1hZ2luZyBSZXBvcnQgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44
NDAuMS4xMTM4ODMuMy41MS42MC4yLjUiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEw
MC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFt
ZT0iRGlzY2hhcmdlIFN1bW1hcnkgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4
ODMuMy41MS42MC4yLjQiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+
CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iZTJlIEdl
bmVyaWMgRXBpc29kaWMgRG9jdW1lbnQiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy4x
ODE4LjEwLjEuMiIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAg
ICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJlMmUgR2VuZXJp
YyBVbnN0cnVjdHVyZWQgUmVmZXJyYWwiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy4x
ODE4LjEwLjEuNSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAg
ICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJlMmUgVW5zdHJ1
Y3R1cmVkIERvY3VtZW50IiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuMTgxOC4xMC4x
LjQiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAg
ICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iSGlzdG9yeSBhbmQgUGh5c2lj
YWwgTm90ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yIiByb290PSIyLjE2
Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlk
IGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkxhYiBSZXBvcnQgVGVtcGxhdGUiIGV4dGVuc2lvbj0i
Mi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjEiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMu
Mjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9y
aXR5TmFtZT0iT3BlcmF0aXZlIE5vdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMTAu
MjAuNyIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAg
ICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJQcm9jZWR1cmUgTm90ZSBU
ZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuMyIgcm9vdD0i
Mi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAg
IDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJQcm9ncmVzcyBOb3RlIiBleHRlbnNpb249IjIu
MTYuODQwLjEuMTEzODgzLjEwLjIwLjIxIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4x
MDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5h
bWU9IlVuc3RydWN0dXJlZCBSZXBvcnQgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4x
MTM4ODMuMTAuMjAuMTkiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+
CiAgICAgICAgICAgICAgICAgICAgICA8Y29kZSBudWxsRmxhdm9yPSJVTksiLz4KICAgICAgICAg
ICAgICAgICAgICA8L2FjdERlZmluaXRpb24+CiAgICAgICAgICAgICAgICAgIDwvbnMyOmRlZmlu
aXRpb24+CiAgICAgICAgICAgICAgICA8L2xvY2F0aW9uPgogICAgICAgICAgICAgICAgPGxvY2F0
aW9uIHR5cGVDb2RlPSJMT0MiPgogICAgICAgICAgICAgICAgICA8c2VxdWVuY2VOdW1iZXIgdmFs
dWU9IjE5Ii8+CiAgICAgICAgICAgICAgICAgIDxzZXJ2aWNlRGVsaXZlcnlMb2NhdGlvbiBjbGFz
c0NvZGU9IlNETE9DIj4KICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5
TmFtZT0iQ0RYIENsaW5pYyBSZWdpc3RyeSBJRCIgZXh0ZW5zaW9uPSJDRFhDUjAwMDIzIiByb290
PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuMiIvPgogICAgICAgICAgICAgICAgICAgIDxp
ZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJDSVggQ2xpbmljIElEIiBleHRlbnNpb249ImNkeHRl
c3QtcXRjIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuMi4yIi8+CiAgICAgICAg
ICAgICAgICAgICAgPGNvZGUgY29kZT0iQ2xpbmljIi8+CiAgICAgICAgICAgICAgICAgICAgPGFk
ZHI+CiAgICAgICAgICAgICAgICAgICAgICA8ZGVsaW1pdGVyPjE2MjAgRGlja3NvbiBBdmVudWU8
L2RlbGltaXRlcj4KICAgICAgICAgICAgICAgICAgICAgIDxjaXR5PktlbG93bmE8L2NpdHk+CiAg
ICAgICAgICAgICAgICAgICAgICA8c3RhdGU+QnJpdGlzaCBDb2x1bWJpYTwvc3RhdGU+CiAgICAg
ICAgICAgICAgICAgICAgICA8Y291bnRyeT5DYW5hZGE8L2NvdW50cnk+CiAgICAgICAgICAgICAg
ICAgICAgICA8cG9zdGFsQ29kZT5WMVkgOVkyPC9wb3N0YWxDb2RlPgogICAgICAgICAgICAgICAg
ICAgIDwvYWRkcj4KICAgICAgICAgICAgICAgICAgICA8bG9jYXRpb24gY2xhc3NDb2RlPSJQTEMi
IGRldGVybWluZXJDb2RlPSJJTlNUQU5DRSI+CiAgICAgICAgICAgICAgICAgICAgICA8bmFtZT5R
SFIgVGVzdCBDbGluaWM8L25hbWU+CiAgICAgICAgICAgICAgICAgICAgPC9sb2NhdGlvbj4KICAg
ICAgICAgICAgICAgICAgPC9zZXJ2aWNlRGVsaXZlcnlMb2NhdGlvbj4KICAgICAgICAgICAgICAg
ICAgPG5zMjpkZWZpbml0aW9uIHR5cGVDb2RlPSJJTlNUIj4KICAgICAgICAgICAgICAgICAgICA8
dGVtcGxhdGVJZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJEb2N1bWVudCBUZW1wbGF0ZSBPSUQi
IHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MCIvPgogICAgICAgICAgICAgICAg
ICAgIDxhY3REZWZpbml0aW9uIGNsYXNzQ29kZT0iSU5GTyIgbW9vZENvZGU9IkRFRiI+CiAgICAg
ICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQWRtaXQgTm90aWZp
Y2F0aW9uIFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi43
IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAg
ICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkFuYXRvbWljIFBhdGhvbG9neSBS
ZXBvcnQgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjIi
IHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAg
ICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQ29uc3VsdGF0aW9uIE5vdGUiIGV4
dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuNCIgcm9vdD0iMi4xNi44NDAuMS4xMTM4
ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdB
dXRob3JpdHlOYW1lPSJEaWFnbm9zdGljIEltYWdpbmcgUmVwb3J0IFRlbXBsYXRlIiBleHRlbnNp
b249IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi41IiByb290PSIyLjE2Ljg0MC4xLjExMzg4
My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1
dGhvcml0eU5hbWU9IkRpc2NoYXJnZSBOb3RpZmljYXRpb24gVGVtcGxhdGUiIGV4dGVuc2lvbj0i
Mi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjYiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMu
Mjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9y
aXR5TmFtZT0iRGlzY2hhcmdlIFN1bW1hcnkgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAu
MS4xMTM4ODMuMy41MS42MC4yLjQiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40
MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0i
ZTJlIEdlbmVyaWMgRXBpc29kaWMgRG9jdW1lbnQiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4
ODMuMy4xODE4LjEwLjEuMiIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEi
Lz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJlMmUg
R2VuZXJpYyBVbnN0cnVjdHVyZWQgUmVmZXJyYWwiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4
ODMuMy4xODE4LjEwLjEuNSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEi
Lz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJlMmUg
VW5zdHJ1Y3R1cmVkIERvY3VtZW50IiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuMTgx
OC4xMC4xLjQiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAg
ICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iSGlzdG9yeSBhbmQg
UGh5c2ljYWwgTm90ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yIiByb290
PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAg
ICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkxhYiBSZXBvcnQgVGVtcGxhdGUiIGV4dGVu
c2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjEiIHJvb3Q9IjIuMTYuODQwLjEuMTEz
ODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5n
QXV0aG9yaXR5TmFtZT0iT3BlcmF0aXZlIE5vdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4
ODMuMTAuMjAuNyIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAg
ICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJQcm9jZWR1cmUg
Tm90ZSBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuMyIg
cm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAg
ICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJQcm9ncmVzcyBOb3RlIiBleHRlbnNp
b249IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIxIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4z
LjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhv
cml0eU5hbWU9IlVuc3RydWN0dXJlZCBSZXBvcnQgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44
NDAuMS4xMTM4ODMuMTAuMjAuMTkiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40
MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8Y29kZSBudWxsRmxhdm9yPSJVTksiLz4KICAg
ICAgICAgICAgICAgICAgICA8L2FjdERlZmluaXRpb24+CiAgICAgICAgICAgICAgICAgIDwvbnMy
OmRlZmluaXRpb24+CiAgICAgICAgICAgICAgICA8L2xvY2F0aW9uPgogICAgICAgICAgICAgICAg
PGxvY2F0aW9uIHR5cGVDb2RlPSJMT0MiPgogICAgICAgICAgICAgICAgICA8c2VxdWVuY2VOdW1i
ZXIgdmFsdWU9IjIwIi8+CiAgICAgICAgICAgICAgICAgIDxzZXJ2aWNlRGVsaXZlcnlMb2NhdGlv
biBjbGFzc0NvZGU9IlNETE9DIj4KICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0
aG9yaXR5TmFtZT0iQ0RYIENsaW5pYyBSZWdpc3RyeSBJRCIgZXh0ZW5zaW9uPSJDRFhURVNUMDAw
MDQiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC4yIi8+CiAgICAgICAgICAgICAg
ICAgICAgPGNvZGUgY29kZT0iQ2xpbmljIi8+CiAgICAgICAgICAgICAgICAgICAgPGFkZHI+CiAg
ICAgICAgICAgICAgICAgICAgICA8ZGVsaW1pdGVyPjIwMC0xMDgwIE1haW5sYW5kIFN0LjwvZGVs
aW1pdGVyPgogICAgICAgICAgICAgICAgICAgICAgPGNpdHk+VmFuY291dmVyPC9jaXR5PgogICAg
ICAgICAgICAgICAgICAgICAgPHN0YXRlPkJyaXRpc2ggQ29sdW1iaWE8L3N0YXRlPgogICAgICAg
ICAgICAgICAgICAgICAgPGNvdW50cnk+Q2FuYWRhPC9jb3VudHJ5PgogICAgICAgICAgICAgICAg
ICAgICAgPHBvc3RhbENvZGU+VjZCMlQ0PC9wb3N0YWxDb2RlPgogICAgICAgICAgICAgICAgICAg
IDwvYWRkcj4KICAgICAgICAgICAgICAgICAgICA8bG9jYXRpb24gY2xhc3NDb2RlPSJQTEMiIGRl
dGVybWluZXJDb2RlPSJJTlNUQU5DRSI+CiAgICAgICAgICAgICAgICAgICAgICA8bmFtZT5URVNU
IC0gaUNsaW5pYyBTeXN0ZW1zIEluYy48L25hbWU+CiAgICAgICAgICAgICAgICAgICAgPC9sb2Nh
dGlvbj4KICAgICAgICAgICAgICAgICAgPC9zZXJ2aWNlRGVsaXZlcnlMb2NhdGlvbj4KICAgICAg
ICAgICAgICAgICAgPG5zMjpkZWZpbml0aW9uIHR5cGVDb2RlPSJJTlNUIj4KICAgICAgICAgICAg
ICAgICAgICA8dGVtcGxhdGVJZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJEb2N1bWVudCBUZW1w
bGF0ZSBPSUQiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MCIvPgogICAgICAg
ICAgICAgICAgICAgIDxhY3REZWZpbml0aW9uIGNsYXNzQ29kZT0iSU5GTyIgbW9vZENvZGU9IkRF
RiI+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQWRt
aXQgTm90aWZpY2F0aW9uIFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMu
NTEuNjAuMi43IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAg
ICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkFuYXRvbWljIFBh
dGhvbG9neSBSZXBvcnQgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41
MS42MC4yLjIiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAg
ICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQ29uc3VsdGF0aW9u
IE5vdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuNCIgcm9vdD0iMi4xNi44
NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBh
c3NpZ25pbmdBdXRob3JpdHlOYW1lPSJEaWFnbm9zdGljIEltYWdpbmcgUmVwb3J0IFRlbXBsYXRl
IiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi41IiByb290PSIyLjE2Ljg0
MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFz
c2lnbmluZ0F1dGhvcml0eU5hbWU9IkRpc2NoYXJnZSBOb3RpZmljYXRpb24gVGVtcGxhdGUiIGV4
dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjYiIHJvb3Q9IjIuMTYuODQwLjEu
MTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWdu
aW5nQXV0aG9yaXR5TmFtZT0iRGlzY2hhcmdlIFN1bW1hcnkgVGVtcGxhdGUiIGV4dGVuc2lvbj0i
Mi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjQiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMu
Mjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9y
aXR5TmFtZT0iZTJlIEdlbmVyaWMgRXBpc29kaWMgRG9jdW1lbnQiIGV4dGVuc2lvbj0iMi4xNi44
NDAuMS4xMTM4ODMuMy4xODE4LjEwLjEuMiIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcu
MTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlO
YW1lPSJlMmUgR2VuZXJpYyBVbnN0cnVjdHVyZWQgUmVmZXJyYWwiIGV4dGVuc2lvbj0iMi4xNi44
NDAuMS4xMTM4ODMuMy4xODE4LjEwLjEuNSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcu
MTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlO
YW1lPSJlMmUgVW5zdHJ1Y3R1cmVkIERvY3VtZW50IiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEz
ODgzLjMuMTgxOC4xMC4xLjQiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4x
Ii8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iSGlz
dG9yeSBhbmQgUGh5c2ljYWwgTm90ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4xMC4y
MC4yIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAg
ICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9Ik9wZXJhdGl2ZSBOb3RlIiBl
eHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjciIHJvb3Q9IjIuMTYuODQwLjEuMTEz
ODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5n
QXV0aG9yaXR5TmFtZT0iUHJvY2VkdXJlIE5vdGUgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44
NDAuMS4xMTM4ODMuMy41MS42MC4yLjMiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEw
MC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFt
ZT0iUHJvZ3Jlc3MgTm90ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMSIg
cm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAg
ICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJVbnN0cnVjdHVyZWQgUmVwb3J0IFRl
bXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjE5IiByb290PSIyLjE2
Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGNv
ZGUgbnVsbEZsYXZvcj0iVU5LIi8+CiAgICAgICAgICAgICAgICAgICAgPC9hY3REZWZpbml0aW9u
PgogICAgICAgICAgICAgICAgICA8L25zMjpkZWZpbml0aW9uPgogICAgICAgICAgICAgICAgPC9s
b2NhdGlvbj4KICAgICAgICAgICAgICAgIDxsb2NhdGlvbiB0eXBlQ29kZT0iTE9DIj4KICAgICAg
ICAgICAgICAgICAgPHNlcXVlbmNlTnVtYmVyIHZhbHVlPSIyMSIvPgogICAgICAgICAgICAgICAg
ICA8c2VydmljZURlbGl2ZXJ5TG9jYXRpb24gY2xhc3NDb2RlPSJTRExPQyI+CiAgICAgICAgICAg
ICAgICAgICAgPGlkIG51bGxGbGF2b3I9Ik5BIi8+CiAgICAgICAgICAgICAgICAgICAgPGNvZGUg
Y29kZT0iQ2xpbmljIi8+CiAgICAgICAgICAgICAgICAgICAgPGFkZHI+CiAgICAgICAgICAgICAg
ICAgICAgICA8ZGVsaW1pdGVyPjIyMjIgdWx0cmEgQXZlLjwvZGVsaW1pdGVyPgogICAgICAgICAg
ICAgICAgICAgICAgPGNpdHk+TWVnYXRvd248L2NpdHk+CiAgICAgICAgICAgICAgICAgICAgICA8
c3RhdGU+QnJpdGlzaCBDb2x1bWJpYTwvc3RhdGU+CiAgICAgICAgICAgICAgICAgICAgICA8Y291
bnRyeT5DYW5hZGE8L2NvdW50cnk+CiAgICAgICAgICAgICAgICAgICAgPC9hZGRyPgogICAgICAg
ICAgICAgICAgICAgIDxsb2NhdGlvbiBjbGFzc0NvZGU9IlBMQyIgZGV0ZXJtaW5lckNvZGU9IklO
U1RBTkNFIj4KICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPlRFU1QgQ2xpbmljIFVsdHJhIG1l
Z2EgQ2xpbmljPC9uYW1lPgogICAgICAgICAgICAgICAgICAgIDwvbG9jYXRpb24+CiAgICAgICAg
ICAgICAgICAgIDwvc2VydmljZURlbGl2ZXJ5TG9jYXRpb24+CiAgICAgICAgICAgICAgICAgIDxu
czI6ZGVmaW5pdGlvbiB0eXBlQ29kZT0iSU5TVCI+CiAgICAgICAgICAgICAgICAgICAgPHRlbXBs
YXRlSWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iRG9jdW1lbnQgVGVtcGxhdGUgT0lEIiByb290
PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAiLz4KICAgICAgICAgICAgICAgICAgICA8
YWN0RGVmaW5pdGlvbiBjbGFzc0NvZGU9IklORk8iIG1vb2RDb2RlPSJERUYiPgogICAgICAgICAg
ICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkFuYXRvbWljIFBhdGhvbG9n
eSBSZXBvcnQgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4y
LjIiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAg
ICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQ29uc3VsdGF0aW9uIE5vdGUi
IGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuNCIgcm9vdD0iMi4xNi44NDAuMS4x
MTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25p
bmdBdXRob3JpdHlOYW1lPSJEaWFnbm9zdGljIEltYWdpbmcgUmVwb3J0IFRlbXBsYXRlIiBleHRl
bnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi41IiByb290PSIyLjE2Ljg0MC4xLjEx
Mzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmlu
Z0F1dGhvcml0eU5hbWU9IkRpc2NoYXJnZSBTdW1tYXJ5IFRlbXBsYXRlIiBleHRlbnNpb249IjIu
MTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi40IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3
Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0
eU5hbWU9ImUyZSBHZW5lcmljIEVwaXNvZGljIERvY3VtZW50IiBleHRlbnNpb249IjIuMTYuODQw
LjEuMTEzODgzLjMuMTgxOC4xMC4xLjIiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEw
MC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFt
ZT0iZTJlIEdlbmVyaWMgVW5zdHJ1Y3R1cmVkIFJlZmVycmFsIiBleHRlbnNpb249IjIuMTYuODQw
LjEuMTEzODgzLjMuMTgxOC4xMC4xLjUiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEw
MC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFt
ZT0iZTJlIFVuc3RydWN0dXJlZCBEb2N1bWVudCIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4
My4zLjE4MTguMTAuMS40IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIv
PgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9Ikhpc3Rv
cnkgYW5kIFBoeXNpY2FsIE5vdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAu
MiIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAg
ICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJMYWIgUmVwb3J0IFRlbXBsYXRl
IiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi4xIiByb290PSIyLjE2Ljg0
MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFz
c2lnbmluZ0F1dGhvcml0eU5hbWU9Ik9wZXJhdGl2ZSBOb3RlIiBleHRlbnNpb249IjIuMTYuODQw
LjEuMTEzODgzLjEwLjIwLjciIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4x
Ii8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iUHJv
Y2VkdXJlIE5vdGUgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42
MC4yLjMiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAg
ICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iUHJvZ3Jlc3MgTm90ZSIg
ZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMSIgcm9vdD0iMi4xNi44NDAuMS4x
MTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25p
bmdBdXRob3JpdHlOYW1lPSJVbnN0cnVjdHVyZWQgUmVwb3J0IFRlbXBsYXRlIiBleHRlbnNpb249
IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjE5IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3
Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGNvZGUgbnVsbEZsYXZvcj0iVU5L
Ii8+CiAgICAgICAgICAgICAgICAgICAgPC9hY3REZWZpbml0aW9uPgogICAgICAgICAgICAgICAg
ICA8L25zMjpkZWZpbml0aW9uPgogICAgICAgICAgICAgICAgPC9sb2NhdGlvbj4KICAgICAgICAg
ICAgICA8L2FjdERlZmluaXRpb25PckV2ZW50PgogICAgICAgICAgICA8L3BlcmZvcm1hbmNlPgog
ICAgICAgICAgPC9hc3NpZ25lZEVudGl0eT4KICAgICAgICAgIDxoZWFsdGhDYXJlUHJvdmlkZXIg
eG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNp
Om5pbD0idHJ1ZSIvPgogICAgICAgICAgPHF1YWxpZmllZEVudGl0eSB4bWxuczp4c2k9Imh0dHA6
Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6bmlsPSJ0cnVlIi8+CiAg
ICAgICAgPC9zdWJqZWN0MT4KICAgICAgICA8Y3VzdG9kaWFuIHR5cGVDb2RlPSJDU1QiPgogICAg
ICAgICAgPGFzc2lnbmVkRW50aXR5IGNsYXNzQ29kZT0iQVNTSUdORUQiPgogICAgICAgICAgICA8
aWQgbnVsbEZsYXZvcj0iTkEiLz4KICAgICAgICAgICAgPGFzc2lnbmVkRGV2aWNlIHhtbG5zOnhz
aT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTpuaWw9InRy
dWUiLz4KICAgICAgICAgICAgPGFzc2lnbmVkT3JnYW5pemF0aW9uIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTpuaWw9InRydWUiLz4KICAg
ICAgICAgICAgPGFzc2lnbmVkUGVyc29uIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAw
MS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTpuaWw9InRydWUiLz4KICAgICAgICAgIDwvYXNzaWdu
ZWRFbnRpdHk+CiAgICAgICAgPC9jdXN0b2RpYW4+CiAgICAgIDwvcmVnaXN0cmF0aW9uRXZlbnQ+
CiAgICA8L3N1YmplY3Q+CiAgICA8cXVlcnlBY2s+CiAgICAgIDxxdWVyeUlkIGFzc2lnbmluZ0F1
dGhvcml0eU5hbWU9IkNEWCBQcm92aWRlciBSZXBvc2l0b3J5IFF1ZXJ5IElEIiBleHRlbnNpb249
ImYyNGExNDI5LWFjZWItNDUzYi1iY2JlLTEyZTZhMGNkNDQwOSIgcm9vdD0iMi4xNi44NDAuMS4x
MTM4ODMuMy4yNzcuMTAwLjEiLz4KICAgICAgPHN0YXR1c0NvZGUgY29kZT0iZGVsaXZlcmVkUmVz
cG9uc2UiLz4KICAgICAgPHF1ZXJ5UmVzcG9uc2VDb2RlIGNvZGU9Ik9LIi8+CiAgICAgIDxyZXN1
bHRUb3RhbFF1YW50aXR5IHZhbHVlPSIxIi8+CiAgICAgIDxyZXN1bHRDdXJyZW50UXVhbnRpdHkg
dmFsdWU9IjEiLz4KICAgICAgPHJlc3VsdFJlbWFpbmluZ1F1YW50aXR5IHZhbHVlPSIwIi8+CiAg
ICA8L3F1ZXJ5QWNrPgogIDwvY29udHJvbEFjdFByb2Nlc3M+CjwvUFJQTV9JTjMwNjAxMVVWPg==
</inboundTemplate>
            <outboundTemplate encoding="base64">ewoJInN0YXR1cyI6ICIiLAoJIm1lc3NhZ2UiOiAiIiwKCSJhY2tEZXRhaWwiOnsKCQkiYWNrSWQi
OiAiIiwKCQkiYWNrVGltZSI6ICIiLAoJCSJtZXNzYWdlSWQiOiAiIiwKCQkic3RhdHVzIjogIiIK
CX0sCgkicHJvdmlkZXJzIjpbXQp9</outboundTemplate>
            <inboundDataType>HL7V3</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.7.1">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.7.1">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.7.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.7.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.7.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.7.1">
            <elements/>
          </filter>
          <transportName>JavaScript Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>false</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data

/******** Create a Database Connection ********/
dbConn = getDBConnection();
globalChannelMap.put(&apos;dbConnection&apos;, dbConn);

return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data

/******** Close the Database Connection ********/
var dbConn = globalChannelMap.get(&apos;dbConnection&apos;);
if (!dbConn) {
	dbConn.close();
}

return;</undeployScript>
      <properties version="3.7.1">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>DEVELOPMENT</messageStorageMode>
        <encryptData>false</encryptData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>true</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TYPE</name>
            <type>STRING</type>
            <mappingName>mirth_type</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>VERSION</name>
            <type>STRING</type>
            <mappingName>mirth_version</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="3.7.1">
          <type>None</type>
          <properties/>
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
          <entry>
            <string>3ee0c1db-83b0-49f6-9323-8884b5bd43da</string>
            <string>CDA Parser</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>true</enabled>
          <lastModified>
            <time>1558052490188</time>
            <timezone>America/Vancouver</timezone>
          </lastModified>
          <pruningSettings>
            <archiveEnabled>true</archiveEnabled>
          </pruningSettings>
        </metadata>
        <codeTemplateLibraries>
          <codeTemplateLibrary version="3.7.1">
            <id>5d2a129c-da07-49cc-950c-d941a93cd271</id>
            <name>OBIB</name>
            <revision>5</revision>
            <lastModified>
              <time>1557967210347</time>
              <timezone>Canada/Pacific</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>e995ffe5-fe5f-4260-a385-98f81c8418fe</string>
              <string>b2f0c503-a881-4126-995e-844c3e7692fd</string>
              <string>2375f320-7fd5-48cd-b3bb-53c22dab182b</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.7.1">
                <id>9914a610-67bc-42b7-aa87-6a693ed1800c</id>
                <name>Build CDA Address</name>
                <revision>1</revision>
                <lastModified>
                  <time>1557439108498</time>
                  <timezone>Etc/UTC</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Build a XML address tag based on &apos;4.2.1.2. Addresses&apos;

	@param {String} use - 
	@param {String} streetAddress - 
	@param {String} city - 
	@param {String} state - 
	@param {String} postalCode - 
	@param {String} country - 
	@return {Object} return the XML address tag
*/
function buildCDAAddress(use, streetAddress, city, state, postalCode, country) {
	var addr = new XML(&quot;&lt;addr&gt;&quot; + streetAddress + &quot;&lt;delimiter/&gt;&lt;/addr&gt;&quot;); // CONF-BC0039
  	addr[&apos;@use&apos;] = use; // CONF-BC0041
  	addr[&apos;city&apos;] = city 
  	addr[&apos;state&apos;] = state; // CONF-BC0045
  	addr[&apos;postalCode&apos;] = postalCode;
  	if (country) {
  		addr[&apos;country&apos;] = country; // CONF-BC0044
  	}
  	return addr;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.7.1">
                <id>d56207a8-0d51-40fb-9437-73815405b6a2</id>
                <name>Build CDA ID</name>
                <revision>1</revision>
                <lastModified>
                  <time>1557439109018</time>
                  <timezone>Etc/UTC</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Build a XML id tag

	@param {String} root - 
	@param {String} extension - 
	@return {Object} return the XML id tag
*/
function buildCDAId(root, extension) {
	if (extension) {
		var id = new XML(&apos;&lt;id/&gt;&apos;);
	  	id[&apos;@extension&apos;] = extension;
		if (root) {
		  	id[&apos;@root&apos;] = root;
		  	// Get the authority name from the GlobalMap (loaded from database)
		  	var authName = globalMap.get(root);
		  	if (authName) {
		  		id[&apos;@assigningAuthorityName&apos;] = authName;
		  	}
		}
	  	return id;
	}
	return new XML(&apos;&lt;id nullFlavor=&quot;NA&quot; /&gt;&apos;);
}

</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.7.1">
                <id>aaee9682-0184-43e5-a80b-32615c89dae0</id>
                <name>Build CDA Name</name>
                <revision>1</revision>
                <lastModified>
                  <time>1557439108885</time>
                  <timezone>Etc/UTC</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Build a XML name tag based on &apos;4.2.1.1. Person Names&apos;

	@param {String} use -
	@param {String} family -
	@param {String} given -
	@param {String} prefix -
	@param {String} suffix -
	@return {Object} return the XML name tag
*/
function buildCDAName(use, family, given, prefix, suffix) {
	var name = new XML(&quot;&lt;name/&gt;&quot;);
  	name[&apos;@use&apos;] = use; // CONF-BC0038
  	name[&apos;family&apos;] = family;
  	if (given instanceof Array) { // CONF-BC0031, CONF-BC0034
  		for (var i = 0; i &lt; given.length; i++) {
  			name[&apos;given&apos;][i] = given[i];
  		}
  	} else {
  		name[&apos;given&apos;] = given;
  	}
  	if (prefix) { // CONF-BC0035
  		name[&apos;prefix&apos;] = prefix;
  	}
  	if (suffix) { // CONF-BC0036
  		name[&apos;suffix&apos;] = suffix;
  	}
  	return name;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.7.1">
                <id>39f73e3c-ac8d-46ee-904c-32d6a73d93c0</id>
                <name>Build CDA Telecom</name>
                <revision>1</revision>
                <lastModified>
                  <time>1557439108562</time>
                  <timezone>Etc/UTC</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Build a XML telecom tag

	@param {String} use - &apos;H&apos; = home, &apos;W&apos; = work, &apos;M&apos; = mobile
	@param {String} type - &apos;tel&apos; or &apos;email&apos;
	@param {String} value - number of telefone or email address
	@return {Object} return the XML telecom tag
*/
function buildCDATelecom(use, type, value) {
	var telecom = new XML(&quot;&lt;telecom/&gt;&quot;);
  	telecom[&apos;@use&apos;] = use;
  	telecom[&apos;@value&apos;] = type + &quot;:&quot; + value;
  	return telecom;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.7.1">
                <id>978d7943-1810-4652-a684-8f7b6bc3bc11</id>
                <name>Build CDA TemplateId</name>
                <revision>1</revision>
                <lastModified>
                  <time>1557439108192</time>
                  <timezone>Etc/UTC</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Build a XML templateId tag

	@param {String} code - 
	@return {Object} return the XML template tag
*/
function buildCDATemplateId(code) {
	var templateId = new XML(&apos;&lt;templateId/&gt;&apos;);

	// Get the attributes from the GlobalMap (loaded from database)
  	var loinc_code = globalMap.get(code);
  	
  	templateId[&apos;@root&apos;] = loinc_code[&apos;template_id&apos;];
  	templateId[&apos;@assigningAuthorityName&apos;] = loinc_code[&apos;template_name&apos;];
		  	
  	return templateId;&#xd;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.7.1">
                <id>0d5c946b-11fe-4dde-8c69-7d9296ea32a0</id>
                <name>Build Document Storage Message</name>
                <revision>1</revision>
                <lastModified>
                  <time>1557439108673</time>
                  <timezone>Etc/UTC</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>importPackage(Packages.ca.uvic.leadlab.cdxconnector.messages);

/**
	Build a Document Storage Message.

	@param {String} locationId - 
	@param {String} receiverId - 
	@param {String} documentId - 
	@param {String} messageType - DOCUMENT, RESPONSE or ATTACHMENT
	@param {String} content - 
	@return {String} return the Document Storage Message JSON object
*/
function buildDocumentStorageMessage(locationId, receiverId, documentId, messageType, messageContent) {
	var storageMsg = {};
	storageMsg[&apos;locationId&apos;] = locationId;
	storageMsg[&apos;receiverId&apos;] = receiverId;
	storageMsg[&apos;documentId&apos;] = documentId;
	storageMsg[&apos;messageType&apos;] = messageType;
	storageMsg[&apos;messageContent&apos;] = messageContent;
	return storageMsg;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.7.1">
                <id>d55c3c9d-e151-4034-9d14-35f86a4a58f1</id>
                <name>Check Segment</name>
                <revision>1</revision>
                <lastModified>
                  <time>1557439108774</time>
                  <timezone>Etc/UTC</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Verify that the segment exists.

	@param {Object} segment - 
	@return {boolean} return true if the segment exists
*/
function segmentExist(segment) {
	return getArrayOrXmlLength(segment) &gt; 0;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.7.1">
                <id>738d81a1-d04c-482e-a011-30c61a09b3d3</id>
                <name>Create Array of DocumentAttachment</name>
                <revision>4</revision>
                <lastModified>
                  <time>1557514941299</time>
                  <timezone>Etc/UTC</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Create an Array of DocumentAttachment objects from a JSON object

	@param {Object[]} jsonAttachments - 
	@return {DocumentAttachment[]} return the Array of DocumentAttachment
*/
function createDocumentAttachmentArray(jsonAttachments) {
	var attachments = [];
	if (jsonAttachments != null) {
		for (var i = 0; i &lt; jsonAttachments.length; i++) {
			var attachment = jsonAttachments[i];
			attachments.push(new Packages.ca.uvic.leadlab.cdxconnector.messages.DocumentAttachment(
				attachment[&apos;mediaType&apos;],
				attachment[&apos;content&apos;],
				attachment[&apos;hash&apos;],
				attachment[&apos;reference&apos;]));
		}
	}
	return attachments;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.7.1">
                <id>bcd2a30d-111f-4fd3-9724-0e9a2e7dfe50</id>
                <name>Create DatabaseConnection</name>
                <revision>1</revision>
                <lastModified>
                  <time>1557439108932</time>
                  <timezone>Etc/UTC</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get the DatabaseConnection object

	@return {DatabaseConnection} return the DatabaseConnection object
*/
function getDBConnection() {
	return DatabaseConnectionFactory.createDatabaseConnection(
			globalMap.get(&apos;obib.db.driver&apos;), 
			globalMap.get(&apos;obib.db.url&apos;), 
			globalMap.get(&apos;obib.db.username&apos;) , 
			globalMap.get(&apos;obib.db.password&apos;));
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.7.1">
                <id>60bfd3ac-552a-4d59-ac1d-48fbe4f430b2</id>
                <name>Create Error Message</name>
                <revision>12</revision>
                <lastModified>
                  <time>1557795952834</time>
                  <timezone>Etc/UTC</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Create JSON error message

	@param {String} error - Error message
	@param {Object} obibErrors - Associative Array of errors
	@return {String} return the JSON response
*/
function createErrorMessage(error, obibErrors) {
	return JSON.stringify({&apos;status&apos;: &apos;ERROR&apos;, &apos;message&apos;: error, &apos;obibErrors&apos;: obibErrors})
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.7.1">
                <id>f1de696c-f547-49ae-8225-f7e40ed2c87c</id>
                <name>Create Segment Before</name>
                <revision>1</revision>
                <lastModified>
                  <time>1557439108424</time>
                  <timezone>Etc/UTC</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Create a new segment and insert it before the target segment.
	
	@param {String} name - The name of the segment to create.
	@param {String} segment - The existing segment that the new segment will be inserted before.
	@return {String} return The existing segment that the new segment will be inserted after.
*/
function createSegmentBefore(name, segment) {
	var msgObj = segment;
   	while (msgObj.parent() != undefined) { 
		msgObj = msgObj.parent(); 
	}
     msgObj.insertChildBefore(segment[0], new XML(&apos;&lt;&apos; + name + &apos;&gt;&lt;/&apos; + name + &apos;&gt;&apos;));
   	return msgObj.child(segment[0].childIndex() - 1);
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.7.1">
                <id>0b2ecd99-756c-4a93-9bba-230bf83b0c62</id>
                <name>Format CDA Date</name>
                <revision>8</revision>
                <lastModified>
                  <time>1557969826591</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Format the date for the CDA format &apos;yyyyMMdd&apos;

	@param {Date/String} date -
	@return {String} return the formated date
*/
function formatCDADate(date) {
	return DateUtil.convertDate(&quot;yyyy-MM-dd&quot;, &quot;yyyyMMdd&quot;, date);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.7.1">
                <id>07a8a226-a4d4-4248-b816-00011d888d0f</id>
                <name>Format CDA Date/Time</name>
                <revision>7</revision>
                <lastModified>
                  <time>1557969321208</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Format the date/time for the CDA format &apos;yyyyMMddHHmmZZZ&apos;

	@param {Date/String} dateTime - 
	@return {String} return the formated dateTime
*/
function formatCDADateTime(dateTime) {
	return DateUtil.formatDate(&apos;yyyyMMddHHmmZZZ&apos;, new Date(dateTime));
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.7.1">
                <id>e83b8bbf-433a-4c3d-88a2-16f4132b38af</id>
                <name>Handle Return Message</name>
                <revision>1</revision>
                <lastModified>
                  <time>1557439108623</time>
                  <timezone>Etc/UTC</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Handle the return message creation.

	@param {Object} responseStatus - 
	@param {Object} responseStatusMessage - 
	@param {Object} responseMessage - 
	@param {Function} createMessage - Callback function responsible for creating and return the result message.
	@return {String} return the stringify json message
*/
function handleResponseMessage(responseStatus, responseStatusMessage, responseMessage, createMessage) {
	if (responseStatus === SENT) { // process only SENT messages
		return JSON.stringify(createMessage()); // Convert the json to string and return it
	} else if (responseStatus === ERROR) {
		throw &quot;Error Message: &apos;&quot; + responseStatusMessage.toString() 
			+ &quot;&apos;\n Original Message: &apos;&quot; + msg.toString() + &quot;&apos;&quot;;
	} else {
		throw &quot;Not able to handle the response code: &apos;&quot; + responseStatus 
		+ &quot;&apos; \n Error Message: &apos;&quot; + responseStatusMessage.toString() 
		+ &quot;&apos;\n Original Message: &apos;&quot; + msg.toString() + &quot;&apos;&quot;;
	}
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.7.1">
                <id>f4743440-d5d2-44f2-acd9-35746c48d9b3</id>
                <name>Parse CDA Address</name>
                <revision>1</revision>
                <lastModified>
                  <time>1557439108023</time>
                  <timezone>Etc/UTC</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Parse the CDA Address to JSON Object

	@param {String} cdaAddress - 
	@return {String} return the parsed Address object
*/
function parseCDAAddress(cdaAddress) {
	var addr = {};
	addr[&apos;use&apos;] = cdaAddress[&apos;@use&apos;].toString();
	// Try to get the street address from the body of the tag &lt;addr&gt; (Document format)
	var strtAddr = cdaAddress.toString().match(/&lt;addr.*&gt;(.+?)(?=&lt;delimiter\/&gt;)/); // return array of matchs
	if (strtAddr) {
		addr[&apos;streetAddress&apos;] = strtAddr[1]; //.replace(/(&lt;\/?[^&gt;]+&gt;)/gi, &apos;&apos;); // strip xml tags?
	}
	// Try to append the list of &apos;delimiters&apos; (List clinics/providers format)
	if (segmentExist(cdaAddress[&apos;delimiter&apos;])) {
		for (var i = 0; i &lt; getArrayOrXmlLength(cdaAddress[&apos;delimiter&apos;]); i++) {
			addr[&apos;streetAddress&apos;] = (addr[&apos;streetAddress&apos;] ? addr[&apos;streetAddress&apos;] + &apos; &apos; : &apos;&apos;) + cdaAddress[&apos;delimiter&apos;][i].toString();
		}
		addr[&apos;streetAddress&apos;] = addr[&apos;streetAddress&apos;].trim(); // trim any whitespace from both side of the address
	}
	if (segmentExist(cdaAddress[&apos;city&apos;])) {
		addr[&apos;city&apos;] = cdaAddress[&apos;city&apos;].toString();
	}
	if (segmentExist(cdaAddress[&apos;province&apos;])) {
		addr[&apos;province&apos;] = cdaAddress[&apos;state&apos;].toString();
	}
	if (segmentExist(cdaAddress[&apos;postalCode&apos;])) {
		addr[&apos;postalCode&apos;] = cdaAddress[&apos;postalCode&apos;].toString();
	}
	if (segmentExist(cdaAddress[&apos;country&apos;])) {
		addr[&apos;country&apos;] = cdaAddress[&apos;country&apos;].toString();
	}
	return addr;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.7.1">
                <id>41f1daa2-e22b-439a-b0b5-16bc108c007e</id>
                <name>Parse CDA Date/Time</name>
                <revision>1</revision>
                <lastModified>
                  <time>1557439108842</time>
                  <timezone>Etc/UTC</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Parse the CDA Date/Time to Date object

	@param {String} cdaDateTime - 
	@return {String} return the Date object
*/
function parseCDADateTime(cdaDateTime) {
	if (cdaDateTime &amp;&amp; cdaDateTime.length &lt;= 8) {
		return DateUtil.convertDate(&quot;yyyyMMdd&quot;, &quot;yyyy-MM-dd&quot;, cdaDateTime);
	}
	return DateUtil.convertDate(&quot;yyyyMMddHHmmZZZ&quot;, &quot;yyyy-MM-dd\&apos;T\&apos;HH:mm:ssZ&quot;, cdaDateTime);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.7.1">
                <id>1dc8b8fe-b046-4292-a7c2-218c37bd0d2d</id>
                <name>Parse CDA Date/TIme to DB format</name>
                <revision>1</revision>
                <lastModified>
                  <time>1557439108977</time>
                  <timezone>Etc/UTC</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Parse the CDA Date/Time to Date in DB format

	@param {String} cdaDateTime - 
	@return {String} return the Date in DB format
*/
function parseCDADateTimeToDB(cdaDateTime) {
	if (cdaDateTime &amp;&amp; cdaDateTime.length &lt;= 8) {
		return DateUtil.convertDate(&quot;yyyyMMdd&quot;, &quot;yyyy-MM-dd&quot;, cdaDateTime);
	}
	return DateUtil.convertDate(&quot;yyyyMMddHHmmZZZ&quot;, &quot;yyyy-MM-dd hh:mm:ss&quot;, cdaDateTime);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.7.1">
                <id>a2f73260-eb70-4dcc-8b8a-9350c3bec9fd</id>
                <name>Parse CDA ID</name>
                <revision>1</revision>
                <lastModified>
                  <time>1557439107886</time>
                  <timezone>Etc/UTC</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Parse the CDA Id to JSON object

	@param {String} cdaID - 
	@return {String} return the parsed ID object
*/
function parseCDAId(cdaID) {
	var id = {};
	if (cdaID[&apos;@extension&apos;]) {
		id[&apos;code&apos;] = cdaID[&apos;@extension&apos;].toString();
	}
	if (cdaID[&apos;@root&apos;]) {
		id[&apos;type&apos;] = cdaID[&apos;@root&apos;].toString();
	}
	return id;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.7.1">
                <id>a0354d90-ffa8-47c5-9776-e41927d2f0d0</id>
                <name>Parse CDA Name</name>
                <revision>1</revision>
                <lastModified>
                  <time>1557439108115</time>
                  <timezone>Etc/UTC</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Parse the CDA Name to JSON object

	@param {String} cdaName - 
	@return {String} return the parsed Name object
*/
function parseCDAName(cdaName) {
	var name = {};
	name[&apos;use&apos;] = cdaName[&apos;@use&apos;].toString();
	name[&apos;family&apos;] = cdaName[&apos;family&apos;].toString();
	name[&apos;given&apos;] = [];
	for (var i = 0; i &lt; getArrayOrXmlLength(cdaName[&apos;given&apos;]); i++) {
		name[&apos;given&apos;][i] = cdaName[&apos;given&apos;][i].toString();
	}
	if (segmentExist(cdaName[&apos;prefix&apos;])) {
		name[&apos;prefix&apos;] = cdaName[&apos;prefix&apos;].toString();
	}
	if (segmentExist(cdaName[&apos;suffix&apos;])) {
		name[&apos;suffix&apos;] = cdaName[&apos;suffix&apos;].toString();
	}
	return name;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.7.1">
                <id>407e6d63-57cf-42f8-b555-5d6c575f4f55</id>
                <name>Parse CDA Telecom</name>
                <revision>1</revision>
                <lastModified>
                  <time>1557439109060</time>
                  <timezone>Etc/UTC</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Parse the CDA Telecom to JSON object

	@param {String} telecom - 
	@return {String} return the parsed Telecom object
*/
function parseCDATelecom(cdaTelecom) {
	var telecom = {};
	telecom[&apos;use&apos;] = cdaTelecom[&apos;@use&apos;].toString();
	var telParts = cdaTelecom[&apos;@value&apos;].split(&apos;:&apos;);
	telecom[&apos;type&apos;] = telParts[0];	
	telecom[&apos;value&apos;] = telParts[1];
	return telecom;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.7.1">
                <id>dfd86988-26e1-4d97-b81d-fee49e303272</id>
                <name>Store OBIB Error</name>
                <revision>14</revision>
                <lastModified>
                  <time>1557795722702</time>
                  <timezone>Etc/UTC</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Store the error as an &apos;associative array&apos; in the channel map.
	To retrieve the array of errors use &apos;channelMap.get(&apos;obibErrors&apos;)&apos;

	@param {String} errorCode - the key of the associative array
	@param {String} errorMessage - the value of the associative array
*/
function storeOBIBError(errorCode, errorMessage) {
	var obibErrors = channelMap.get(&apos;obibErrors&apos;);
	if (obibErrors == null) {
		obibErrors = new Object();
	}
	obibErrors[errorCode] = errorMessage;
	channelMap.put(&apos;obibErrors&apos;, obibErrors);
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
        </codeTemplateLibraries>
      </exportData>
    </channel>
    <channel version="3.7.1">
      <id>2375f320-7fd5-48cd-b3bb-53c22dab182b</id>
      <nextMetaDataId>2</nextMetaDataId>
      <name>CDA Document Parser</name>
      <description></description>
      <revision>14</revision>
      <sourceConnector version="3.7.1">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.vm.VmReceiverProperties" version="3.7.1">
          <pluginProperties/>
          <sourceConnectorProperties version="3.7.1">
            <responseVariable>responseMessage</responseVariable>
            <respondAfterProcessing>true</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>1</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
        </properties>
        <transformer version="3.7.1">
          <elements/>
          <inboundTemplate encoding="base64"></inboundTemplate>
          <outboundTemplate encoding="base64"></outboundTemplate>
          <inboundDataType>HL7V3</inboundDataType>
          <outboundDataType>HL7V3</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.7.1">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.7.1">
              <stripNamespaces>false</stripNamespaces>
            </serializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.7.1">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </inboundProperties>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.7.1">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.7.1">
              <stripNamespaces>false</stripNamespaces>
            </serializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.7.1">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="3.7.1">
          <elements/>
        </filter>
        <transportName>Channel Reader</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="3.7.1">
          <metaDataId>1</metaDataId>
          <name>Parse CDA Document</name>
          <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.7.1">
            <pluginProperties/>
            <destinationConnectorProperties version="3.7.1">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <script>logger.debug(&quot;Parse CDA Document&quot;);

//logger.debug(&quot;CDA DOC: &quot; + XmlUtil.prettyPrint(connectorMessage.getRawData()));

responseMap.put(&apos;responseMessage&apos;, connectorMessage.getTransformedData());	</script>
          </properties>
          <transformer version="3.7.1">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.7.1">
                <name>Parse Header Attributes</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>try {
	// Document Header
	tmp[&apos;documentId&apos;] = msg[&apos;id&apos;][&apos;@extension&apos;].toString();
	
	tmp[&apos;template&apos;] = {};
	tmp[&apos;template&apos;][&apos;templateId&apos;] = msg[&apos;templateId&apos;][&apos;@root&apos;].toString();
	tmp[&apos;template&apos;][&apos;templateName&apos;] = msg[&apos;templateId&apos;][&apos;@assigningAuthorityName&apos;].toString();

	tmp[&apos;loinc&apos;] = {};
	tmp[&apos;loinc&apos;][&apos;loincCode&apos;] = msg[&apos;code&apos;][&apos;@code&apos;].toString();
	tmp[&apos;loinc&apos;][&apos;displayName&apos;] = msg[&apos;code&apos;][&apos;@displayName&apos;].toString();
	
	tmp[&apos;effectiveTime&apos;] = parseCDADateTime(msg[&apos;effectiveTime&apos;][&apos;@value&apos;].toString());
	
	tmp[&apos;title&apos;] = msg[&apos;title&apos;].toString();
	
	if (segmentExist(msg[&apos;versionNumber&apos;])) {
		tmp[&apos;versionNumber&apos;] = msg[&apos;versionNumber&apos;].toString();
	}
	
	if (segmentExist(msg[&apos;setId&apos;])) {
		tmp[&apos;setId&apos;] = parseCDAId(msg[&apos;setId&apos;]);
	}
} catch(e) {
	logger.error(&quot;Error on &apos;Parse Header Attributes&apos;: &quot; + e);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.7.1">
                <name>Parse RecordTarget (Patient)</name>
                <sequenceNumber>1</sequenceNumber>
                <enabled>true</enabled>
                <script>try {
	// RecordTarget (Patient)
	var patientRole = msg[&apos;recordTarget&apos;][&apos;patientRole&apos;];
	
	var patient = {};
	
	patient[&apos;ids&apos;] = [];
	for (var i = 0; i &lt; getArrayOrXmlLength(patientRole[&apos;id&apos;]); i++) {
		patient[&apos;ids&apos;][i] = parseCDAId(patientRole[&apos;id&apos;][i]);
	}

	if (segmentExist(patientRole[&apos;addr&apos;])) {
		patient[&apos;addresses&apos;] = [];
		for (var i = 0; i &lt; getArrayOrXmlLength(patientRole[&apos;addr&apos;]); i++) {
			patient[&apos;addresses&apos;][i] = parseCDAAddress(patientRole[&apos;addr&apos;][i]);
		}
	}

	if (segmentExist(patientRole[&apos;telecom&apos;])) {
		patient[&apos;telecoms&apos;] = [];
		for (var i = 0; i &lt; getArrayOrXmlLength(patientRole[&apos;telecom&apos;]); i++) {
			patient[&apos;telecoms&apos;][i] = parseCDATelecom(patientRole[&apos;telecom&apos;][i]);
		}
	}
	
	patient[&apos;names&apos;] = [];
	for (var i = 0; i &lt; getArrayOrXmlLength(patientRole[&apos;patient&apos;][&apos;name&apos;]); i++) {
		patient[&apos;names&apos;][i] = parseCDAName(patientRole[&apos;patient&apos;][&apos;name&apos;][i]);
	}
	
	patient[&apos;genderCode&apos;] = patientRole[&apos;patient&apos;][&apos;administrativeGenderCode&apos;][&apos;@code&apos;].toString();
	
	patient[&apos;birthday&apos;] = parseCDADateTime(patientRole[&apos;patient&apos;][&apos;birthTime&apos;][&apos;@value&apos;].toString());
	
	tmp[&apos;patient&apos;] = patient;
} catch(e) {
	logger.error(&quot;Error on &apos;Parse RecordTarget (Patient)&apos;: &quot; + e);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.7.1">
                <name>Parse Authors</name>
                <sequenceNumber>2</sequenceNumber>
                <enabled>true</enabled>
                <script>try {
	// Authors
	tmp[&apos;authors&apos;] = [];
	for (var i = 0; i &lt; getArrayOrXmlLength(msg[&apos;author&apos;]); i++) {
		var author = {};
		
		author[&apos;time&apos;] = parseCDADateTime(msg[&apos;author&apos;][i][&apos;time&apos;][&apos;@value&apos;].toString());

		var assignedAuthor = msg[&apos;author&apos;][i][&apos;assignedAuthor&apos;];

		author[&apos;ids&apos;] = [];
		for (var j = 0; j &lt; getArrayOrXmlLength(assignedAuthor[&apos;id&apos;]); j++) {
			author[&apos;ids&apos;][j] = parseCDAId(assignedAuthor[&apos;id&apos;][j]);
		}

		if (segmentExist(assignedAuthor[&apos;addr&apos;])) {
			author[&apos;addresses&apos;] = [];
			for (var j = 0; j &lt; getArrayOrXmlLength(assignedAuthor[&apos;addr&apos;]); j++) {
				author[&apos;addresses&apos;][j] = parseCDAAddress(assignedAuthor[&apos;addr&apos;][j]);
			}
		}
		
		if (segmentExist(assignedAuthor[&apos;telecom&apos;])) {
			author[&apos;telecoms&apos;] = [];
			for (var j = 0; j &lt; getArrayOrXmlLength(assignedAuthor[&apos;telecom&apos;]); j++) {
				author[&apos;telecoms&apos;][j] = parseCDATelecom(assignedAuthor[&apos;telecom&apos;][j]);
			}
		}

		if (segmentExist(assignedAuthor[&apos;assignedAuthoringDevice&apos;])) {
			var softwareName = assignedAuthor[&apos;assignedAuthoringDevice&apos;][&apos;softwareName&apos;];
			author[&apos;software&apos;] = {}
			author[&apos;software&apos;][&apos;name&apos;] = softwareName[&apos;@displayName&apos;].toString();
			author[&apos;software&apos;][&apos;code&apos;] = softwareName[&apos;@code&apos;].toString();
		} else {
			author[&apos;name&apos;] = parseCDAName(assignedAuthor[&apos;assignedPerson&apos;][&apos;name&apos;]);
		}
		
		tmp[&apos;authors&apos;][i] = author;
	}
} catch(e) {
	logger.error(&quot;Error on &apos;Parse Authors&apos;: &quot; + e);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.7.1">
                <name>Parse Information Recipients</name>
                <sequenceNumber>3</sequenceNumber>
                <enabled>true</enabled>
                <script>try {
	// Information Recipients
	tmp[&apos;recipients&apos;] = [];
	for (var i = 0; i &lt; getArrayOrXmlLength(msg[&apos;informationRecipient&apos;]); i++) {
		var recipient = {};
		
		recipient[&apos;typeCode&apos;] = msg[&apos;informationRecipient&apos;][i][&apos;@typeCode&apos;].toString()
		
		var intendedRecipient = msg[&apos;informationRecipient&apos;][i][&apos;intendedRecipient&apos;];

		recipient[&apos;ids&apos;] = [];
		for (var j = 0; j &lt; getArrayOrXmlLength(intendedRecipient[&apos;id&apos;]); j++) {
			recipient[&apos;ids&apos;][j] = parseCDAId(intendedRecipient[&apos;id&apos;][j]);
		}

		if (segmentExist(intendedRecipient[&apos;addr&apos;])) {
			recipient[&apos;addresses&apos;] = [];
			for (var j = 0; j &lt; getArrayOrXmlLength(intendedRecipient[&apos;addr&apos;]); j++) {
				recipient[&apos;addresses&apos;][j] = parseCDAAddress(intendedRecipient[&apos;addr&apos;][j]);
			}
		}

		if (segmentExist(intendedRecipient[&apos;telecom&apos;])) {
			recipient[&apos;telecoms&apos;] = [];
			for (var j = 0; j &lt; getArrayOrXmlLength(intendedRecipient[&apos;telecom&apos;]); j++) {
				recipient[&apos;telecoms&apos;][j] = parseCDATelecom(intendedRecipient[&apos;telecom&apos;][j]);
			}
		}

		recipient[&apos;name&apos;] = parseCDAName(intendedRecipient[&apos;informationRecipient&apos;][&apos;name&apos;]);
		
		// Received Organization
		if (segmentExist(intendedRecipient[&apos;receivedOrganization&apos;])) {
			var organization = {};

			var receivedOrganization = intendedRecipient[&apos;receivedOrganization&apos;];
			
			organization[&apos;ids&apos;] = [];
			for (var j = 0; j &lt; getArrayOrXmlLength(receivedOrganization[&apos;id&apos;]); j++) {
				organization[&apos;ids&apos;][j] = parseCDAId(receivedOrganization[&apos;id&apos;][j]);
			}
			
			organization[&apos;name&apos;] = receivedOrganization[&apos;name&apos;].toString();
			
			recipient[&apos;receivedOrganization&apos;] = organization;
		}
		
		tmp[&apos;recipients&apos;][i] = recipient;
	}
} catch(e) {
	logger.error(&quot;Error on &apos;Parse Information Recipients&apos;: &quot; + e);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.7.1">
                <name>Parse Custodian</name>
                <sequenceNumber>4</sequenceNumber>
                <enabled>true</enabled>
                <script>try {
	// Custodian
	var custodian = {};

	var representedCustodian = msg[&apos;custodian&apos;][&apos;assignedCustodian&apos;][&apos;representedCustodianOrganization&apos;];

	custodian[&apos;id&apos;] = parseCDAId(representedCustodian[&apos;id&apos;]);

	custodian[&apos;name&apos;] = representedCustodian[&apos;name&apos;].toString();
	
	tmp[&apos;custodian&apos;] = custodian;
} catch(e) {
	logger.error(&quot;Error on &apos;Parse Custodian&apos;: &quot; + e);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.7.1">
                <name>Parse Data Enterer</name>
                <sequenceNumber>5</sequenceNumber>
                <enabled>true</enabled>
                <script>try {
	// Data Enterer
	if (segmentExist(msg[&apos;dataEnterer&apos;])) {
		var dataEnterer = {};
		
		dataEnterer[&apos;time&apos;] = parseCDADateTime(msg[&apos;dataEnterer&apos;][&apos;time&apos;][&apos;@value&apos;].toString());

		var assignedEntity = msg[&apos;dataEnterer&apos;][&apos;assignedEntity&apos;];

		if (segmentExist(assignedEntity[&apos;id&apos;])) {
			dataEnterer[&apos;id&apos;] = parseCDAId(assignedEntity[&apos;id&apos;]);
		}

		if (segmentExist(assignedEntity[&apos;addr&apos;])) {
			dataEnterer[&apos;addresses&apos;] = [];
			for (var j = 0; j &lt; getArrayOrXmlLength(assignedEntity[&apos;addr&apos;]); j++) {
				dataEnterer[&apos;addresses&apos;][j] = parseCDAAddress(assignedEntity[&apos;addr&apos;][j]);
			}
		}
		
		if (segmentExist(assignedEntity[&apos;telecom&apos;])) {
			dataEnterer[&apos;telecoms&apos;] = [];
			for (var j = 0; j &lt; getArrayOrXmlLength(assignedEntity[&apos;telecom&apos;]); j++) {
				dataEnterer[&apos;telecoms&apos;][j] = parseCDATelecom(assignedEntity[&apos;telecom&apos;][j]);
			}
		}

		if (segmentExist(assignedEntity[&apos;assignedPerson&apos;])) {
			dataEnterer[&apos;name&apos;] = parseCDAName(assignedEntity[&apos;assignedPerson&apos;][&apos;name&apos;]);
		}
		
		tmp[&apos;dataEnterer&apos;] = dataEnterer;
	}
} catch(e) {
	logger.error(&quot;Error on &apos;Parse Data Enterer&apos;: &quot; + e);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.7.1">
                <name>Parse Authenticators</name>
                <sequenceNumber>6</sequenceNumber>
                <enabled>true</enabled>
                <script>// TODO Authenticators</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.7.1">
                <name>Parse Participants</name>
                <sequenceNumber>7</sequenceNumber>
                <enabled>true</enabled>
                <script>try {
	// Participants
	tmp[&apos;participants&apos;] = [];
	for (var i = 0; i &lt; getArrayOrXmlLength(msg[&apos;participant&apos;]); i++) {
		var participant = {};

		participant[&apos;typeCode&apos;] = msg[&apos;participant&apos;][i][&apos;@typeCode&apos;].toString();
		participant[&apos;functionCode&apos;] = msg[&apos;participant&apos;][i][&apos;functionCode&apos;][&apos;@code&apos;].toString();
		
		var associatedEntity = msg[&apos;participant&apos;][i][&apos;associatedEntity&apos;];

		participant[&apos;ids&apos;] = [];
		for (var j = 0; j &lt; getArrayOrXmlLength(associatedEntity[&apos;id&apos;]); j++) {
			participant[&apos;ids&apos;][j] = parseCDAId(associatedEntity[&apos;id&apos;][j]);
		}

		if (segmentExist(associatedEntity[&apos;addr&apos;])) {
			participant[&apos;addresses&apos;] = [];
			for (var j = 0; j &lt; getArrayOrXmlLength(associatedEntity[&apos;addr&apos;]); j++) {
				participant[&apos;addresses&apos;][j] = parseCDAAddress(associatedEntity[&apos;addr&apos;][j]);
			}
		}

		if (segmentExist(associatedEntity[&apos;telecom&apos;])) {
			participant[&apos;telecoms&apos;] = [];
			for (var j = 0; j &lt; getArrayOrXmlLength(associatedEntity[&apos;telecom&apos;]); j++) {
				participant[&apos;telecoms&apos;][j] = parseCDATelecom(associatedEntity[&apos;telecom&apos;][j]);
			}
		}
		
		participant[&apos;name&apos;] = parseCDAName(associatedEntity[&apos;associatedPerson&apos;][&apos;name&apos;]);

		tmp[&apos;participants&apos;][i] = participant;
	}
} catch(e) {
	logger.error(&quot;Error on &apos;Parse Participants&apos;: &quot; + e);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.7.1">
                <name>Parse Orders (inFulfillmentOf)</name>
                <sequenceNumber>8</sequenceNumber>
                <enabled>true</enabled>
                <script>try {
	// Orders
	tmp[&apos;orders&apos;] = [];
	for (var i = 0; i &lt; getArrayOrXmlLength(msg[&apos;inFulfillmentOf&apos;]); i++) {
		var order = {};

		var inFulfillmentOfOrder = msg[&apos;inFulfillmentOf&apos;][i][&apos;order&apos;];

		order[&apos;ids&apos;] = [];
		for (var j = 0; j &lt; getArrayOrXmlLength(inFulfillmentOfOrder[&apos;id&apos;]); j++) {
			order[&apos;ids&apos;][j] = parseCDAId(inFulfillmentOfOrder[&apos;id&apos;][j]);
		}

		if (segmentExist(inFulfillmentOfOrder[&apos;code&apos;])) {
			order[&apos;statusCode&apos;] = inFulfillmentOfOrder[&apos;code&apos;][&apos;@code&apos;].toString();
		}

		tmp[&apos;orders&apos;][i] = order;
	}
} catch(e) {
	logger.error(&quot;Error on &apos;Parse Orders&apos;: &quot; + e);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.7.1">
                <name>Parse ServiceEvents (documentationOf)</name>
                <sequenceNumber>9</sequenceNumber>
                <enabled>true</enabled>
                <script>try {
	// Orders
	tmp[&apos;serviceEvents&apos;] = [];
	for (var i = 0; i &lt; getArrayOrXmlLength(msg[&apos;documentationOf&apos;]); i++) {
		var serviceEvent = {};

		var documentationOfServiceEvent = msg[&apos;documentationOf&apos;][i][&apos;serviceEvent&apos;];

		if (segmentExist(documentationOfServiceEvent.*::[&apos;statusCode&apos;])) {
			serviceEvent[&apos;statusCode&apos;] = documentationOfServiceEvent.*::[&apos;statusCode&apos;][&apos;@code&apos;].toString();
		}

		if (segmentExist(documentationOfServiceEvent[&apos;effectiveTime&apos;])) {
			serviceEvent[&apos;effectiveTime&apos;] = parseCDADateTime(documentationOfServiceEvent[&apos;effectiveTime&apos;][&apos;@value&apos;].toString());
		}
		
		tmp[&apos;serviceEvents&apos;][i] = serviceEvent;
	}
} catch(e) {
	logger.error(&quot;Error on &apos;Parse ServiceEvents&apos;: &quot; + e);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.7.1">
                <name>Parse Text</name>
                <sequenceNumber>10</sequenceNumber>
                <enabled>true</enabled>
                <script>try {
	// Text
	var text = msg[&apos;component&apos;][&apos;nonXMLBody&apos;][&apos;text&apos;];

	tmp[&apos;nonXMLBody&apos;] = {};
	tmp[&apos;nonXMLBody&apos;][&apos;mediaType&apos;] = text[&apos;@mediaType&apos;].toString();
	
	if (text[&apos;@representation&apos;] &amp;&amp; text[&apos;@representation&apos;].toString() === &apos;TXT&apos;) { 
		// Plain Text
		tmp[&apos;nonXMLBody&apos;][&apos;content&apos;] = text.toString();
	} else { 
		// Attachment reference
		tmp[&apos;nonXMLBody&apos;][&apos;content&apos;] = text[&apos;reference&apos;][&apos;@value&apos;].toString();
	}
} catch(e) {
	logger.error(&quot;Error on &apos;Parse Text&apos;: &quot; + e);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64">PD94bWwtc3R5bGVzaGVldCB0eXBlPSJ0ZXh0L3hzbCIgaHJlZj0iQ0RBLnhzbCI/PjxDbGluaWNh
bERvY3VtZW50IHhtbG5zPSJ1cm46aGw3LW9yZzp2MyIgeG1sbnM6eHNpPSJodHRwOi8vd3d3Lncz
Lm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeG1sbnM6bnMwPSJodHRwOi8vbWljcm9zb2Z0
LmNvbS9IZWFsdGhDYXJlL0hMNy8yWCIgeG1sbnM6YmNjZGE9InVybjpiY2NkYSIgeG1sbnM6eGFs
YW49Imh0dHA6Ly94bWwuYXBhY2hlLm9yZy94c2x0IiBjbGFzc0NvZGU9IkRPQ0NMSU4iIG1vb2RD
b2RlPSJFVk4iPjwhLS0mIzEzOwoJCQkJKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKiomIzEzOwoJCQkJQ0RBIEhlYWRlciAtIElIQSBMYWIvTWlj
cm8gVHJhbnNmb3JtJiMxMzsKCQkJCSoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqJiMxMzsKCQkJCS0tPjxyZWFsbUNvZGUgY29kZT0iQ0EtQkMi
IC8+PHR5cGVJZCByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xLjMiIGV4dGVuc2lvbj0iUE9DRF9I
RDAwMDA0MCIgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iSEw3IENEQSBSMiIgLz48dGVtcGxhdGVJ
ZCByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuMSIgYXNzaWduaW5nQXV0aG9yaXR5
TmFtZT0iR2VuZXJhbCBMYWIgUmVwb3J0IHRlbXBsYXRlIiAvPjxpZCByb290PSIyLjE2Ljg0MC4x
LjExMzg4My4zLjI3Ny4xMDAuMyIgZXh0ZW5zaW9uPSI0NGVjN2VjNC03NDc1LTRkMGMtODJkNC03
ZjJiYWQwZTJjZTkiIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkNEWCBDbGluaWNhbCBEb2N1bWVu
dCBJRCIgLz48Y29kZSBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42LjEiIGNvZGU9IjEx
NTAyLTIiIGNvZGVTeXN0ZW1OYW1lPSJMT0lOQyBDb2RlIiBkaXNwbGF5TmFtZT0iR2VuZXJhbCBM
YWIgUmVwb3J0IiAvPjx0aXRsZT5HZW5lcmFsIExhYiBSZXBvcnQ8L3RpdGxlPjwhLS1NZXNzYWdl
IERhdGVUaW1lIChNU0guNyktLT48ZWZmZWN0aXZlVGltZSB2YWx1ZT0iMjAxOTAxMjQxMTE0LTA4
MDAiIC8+PGNvbmZpZGVudGlhbGl0eUNvZGUgY29kZT0iTiIgY29kZVN5c3RlbT0iMi4xNi44NDAu
MS4xMTM4ODMuNS4yNSIgY29kZVN5c3RlbU5hbWU9IkNvbmZpZGVudGlhbGl0eSIgLz48bGFuZ3Vh
Z2VDb2RlIGNvZGU9ImVuLUNBIiAvPjwhLS0gPT09PSBQYXRpZW50IEluZm9ybWF0aW9uID09PT0g
LS0+PHJlY29yZFRhcmdldCB0eXBlQ29kZT0iUkNUIiBjb250ZXh0Q29udHJvbENvZGU9Ik9QIj48
cGF0aWVudFJvbGUgY2xhc3NDb2RlPSJQQVQiPjxpZCByb290PSIyLjE2Ljg0MC4xLjExMzg4My40
LjUwIiBleHRlbnNpb249Ijk2OTg2NDk3MjEiIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkJDIFBh
dGllbnQgSGVhbHRoIE51bWJlciIgLz48aWQgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcu
MS43MyIgZXh0ZW5zaW9uPSJBMDIxNzA3NjEiIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IklIQSBQ
YXRpZW50IEVNUiBOdW1iZXIiIC8+PGlkIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEu
NzEiIGV4dGVuc2lvbj0iVkowMDM2NTkzMyIgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iSUhBIFBh
dGllbnQgVW5pdCBOdW1iZXIiIC8+PGFkZHIgdXNlPSJIIj4mIzEzOwoxMjA4IEdvcm1seSBGcm9u
dCBTdDxkZWxpbWl0ZXIgLz48Y2l0eT5EdW5jYW48L2NpdHk+PHN0YXRlPkNBLUJDPC9zdGF0ZT48
cG9zdGFsQ29kZT5WOUwgMUw2PC9wb3N0YWxDb2RlPjwvYWRkcj48dGVsZWNvbSB1c2U9IkgiIHZh
bHVlPSJ0ZWw6MjUwLTgzMi01ODIwIiAvPjxwYXRpZW50IGNsYXNzQ29kZT0iUFNOIiBkZXRlcm1p
bmVyQ29kZT0iSU5TVEFOQ0UiPjxuYW1lIHVzZT0iTCI+PGZhbWlseT5JaGFzaGJhY2hlcjwvZmFt
aWx5PjxnaXZlbj5QbGlzPC9naXZlbj48L25hbWU+PGFkbWluaXN0cmF0aXZlR2VuZGVyQ29kZSBj
b2RlPSJGIiAvPjxiaXJ0aFRpbWUgdmFsdWU9IjE5MTgwNDE3IiAvPjwvcGF0aWVudD48L3BhdGll
bnRSb2xlPjwvcmVjb3JkVGFyZ2V0PjwhLS0gPT09PSBBdXRob3I6IFBlcnNvbiBhbmQvb3Igc29m
dHdhcmUgdGhhdCBjcmVhdGVkIHRoaXMgZG9jdW1lbnQgPT09PSAtLT48YXV0aG9yIHR5cGVDb2Rl
PSJBVVQiIGNvbnRleHRDb250cm9sQ29kZT0iT1AiPjx0aW1lIHZhbHVlPSIyMDE5MDEyNDAyMDAt
MDgwMCIgLz48YXNzaWduZWRBdXRob3IgY2xhc3NDb2RlPSJBU1NJR05FRCI+PGlkIHJvb3Q9IjIu
MTYuODQwLjEuMTEzODgzLjMuMjc3LjEuODEiIGV4dGVuc2lvbj0iODA1NTY2IiBhc3NpZ25pbmdB
dXRob3JpdHlOYW1lPSJJSEEgTWVzc2FnZSBOdW1iZXIiIC8+PGFzc2lnbmVkQXV0aG9yaW5nRGV2
aWNlIGNsYXNzQ29kZT0iREVWIiBkZXRlcm1pbmVyQ29kZT0iSU5TVEFOQ0UiPjxzb2Z0d2FyZU5h
bWUgY29kZT0iTEFCX0lIVkpIIiBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4x
LjEyIiBjb2RlU3lzdGVtTmFtZT0iSUhBIFNvZnR3YXJlIENvZGUiIGRpc3BsYXlOYW1lPSJJbnRl
cmlvciBIZWFsdGggTWVkaXRlY2giIC8+PC9hc3NpZ25lZEF1dGhvcmluZ0RldmljZT48L2Fzc2ln
bmVkQXV0aG9yPjwvYXV0aG9yPjwhLS0gID09PT0gQ3VzdG9kaWFuOiBvcmdhbml6YXRpb24gcmVz
cG9uc2libGUgZm9yIHRoaXMgZG9jdW1lbnQgPT09PSAtLT48Y3VzdG9kaWFuIHR5cGVDb2RlPSJD
U1QiPjxhc3NpZ25lZEN1c3RvZGlhbiBjbGFzc0NvZGU9IkFTU0lHTkVEIj48cmVwcmVzZW50ZWRD
dXN0b2RpYW5Pcmdhbml6YXRpb24gY2xhc3NDb2RlPSJPUkciIGRldGVybWluZXJDb2RlPSJJTlNU
QU5DRSI+PGlkIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEuNjIiIGV4dGVuc2lvbj0i
SUhWSkgiIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IklIQSBNZWRpdGVjaCBMb2NhdGlvbiBJZGVu
dGlmaWVyIiAvPjxuYW1lPkludGVyaW9yIEhlYWx0aCBBdXRob3JpdHk8L25hbWU+PC9yZXByZXNl
bnRlZEN1c3RvZGlhbk9yZ2FuaXphdGlvbj48L2Fzc2lnbmVkQ3VzdG9kaWFuPjwvY3VzdG9kaWFu
PjwhLS0gPT09PSBJbmZvcm1hdGlvbiBSZWNpcGllbnRzOiBQcm92aWRlcnMgd2hvIGhhdmUgcmVx
dWVzdGVkIGEgY29weSBvZiB0aGlzIGRvY3VtZW50ID09PT0gLS0+PGluZm9ybWF0aW9uUmVjaXBp
ZW50IHR5cGVDb2RlPSJQUkNQIj48aW50ZW5kZWRSZWNpcGllbnQgY2xhc3NDb2RlPSJBU1NJR05F
RCI+PGlkIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuNDAuMi4xMSIgZXh0ZW5zaW9uPSI2NzYx
NiIgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQkMgTVNQIFByb3ZpZGVyIExpY2Vuc2UgTnVtYmVy
IiAvPjxpZCByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xLjYxIiBleHRlbnNpb249IkhB
SE0iIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IklIQSBQcm92aWRlciBDb2RlOiBJSEEtTVQgUFZE
LUlEIiAvPjxpbmZvcm1hdGlvblJlY2lwaWVudCBjbGFzc0NvZGU9IlBTTiIgZGV0ZXJtaW5lckNv
ZGU9IklOU1RBTkNFIj48bmFtZSB1c2U9IkwiPjxmYW1pbHk+SGFobjwvZmFtaWx5PjxnaXZlbj5N
ZXJlZGl0aDwvZ2l2ZW4+PGdpdmVuPkU8L2dpdmVuPjwvbmFtZT48L2luZm9ybWF0aW9uUmVjaXBp
ZW50PjwvaW50ZW5kZWRSZWNpcGllbnQ+PC9pbmZvcm1hdGlvblJlY2lwaWVudD48aW5mb3JtYXRp
b25SZWNpcGllbnQgdHlwZUNvZGU9IlRSQyI+PGludGVuZGVkUmVjaXBpZW50IGNsYXNzQ29kZT0i
QVNTSUdORUQiPjxpZCByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjQwLjIuMTEiIGFzc2lnbmlu
Z0F1dGhvcml0eU5hbWU9IkJDIE1TUCBQcm92aWRlciBMaWNlbnNlIE51bWJlciIgbnVsbEZsYXZv
cj0iVU5LIiAvPjxpZCByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xLjYxIiBleHRlbnNp
b249IlBMSVNJSEFBIiBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJJSEEgUHJvdmlkZXIgQ29kZTog
SUhBLU1UIFBWRC1JRCIgLz48aW5mb3JtYXRpb25SZWNpcGllbnQgY2xhc3NDb2RlPSJQU04iIGRl
dGVybWluZXJDb2RlPSJJTlNUQU5DRSI+PG5hbWUgdXNlPSJMIj48cHJlZml4PkRyPC9wcmVmaXg+
PGZhbWlseT5QbGlzaWhkPC9mYW1pbHk+PGdpdmVuPkFhcm9uPC9naXZlbj48L25hbWU+PC9pbmZv
cm1hdGlvblJlY2lwaWVudD48L2ludGVuZGVkUmVjaXBpZW50PjwvaW5mb3JtYXRpb25SZWNpcGll
bnQ+PGluZm9ybWF0aW9uUmVjaXBpZW50IHR5cGVDb2RlPSJUUkMiPjxpbnRlbmRlZFJlY2lwaWVu
dCBjbGFzc0NvZGU9IkFTU0lHTkVEIj48aWQgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy40MC4y
LjExIiBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJCQyBNU1AgUHJvdmlkZXIgTGljZW5zZSBOdW1i
ZXIiIG51bGxGbGF2b3I9IlVOSyIgLz48aWQgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcu
MS42MSIgZXh0ZW5zaW9uPSJQTElTSUhEVSIgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iSUhBIFBy
b3ZpZGVyIENvZGU6IElIQS1NVCBQVkQtSUQiIC8+PGluZm9ybWF0aW9uUmVjaXBpZW50IGNsYXNz
Q29kZT0iUFNOIiBkZXRlcm1pbmVyQ29kZT0iSU5TVEFOQ0UiPjxuYW1lIHVzZT0iTCI+PHByZWZp
eD5EcjwvcHJlZml4PjxmYW1pbHk+UGxpc2loYTwvZmFtaWx5PjxnaXZlbj5EdXN0eTwvZ2l2ZW4+
PC9uYW1lPjwvaW5mb3JtYXRpb25SZWNpcGllbnQ+PC9pbnRlbmRlZFJlY2lwaWVudD48L2luZm9y
bWF0aW9uUmVjaXBpZW50PjxpbmZvcm1hdGlvblJlY2lwaWVudCB0eXBlQ29kZT0iVFJDIj48aW50
ZW5kZWRSZWNpcGllbnQgY2xhc3NDb2RlPSJBU1NJR05FRCI+PGlkIHJvb3Q9IjIuMTYuODQwLjEu
MTEzODgzLjMuNDAuMi4xMSIgZXh0ZW5zaW9uPSIxMTExNiIgYXNzaWduaW5nQXV0aG9yaXR5TmFt
ZT0iQkMgTVNQIFByb3ZpZGVyIExpY2Vuc2UgTnVtYmVyIiAvPjxpZCByb290PSIyLjE2Ljg0MC4x
LjExMzg4My4zLjI3Ny4xLjYxIiBleHRlbnNpb249IktJTlQ1IiBhc3NpZ25pbmdBdXRob3JpdHlO
YW1lPSJJSEEgUHJvdmlkZXIgQ29kZTogSUhBLU1UIFBWRC1JRCIgLz48aW5mb3JtYXRpb25SZWNp
cGllbnQgY2xhc3NDb2RlPSJQU04iIGRldGVybWluZXJDb2RlPSJJTlNUQU5DRSI+PG5hbWUgdXNl
PSJMIj48ZmFtaWx5Pktpbm5lZTwvZmFtaWx5PjxnaXZlbj5Ub2RkPC9naXZlbj48L25hbWU+PC9p
bmZvcm1hdGlvblJlY2lwaWVudD48L2ludGVuZGVkUmVjaXBpZW50PjwvaW5mb3JtYXRpb25SZWNp
cGllbnQ+PCEtLSA9PT09IFByaW1hcnkgcHJvdmlkZXI6IEZhbWlseSBwcm92aWRlciA9PT09IC0t
PjxwYXJ0aWNpcGFudCB0eXBlQ29kZT0iSU5EIiBjb250ZXh0Q29udHJvbENvZGU9Ik9QIj48ZnVu
Y3Rpb25Db2RlIGNvZGU9IlBDUCIgZGlzcGxheU5hbWU9IlByaW1hcnkgQ2FyZSBQaHlzaWNpYW4i
IGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjIuMjAuMy44NyIgY29kZVN5c3RlbU5hbWU9
IkhMN1BhcnRpY2lwYXRpb25GdW5jdGlvbiIgLz48YXNzb2NpYXRlZEVudGl0eSBjbGFzc0NvZGU9
IlBST1YiPjxpZCByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjQwLjIuMTEiIGFzc2lnbmluZ0F1
dGhvcml0eU5hbWU9IkJDIE1TUCBQcm92aWRlciBMaWNlbnNlIE51bWJlciIgbnVsbEZsYXZvcj0i
VU5LIiAvPjxpZCByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xLjYxIiBleHRlbnNpb249
IlBMSVNJSERVIiBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJJSEEgUHJvdmlkZXIgQ29kZTogSUhB
LU1UIFBWRC1JRCIgLz48YXNzb2NpYXRlZFBlcnNvbiBjbGFzc0NvZGU9IlBTTiIgZGV0ZXJtaW5l
ckNvZGU9IklOU1RBTkNFIj48bmFtZSB1c2U9IkwiPjxwcmVmaXg+RHI8L3ByZWZpeD48ZmFtaWx5
PlBsaXNpaGE8L2ZhbWlseT48Z2l2ZW4+RHVzdHk8L2dpdmVuPjwvbmFtZT48L2Fzc29jaWF0ZWRQ
ZXJzb24+PC9hc3NvY2lhdGVkRW50aXR5PjwvcGFydGljaXBhbnQ+PCEtLSA9PT09IE9yZGVyaW5n
IFBoeXNpY2lhbiA9PT09IC0tPjxwYXJ0aWNpcGFudCB0eXBlQ29kZT0iUkVGIiBjb250ZXh0Q29u
dHJvbENvZGU9Ik9QIj48ZnVuY3Rpb25Db2RlIGNvZGU9Ik9SRCIgZGlzcGxheU5hbWU9Ik9yZGVy
aW5nIFByb3ZpZGVyIiAvPjx0aW1lIHZhbHVlPSIyMDE5MDEyNDExMTQtMDgwMCIgLz48YXNzb2Np
YXRlZEVudGl0eSBjbGFzc0NvZGU9IlBST1YiPjxpZCByb290PSIyLjE2Ljg0MC4xLjExMzg4My4z
LjQwLjIuMTEiIGV4dGVuc2lvbj0iNjc2MTYiIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkJDIE1T
UCBQcm92aWRlciBMaWNlbnNlIE51bWJlciIgLz48aWQgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMu
My4yNzcuMS42MSIgZXh0ZW5zaW9uPSJIQUhNIiBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJJSEEg
UHJvdmlkZXIgQ29kZTogSUhBLU1UIFBWRC1JRCIgLz48YXNzb2NpYXRlZFBlcnNvbiBjbGFzc0Nv
ZGU9IlBTTiIgZGV0ZXJtaW5lckNvZGU9IklOU1RBTkNFIj48bmFtZSB1c2U9IkwiPjxmYW1pbHk+
SGFobjwvZmFtaWx5PjxnaXZlbj5NZXJlZGl0aDwvZ2l2ZW4+PGdpdmVuPkU8L2dpdmVuPjwvbmFt
ZT48L2Fzc29jaWF0ZWRQZXJzb24+PC9hc3NvY2lhdGVkRW50aXR5PjwvcGFydGljaXBhbnQ+PCEt
LSA9PT09IE9yZGVyIGluZm9ybWF0aW9uID09PT0gLS0+PGluRnVsZmlsbG1lbnRPZiB0eXBlQ29k
ZT0iRkxGUyI+PG9yZGVyIGNsYXNzQ29kZT0iRU5DIiBtb29kQ29kZT0iUlFPIj48aWQgcm9vdD0i
Mi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMS4yMiIgZXh0ZW5zaW9uPSJJSFZKSC0yMDE5MDEyNC0w
MDAyNzI3OCIgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iSUhBIE1lZGl0ZWNoIFJlcXVpc2l0aW9u
IE51bWJlciIgLz48Y29kZSBjb2RlPSJSRTpDTTpOIiBjb2RlU3lzdGVtTmFtZT0iT3JkZXIgU3Rh
dHVzIChPcmRlciBDb250cm9sWzpPcmRlciBTdGF0dXNdWzpSZXNwb25zZSBGbGFnXSkiIC8+PC9v
cmRlcj48L2luRnVsZmlsbG1lbnRPZj48aW5GdWxmaWxsbWVudE9mIHR5cGVDb2RlPSJGTEZTIj48
dGVtcGxhdGVJZCByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNiIgYXNzaWduaW5n
QXV0aG9yaXR5TmFtZT0iT3JkZXIgQ29tcG9uZW50IFRlbXBsYXRlIiAvPjxvcmRlciBjbGFzc0Nv
ZGU9IkVOQyIgbW9vZENvZGU9IlJRTyI+PCEtLSA9PT09IFVuaXF1ZSBPcmRlciBDb21wb25lbnQg
TnVtYmVyIChSZXF1aXNpdGlvbiMgKyBTcGVjaW1lbiMpIC0gQmVjYXVzZSB0aGVyZSBtYXkgYmUg
bXVsdGlwbGUgZG9jdW1lbnRzIHRoYXQgZWFjaCByZXByZXNlbnQgdGhlIGZ1bGZpbGxtZW50IG9m
IHBhcnQgb2YgYW4gb3JkZXIvcmVxdWlzaXRpb24uJiMxMzsKCQkJCQkJQW55IGluZnVsZmlsbG1l
bnRPZiBlbGVtZW50cyB3aXRoIHRoaXMgdGVtcGxhdGVJZCBtZWFuIHRoYXQgdGhlIGlkZW50aWZp
ZXIgdW5pcXVlbHkgaWRlbnRpZmllcyB0aGUgcGFydCwgbm90IHRoZSB3aG9sZS4gTGFiIHJlcXVp
c2l0aW9ucyBtYXkgY29udGFpbiB0ZXN0cyBmb3IgbXVsdGlwbGUgc3BlY2ltZW5zIGFuZCBlYWNo
IHNwZWNpbWVuIHdpbGwgJiMxMzsKCQkJCQkJY29tZSBhY3Jvc3MgYXMgYSBwYXJ0IG9mIHRoZSB3
aG9sZSBSZXF1aXNpdGlvbi4gPT09PSYjMTM7CgkJCQkJCS0tPjxpZCByb290PSIyLjE2Ljg0MC4x
LjExMzg4My4zLjI3Ny4xLjIyLjEiIGV4dGVuc2lvbj0iSUhWSkgtMjAxOTAxMjQtMDAwMjcyNzhf
X1BUMjQwMTpIMDAwMTNSIiBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJJSEEgT3JkZXIgQ29tcG9u
ZW50IE51bWJlciIgLz48L29yZGVyPjwvaW5GdWxmaWxsbWVudE9mPjwhLS0gPT09PSBTZXJ2aWNl
IEV2ZW50OiBQcm9jZWR1cmUgPT09PSAtLT48ZG9jdW1lbnRhdGlvbk9mIHR5cGVDb2RlPSJET0Mi
PjxzZXJ2aWNlRXZlbnQgY2xhc3NDb2RlPSJBQ1QiIG1vb2RDb2RlPSJFVk4iPjxjb2RlIG51bGxG
bGF2b3I9IlVOSyIgLz48IS0tT2JzZXJ2YXRpb24gRGF0ZSAoT0JSLjcpLS0+PGVmZmVjdGl2ZVRp
bWUgdmFsdWU9IjIwMTkwMTI0MDIwMC0wODAwIiAvPjxwZXJmb3JtZXIgdHlwZUNvZGU9IlBQUkYi
Pjxhc3NpZ25lZEVudGl0eSBjbGFzc0NvZGU9IkFTU0lHTkVEIj48aWQgcm9vdD0iMi4xNi44NDAu
MS4xMTM4ODMuMy40MC4yLjExIiBleHRlbnNpb249IjY3NjE2IiBhc3NpZ25pbmdBdXRob3JpdHlO
YW1lPSJCQyBNU1AgUHJvdmlkZXIgTGljZW5zZSBOdW1iZXIiIC8+PGlkIHJvb3Q9IjIuMTYuODQw
LjEuMTEzODgzLjMuMjc3LjEuNjEiIGV4dGVuc2lvbj0iSEFITSIgYXNzaWduaW5nQXV0aG9yaXR5
TmFtZT0iSUhBIFByb3ZpZGVyIENvZGU6IElIQS1NVCBQVkQtSUQiIC8+PGFzc2lnbmVkUGVyc29u
IGNsYXNzQ29kZT0iUFNOIiBkZXRlcm1pbmVyQ29kZT0iSU5TVEFOQ0UiPjxuYW1lIHVzZT0iTCI+
PGZhbWlseT5IYWhuPC9mYW1pbHk+PGdpdmVuPk1lcmVkaXRoPC9naXZlbj48Z2l2ZW4+RTwvZ2l2
ZW4+PC9uYW1lPjwvYXNzaWduZWRQZXJzb24+PC9hc3NpZ25lZEVudGl0eT48L3BlcmZvcm1lcj48
YmNjZGE6c3RhdHVzQ29kZSBjb2RlPSJjb21wbGV0ZWQiIC8+PC9zZXJ2aWNlRXZlbnQ+PC9kb2N1
bWVudGF0aW9uT2Y+PCEtLSA9PT09IFBhcmVudCBEb2N1bWVudDogSEw3IHYyIG1lc3NhZ2UgZnJv
bSBNZWRpdGVjaCA9PT09IC0tPjxyZWxhdGVkRG9jdW1lbnQgdHlwZUNvZGU9IlhGUk0iPjxwYXJl
bnREb2N1bWVudCBjbGFzc0NvZGU9IkRPQ0NMSU4iIG1vb2RDb2RlPSJFVk4iPjxpZCByb290PSIy
LjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xLjgxIiBleHRlbnNpb249IjgwNTU2NiIgYXNzaWduaW5n
QXV0aG9yaXR5TmFtZT0iSUhBIE1lc3NhZ2UgTnVtYmVyIiAvPjwvcGFyZW50RG9jdW1lbnQ+PC9y
ZWxhdGVkRG9jdW1lbnQ+PCEtLSA9PT09IEVuY29tcGFzc2luZyBFbmNvdW50ZXI6IFBhdGllbnQg
VmlzaXQgPT09PSAtLT48Y29tcG9uZW50T2YgdHlwZUNvZGU9IkNPTVAiPjwhLS1QYXRpZW50IEFj
Y291bnQgTnVtYmVyIChQSURfMTgpLS0+PGVuY29tcGFzc2luZ0VuY291bnRlciBjbGFzc0NvZGU9
IkVOQyIgbW9vZENvZGU9IkVWTiI+PGlkIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEu
NzIiIGV4dGVuc2lvbj0iVkowNTUxNzQ3LzE4IiBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJJSEEg
UGF0aWVudCBBY2NvdW50IE51bWJlciIgLz48IS0tRW5jb3VudGVyIGhhcyBhbiBhZG1pc3Npb24g
ZGF0ZSBvbmx5LS0+PGVmZmVjdGl2ZVRpbWUgdmFsdWU9IjIwMTgwMjE1MTAzNi0wODAwIiAvPjxl
bmNvdW50ZXJQYXJ0aWNpcGFudCB0eXBlQ29kZT0iQVRORCI+PGFzc2lnbmVkRW50aXR5IGNsYXNz
Q29kZT0iQVNTSUdORUQiPjxpZCByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjQwLjIuMTEiIGV4
dGVuc2lvbj0iNjc2MTYiIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkJDIE1TUCBQcm92aWRlciBM
aWNlbnNlIE51bWJlciIgLz48aWQgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMS42MSIg
ZXh0ZW5zaW9uPSJIQUhNIiBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJJSEEgUHJvdmlkZXIgQ29k
ZTogSUhBLU1UIFBWRC1JRCIgLz48YXNzaWduZWRQZXJzb24gY2xhc3NDb2RlPSJQU04iIGRldGVy
bWluZXJDb2RlPSJJTlNUQU5DRSI+PG5hbWUgdXNlPSJMIj48ZmFtaWx5PkhhaG48L2ZhbWlseT48
Z2l2ZW4+TWVyZWRpdGg8L2dpdmVuPjxnaXZlbj5FPC9naXZlbj48L25hbWU+PC9hc3NpZ25lZFBl
cnNvbj48L2Fzc2lnbmVkRW50aXR5PjwvZW5jb3VudGVyUGFydGljaXBhbnQ+PGVuY291bnRlclBh
cnRpY2lwYW50IHR5cGVDb2RlPSJDT04iPjxhc3NpZ25lZEVudGl0eSBjbGFzc0NvZGU9IkFTU0lH
TkVEIj48aWQgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy40MC4yLjExIiBhc3NpZ25pbmdBdXRo
b3JpdHlOYW1lPSJCQyBNU1AgUHJvdmlkZXIgTGljZW5zZSBOdW1iZXIiIG51bGxGbGF2b3I9IlVO
SyIgLz48aWQgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMS42MSIgZXh0ZW5zaW9uPSJQ
TElTSUhBQSIgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iSUhBIFByb3ZpZGVyIENvZGU6IElIQS1N
VCBQVkQtSUQiIC8+PGFzc2lnbmVkUGVyc29uIGNsYXNzQ29kZT0iUFNOIiBkZXRlcm1pbmVyQ29k
ZT0iSU5TVEFOQ0UiPjxuYW1lIHVzZT0iTCI+PHByZWZpeD5EcjwvcHJlZml4PjxmYW1pbHk+UGxp
c2loZDwvZmFtaWx5PjxnaXZlbj5BYXJvbjwvZ2l2ZW4+PC9uYW1lPjwvYXNzaWduZWRQZXJzb24+
PC9hc3NpZ25lZEVudGl0eT48L2VuY291bnRlclBhcnRpY2lwYW50Pjxsb2NhdGlvbj48aGVhbHRo
Q2FyZUZhY2lsaXR5IGNsYXNzQ29kZT0iU0RMT0MiPjxpZCByb290PSIyLjE2Ljg0MC4xLjExMzg4
My4zLjI3Ny4xLjYyIiBleHRlbnNpb249IklIVkpIIiBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJJ
SEEgTWVkaXRlY2ggTG9jYXRpb24gSWRlbnRpZmllciIgLz48IS0tY29kZSByZXByZXNlbnRzIHRo
ZSBwYXRpZW50IGxvY2F0aW9uLCBpbiB0aGUgZm9ybSAiUHQuVHlwZTpVbml0WzpSb29tWzpCZWRd
XSItLT48Y29kZSBjb2RlPSJSRUY6VkVSVkpITEIiIGNvZGVTeXN0ZW1OYW1lPSJQYXRpZW50IFR5
cGU6VW5pdCIgLz48L2hlYWx0aENhcmVGYWNpbGl0eT48L2xvY2F0aW9uPjwvZW5jb21wYXNzaW5n
RW5jb3VudGVyPjwvY29tcG9uZW50T2Y+PCEtLSAmIzEzOwoJCQkJKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiomIzEzOwoJCQkJQ0RBIEJvZHk6
IExldmVsIDMgLSBEaXNjcmV0ZSBMYWIgUmVzdWx0cyAgJiMxMzsKCQkJCSoqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqJiMxMzsKCQkJLS0+PGNv
bXBvbmVudCB0eXBlQ29kZT0iQ09NUCI+PHN0cnVjdHVyZWRCb2R5IGNsYXNzQ29kZT0iRE9DQk9E
WSIgbW9vZENvZGU9IkVWTiI+PGNvbXBvbmVudCB0eXBlQ29kZT0iQ09NUCI+PHNlY3Rpb24gY2xh
c3NDb2RlPSJET0NTRUNUIiBtb29kQ29kZT0iRVZOIj48dGVtcGxhdGVJZCByb290PSIxLjMuNi4x
LjQuMS4xOTM3Ni4xLjMuMy4yLjEiIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkxhYm9yYXRvcnkg
U3BlY2lhbHR5IFNlY3Rpb24iIC8+PGNvZGUgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMu
Ni4xIiBjb2RlU3lzdGVtTmFtZT0iTE9JTkMgQ29kZSIgY29kZT0iMjY0MzYtNiIgZGlzcGxheU5h
bWU9IkxhYm9yYXRvcnkgU3R1ZGllcyIgLz48dGl0bGU+TGFib3JhdG9yeSBTdHVkaWVzPC90aXRs
ZT48Y29tcG9uZW50IHR5cGVDb2RlPSJDT01QIj48c2VjdGlvbiBjbGFzc0NvZGU9IkRPQ1NFQ1Qi
IG1vb2RDb2RlPSJFVk4iPjx0ZW1wbGF0ZUlkIHJvb3Q9IjEuMy42LjEuNC4xLjE5Mzc2LjEuMy4z
LjIuMiIgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iTGFib3JhdG9yeSBSZXBvcnQgSXRlbSBTZWN0
aW9uIiAvPjxjb2RlIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjIuMjAuNS4xIiBjb2Rl
U3lzdGVtTmFtZT0icENMT0NEIiBjb2RlPSJYWFgtMTMzOSIgZGlzcGxheU5hbWU9Ik1hbGFyaWEg
UGFuZWwiIC8+PCEtLSA9PT09IERlcml2ZWQgVGV4dCBSZXByZXNlbnRhdGlvbiBvZiBEaXNjcmV0
ZSBMYWIgUmVzdWx0cyA9PT09IC0tPjx0aXRsZT5NYWxhcmlhIFBhbmVsPC90aXRsZT48dGV4dD48
dGFibGU+PGNhcHRpb24+U3BlY2ltZW4gSW5mb3JtYXRpb248L2NhcHRpb24+PHRib2R5Pjx0cj48
dGg+U3BlY2ltZW4gIzo8L3RoPjx0ZD5QVDI0MDE6SDAwMDEzUjwvdGQ+PC90cj48dHI+PHRoPkNv
bGxlY3RlZDo8L3RoPjx0ZD4yNC9KYW4vMjAxOSAwMjowMCBQU1Q8L3RkPjwvdHI+PHRyPjx0aD5S
ZWNlaXZlZDo8L3RoPjx0ZD4yNC9KYW4vMjAxOSAxMToxMyBQU1Q8L3RkPjwvdHI+PHRyPjx0aD5S
ZXF1aXNpdGlvbiAjOjwvdGg+PHRkPklIVkpILTIwMTkwMTI0LTAwMDI3Mjc4PC90ZD48L3RyPjwv
dGJvZHk+PC90YWJsZT48YnIgLz48dGFibGU+PGNhcHRpb24+WFhYLTEzMzkgTWFsYXJpYSBQYW5l
bDwvY2FwdGlvbj48dGJvZHk+PHRyPjx0aD5UZXN0IElEOjwvdGg+PHRoPlRlc3QgTmFtZTo8L3Ro
Pjx0aD5UZXN0IFJlc3VsdDo8L3RoPjx0aD5SZXN1bHQgRmxhZ3M6PC90aD48dGg+UmVmZXJlbmNl
IFJhbmdlOjwvdGg+PHRoPlJlc3VsdCBVbml0czo8L3RoPjx0aD5UaW1lIFJlc3VsdGVkOjwvdGg+
PHRoPlN0YXR1czo8L3RoPjwvdHI+PCEtLSAxIC0gTWFsYXJpYSBOQVQgLS0+PHRyIElEPSJwMzEy
LjAxMTBfMS0xIj48dGQ+MzEyLjAxMTA8L3RkPjx0ZD5NYWxhcmlhIE5BVDwvdGQ+PHRkPk5lZ2F0
aXZlPC90ZD48dGQgLz48dGQ+TmVnYXRpdmU8L3RkPjx0ZCAvPjx0ZD4yNC9KYW4vMjAxOSAxMTox
NCBQU1Q8L3RkPjx0ZD48Y29udGVudD5jb21wbGV0ZWQ8L2NvbnRlbnQ+PC90ZD48L3RyPjx0cj48
dGQgY29sc3Bhbj0iMiIgLz48dGQgY29sc3Bhbj0iOSI+PGNvbnRlbnQgc3R5bGVDb2RlPSJCb2xk
Ij5PYnNlcnZhdGlvbiBOb3Rlczo8L2NvbnRlbnQ+PGJyIC8+TWFsYXJpYSBpcyBuZWdhdGl2ZSBi
eSBtb2xlY3VsYXIgbWV0aG9kLjxiciAvPk5vIGZ1cnRoZXIgdGVzdGluZyB0byBiZSBwZXJmb3Jt
ZWQuPGJyIC8+PC90ZD48L3RyPjwvdGJvZHk+PC90YWJsZT48YnIgLz48YnIgLz48dGFibGU+PHRi
b2R5Pjx0cj48dGg+UmVzdWx0IEZsYWdzIExlZ2VuZDo8L3RoPjx0ZD48Y29udGVudD5OPC9jb250
ZW50PjxiciAvPjxjb250ZW50IHN0eWxlQ29kZT0iYWxlcnQiPkg8L2NvbnRlbnQ+Lzxjb250ZW50
IHN0eWxlQ29kZT0iYWxlcnQiPkw8L2NvbnRlbnQ+Lzxjb250ZW50IHN0eWxlQ29kZT0iYWxlcnQi
PkE8L2NvbnRlbnQ+PGJyIC8+PGNvbnRlbnQgc3R5bGVDb2RlPSJhbGVydCI+SEg8L2NvbnRlbnQ+
Lzxjb250ZW50IHN0eWxlQ29kZT0iYWxlcnQiPkxMPC9jb250ZW50Pi88Y29udGVudCBzdHlsZUNv
ZGU9ImFsZXJ0Ij5BQTwvY29udGVudD48L3RkPjx0ZD5Ob3JtYWw8YnIgLz5BYm5vcm1hbCBWYWx1
ZTxiciAvPkNyaXRpY2FsIFZhbHVlPC90ZD48L3RyPjx0cj48dGg+UGVyZm9ybWluZyBMYWI6PC90
aD48dGQgY29sc3Bhbj0iMiI+SUhLR0ggLSBLZWxvd25hIEdlbmVyYWwgSG9zcDwvdGQ+PC90cj48
dHI+PHRoPkNvbGxlY3RpbmcgTGFiOjwvdGg+PHRkIGNvbHNwYW49IjIiPklIVkpIIC0gSW50ZXJp
b3IgSGVhbHRoIEF1dGhvcml0eTwvdGQ+PC90cj48dHI+PHRoPlJlcG9ydCBTdGF0dXM6PC90aD48
dGQgY29sc3Bhbj0iMiI+Y29tcGxldGVkPC90ZD48L3RyPjwvdGJvZHk+PC90YWJsZT48Zm9vdG5v
dGU+PGJyIC8+PGJyIC8+PHBhcmFncmFwaD48Y29udGVudCBzdHlsZUNvZGU9IkJvbGQiPklOUVVJ
UklFUyAtIDwvY29udGVudD5QbGVhc2UgZGlyZWN0IGFsbCBpbnF1aXJpZXMgdG8gdGhlIENvbGxl
Y3RpbmcgTGFiLjwvcGFyYWdyYXBoPjxwYXJhZ3JhcGg+PGNvbnRlbnQgc3R5bGVDb2RlPSJCb2xk
Ij5DT05GSURFTlRJQUwgLSA8L2NvbnRlbnQ+VGhpcyBjbGluaWNhbCBkb2N1bWVudCBjb250YWlu
cyBjb25maWRlbnRpYWwgcGVyc29uYWwgaW5mb3JtYXRpb24gYW5kIGlzIGZvciBkaXJlY3QgY2Fy
ZSBwdXJwb3NlcyBvbmx5LiAgUGxlYXNlIHVzZSwgY29weSBhbmQgc2hhcmUgd2l0aCBhdXRob3Jp
emVkIGluZGl2aWR1YWxzIG9ubHkuPC9wYXJhZ3JhcGg+PHBhcmFncmFwaD48Y29udGVudCBzdHls
ZUNvZGU9IkNlbnRlciI+KioqIElmIHJlY2VpdmVkIGluIGVycm9yIGNhbGwgSUggSW5mb3JtYXRp
b24gUHJpdmFjeSAmYW1wO2FtcDsgU2VjdXJpdHkgdG9sbCBmcmVlIGF0IDEtODU1LTk4MC01MDIw
ICoqKjwvY29udGVudD48L3BhcmFncmFwaD48cGFyYWdyYXBoPjxjb250ZW50IHN0eWxlQ29kZT0i
Qm9sZCI+RU5EIE9GIFJFUE9SVDwvY29udGVudD48L3BhcmFncmFwaD48L2Zvb3Rub3RlPjwvdGV4
dD48IS0tID09PT0gTWFjaGluZSBSZWFkYWJsZSBITDcgVjMgUmVwcmVzZW50YXRpb24gb2YgRGlz
Y3JldGUgTGFiIFJlc3VsdHMgPT09PSAtLT48ZW50cnkgdHlwZUNvZGU9IkRSSVYiPjx0ZW1wbGF0
ZUlkIHJvb3Q9IjEuMy42LjEuNC4xLjE5Mzc2LjEuMy4xIiBhc3NpZ25pbmdBdXRob3JpdHlOYW1l
PSJMYWJvcmF0b3J5IFJlcG9ydCBEYXRhIFByb2Nlc3NpbmcgRW50cnkiIC8+PGFjdCBjbGFzc0Nv
ZGU9IkFDVCIgbW9vZENvZGU9IkVWTiI+PGNvZGUgbnVsbEZsYXZvcj0iTkEiIC8+PHN0YXR1c0Nv
ZGUgY29kZT0iY29tcGxldGVkIiAvPjwhLS1TcGVjaW1lbiBDb2xsZWN0aW9uOiBQVDI0MDE6SDAw
MDEzUi0tPjxlbnRyeVJlbGF0aW9uc2hpcCB0eXBlQ29kZT0iQ09NUCI+PHByb2NlZHVyZSBjbGFz
c0NvZGU9IlBST0MiIG1vb2RDb2RlPSJFVk4iPjx0ZW1wbGF0ZUlkIHJvb3Q9IjEuMy42LjEuNC4x
LjE5Mzc2LjEuMy4xLjIiIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IlNwZWNpbWVuIENvbGxlY3Rp
b24iIC8+PGNvZGUgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi4xIiBjb2RlU3lzdGVt
TmFtZT0iTE9JTkMgQ29kZSIgY29kZT0iMzM4ODItMiIgZGlzcGxheU5hbWU9IlNwZWNpbWVuIENv
bGxlY3Rpb24iIC8+PCEtLVNwZWNpbWVuIENvbGxlY3RlZCBEYXRlVGltZSAoT0JSLjcpLS0+PGVm
ZmVjdGl2ZVRpbWUgdmFsdWU9IjIwMTkwMTI0MDIwMC0wODAwIiAvPjwhLS1UYXJnZXQgU2l0ZSBm
cm9tIE9CUi4xNS0tPjwhLS1TcGVjaW1lbiBOdW1iZXIgKE9CUi4zKS0tPjxwYXJ0aWNpcGFudCB0
eXBlQ29kZT0iUFJEIj48cGFydGljaXBhbnRSb2xlIGNsYXNzQ29kZT0iU1BFQyI+PGlkIHJvb3Q9
IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEuMTEiIGV4dGVuc2lvbj0iUFQyNDAxOkgwMDAxM1Ii
IGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IklIQSBNZWRpdGVjaCBTcGVjaW1lbiBOdW1iZXIiIC8+
PHBsYXlpbmdFbnRpdHk+PGNvZGUgbnVsbEZsYXZvcj0iVU5LIiAvPjwvcGxheWluZ0VudGl0eT48
L3BhcnRpY2lwYW50Um9sZT48L3BhcnRpY2lwYW50PjwhLS1TcGVjaW1lbiBSZWNlaXZlZCBEYXRl
VGltZSAoT0JSLjE0KS0tPjxlbnRyeVJlbGF0aW9uc2hpcCB0eXBlQ29kZT0iQ09NUCI+PGFjdCBj
bGFzc0NvZGU9IkFDVCIgbW9vZENvZGU9IkVWTiI+PHRlbXBsYXRlSWQgcm9vdD0iMS4zLjYuMS40
LjEuMTkzNzYuMS4zLjEuMyIgLz48Y29kZSBjb2RlPSJTUFJFQ0VJVkUiIGNvZGVTeXN0ZW09IjEu
My41LjEuNC4xLjE5Mzc2LjEuNS4zLjIiIGNvZGVTeXN0ZW1OYW1lPSJJSEVBY3RDb2RlIiAvPjwh
LS1PQlIuMTQgU3BlY2ltZW4gRGF0ZSBSZWNlaXZlZC0tPjxlZmZlY3RpdmVUaW1lIHZhbHVlPSIy
MDE5MDEyNDExMTMtMDgwMCIgLz48L2FjdD48L2VudHJ5UmVsYXRpb25zaGlwPjwvcHJvY2VkdXJl
PjwvZW50cnlSZWxhdGlvbnNoaXA+PCEtLSBCYXR0ZXJ5OiBNYWxhcmlhIFBhbmVsIC0tPjxlbnRy
eVJlbGF0aW9uc2hpcCB0eXBlQ29kZT0iQ09NUCI+PG9yZ2FuaXplciBjbGFzc0NvZGU9IkJBVFRF
UlkiIG1vb2RDb2RlPSJFVk4iPjx0ZW1wbGF0ZUlkIHJvb3Q9IjEuMy42LjEuNC4xLjE5Mzc2LjEu
My4xLjQiIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkxhYm9yYXRvcnkgQmF0dGVyeSBPcmdhbml6
ZXIiIC8+PGlkIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEuMTEiIGV4dGVuc2lvbj0i
UFQyNDAxOkgwMDAxM1IiIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IklIQSBNZWRpdGVjaCBTcGVj
aW1lbiBOdW1iZXIiIC8+PGNvZGUgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuMi4yMC41
LjEiIGNvZGVTeXN0ZW1OYW1lPSJwQ0xPQ0QiIGNvZGU9IlhYWC0xMzM5IiBkaXNwbGF5TmFtZT0i
TWFsYXJpYSBQYW5lbCIgLz48c3RhdHVzQ29kZSBjb2RlPSJjb21wbGV0ZWQiIC8+PCEtLVJlc3Vs
dHMgQ29tcG9zZWQgRGF0ZVRpbWUgKE9CUi4yMiktLT48ZWZmZWN0aXZlVGltZSB2YWx1ZT0iMjAx
OTAxMjQxMTE0LTA4MDAiIC8+PCEtLSAxIC0gTWFsYXJpYSBOQVQgLS0+PGNvbXBvbmVudCB0eXBl
Q29kZT0iQ09NUCI+PG9ic2VydmF0aW9uIGNsYXNzQ29kZT0iT0JTIiBtb29kQ29kZT0iRVZOIj48
dGVtcGxhdGVJZCByb290PSIxLjMuNi4xLjQuMS4xOTM3Ni4xLjMuMS42IiBhc3NpZ25pbmdBdXRo
b3JpdHlOYW1lPSJMYWJvcmF0b3J5IE9ic2VydmF0aW9uIiAvPjxjb2RlIGNvZGVTeXN0ZW09IjIu
MTYuODQwLjEuMTEzODgzLjIuMjAuNS4xIiBjb2RlU3lzdGVtTmFtZT0icENMT0NEIiBjb2RlPSIz
MTIuMDExMCIgZGlzcGxheU5hbWU9Ik1hbGFyaWEgTkFUIiAvPjxzdGF0dXNDb2RlIGNvZGU9ImNv
bXBsZXRlZCIgLz48IS0tUmVzdWx0ZWQgRGF0ZVRpbWUgKE9CWC4xNCktLT48ZWZmZWN0aXZlVGlt
ZSB2YWx1ZT0iMjAxOTAxMjQxMTE0LTA4MDAiIC8+PHZhbHVlIG1lZGlhVHlwZT0idGV4dC9wbGFp
biIgcmVwcmVzZW50YXRpb249IlRYVCIgeHNpOnR5cGU9IlNUIj5OZWdhdGl2ZTwvdmFsdWU+PHBl
cmZvcm1lciB0eXBlQ29kZT0iUFJGIj48YXNzaWduZWRFbnRpdHkgY2xhc3NDb2RlPSJBU1NJR05F
RCI+PGlkIG51bGxGbGF2b3I9Ik5JIiAvPjxyZXByZXNlbnRlZE9yZ2FuaXphdGlvbiBjbGFzc0Nv
ZGU9Ik9SRyIgZGV0ZXJtaW5lckNvZGU9IklOU1RBTkNFIj48aWQgcm9vdD0iMi4xNi44NDAuMS4x
MTM4ODMuMy4yNzcuMS42MiIgZXh0ZW5zaW9uPSJJSEtHSCIgYXNzaWduaW5nQXV0aG9yaXR5TmFt
ZT0iSUhBIExhYiBQcm92aWRlciIgLz48bmFtZT5LZWxvd25hIEdlbmVyYWwgSG9zcDwvbmFtZT48
L3JlcHJlc2VudGVkT3JnYW5pemF0aW9uPjwvYXNzaWduZWRFbnRpdHk+PC9wZXJmb3JtZXI+PGVu
dHJ5UmVsYXRpb25zaGlwIHR5cGVDb2RlPSJDT01QIj48YWN0IGNsYXNzQ29kZT0iQUNUIiBtb29k
Q29kZT0iRVZOIj48dGVtcGxhdGVJZCByb290PSIxLjMuNi4xLjQuMS4xOTM3Ni4xLjUuMy4xLjQu
MiIgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQW5ub3RhdGlvbiBDb21tZW50IiAvPjxjb2RlIGNv
ZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuMSIgY29kZVN5c3RlbU5hbWU9IkxPSU5DIENv
ZGUiIGNvZGU9IjQ4NzY3LTgiIGRpc3BsYXlOYW1lPSJBbm5vdGF0aW9uIENvbW1lbnQiIC8+PHRl
eHQ+TWFsYXJpYSBpcyBuZWdhdGl2ZSBieSBtb2xlY3VsYXIgbWV0aG9kLiYjMTM7CgkJCU5vIGZ1
cnRoZXIgdGVzdGluZyB0byBiZSBwZXJmb3JtZWQuPC90ZXh0PjxzdGF0dXNDb2RlIGNvZGU9ImNv
bXBsZXRlZCIgLz48L2FjdD48L2VudHJ5UmVsYXRpb25zaGlwPjxyZWZlcmVuY2VSYW5nZT48b2Jz
ZXJ2YXRpb25SYW5nZT48dmFsdWUgbWVkaWFUeXBlPSJ0ZXh0L3BsYWluIiByZXByZXNlbnRhdGlv
bj0iVFhUIiB4c2k6dHlwZT0iU1QiPk5lZ2F0aXZlPC92YWx1ZT48L29ic2VydmF0aW9uUmFuZ2U+
PC9yZWZlcmVuY2VSYW5nZT48L29ic2VydmF0aW9uPjwvY29tcG9uZW50Pjwvb3JnYW5pemVyPjwv
ZW50cnlSZWxhdGlvbnNoaXA+PC9hY3Q+PC9lbnRyeT48L3NlY3Rpb24+PC9jb21wb25lbnQ+PC9z
ZWN0aW9uPjwvY29tcG9uZW50Pjxjb21wb25lbnQgdHlwZUNvZGU9IkNPTVAiPjxzZWN0aW9uIGNs
YXNzQ29kZT0iRE9DU0VDVCIgbW9vZENvZGU9IkVWTiI+PHRlbXBsYXRlSWQgcm9vdD0iMi4xNi44
NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwIiBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJJbnN0cnVj
dGlvbmFsIENvbnRlbnQgQ29tcG9uZW50IiAvPjx0ZXh0PiYjMTM7CiYjMTM7CkNvbGxlY3Rpbmcg
TGFiOiBJSFZKSCAtIEludGVyaW9yIEhlYWx0aCBBdXRob3JpdHkmIzEzOwpQZXJmb3JtaW5nIExh
YjogSUhLR0ggLSBLZWxvd25hIEdlbmVyYWwgSG9zcCYjMTM7CklOUVVJUklFUyAtIFBsZWFzZSBk
aXJlY3QgYWxsIGlucXVpcmllcyB0byB0aGUgQ29sbGVjdGluZyBMYWIuJiMxMzsKQ09ORklERU5U
SUFMIC0gVGhpcyBjbGluaWNhbCBkb2N1bWVudCBjb250YWlucyBjb25maWRlbnRpYWwgcGVyc29u
YWwgaW5mb3JtYXRpb24gYW5kIGlzIGZvciBkaXJlY3QgY2FyZSBwdXJwb3NlcyBvbmx5LiBQbGVh
c2UgdXNlLCBjb3B5IGFuZCBzaGFyZSB3aXRoIGF1dGhvcml6ZWQgaW5kaXZpZHVhbHMgb25seS4m
IzEzOwogICAgICAgICAgICAgICAgJiMxMzsKJiMxMzsKICAgICoqKiBJZiByZWNlaXZlZCBpbiBl
cnJvciBjYWxsIElIIEluZm9ybWF0aW9uIFByaXZhY3kgJmFtcDthbXA7IFNlY3VyaXR5IHRvbGwg
ZnJlZSBhdCAxLTg1NS05ODAtNTAyMCAqKiogICYjMTM7CiAgICAgICAgICAgICAgICAmIzEzOwo8
L3RleHQ+PC9zZWN0aW9uPjwvY29tcG9uZW50Pjwvc3RydWN0dXJlZEJvZHk+PC9jb21wb25lbnQ+
PC9DbGluaWNhbERvY3VtZW50Pg==</inboundTemplate>
            <outboundTemplate encoding="base64">e30=</outboundTemplate>
            <inboundDataType>HL7V3</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.7.1">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.7.1">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.7.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.7.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.7.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.7.1">
            <elements/>
            <inboundTemplate encoding="base64">ewogICJ0ZW1wbGF0ZUlkIjogIiIsCiAgImVmZmVjdGl2ZVRpbWUiOiAiIiwNCiAgInBhdGllbnQi
OiB7CiAgICAiaWQiOiAiIiwKICAgICJhZGRyZXNzIjogW3sKICAgICAgInVzZSI6ICJIIiwNCiAg
ICAgICJzdHJlZXRBZGRyZXNzIjogIiIsDQogICAgICAiY2l0eSI6ICIiLA0KICAgICAgInByb3Zp
bmNlIjogIiIsDQogICAgICAicG9zdGFsQ29kZSI6ICIiLA0KICAgICAgImNvdW50cnkiOiAiIg0K
ICAgIH1dLA0KICAgICJ0ZWxlY29tIjogW3sKICAgICAgICAidXNlIjogIiIsCiAgICAgICAgInR5
cGUiOiAiIiwKICAgICAgICAidmFsdWUiOiAiIgogICAgICB9LHsKICAgICAgICAidXNlIjogIiIs
CiAgICAgICAgInR5cGUiOiAiIiwKICAgICAgICAidmFsdWUiOiAiIgogICAgfV0sCiAgICAibmFt
ZSI6IFt7CiAgICAgICJ1c2UiOiAiIiwNCiAgICAgICJnaXZlbiI6IFsiIl0sDQogICAgICAiZmFt
aWx5IjogIiIsCiAgICAgICJwcmVmaXgiOiAiIiwKICAgICAgInN1ZmZpeCI6ICIiDQogICAgfV0s
DQogICAgImdlbmRlciI6ICIiLA0KICAgICJkb2IiOiAiIg0KICB9LA0KICAiYXV0aG9yIjogW3sK
ICAgICJ0aW1lIjogIiIsDQogICAgImlkIjogIiIsCiAgICAiYWRkcmVzcyI6IFt7CiAgICAgICJ1
c2UiOiAiIiwNCiAgICAgICJzdHJlZXRBZGRyZXNzIjogIiIsDQogICAgICAiY2l0eSI6ICIiLA0K
ICAgICAgInByb3ZpbmNlIjogIiIsDQogICAgICAicG9zdGFsQ29kZSI6ICIiLA0KICAgICAgImNv
dW50cnkiOiAiIg0KICAgIH1dLA0KICAgICJ0ZWxlY29tIjogW3sKICAgICAgICAidXNlIjogIiIs
CiAgICAgICAgInR5cGUiOiAiIiwKICAgICAgICAidmFsdWUiOiAiIgogICAgfV0sCiAgICAibmFt
ZSI6IHsKICAgICAgInVzZSI6ICIiLA0KICAgICAgImdpdmVuIjogWyIiXSwNCiAgICAgICJmYW1p
bHkiOiAiIiwKICAgICAgInByZWZpeCI6ICIiLAogICAgICAic3VmZml4IjogIiINCiAgICB9DQog
IH1dLAogICJyZWNpcGllbnQiOiBbewogICAgImlkIjogIiIsCiAgICAiYWRkcmVzcyI6IFt7CiAg
ICAgICJ1c2UiOiAiIiwNCiAgICAgICJzdHJlZXRBZGRyZXNzIjogIiIsDQogICAgICAiY2l0eSI6
ICIiLA0KICAgICAgInByb3ZpbmNlIjogIiIsDQogICAgICAicG9zdGFsQ29kZSI6ICIiLA0KICAg
ICAgImNvdW50cnkiOiAiIg0KICAgIH1dLA0KICAgICJ0ZWxlY29tIjogW3sKICAgICAgICAidXNl
IjogIiIsCiAgICAgICAgInR5cGUiOiAiIiwKICAgICAgICAidmFsdWUiOiAiIgogICAgfV0sCiAg
ICAibmFtZSI6IHsKICAgICAgInVzZSI6ICIiLA0KICAgICAgImdpdmVuIjogWyIiXSwNCiAgICAg
ICJmYW1pbHkiOiAiIiwKICAgICAgInByZWZpeCI6ICIiLAogICAgICAic3VmZml4IjogIiINCiAg
ICB9LAogICAgInJlY2VpdmVkT3JnYW5pemF0aW9uIjp7CiAgICAgICJpZCI6ICIiLAogICAgICAi
bmFtZSI6ICIiCiAgICB9IA0KICB9XSwKICAiY3VzdG9kaWFuIjogew0KICAgICJpZCI6IFt7CiAg
ICAgICJ0eXBlIjoiIiwKICAgICAgImlkIjoiIgogICAgfV0sCiAgICAibmFtZSI6ICIiCiAgfSwK
ICAiZGF0YUVudGVyZXIiOiB7CiAgICAidGltZSI6ICIiLAogICAgImlkIjoiIiwNCiAgICAiYWRk
cmVzcyI6IFt7CiAgICAgICJ1c2UiOiAiIiwNCiAgICAgICJzdHJlZXRBZGRyZXNzIjogIiIsDQog
ICAgICAiY2l0eSI6ICIiLA0KICAgICAgInByb3ZpbmNlIjogIiIsDQogICAgICAicG9zdGFsQ29k
ZSI6ICIiLA0KICAgICAgImNvdW50cnkiOiAiIg0KICAgIH1dLA0KICAgICJ0ZWxlY29tIjogW3sK
ICAgICAgICAidXNlIjogIiIsCiAgICAgICAgInR5cGUiOiAiIiwKICAgICAgICAidmFsdWUiOiAi
IgogICAgfV0sCiAgICAibmFtZSI6IHsKICAgICAgInVzZSI6ICIiLA0KICAgICAgImdpdmVuIjog
WyIiXSwNCiAgICAgICJmYW1pbHkiOiAiIiwKICAgICAgInByZWZpeCI6ICIiLAogICAgICAic3Vm
Zml4IjogIiINCiAgICB9DQogIH0sDQogICJhdXRoZW50aWNhdG9yIjogW3sKICAgICJpZCI6IiIs
DQogICAgImFkZHJlc3MiOiBbewogICAgICAidXNlIjogIiIsDQogICAgICAic3RyZWV0QWRkcmVz
cyI6ICIiLA0KICAgICAgImNpdHkiOiAiIiwNCiAgICAgICJwcm92aW5jZSI6ICIiLA0KICAgICAg
InBvc3RhbENvZGUiOiAiIiwNCiAgICAgICJjb3VudHJ5IjogIiINCiAgICB9XSwNCiAgICAidGVs
ZWNvbSI6IFt7CiAgICAgICAgInVzZSI6ICIiLAogICAgICAgICJ0eXBlIjogIiIsCiAgICAgICAg
InZhbHVlIjogIiIKICAgIH1dLAogICAgIm5hbWUiOiB7CiAgICAgICJ1c2UiOiAiIiwNCiAgICAg
ICJnaXZlbiI6IFsiIl0sDQogICAgICAiZmFtaWx5IjogIiIsCiAgICAgICJwcmVmaXgiOiAiIiwK
ICAgICAgInN1ZmZpeCI6ICIiDQogICAgfQ0KICB9XSwKICAicGFydGljaXBhbnQiOiBbewogICAg
ImlkIjoiIiwNCiAgICAiYWRkcmVzcyI6IFt7CiAgICAgICJ1c2UiOiAiIiwNCiAgICAgICJzdHJl
ZXRBZGRyZXNzIjogIiIsDQogICAgICAiY2l0eSI6ICIiLA0KICAgICAgInByb3ZpbmNlIjogIiIs
DQogICAgICAicG9zdGFsQ29kZSI6ICIiLA0KICAgICAgImNvdW50cnkiOiAiIg0KICAgIH1dLA0K
ICAgICJ0ZWxlY29tIjogW3sKICAgICAgICAidXNlIjogIiIsCiAgICAgICAgInR5cGUiOiAiIiwK
ICAgICAgICAidmFsdWUiOiAiIgogICAgfV0sCiAgICAibmFtZSI6IHsKICAgICAgInVzZSI6ICIi
LA0KICAgICAgImdpdmVuIjogWyIiXSwNCiAgICAgICJmYW1pbHkiOiAiIiwKICAgICAgInByZWZp
eCI6ICIiLAogICAgICAic3VmZml4IjogIiINCiAgICB9DQogIH1dLA0KICAibm9uWE1MQm9keSI6
IHsKICAgICJtZWRpYVR5cGUiOiAidGV4dC9wbGFpbiIsCiAgICAiY29udGVudCI6ICIiCiAgfQ0K
fQ0=</inboundTemplate>
            <outboundTemplate encoding="base64">e30=</outboundTemplate>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.7.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.7.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.7.1">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.7.1">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.7.1">
            <elements/>
          </filter>
          <transportName>JavaScript Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
      <properties version="3.7.1">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>DEVELOPMENT</messageStorageMode>
        <encryptData>false</encryptData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>true</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TYPE</name>
            <type>STRING</type>
            <mappingName>mirth_type</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="3.7.1">
          <type>None</type>
          <properties/>
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>true</enabled>
          <lastModified>
            <time>1557963383663</time>
            <timezone>America/Vancouver</timezone>
          </lastModified>
          <pruningSettings>
            <archiveEnabled>true</archiveEnabled>
          </pruningSettings>
        </metadata>
        <codeTemplateLibraries>
          <codeTemplateLibrary version="3.7.1">
            <id>5d2a129c-da07-49cc-950c-d941a93cd271</id>
            <name>OBIB</name>
            <revision>5</revision>
            <lastModified>
              <time>1557967210347</time>
              <timezone>Canada/Pacific</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>e995ffe5-fe5f-4260-a385-98f81c8418fe</string>
              <string>b2f0c503-a881-4126-995e-844c3e7692fd</string>
              <string>2375f320-7fd5-48cd-b3bb-53c22dab182b</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.7.1">
                <id>9914a610-67bc-42b7-aa87-6a693ed1800c</id>
                <name>Build CDA Address</name>
                <revision>1</revision>
                <lastModified>
                  <time>1557439108498</time>
                  <timezone>Etc/UTC</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Build a XML address tag based on &apos;4.2.1.2. Addresses&apos;

	@param {String} use - 
	@param {String} streetAddress - 
	@param {String} city - 
	@param {String} state - 
	@param {String} postalCode - 
	@param {String} country - 
	@return {Object} return the XML address tag
*/
function buildCDAAddress(use, streetAddress, city, state, postalCode, country) {
	var addr = new XML(&quot;&lt;addr&gt;&quot; + streetAddress + &quot;&lt;delimiter/&gt;&lt;/addr&gt;&quot;); // CONF-BC0039
  	addr[&apos;@use&apos;] = use; // CONF-BC0041
  	addr[&apos;city&apos;] = city 
  	addr[&apos;state&apos;] = state; // CONF-BC0045
  	addr[&apos;postalCode&apos;] = postalCode;
  	if (country) {
  		addr[&apos;country&apos;] = country; // CONF-BC0044
  	}
  	return addr;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.7.1">
                <id>d56207a8-0d51-40fb-9437-73815405b6a2</id>
                <name>Build CDA ID</name>
                <revision>1</revision>
                <lastModified>
                  <time>1557439109018</time>
                  <timezone>Etc/UTC</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Build a XML id tag

	@param {String} root - 
	@param {String} extension - 
	@return {Object} return the XML id tag
*/
function buildCDAId(root, extension) {
	if (extension) {
		var id = new XML(&apos;&lt;id/&gt;&apos;);
	  	id[&apos;@extension&apos;] = extension;
		if (root) {
		  	id[&apos;@root&apos;] = root;
		  	// Get the authority name from the GlobalMap (loaded from database)
		  	var authName = globalMap.get(root);
		  	if (authName) {
		  		id[&apos;@assigningAuthorityName&apos;] = authName;
		  	}
		}
	  	return id;
	}
	return new XML(&apos;&lt;id nullFlavor=&quot;NA&quot; /&gt;&apos;);
}

</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.7.1">
                <id>aaee9682-0184-43e5-a80b-32615c89dae0</id>
                <name>Build CDA Name</name>
                <revision>1</revision>
                <lastModified>
                  <time>1557439108885</time>
                  <timezone>Etc/UTC</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Build a XML name tag based on &apos;4.2.1.1. Person Names&apos;

	@param {String} use -
	@param {String} family -
	@param {String} given -
	@param {String} prefix -
	@param {String} suffix -
	@return {Object} return the XML name tag
*/
function buildCDAName(use, family, given, prefix, suffix) {
	var name = new XML(&quot;&lt;name/&gt;&quot;);
  	name[&apos;@use&apos;] = use; // CONF-BC0038
  	name[&apos;family&apos;] = family;
  	if (given instanceof Array) { // CONF-BC0031, CONF-BC0034
  		for (var i = 0; i &lt; given.length; i++) {
  			name[&apos;given&apos;][i] = given[i];
  		}
  	} else {
  		name[&apos;given&apos;] = given;
  	}
  	if (prefix) { // CONF-BC0035
  		name[&apos;prefix&apos;] = prefix;
  	}
  	if (suffix) { // CONF-BC0036
  		name[&apos;suffix&apos;] = suffix;
  	}
  	return name;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.7.1">
                <id>39f73e3c-ac8d-46ee-904c-32d6a73d93c0</id>
                <name>Build CDA Telecom</name>
                <revision>1</revision>
                <lastModified>
                  <time>1557439108562</time>
                  <timezone>Etc/UTC</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Build a XML telecom tag

	@param {String} use - &apos;H&apos; = home, &apos;W&apos; = work, &apos;M&apos; = mobile
	@param {String} type - &apos;tel&apos; or &apos;email&apos;
	@param {String} value - number of telefone or email address
	@return {Object} return the XML telecom tag
*/
function buildCDATelecom(use, type, value) {
	var telecom = new XML(&quot;&lt;telecom/&gt;&quot;);
  	telecom[&apos;@use&apos;] = use;
  	telecom[&apos;@value&apos;] = type + &quot;:&quot; + value;
  	return telecom;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.7.1">
                <id>978d7943-1810-4652-a684-8f7b6bc3bc11</id>
                <name>Build CDA TemplateId</name>
                <revision>1</revision>
                <lastModified>
                  <time>1557439108192</time>
                  <timezone>Etc/UTC</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Build a XML templateId tag

	@param {String} code - 
	@return {Object} return the XML template tag
*/
function buildCDATemplateId(code) {
	var templateId = new XML(&apos;&lt;templateId/&gt;&apos;);

	// Get the attributes from the GlobalMap (loaded from database)
  	var loinc_code = globalMap.get(code);
  	
  	templateId[&apos;@root&apos;] = loinc_code[&apos;template_id&apos;];
  	templateId[&apos;@assigningAuthorityName&apos;] = loinc_code[&apos;template_name&apos;];
		  	
  	return templateId;&#xd;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.7.1">
                <id>0d5c946b-11fe-4dde-8c69-7d9296ea32a0</id>
                <name>Build Document Storage Message</name>
                <revision>1</revision>
                <lastModified>
                  <time>1557439108673</time>
                  <timezone>Etc/UTC</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>importPackage(Packages.ca.uvic.leadlab.cdxconnector.messages);

/**
	Build a Document Storage Message.

	@param {String} locationId - 
	@param {String} receiverId - 
	@param {String} documentId - 
	@param {String} messageType - DOCUMENT, RESPONSE or ATTACHMENT
	@param {String} content - 
	@return {String} return the Document Storage Message JSON object
*/
function buildDocumentStorageMessage(locationId, receiverId, documentId, messageType, messageContent) {
	var storageMsg = {};
	storageMsg[&apos;locationId&apos;] = locationId;
	storageMsg[&apos;receiverId&apos;] = receiverId;
	storageMsg[&apos;documentId&apos;] = documentId;
	storageMsg[&apos;messageType&apos;] = messageType;
	storageMsg[&apos;messageContent&apos;] = messageContent;
	return storageMsg;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.7.1">
                <id>d55c3c9d-e151-4034-9d14-35f86a4a58f1</id>
                <name>Check Segment</name>
                <revision>1</revision>
                <lastModified>
                  <time>1557439108774</time>
                  <timezone>Etc/UTC</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Verify that the segment exists.

	@param {Object} segment - 
	@return {boolean} return true if the segment exists
*/
function segmentExist(segment) {
	return getArrayOrXmlLength(segment) &gt; 0;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.7.1">
                <id>738d81a1-d04c-482e-a011-30c61a09b3d3</id>
                <name>Create Array of DocumentAttachment</name>
                <revision>4</revision>
                <lastModified>
                  <time>1557514941299</time>
                  <timezone>Etc/UTC</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Create an Array of DocumentAttachment objects from a JSON object

	@param {Object[]} jsonAttachments - 
	@return {DocumentAttachment[]} return the Array of DocumentAttachment
*/
function createDocumentAttachmentArray(jsonAttachments) {
	var attachments = [];
	if (jsonAttachments != null) {
		for (var i = 0; i &lt; jsonAttachments.length; i++) {
			var attachment = jsonAttachments[i];
			attachments.push(new Packages.ca.uvic.leadlab.cdxconnector.messages.DocumentAttachment(
				attachment[&apos;mediaType&apos;],
				attachment[&apos;content&apos;],
				attachment[&apos;hash&apos;],
				attachment[&apos;reference&apos;]));
		}
	}
	return attachments;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.7.1">
                <id>bcd2a30d-111f-4fd3-9724-0e9a2e7dfe50</id>
                <name>Create DatabaseConnection</name>
                <revision>1</revision>
                <lastModified>
                  <time>1557439108932</time>
                  <timezone>Etc/UTC</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get the DatabaseConnection object

	@return {DatabaseConnection} return the DatabaseConnection object
*/
function getDBConnection() {
	return DatabaseConnectionFactory.createDatabaseConnection(
			globalMap.get(&apos;obib.db.driver&apos;), 
			globalMap.get(&apos;obib.db.url&apos;), 
			globalMap.get(&apos;obib.db.username&apos;) , 
			globalMap.get(&apos;obib.db.password&apos;));
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.7.1">
                <id>60bfd3ac-552a-4d59-ac1d-48fbe4f430b2</id>
                <name>Create Error Message</name>
                <revision>12</revision>
                <lastModified>
                  <time>1557795952834</time>
                  <timezone>Etc/UTC</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Create JSON error message

	@param {String} error - Error message
	@param {Object} obibErrors - Associative Array of errors
	@return {String} return the JSON response
*/
function createErrorMessage(error, obibErrors) {
	return JSON.stringify({&apos;status&apos;: &apos;ERROR&apos;, &apos;message&apos;: error, &apos;obibErrors&apos;: obibErrors})
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.7.1">
                <id>f1de696c-f547-49ae-8225-f7e40ed2c87c</id>
                <name>Create Segment Before</name>
                <revision>1</revision>
                <lastModified>
                  <time>1557439108424</time>
                  <timezone>Etc/UTC</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Create a new segment and insert it before the target segment.
	
	@param {String} name - The name of the segment to create.
	@param {String} segment - The existing segment that the new segment will be inserted before.
	@return {String} return The existing segment that the new segment will be inserted after.
*/
function createSegmentBefore(name, segment) {
	var msgObj = segment;
   	while (msgObj.parent() != undefined) { 
		msgObj = msgObj.parent(); 
	}
     msgObj.insertChildBefore(segment[0], new XML(&apos;&lt;&apos; + name + &apos;&gt;&lt;/&apos; + name + &apos;&gt;&apos;));
   	return msgObj.child(segment[0].childIndex() - 1);
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.7.1">
                <id>0b2ecd99-756c-4a93-9bba-230bf83b0c62</id>
                <name>Format CDA Date</name>
                <revision>8</revision>
                <lastModified>
                  <time>1557969826591</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Format the date for the CDA format &apos;yyyyMMdd&apos;

	@param {Date/String} date -
	@return {String} return the formated date
*/
function formatCDADate(date) {
	return DateUtil.convertDate(&quot;yyyy-MM-dd&quot;, &quot;yyyyMMdd&quot;, date);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.7.1">
                <id>07a8a226-a4d4-4248-b816-00011d888d0f</id>
                <name>Format CDA Date/Time</name>
                <revision>7</revision>
                <lastModified>
                  <time>1557969321208</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Format the date/time for the CDA format &apos;yyyyMMddHHmmZZZ&apos;

	@param {Date/String} dateTime - 
	@return {String} return the formated dateTime
*/
function formatCDADateTime(dateTime) {
	return DateUtil.formatDate(&apos;yyyyMMddHHmmZZZ&apos;, new Date(dateTime));
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.7.1">
                <id>e83b8bbf-433a-4c3d-88a2-16f4132b38af</id>
                <name>Handle Return Message</name>
                <revision>1</revision>
                <lastModified>
                  <time>1557439108623</time>
                  <timezone>Etc/UTC</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Handle the return message creation.

	@param {Object} responseStatus - 
	@param {Object} responseStatusMessage - 
	@param {Object} responseMessage - 
	@param {Function} createMessage - Callback function responsible for creating and return the result message.
	@return {String} return the stringify json message
*/
function handleResponseMessage(responseStatus, responseStatusMessage, responseMessage, createMessage) {
	if (responseStatus === SENT) { // process only SENT messages
		return JSON.stringify(createMessage()); // Convert the json to string and return it
	} else if (responseStatus === ERROR) {
		throw &quot;Error Message: &apos;&quot; + responseStatusMessage.toString() 
			+ &quot;&apos;\n Original Message: &apos;&quot; + msg.toString() + &quot;&apos;&quot;;
	} else {
		throw &quot;Not able to handle the response code: &apos;&quot; + responseStatus 
		+ &quot;&apos; \n Error Message: &apos;&quot; + responseStatusMessage.toString() 
		+ &quot;&apos;\n Original Message: &apos;&quot; + msg.toString() + &quot;&apos;&quot;;
	}
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.7.1">
                <id>f4743440-d5d2-44f2-acd9-35746c48d9b3</id>
                <name>Parse CDA Address</name>
                <revision>1</revision>
                <lastModified>
                  <time>1557439108023</time>
                  <timezone>Etc/UTC</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Parse the CDA Address to JSON Object

	@param {String} cdaAddress - 
	@return {String} return the parsed Address object
*/
function parseCDAAddress(cdaAddress) {
	var addr = {};
	addr[&apos;use&apos;] = cdaAddress[&apos;@use&apos;].toString();
	// Try to get the street address from the body of the tag &lt;addr&gt; (Document format)
	var strtAddr = cdaAddress.toString().match(/&lt;addr.*&gt;(.+?)(?=&lt;delimiter\/&gt;)/); // return array of matchs
	if (strtAddr) {
		addr[&apos;streetAddress&apos;] = strtAddr[1]; //.replace(/(&lt;\/?[^&gt;]+&gt;)/gi, &apos;&apos;); // strip xml tags?
	}
	// Try to append the list of &apos;delimiters&apos; (List clinics/providers format)
	if (segmentExist(cdaAddress[&apos;delimiter&apos;])) {
		for (var i = 0; i &lt; getArrayOrXmlLength(cdaAddress[&apos;delimiter&apos;]); i++) {
			addr[&apos;streetAddress&apos;] = (addr[&apos;streetAddress&apos;] ? addr[&apos;streetAddress&apos;] + &apos; &apos; : &apos;&apos;) + cdaAddress[&apos;delimiter&apos;][i].toString();
		}
		addr[&apos;streetAddress&apos;] = addr[&apos;streetAddress&apos;].trim(); // trim any whitespace from both side of the address
	}
	if (segmentExist(cdaAddress[&apos;city&apos;])) {
		addr[&apos;city&apos;] = cdaAddress[&apos;city&apos;].toString();
	}
	if (segmentExist(cdaAddress[&apos;province&apos;])) {
		addr[&apos;province&apos;] = cdaAddress[&apos;state&apos;].toString();
	}
	if (segmentExist(cdaAddress[&apos;postalCode&apos;])) {
		addr[&apos;postalCode&apos;] = cdaAddress[&apos;postalCode&apos;].toString();
	}
	if (segmentExist(cdaAddress[&apos;country&apos;])) {
		addr[&apos;country&apos;] = cdaAddress[&apos;country&apos;].toString();
	}
	return addr;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.7.1">
                <id>41f1daa2-e22b-439a-b0b5-16bc108c007e</id>
                <name>Parse CDA Date/Time</name>
                <revision>1</revision>
                <lastModified>
                  <time>1557439108842</time>
                  <timezone>Etc/UTC</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Parse the CDA Date/Time to Date object

	@param {String} cdaDateTime - 
	@return {String} return the Date object
*/
function parseCDADateTime(cdaDateTime) {
	if (cdaDateTime &amp;&amp; cdaDateTime.length &lt;= 8) {
		return DateUtil.convertDate(&quot;yyyyMMdd&quot;, &quot;yyyy-MM-dd&quot;, cdaDateTime);
	}
	return DateUtil.convertDate(&quot;yyyyMMddHHmmZZZ&quot;, &quot;yyyy-MM-dd\&apos;T\&apos;HH:mm:ssZ&quot;, cdaDateTime);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.7.1">
                <id>1dc8b8fe-b046-4292-a7c2-218c37bd0d2d</id>
                <name>Parse CDA Date/TIme to DB format</name>
                <revision>1</revision>
                <lastModified>
                  <time>1557439108977</time>
                  <timezone>Etc/UTC</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Parse the CDA Date/Time to Date in DB format

	@param {String} cdaDateTime - 
	@return {String} return the Date in DB format
*/
function parseCDADateTimeToDB(cdaDateTime) {
	if (cdaDateTime &amp;&amp; cdaDateTime.length &lt;= 8) {
		return DateUtil.convertDate(&quot;yyyyMMdd&quot;, &quot;yyyy-MM-dd&quot;, cdaDateTime);
	}
	return DateUtil.convertDate(&quot;yyyyMMddHHmmZZZ&quot;, &quot;yyyy-MM-dd hh:mm:ss&quot;, cdaDateTime);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.7.1">
                <id>a2f73260-eb70-4dcc-8b8a-9350c3bec9fd</id>
                <name>Parse CDA ID</name>
                <revision>1</revision>
                <lastModified>
                  <time>1557439107886</time>
                  <timezone>Etc/UTC</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Parse the CDA Id to JSON object

	@param {String} cdaID - 
	@return {String} return the parsed ID object
*/
function parseCDAId(cdaID) {
	var id = {};
	if (cdaID[&apos;@extension&apos;]) {
		id[&apos;code&apos;] = cdaID[&apos;@extension&apos;].toString();
	}
	if (cdaID[&apos;@root&apos;]) {
		id[&apos;type&apos;] = cdaID[&apos;@root&apos;].toString();
	}
	return id;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.7.1">
                <id>a0354d90-ffa8-47c5-9776-e41927d2f0d0</id>
                <name>Parse CDA Name</name>
                <revision>1</revision>
                <lastModified>
                  <time>1557439108115</time>
                  <timezone>Etc/UTC</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Parse the CDA Name to JSON object

	@param {String} cdaName - 
	@return {String} return the parsed Name object
*/
function parseCDAName(cdaName) {
	var name = {};
	name[&apos;use&apos;] = cdaName[&apos;@use&apos;].toString();
	name[&apos;family&apos;] = cdaName[&apos;family&apos;].toString();
	name[&apos;given&apos;] = [];
	for (var i = 0; i &lt; getArrayOrXmlLength(cdaName[&apos;given&apos;]); i++) {
		name[&apos;given&apos;][i] = cdaName[&apos;given&apos;][i].toString();
	}
	if (segmentExist(cdaName[&apos;prefix&apos;])) {
		name[&apos;prefix&apos;] = cdaName[&apos;prefix&apos;].toString();
	}
	if (segmentExist(cdaName[&apos;suffix&apos;])) {
		name[&apos;suffix&apos;] = cdaName[&apos;suffix&apos;].toString();
	}
	return name;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.7.1">
                <id>407e6d63-57cf-42f8-b555-5d6c575f4f55</id>
                <name>Parse CDA Telecom</name>
                <revision>1</revision>
                <lastModified>
                  <time>1557439109060</time>
                  <timezone>Etc/UTC</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Parse the CDA Telecom to JSON object

	@param {String} telecom - 
	@return {String} return the parsed Telecom object
*/
function parseCDATelecom(cdaTelecom) {
	var telecom = {};
	telecom[&apos;use&apos;] = cdaTelecom[&apos;@use&apos;].toString();
	var telParts = cdaTelecom[&apos;@value&apos;].split(&apos;:&apos;);
	telecom[&apos;type&apos;] = telParts[0];	
	telecom[&apos;value&apos;] = telParts[1];
	return telecom;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.7.1">
                <id>dfd86988-26e1-4d97-b81d-fee49e303272</id>
                <name>Store OBIB Error</name>
                <revision>14</revision>
                <lastModified>
                  <time>1557795722702</time>
                  <timezone>Etc/UTC</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Store the error as an &apos;associative array&apos; in the channel map.
	To retrieve the array of errors use &apos;channelMap.get(&apos;obibErrors&apos;)&apos;

	@param {String} errorCode - the key of the associative array
	@param {String} errorMessage - the value of the associative array
*/
function storeOBIBError(errorCode, errorMessage) {
	var obibErrors = channelMap.get(&apos;obibErrors&apos;);
	if (obibErrors == null) {
		obibErrors = new Object();
	}
	obibErrors[errorCode] = errorMessage;
	channelMap.put(&apos;obibErrors&apos;, obibErrors);
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
        </codeTemplateLibraries>
      </exportData>
    </channel>
  </channels>
</channelGroup>