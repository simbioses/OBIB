<channelGroup version="3.8.0">
  <id>a79c9fe3-7a08-42c2-abe1-caf4d426f430</id>
  <name>OBIB</name>
  <revision>2</revision>
  <lastModified>
    <time>1572656644469</time>
    <timezone>Canada/Pacific</timezone>
  </lastModified>
  <description></description>
  <channels>
    <channel version="3.8.0">
      <id>e995ffe5-fe5f-4260-a385-98f81c8418fe</id>
      <nextMetaDataId>5</nextMetaDataId>
      <name>Document Storage</name>
      <description>- Store metadata of the documents sent to CDX;
- Store metadata of the CDX responses;</description>
      <revision>3</revision>
      <sourceConnector version="3.8.0">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.vm.VmReceiverProperties" version="3.8.0">
          <pluginProperties/>
          <sourceConnectorProperties version="3.8.0">
            <responseVariable>None</responseVariable>
            <respondAfterProcessing>true</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>1</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
        </properties>
        <transformer version="3.8.0">
          <elements>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.8.0">
              <name>Document Storage Source</name>
              <sequenceNumber>0</sequenceNumber>
              <enabled>true</enabled>
              <script>logger.debug(&apos;Document Storage Source&apos;);

// Store the ids in the channel map
channelMap.put(&apos;locationId&apos;, msg[&apos;locationId&apos;]);
channelMap.put(&apos;documentId&apos;, msg[&apos;documentId&apos;]);

// Store the message content in the tmp message
if (msg[&apos;messageType&apos;] !== &apos;ATTACHMENT&apos;) { // DOCUMENT and RESONSE: uses the XML as template
	tmp = new XML(msg[&apos;messageContent&apos;]);
} else { // ATTACHMENT: convert the JSON to XML
	tmp = JsonUtil.toXml(msg[&apos;messageContent&apos;]);
}

// Store the versions
channelMap.put(&apos;obibVersion&apos;, msg[&apos;obibVersion&apos;]);
channelMap.put(&apos;connectorVersion&apos;, msg[&apos;connectorVersion&apos;]);</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.destinationsetfilter.DestinationSetFilterStep version="3.8.0">
              <name>Filter destination(s) if &quot;msg[&apos;messageType&apos;]&quot; equals &quot;DOCUMENT&quot;</name>
              <sequenceNumber>1</sequenceNumber>
              <enabled>true</enabled>
              <behavior>REMOVE_ALL_EXCEPT</behavior>
              <metaDataIds>
                <int>1</int>
              </metaDataIds>
              <field>msg[&apos;messageType&apos;]</field>
              <condition>EQUALS</condition>
              <values>
                <string>&quot;DOCUMENT&quot;</string>
              </values>
            </com.mirth.connect.plugins.destinationsetfilter.DestinationSetFilterStep>
            <com.mirth.connect.plugins.destinationsetfilter.DestinationSetFilterStep version="3.8.0">
              <name>Filter destination(s) if &quot;msg[&apos;messageType&apos;]&quot; equals &quot;RESPONSE&quot;</name>
              <sequenceNumber>2</sequenceNumber>
              <enabled>true</enabled>
              <behavior>REMOVE_ALL_EXCEPT</behavior>
              <metaDataIds>
                <int>2</int>
              </metaDataIds>
              <field>msg[&apos;messageType&apos;]</field>
              <condition>EQUALS</condition>
              <values>
                <string>&quot;RESPONSE&quot;</string>
              </values>
            </com.mirth.connect.plugins.destinationsetfilter.DestinationSetFilterStep>
            <com.mirth.connect.plugins.destinationsetfilter.DestinationSetFilterStep version="3.8.0">
              <name>Filter destination(s) if &quot;msg[&apos;messageType&apos;]&quot; equals &quot;ATTACHMENT&quot;</name>
              <sequenceNumber>3</sequenceNumber>
              <enabled>true</enabled>
              <behavior>REMOVE_ALL_EXCEPT</behavior>
              <metaDataIds>
                <int>4</int>
              </metaDataIds>
              <field>msg[&apos;messageType&apos;]</field>
              <condition>EQUALS</condition>
              <values>
                <string>&quot;ATTACHMENT&quot;</string>
              </values>
            </com.mirth.connect.plugins.destinationsetfilter.DestinationSetFilterStep>
          </elements>
          <inboundTemplate encoding="base64">ewoJImxvY2F0aW9uSWQiOiAiIiwKCSJkb2N1bWVudElkIjogIiIsCgkibWVzc2FnZVR5cGUiOiAi
IiwKCSJtZXNzYWdlQ29udGVudCI6ICIiCn0=</inboundTemplate>
          <outboundTemplate encoding="base64">PGNvbnRlbnQvPg==</outboundTemplate>
          <inboundDataType>JSON</inboundDataType>
          <outboundDataType>HL7V3</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.8.0">
            <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.8.0">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </inboundProperties>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.8.0">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.8.0">
              <stripNamespaces>false</stripNamespaces>
            </serializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.8.0">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="3.8.0">
          <elements/>
        </filter>
        <transportName>Channel Reader</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="3.8.0">
          <metaDataId>1</metaDataId>
          <name>Store CDA Document</name>
          <properties class="com.mirth.connect.connectors.jdbc.DatabaseDispatcherProperties" version="3.8.0">
            <pluginProperties/>
            <destinationConnectorProperties version="3.8.0">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <driver>com.mysql.jdbc.Driver</driver>
            <url>jdbc:mysql://localhost:3306/OBIB_DB</url>
            <username></username>
            <password></password>
            <query>logger.debug(&apos;Store CDA Document&apos;);

try {
	// Build the insert script
	var insertString = &quot;INSERT INTO document (document_id, document_date, document_content, location_id, obib_version, connector_version) &quot; 
		+ &quot;VALUES (&apos;&quot; + $(&apos;documentId&apos;) + &quot;&apos;, &apos;&quot; + $(&apos;documentDate&apos;) + &quot;&apos;, &apos;&quot; + $(&apos;documentContent&apos;) + &quot;&apos;, &apos;&quot; + $(&apos;locationId&apos;) 
		+ &quot;&apos;, &apos;&quot; + $(&apos;obibVersion&apos;) + &quot;&apos;, &apos;&quot; + $(&apos;connectorVersion&apos;) + &quot;&apos;)&quot;;

	// Execute the insertion
	executeUpdate(insertString);
} catch(err) {
	logger.error(&apos;Error on &quot;Store CDA Document&quot;: &apos; + err);
}</query>
            <useScript>true</useScript>
          </properties>
          <transformer version="3.8.0">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.8.0">
                <name>Get Document Metadata</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>//channelMap.put(&apos;documentId&apos;, msg[&apos;id&apos;][&apos;@extension&apos;].toString()); // retrieved on Source Transformer
channelMap.put(&apos;documentDate&apos;, parseCDADateTimeToDB(msg[&apos;effectiveTime&apos;][&apos;@value&apos;].toString()));
channelMap.put(&apos;documentContent&apos;, &apos;&apos;); // msg.toString()); TODO Not storing document content for now</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64">PENsaW5pY2FsRG9jdW1lbnQgeG1sbnM9InVybjpobDctb3JnOnYzIiBjbGFzc0NvZGU9IkRPQ0NM
SU4iIG1vb2RDb2RlPSJFVk4iPgogICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkNEWCBD
bGluaWNhbCBEb2N1bWVudCBJRCIgZXh0ZW5zaW9uPSIiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgz
LjMuMjc3LjEwMC4zIi8+CiAgICA8ZWZmZWN0aXZlVGltZSB2YWx1ZT0iIi8+CiAgICA8cmVjb3Jk
VGFyZ2V0IGNvbnRleHRDb250cm9sQ29kZT0iT1AiIHR5cGVDb2RlPSJSQ1QiPgogICAgICAgIDxw
YXRpZW50Um9sZSBjbGFzc0NvZGU9IlBBVCIvPgogICAgPC9yZWNvcmRUYXJnZXQ+CiAgICA8YXV0
aG9yIGNvbnRleHRDb250cm9sQ29kZT0iT1AiIHR5cGVDb2RlPSJBVVQiPgogICAgICAgIDx0aW1l
IHZhbHVlPSIiLz4KICAgICAgICA8YXNzaWduZWRBdXRob3IgY2xhc3NDb2RlPSJBU1NJR05FRCI+
CiAgICAgICAgICAgIDxpZCBudWxsRmxhdm9yPSJOQSIvPgogICAgICAgIDwvYXNzaWduZWRBdXRo
b3I+CiAgICA8L2F1dGhvcj4KICAgIDxhdXRob3IgY29udGV4dENvbnRyb2xDb2RlPSJPUCIgdHlw
ZUNvZGU9IkFVVCI+CiAgICAgICAgPHRpbWUgdmFsdWU9IiIvPgogICAgICAgIDxhc3NpZ25lZEF1
dGhvciBjbGFzc0NvZGU9IkFTU0lHTkVEIj4KICAgICAgICAgICAgPGlkIGV4dGVuc2lvbj0iIi8+
CiAgICAgICAgPC9hc3NpZ25lZEF1dGhvcj4KICAgIDwvYXV0aG9yPgogICAgPGluZm9ybWF0aW9u
UmVjaXBpZW50IHR5cGVDb2RlPSLigJxQUkNQ4oCdIj4KICAgICAgICA8aW50ZW5kZWRSZWNpcGll
bnQgY2xhc3NDb2RlPSJBU1NJR05FRCI+CiAgICAgICAgICAgIDxpZCBleHRlbnNpb249IiIvPgog
ICAgICAgIDwvaW50ZW5kZWRSZWNpcGllbnQ+CiAgICA8L2luZm9ybWF0aW9uUmVjaXBpZW50Pgo8
L0NsaW5pY2FsRG9jdW1lbnQ+Cg==</inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>HL7V3</inboundDataType>
            <outboundDataType>HL7V3</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.8.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.8.0">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.8.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.8.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.8.0">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.8.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.8.0">
            <elements/>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>HL7V3</inboundDataType>
            <outboundDataType>HL7V3</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.8.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.8.0">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.8.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.8.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.8.0">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.8.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.8.0">
            <elements/>
          </filter>
          <transportName>Database Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
        <connector version="3.8.0">
          <metaDataId>2</metaDataId>
          <name>Store CDA Response</name>
          <properties class="com.mirth.connect.connectors.jdbc.DatabaseDispatcherProperties" version="3.8.0">
            <pluginProperties/>
            <destinationConnectorProperties version="3.8.0">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <driver>com.mysql.jdbc.Driver</driver>
            <url>jdbc:mysql://localhost:3306/OBIB_DB</url>
            <username></username>
            <password></password>
            <query>logger.debug(&apos;Store CDA Response&apos;);

try {
	// Build the insert script
	var insertString = &quot;INSERT INTO document_response (response_id, response_date, response_status, response_content, document_id, obib_version, connector_version) &quot; 
		+ &quot;VALUES (&apos;&quot; + $(&apos;responseId&apos;) + &quot;&apos;, &apos;&quot; + $(&apos;responseDate&apos;) + &quot;&apos;, &apos;&quot; + $(&apos;responseStatus&apos;) + &quot;&apos;, &apos;&quot; + $(&apos;responseContent&apos;) + &quot;&apos;, &apos;&quot; + $(&apos;documentId&apos;) 
		+ &quot;&apos;, &apos;&quot; + $(&apos;obibVersion&apos;) + &quot;&apos;, &apos;&quot; + $(&apos;connectorVersion&apos;) + &quot;&apos;)&quot;;
		
	// Execute the insertion
	executeUpdate(insertString);
} catch(err) {
	logger.error(&apos;Error on &quot;Store CDA Response&quot;: &apos; + err);
}</query>
            <useScript>true</useScript>
          </properties>
          <transformer version="3.8.0">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.8.0">
                <name>Get Response Metadata</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>channelMap.put(&apos;responseId&apos;, msg[&apos;id&apos;][&apos;@extension&apos;].toString());
channelMap.put(&apos;responseDate&apos;, parseCDADateTimeToDB(msg[&apos;creationTime&apos;][&apos;@value&apos;].toString()));
channelMap.put(&apos;responseStatus&apos;, msg[&apos;acknowledgement&apos;][&apos;acknowledgementDetail&apos;][&apos;@typeCode&apos;].toString());
channelMap.put(&apos;responseContent&apos;, msg.toString());
//channelMap.put(&apos;documentId&apos;, &apos;&apos;); // retrieved on Source Transformer</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64">PE1DQ0lfSU4wMDAwMDJVVjAxIHhtbG5zPSJ1cm46aGw3LW9yZzp2MyIgSVRTVmVyc2lvbj0iWE1M
XzEuMCI+CiAgICA8aWQgZXh0ZW5zaW9uPSIiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3
LjEwMC4xIi8+CiAgICA8Y3JlYXRpb25UaW1lIHZhbHVlPSIiLz4KICAgIDxhY2NlcHRBY2tDb2Rl
IGNvZGU9IiIvPgogICAgPHJlY2VpdmVyPgogICAgICAgIDxkZXZpY2UgY2xhc3NDb2RlPSJERVYi
IGRldGVybWluZXJDb2RlPSJJTlNUQU5DRSI+CiAgICAgICAgICAgIDxpZCBudWxsRmxhdm9yPSJO
QSIvPgogICAgICAgICAgICA8YXNBZ2VudCBjbGFzc0NvZGU9IkFHTlQiPgogICAgICAgICAgICAg
ICAgPHJlcHJlc2VudGVkT3JnYW5pemF0aW9uIGNsYXNzQ29kZT0iT1JHIiBkZXRlcm1pbmVyQ29k
ZT0iSU5TVEFOQ0UiLz4KICAgICAgICAgICAgPC9hc0FnZW50PgogICAgICAgIDwvZGV2aWNlPgog
ICAgPC9yZWNlaXZlcj4KICAgIDxzZW5kZXI+CiAgICAgICAgPGRldmljZSBjbGFzc0NvZGU9IkRF
ViIgZGV0ZXJtaW5lckNvZGU9IklOU1RBTkNFIj4KICAgICAgICAgICAgPGlkIG51bGxGbGF2b3I9
Ik5BIi8+CiAgICAgICAgICAgIDxhc0FnZW50IGNsYXNzQ29kZT0iQUdOVCI+CiAgICAgICAgICAg
ICAgICA8cmVwcmVzZW50ZWRPcmdhbml6YXRpb24gY2xhc3NDb2RlPSJPUkciIGRldGVybWluZXJD
b2RlPSJJTlNUQU5DRSIvPgogICAgICAgICAgICA8L2FzQWdlbnQ+CiAgICAgICAgPC9kZXZpY2U+
CiAgICA8L3NlbmRlcj4KICAgIDxhY2tub3dsZWRnZW1lbnQgdHlwZUNvZGU9IkNBIj4KICAgICAg
ICA8dGFyZ2V0TWVzc2FnZT4KICAgICAgICAgICAgPGlkIGV4dGVuc2lvbj0iIiByb290PSIyLjE2
Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuMSIvPgogICAgICAgIDwvdGFyZ2V0TWVzc2FnZT4KICAg
ICAgICA8YWNrbm93bGVkZ2VtZW50RGV0YWlsIHR5cGVDb2RlPSIiPgogICAgICAgICAgICA8dGV4
dC8+CiAgICAgICAgPC9hY2tub3dsZWRnZW1lbnREZXRhaWw+CiAgICA8L2Fja25vd2xlZGdlbWVu
dD4KPC9NQ0NJX0lOMDAwMDAyVVYwMT4K</inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>HL7V3</inboundDataType>
            <outboundDataType>HL7V3</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.8.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.8.0">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.8.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.8.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.8.0">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.8.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.8.0">
            <elements/>
            <inboundDataType>HL7V3</inboundDataType>
            <outboundDataType>HL7V3</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.8.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.8.0">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.8.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.8.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.8.0">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.8.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.8.0">
            <elements/>
          </filter>
          <transportName>Database Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>false</waitForPrevious>
        </connector>
        <connector version="3.8.0">
          <metaDataId>4</metaDataId>
          <name>Store CDA Attachment</name>
          <properties class="com.mirth.connect.connectors.jdbc.DatabaseDispatcherProperties" version="3.8.0">
            <pluginProperties/>
            <destinationConnectorProperties version="3.8.0">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <driver>com.mysql.jdbc.Driver</driver>
            <url>jdbc:mysql://localhost:3306/OBIB_DB</url>
            <username></username>
            <password></password>
            <query>logger.debug(&apos;Store CDA Attachment&apos;);

try {
	// Build the insert script
	var insertString = &quot;INSERT INTO document_attachment (document_id, media_type, reference_name, content, hash_value, obib_version, connector_version) &quot; 
		+ &quot;VALUES (&apos;&quot; + $(&apos;documentId&apos;) + &quot;&apos;, &apos;&quot; + $(&apos;mediaType&apos;) + &quot;&apos;, &apos;&quot; + $(&apos;referenceName&apos;) + &quot;&apos;, &apos;&quot; + $(&apos;content&apos;) + &quot;&apos;, &apos;&quot; + $(&apos;hashValue&apos;)
		+ &quot;&apos;, &apos;&quot; + $(&apos;obibVersion&apos;) + &quot;&apos;, &apos;&quot; + $(&apos;connectorVersion&apos;) + &quot;&apos;)&quot;;
	
	// Execute the insertion
	executeUpdate(insertString);
} catch(err) {
	logger.error(&apos;Error on &quot;Store CDA Attachment&quot;: &apos; + err);
}</query>
            <useScript>true</useScript>
          </properties>
          <transformer version="3.8.0">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.8.0">
                <name>Get Attachment Metadata</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>//channelMap.put(&apos;documentId&apos;, &apos;&apos;); // retrieved on Source Transformer
channelMap.put(&apos;mediaType&apos;, msg[&apos;mediaType&apos;].toString());
channelMap.put(&apos;referenceName&apos;, msg[&apos;reference&apos;].toString());
channelMap.put(&apos;content&apos;, &apos;&apos;); // msg[&apos;content&apos;].toString()); TODO Not Storing the attachment content for now
channelMap.put(&apos;hashValue&apos;, msg[&apos;hash&apos;].toString());</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64">PGF0dGFjaG1lbnRzPgogIDxtZWRpYVR5cGUvPgogIDxyZWZlcmVuY2UvPgogIDxjb250ZW50Lz4K
ICA8aGFzaC8+CjwvYXR0YWNobWVudHM+</inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>HL7V3</inboundDataType>
            <outboundDataType>HL7V3</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.8.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.8.0">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.8.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.8.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.8.0">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.8.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.8.0">
            <elements/>
            <inboundDataType>HL7V3</inboundDataType>
            <outboundDataType>HL7V3</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.8.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.8.0">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.8.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.8.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.8.0">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.8.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.8.0">
            <elements/>
          </filter>
          <transportName>Database Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>false</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
      <properties version="3.8.0">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>DEVELOPMENT</messageStorageMode>
        <encryptData>false</encryptData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>true</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TYPE</name>
            <type>STRING</type>
            <mappingName>mirth_type</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="3.8.0">
          <type>None</type>
          <properties/>
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>true</enabled>
          <lastModified>
            <time>1574124202928</time>
            <timezone>America/Vancouver</timezone>
          </lastModified>
          <pruningSettings>
            <archiveEnabled>true</archiveEnabled>
          </pruningSettings>
        </metadata>
        <codeTemplateLibraries>
          <codeTemplateLibrary version="3.8.0">
            <id>a689ef28-f6b5-43bf-95c0-3a7f0cfadaff</id>
            <name>CDA</name>
            <revision>3</revision>
            <lastModified>
              <time>1571944443031</time>
              <timezone>Canada/Pacific</timezone>
            </lastModified>
            <description>Functions to build/format/parse CDA message fragments</description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>e995ffe5-fe5f-4260-a385-98f81c8418fe</string>
              <string>b2f0c503-a881-4126-995e-844c3e7692fd</string>
              <string>f3a65b72-9187-42ef-88cd-1d7626887e2e</string>
              <string>2375f320-7fd5-48cd-b3bb-53c22dab182b</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.8.0">
                <id>9914a610-67bc-42b7-aa87-6a693ed1800c</id>
                <name>Build CDA Address</name>
                <revision>6</revision>
                <lastModified>
                  <time>1571963472067</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Build a XML address tag based on &apos;4.2.1.2. Addresses&apos;

	@param {String} use - 
	@param {String} streetAddress - 
	@param {String} city - 
	@param {String} state - 
	@param {String} postalCode - 
	@param {String} country - 
	@return {Object} return the XML address tag
*/
function buildCDAAddress(use, streetAddress, city, state, postalCode, country) {
	var addr = new XML(&quot;&lt;addr&gt;&quot; + (streetAddress ? streetAddress + &quot;&lt;delimiter/&gt;&quot; : &quot;&quot;) + &quot;&lt;/addr&gt;&quot;); // CONF-BC0039
  	if (streetAddress) {
  		addr[&apos;@use&apos;] = use; // CONF-BC0041
  	}
  	if (city) {
  		addr[&apos;city&apos;] = city;
  	}
  	if (state) {
  		if (state.length == 2) {
  			state = &apos;CA-&apos; + state;
  		}
  		addr[&apos;state&apos;] = state; // CONF-BC0045
  	}
  	if (postalCode) {
  		addr[&apos;postalCode&apos;] = postalCode;
  	}
  	if (country) {
  		addr[&apos;country&apos;] = country; // CONF-BC0044
  	}
  	return addr;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>d56207a8-0d51-40fb-9437-73815405b6a2</id>
                <name>Build CDA ID</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650189148</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Build a XML id tag

	@param {String} root - 
	@param {String} extension - 
	@return {Object} return the XML id tag
*/
function buildCDAId(root, extension) {
	if (extension != null &amp;&amp; (&quot;&quot;+extension).length &gt; 0) {
		var id = new XML(&apos;&lt;id/&gt;&apos;);
	  	id[&apos;@extension&apos;] = extension;
		if (root != null) {
		  	id[&apos;@root&apos;] = root;
		  	// Get the authority name from the GlobalMap (loaded from database)
		  	var authName = globalMap.get(root);
		  	if (authName) {
		  		id[&apos;@assigningAuthorityName&apos;] = authName;
		  	}
		}
	  	return id;
	}
	return new XML(&apos;&lt;id nullFlavor=&quot;NA&quot; /&gt;&apos;);
}

</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>aaee9682-0184-43e5-a80b-32615c89dae0</id>
                <name>Build CDA Name</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650189270</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Build a XML name tag based on &apos;4.2.1.1. Person Names&apos;

	@param {String} use -
	@param {String} family -
	@param {String} given -
	@param {String} prefix -
	@param {String} suffix -
	@return {Object} return the XML name tag
*/
function buildCDAName(use, family, given, prefix, suffix) {
	var name = new XML(&quot;&lt;name/&gt;&quot;);
  	name[&apos;@use&apos;] = use; // CONF-BC0038
  	name[&apos;family&apos;] = family;
  	if (given instanceof Array) { // CONF-BC0031, CONF-BC0034
  		for (var i = 0; i &lt; given.length; i++) {
  			name[&apos;given&apos;][i] = given[i];
  		}
  	} else {
  		name[&apos;given&apos;] = given;
  	}
  	if (prefix) { // CONF-BC0035
  		name[&apos;prefix&apos;] = prefix;
  	}
  	if (suffix) { // CONF-BC0036
  		name[&apos;suffix&apos;] = suffix;
  	}
  	return name;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>39f73e3c-ac8d-46ee-904c-32d6a73d93c0</id>
                <name>Build CDA Telecom</name>
                <revision>2</revision>
                <lastModified>
                  <time>1571955126036</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Build a XML telecom tag

	@param {String} use - &apos;H&apos; = home, &apos;W&apos; = work, &apos;M&apos; = mobile
	@param {String} type - &apos;tel&apos; or &apos;email&apos;
	@param {String} value - number of telefone or email address
	@return {Object} return the XML telecom tag
*/
function buildCDATelecom(use, type, value) {
	var telecom = new XML(&quot;&lt;telecom/&gt;&quot;);
	if (use &amp;&amp; type &amp;&amp; value) {
  		telecom[&apos;@use&apos;] = use;
  		telecom[&apos;@value&apos;] = type + &quot;:&quot; + value;
	}
  	return telecom;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>978d7943-1810-4652-a684-8f7b6bc3bc11</id>
                <name>Build CDA TemplateId</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650189497</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Build a XML templateId tag

	@param {String} code - 
	@return {Object} return the XML template tag
*/
function buildCDATemplateId(code) {
	var templateId = new XML(&apos;&lt;templateId/&gt;&apos;);

	// Get the attributes from the GlobalMap (loaded from database)
  	var loinc_code = globalMap.get(code);
  	
  	templateId[&apos;@root&apos;] = loinc_code[&apos;template_id&apos;];
  	templateId[&apos;@assigningAuthorityName&apos;] = loinc_code[&apos;template_name&apos;];
		  	
  	return templateId;&#xd;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>0b2ecd99-756c-4a93-9bba-230bf83b0c62</id>
                <name>Format CDA Date</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650190912</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Format the date for the CDA format &apos;yyyyMMdd&apos;

	@param {Date/String} date -
	@return {String} return the formated date
*/
function formatCDADate(date) {
	return DateUtil.convertDate(&quot;yyyy-MM-dd&quot;, &quot;yyyyMMdd&quot;, date);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>07a8a226-a4d4-4248-b816-00011d888d0f</id>
                <name>Format CDA Date/Time</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650190779</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Format the date/time for the CDA format &apos;yyyyMMddHHmmZZZ&apos;

	@param {Date/String} dateTime - 
	@return {String} return the formated dateTime
*/
function formatCDADateTime(dateTime) {
	return DateUtil.formatDate(&apos;yyyyMMddHHmmZZZ&apos;, new Date(dateTime));
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>f4743440-d5d2-44f2-acd9-35746c48d9b3</id>
                <name>Parse CDA Address</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650191291</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Parse the CDA Address to JSON Object

	@param {String} cdaAddress - 
	@return {String} return the parsed Address object
*/
function parseCDAAddress(cdaAddress) {
	var addr = {};
	addr[&apos;use&apos;] = cdaAddress[&apos;@use&apos;].toString();
	// Try to get the street address from the body of the tag &lt;addr&gt; (Document format)
	var strtAddr = cdaAddress.toString().match(/&lt;addr.*&gt;(.+?)(?=&lt;delimiter\/&gt;)/); // return array of matchs
	if (strtAddr) {
		addr[&apos;streetAddress&apos;] = strtAddr[1]; //.replace(/(&lt;\/?[^&gt;]+&gt;)/gi, &apos;&apos;); // strip xml tags?
	}
	// Try to append the list of &apos;delimiters&apos; (List clinics/providers format)
	if (getArrayOrXmlLength(cdaAddress[&apos;delimiter&apos;]) &gt; 0) {
		for (var i = 0; i &lt; getArrayOrXmlLength(cdaAddress[&apos;delimiter&apos;]); i++) {
			addr[&apos;streetAddress&apos;] = (addr[&apos;streetAddress&apos;] ? addr[&apos;streetAddress&apos;] + &apos; &apos; : &apos;&apos;) + cdaAddress[&apos;delimiter&apos;][i].toString();
		}
		addr[&apos;streetAddress&apos;] = addr[&apos;streetAddress&apos;].trim(); // trim any whitespace from both side of the address
	}
	if (getArrayOrXmlLength(cdaAddress[&apos;city&apos;]) &gt; 0) {
		addr[&apos;city&apos;] = cdaAddress[&apos;city&apos;].toString();
	}
	if (getArrayOrXmlLength(cdaAddress[&apos;province&apos;]) &gt; 0) {
		addr[&apos;province&apos;] = cdaAddress[&apos;state&apos;].toString();
	}
	if (getArrayOrXmlLength(cdaAddress[&apos;postalCode&apos;]) &gt; 0) {
		addr[&apos;postalCode&apos;] = cdaAddress[&apos;postalCode&apos;].toString();
	}
	if (getArrayOrXmlLength(cdaAddress[&apos;country&apos;]) &gt; 0) {
		addr[&apos;country&apos;] = cdaAddress[&apos;country&apos;].toString();
	}
	return addr;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>41f1daa2-e22b-439a-b0b5-16bc108c007e</id>
                <name>Parse CDA Date/Time</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650191523</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Parse the CDA Date/Time to Date object

	@param {String} cdaDateTime - 
	@return {String} return the Date object
*/
function parseCDADateTime(cdaDateTime) {
	if (!cdaDateTime || cdaDateTime.length == 0) {
		return null;
	}
	if (cdaDateTime.length &lt;= 8) {
		return DateUtil.convertDate(&quot;yyyyMMdd&quot;, &quot;yyyy-MM-dd&quot;, cdaDateTime);
	}
	return DateUtil.convertDate(&quot;yyyyMMddHHmmZZZ&quot;, &quot;yyyy-MM-dd\&apos;T\&apos;HH:mm:ssZ&quot;, cdaDateTime);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>1dc8b8fe-b046-4292-a7c2-218c37bd0d2d</id>
                <name>Parse CDA Date/TIme to DB format</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650191405</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Parse the CDA Date/Time to Date in DB format

	@param {String} cdaDateTime - 
	@return {String} return the Date in DB format
*/
function parseCDADateTimeToDB(cdaDateTime) {
	if (!cdaDateTime || cdaDateTime.length == 0) {
		return null;
	}
	if (cdaDateTime.length &lt;= 8) {
		return DateUtil.convertDate(&quot;yyyyMMdd&quot;, &quot;yyyy-MM-dd&quot;, cdaDateTime);
	}
	return DateUtil.convertDate(&quot;yyyyMMddHHmmZZZ&quot;, &quot;yyyy-MM-dd hh:mm:ss&quot;, cdaDateTime);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>a2f73260-eb70-4dcc-8b8a-9350c3bec9fd</id>
                <name>Parse CDA ID</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650191647</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Parse the CDA Id to JSON object

	@param {String} cdaID - 
	@return {String} return the parsed ID object
*/
function parseCDAId(cdaID) {
	var id = {};
	if (cdaID[&apos;@extension&apos;]) {
		id[&apos;code&apos;] = cdaID[&apos;@extension&apos;].toString();
	}
	if (cdaID[&apos;@root&apos;]) {
		id[&apos;type&apos;] = cdaID[&apos;@root&apos;].toString();
	}
	return id;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>a0354d90-ffa8-47c5-9776-e41927d2f0d0</id>
                <name>Parse CDA Name</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650191787</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Parse the CDA Name to JSON object

	@param {String} cdaName - 
	@return {String} return the parsed Name object
*/
function parseCDAName(cdaName) {
	var name = {};
	name[&apos;use&apos;] = cdaName[&apos;@use&apos;].toString();
	name[&apos;family&apos;] = cdaName[&apos;family&apos;].toString();
	name[&apos;given&apos;] = [];
	for (var i = 0; i &lt; getArrayOrXmlLength(cdaName[&apos;given&apos;]); i++) {
		name[&apos;given&apos;][i] = cdaName[&apos;given&apos;][i].toString();
	}
	if (getArrayOrXmlLength(cdaName[&apos;prefix&apos;]) &gt; 0) {
		name[&apos;prefix&apos;] = cdaName[&apos;prefix&apos;].toString();
	}
	if (getArrayOrXmlLength(cdaName[&apos;suffix&apos;]) &gt; 0) {
		name[&apos;suffix&apos;] = cdaName[&apos;suffix&apos;].toString();
	}
	return name;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>407e6d63-57cf-42f8-b555-5d6c575f4f55</id>
                <name>Parse CDA Telecom</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650191892</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Parse the CDA Telecom to JSON object

	@param {String} telecom - 
	@return {String} return the parsed Telecom object
*/
function parseCDATelecom(cdaTelecom) {
	var telecom = {};
	telecom[&apos;use&apos;] = cdaTelecom[&apos;@use&apos;].toString();
	telecom[&apos;type&apos;] = &quot;tel&quot;; 
	if (getArrayOrXmlLength(cdaTelecom[&apos;@value&apos;]) &gt; 0) {
		var telParts = cdaTelecom[&apos;@value&apos;].split(&apos;:&apos;);
		telecom[&apos;type&apos;] = telParts[0];	
		telecom[&apos;value&apos;] = telParts[1];
	}
	return telecom;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.8.0">
            <id>5d2a129c-da07-49cc-950c-d941a93cd271</id>
            <name>OBIB</name>
            <revision>5</revision>
            <lastModified>
              <time>1572641956778</time>
              <timezone>Canada/Pacific</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>e995ffe5-fe5f-4260-a385-98f81c8418fe</string>
              <string>b2f0c503-a881-4126-995e-844c3e7692fd</string>
              <string>f3a65b72-9187-42ef-88cd-1d7626887e2e</string>
              <string>2375f320-7fd5-48cd-b3bb-53c22dab182b</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.8.0">
                <id>0d5c946b-11fe-4dde-8c69-7d9296ea32a0</id>
                <name>Build Document Storage Message</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650189617</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Build a Document Storage Message.

	@param {String} locationId - Location / Clinic Id
	@param {String} documentId - Document Id
	@param {String} messageType - DOCUMENT, RESPONSE or ATTACHMENT
	@param {String} content - Content of the message / document
	@param {String} connectorVersion - OBBI Connector version
	@return {String} return the Document Storage Message JSON object
*/
function buildDocumentStorageMessage(locationId, documentId, messageType, messageContent, connectorVersion) {
	var storageMsg = {};
	storageMsg[&apos;locationId&apos;] = locationId;
	storageMsg[&apos;documentId&apos;] = documentId;
	storageMsg[&apos;messageType&apos;] = messageType;
	storageMsg[&apos;messageContent&apos;] = messageContent;
	storageMsg[&apos;obibVersion&apos;] = globalMap.get(&quot;obib.version&quot;);
	storageMsg[&apos;connectorVersion&apos;] = connectorVersion;
	return storageMsg;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>738d81a1-d04c-482e-a011-30c61a09b3d3</id>
                <name>Create Array of DocumentAttachment</name>
                <revision>2</revision>
                <lastModified>
                  <time>1570827114602</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Create an Array of DocumentAttachment objects from a JSON object

	@param {Object[]} jsonAttachments - 
	@return {DocumentAttachment[]} return the Array of DocumentAttachment
*/
function createDocumentAttachmentArray(jsonAttachments) {
	var attachments = [];
	if (jsonAttachments != null) {
		for (var i = 0; i &lt; jsonAttachments.length; i++) {
			var attachment = jsonAttachments[i];
			attachments.push(new Packages.ca.uvic.leadlab.cdxconnector.messages.submit.DocumentAttachment(
				attachment[&apos;mediaType&apos;],
				attachment[&apos;content&apos;],
				attachment[&apos;hash&apos;],
				attachment[&apos;hashAlgorithm&apos;],
				attachment[&apos;reference&apos;]));
		}
	}
	return attachments;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>bcd2a30d-111f-4fd3-9724-0e9a2e7dfe50</id>
                <name>Create DatabaseConnection</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650189859</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get the DatabaseConnection object

	@return {DatabaseConnection} return the DatabaseConnection object
*/
function getDBConnection() {
	var dataSource = globalMap.get(&quot;hikari_OBIB_DB&quot;);
	if (dataSource == null) {
		dataSource = new Packages.com.zaxxer.hikari.HikariDataSource();
		dataSource.setDriverClassName(globalMap.get(&quot;obib.db.driver&quot;));
		dataSource.setJdbcUrl(globalMap.get(&quot;obib.db.url&quot;));
		dataSource.setUsername(globalMap.get(&quot;obib.db.username&quot;));
		dataSource.setPassword(globalMap.get(&quot;obib.db.password&quot;));
		dataSource.setConnectionTimeout(0);
		dataSource.setAutoCommit(false);
		dataSource.setMaximumPoolSize(10);
		dataSource.setMinimumIdle(0);
		//dataSource.setReadOnly(readOnly);
		//dataSource.setConnectionTestQuery(&quot;SELECT 1&quot;);
		globalMap.put(&quot;hikari_OBIB_DB&quot;, dataSource);
	}
	if (dataSource != null) {
		return dataSource.getConnection();
	} else {
		throw &quot;Cannot create a new data source (connection pool).&quot;;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>60bfd3ac-552a-4d59-ac1d-48fbe4f430b2</id>
                <name>Create Error Message</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650189966</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Create JSON error message

	@param {String} error - Error message
	@param {Object} obibErrors - Associative Array of errors
	@return {String} return the JSON response
*/
function createErrorMessage(error, obibErrors) {
	// Filter cdxconnector messages
	if (error.includes(&apos;ca.uvic.leadlab.cdxconnector&apos;)) {
		error = error.split(/ca.uvic.leadlab.cdxconnector.*:/).pop();
	}
	
	return JSON.stringify({&apos;obibVersion&apos;: globalMap.get(&quot;obib.version&quot;), &apos;status&apos;: &apos;ERROR&apos;, &apos;message&apos;: error, &apos;obibErrors&apos;: obibErrors})
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>f1de696c-f547-49ae-8225-f7e40ed2c87c</id>
                <name>Create Segment Before</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650190249</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Create a new segment and insert it before the target segment.
	
	@param {String} name - The name of the segment to create.
	@param {String} segment - The existing segment that the new segment will be inserted before.
	@return {String} return The existing segment that the new segment will be inserted after.
*/
function createSegmentBefore(name, segment) {
	var msgObj = segment;
   	while (msgObj.parent() != undefined) { 
		msgObj = msgObj.parent(); 
	}
     msgObj.insertChildBefore(segment[0], new XML(&apos;&lt;&apos; + name + &apos;&gt;&lt;/&apos; + name + &apos;&gt;&apos;));
   	return msgObj.child(segment[0].childIndex() - 1);
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>b332b27e-5312-4517-a4ad-bad60b2642bf</id>
                <name>Evaluate XPath expression</name>
                <revision>29</revision>
                <lastModified>
                  <time>1573764879777</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Evaluates a XPath expression

	@param {Object} xml - xml being evaluated
	@param {String} expression - expression to be evaluated
	@return {String} &apos;true&apos; if the expression evaluates, otherwise &apos;false&apos;
*/
function evaluateXPath(xml, expression) {
	// clean namespace
	var xmlStr = xml.toString().replace(&apos;xmlns=&quot;urn:hl7-org:v3&quot;&apos;, &apos;&apos;);
	
	// evaluate the xpath using Java xml API
	var input = new Packages.org.xml.sax.InputSource(new Packages.java.io.StringReader(xmlStr));
	var xpath = Packages.javax.xml.xpath.XPathFactory.newInstance().newXPath();
	return xpath.evaluate(expression, input, Packages.javax.xml.xpath.XPathConstants.BOOLEAN).toString();
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>df99f17c-1947-469e-be81-78e90d657f4d</id>
                <name>Execute Database Query</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650190510</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a query on the database and returns a CachedRowSet.

	@param {String} query - The query to be executed.
	@return {String} return The result of the query, as a CachedRowSet.
*/
function executeCachedQuery(query) {
	var connection = getDBConnection();
	if (connection != null) {
		var statement = null;
		try {
			statement = connection.createStatement();
            	var result = statement.executeQuery(query);
            	var crs = new MirthCachedRowSet();
            	crs.populate(result);
            	if (result != null) {
            		Packages.org.apache.commons.dbutils.DbUtils.closeQuietly(result);
            	}
            	return crs;
		} catch(err) {
			throw err;
        	} finally {
        		if (statement != null) {
				Packages.org.apache.commons.dbutils.DbUtils.closeQuietly(statement);
        		}
        		if (connection != null) {
        			Packages.org.apache.commons.dbutils.DbUtils.closeQuietly(connection);
        		}
		}
	} else {
		throw &quot;Error: Cannot connect to the database&quot;;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>8512e74b-a53b-4a15-9718-fed25c0481ef</id>
                <name>Execute Database Update</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650190646</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes an INSERT/UPDATE on the database and returns the row count.

	@param {String} query - The statement to be executed.
	@return {Integer} return A count of the number of updated rows.
*/
function executeUpdate(query) {
	var connection = getDBConnection();
	if (connection != null) {
		var statement = null;
		try {
			connection.setAutoCommit(true);
			statement = connection.createStatement();
			if (statement.execute(query)) {
				return -1;
			} else {
				return statement.getUpdateCount();
			}
		} catch (err) {
			throw err;
		} finally {
			if (statement != null) {
				Packages.org.apache.commons.dbutils.DbUtils.closeQuietly(statement);
        		}
        		if (connection != null) {
        			Packages.org.apache.commons.dbutils.DbUtils.closeQuietly(connection);
        		}
		}
	} else {
		throw &quot;Error: Cannot connect to the database&quot;;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>be89bc64-f4bf-4ab3-954b-04088964eda6</id>
                <name>Handle Query Result Status</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650191035</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Handle the result status from a query message.

	@param {Object} queryResult - query result (&apos;tmp&apos; variable)
	@param {Object} queryMessage - query message (&apos;msg&apos; variable)
	@param {String} collection - collection returned by the result
	@return {Object} return The queryResult object with status and message.
*/
function handleQueryResultStatus(queryResult, queryMessage, collection) {
	if (queryResult[&apos;ackDetail&apos;][&apos;status&apos;] === &apos;OK&apos;) {
		queryResult[&apos;status&apos;] = &quot;SUCCESS&quot;;
	} else if (queryResult[&apos;ackDetail&apos;][&apos;status&apos;] === &apos;NF&apos;) {
		queryResult[&apos;status&apos;] = &quot;SUCCESS&quot;;

		queryResult[collection] = []; // ensure the result collection is empty.
	} else {
		queryResult[&apos;status&apos;] = &quot;ERROR&quot;;
		
		if (queryResult[&apos;ackDetail&apos;][&apos;status&apos;] === &apos;QE&apos;) {
			queryResult[&apos;message&apos;] = queryMessage[&apos;acknowledgement&apos;][&apos;acknowledgementDetail&apos;][&apos;text&apos;].toString()				
		} else {
			queryResult[&apos;message&apos;] = &apos;Unespected error. Ack response code: &apos; + queryResult[&apos;ackDetail&apos;][&apos;status&apos;];
		}
		
		logger.error(&apos;MessagId &apos; + queryResult[&apos;ackDetail&apos;][&apos;messageId&apos;] + &apos; returned the error: &apos; + queryResult[&apos;message&apos;] + &quot;&apos;&quot;);
	}
	return tmp;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>e83b8bbf-433a-4c3d-88a2-16f4132b38af</id>
                <name>Handle Return Message</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650191160</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Handle the return message creation.

	@param {Object} responseStatus - 
	@param {Object} responseStatusMessage - 
	@param {Object} responseMessage - 
	@param {Function} createMessage - Callback function responsible for creating and return the result message.
	@return {String} return the stringify json message
*/
function handleResponseMessage(responseStatus, responseStatusMessage, responseMessage, createMessage) {
	if (responseStatus === SENT) { // process only SENT messages
		var responseMessage = createMessage(); // get the result message
		responseMessage[&apos;obibVersion&apos;] = globalMap.get(&quot;obib.version&quot;); // add versioning
		return JSON.stringify(responseMessage); // Convert the json to string and return it
	} else if (responseStatus === ERROR) {
		throw &quot;Error Message: &apos;&quot; + responseStatusMessage.toString() 
			+ &quot;&apos;\n Original Message: &apos;&quot; + msg.toString() + &quot;&apos;&quot;;
	} else {
		throw &quot;Not able to handle the response code: &apos;&quot; + responseStatus 
		+ &quot;&apos; \n Error Message: &apos;&quot; + responseStatusMessage.toString() 
		+ &quot;&apos;\n Original Message: &apos;&quot; + msg.toString() + &quot;&apos;&quot;;
	}
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>dfd86988-26e1-4d97-b81d-fee49e303272</id>
                <name>Store OBIB Error</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650192000</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Store the error as an &apos;associative array&apos; in the channel map.
	To retrieve the array of errors use &apos;channelMap.get(&apos;obibErrors&apos;)&apos;

	@param {String} errorCode - the key of the associative array
	@param {String} errorMessage - the value of the associative array
*/
function storeOBIBError(errorCode, errorMessage) {
	var obibErrors = channelMap.get(&apos;obibErrors&apos;);
	if (obibErrors == null) {
		obibErrors = new Object();
	}
	obibErrors[errorCode] = errorMessage;
	channelMap.put(&apos;obibErrors&apos;, obibErrors);
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
        </codeTemplateLibraries>
      </exportData>
    </channel>
    <channel version="3.8.0">
      <id>b2f0c503-a881-4126-995e-844c3e7692fd</id>
      <nextMetaDataId>19</nextMetaDataId>
      <name>OBIB Services</name>
      <description>- Receive JSON messages via REST API [&quot;HTTP Listener&quot; source connector]
- Route the messages to the appropriate destination connector according to the REST path [&quot;Destination Set Filter&quot; source transformer]
- Transform the JSON messages to BCCDA documents [&quot;Javascript&quot; destination transformers]
- Send the HL7 messages to CDX WebServices using the CDXConnector Java Library [&quot;Javascript Writer&quot; destination connector]</description>
      <revision>130</revision>
      <sourceConnector version="3.8.0">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.http.HttpReceiverProperties" version="3.8.0">
          <pluginProperties>
            <com.mirth.connect.plugins.httpauth.javascript.JavaScriptHttpAuthProperties version="3.8.0">
  <authType>JAVASCRIPT</authType>
              <script>var result = null;
var clinicId = sourceMap.get(&apos;headers&apos;).getHeader(&apos;clinicId&apos;);

try {
	// Get the credentials by clinic_id
	result = executeCachedQuery(&quot;SELECT clinic_password FROM clinic_credential WHERE clinic_id = &apos;&quot; + clinicId + &quot;&apos;&quot;);
	while (result &amp;&amp; result.next()) {
		// Validate the password
		if (result.getString(&apos;clinic_password&apos;) == sourceMap.get(&apos;headers&apos;).getHeader(&apos;password&apos;)) {			
			logger.info(&quot;Clinic &apos;&quot; + clinicId + &quot;&apos; authenticated.&quot;);
			return AuthenticationResult.Success();
		}
	}
} catch (e) {
	logger.error(&quot;Error on &apos;Authentication Script&apos;: &quot; + e);
} finally {
	if (result != null) {
		Packages.org.apache.commons.dbutils.DbUtils.closeQuietly(result);
	}
}

logger.warn(&quot;Failed to authenticate clinic &apos;&quot; + clinicId + &quot;&apos;&quot;);
return AuthenticationResult.Failure();</script>
            </com.mirth.connect.plugins.httpauth.javascript.JavaScriptHttpAuthProperties>
          </pluginProperties>
          <listenerConnectorProperties version="3.8.0">
            <host>127.0.0.1</host>
            <port>8081</port>
          </listenerConnectorProperties>
          <sourceConnectorProperties version="3.8.0">
            <responseVariable>responseMessage</responseVariable>
            <respondAfterProcessing>true</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>1</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
              <entry>
                <string>3ee0c1db-83b0-49f6-9323-8884b5bd43da</string>
                <string>CDA Parser</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
          <xmlBody>false</xmlBody>
          <parseMultipart>true</parseMultipart>
          <includeMetadata>true</includeMetadata>
          <binaryMimeTypes>application/.*(?&lt;!json|xml)$|image/.*|video/.*|audio/.*</binaryMimeTypes>
          <binaryMimeTypesRegex>true</binaryMimeTypesRegex>
          <responseContentType>application/json</responseContentType>
          <responseDataTypeBinary>false</responseDataTypeBinary>
          <responseStatusCode>${responseStatus}</responseStatusCode>
          <responseHeaders class="linked-hash-map"/>
          <charset>UTF-8</charset>
          <contextPath></contextPath>
          <timeout>30000</timeout>
          <staticResources/>
        </properties>
        <transformer version="3.8.0">
          <elements>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.8.0">
              <name>Get Clinic Credentials</name>
              <sequenceNumber>0</sequenceNumber>
              <enabled>true</enabled>
              <script>logger.debug(&quot;Get Clinic Credentials&quot;);

try {
	// Get the credentials by clinic_id
	var clinicId = sourceMap.get(&apos;headers&apos;).getHeader(&apos;clinicId&apos;);
	
	var result = executeCachedQuery(&quot;SELECT * FROM clinic_credential WHERE clinic_id = &apos;&quot; + clinicId + &quot;&apos;&quot;);
	while (result &amp;&amp; result.next()) {
		// store the clinic credentials, necessary to call the cdx services
		channelMap.put(&apos;locationId&apos;, result.getString(&apos;clinic_id&apos;));
		channelMap.put(&apos;locationName&apos;, result.getString(&apos;clinic_name&apos;));
		channelMap.put(&apos;username&apos;, result.getString(&apos;clinic_username&apos;));
		channelMap.put(&apos;password&apos;, result.getString(&apos;clinic_password&apos;));
		channelMap.put(&apos;certPath&apos;, $(&apos;obib.certificates.path&apos;) + result.getString(&apos;certificate_file&apos;));
		channelMap.put(&apos;certPass&apos;, result.getString(&apos;certificate_password&apos;));
	}
	if (result != null) {
		Packages.org.apache.commons.dbutils.DbUtils.closeQuietly(result);
	}
} catch (e) {
	logger.error(&quot;Error on &apos;Get Clinic Credentials&apos;: &quot; + e);
}

/* Validate the clinic credentials */
var error = &quot;&quot;;

// Is the clinic properly registered?
if (!channelMap.get(&apos;locationId&apos;) || !channelMap.get(&apos;locationName&apos;) 
|| !channelMap.get(&apos;username&apos;) || !channelMap.get(&apos;password&apos;)
|| !channelMap.get(&apos;certPath&apos;) || !channelMap.get(&apos;certPass&apos;)) {
	error += &quot;The clinic is not correctly registered within OBIB. &quot;;
}

// Does the certificate file exist?
if (!new Packages.java.io.File(&quot;&quot; + channelMap.get(&apos;certPath&apos;)).exists()) {
	error += &quot;The clinic certificate cannot be found. &quot;;
}

if (error.length &gt; 0) {
	logger.error(error);  // log the error
	
	responseMap.put(&apos;responseMessage&apos;, createErrorMessage(error, null)); // create the response
	responseMap.put(&apos;responseStatus&apos;, &apos;200&apos;);

	throw error; // stop the processing
}</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.8.0">
              <name>Check Connector Version</name>
              <sequenceNumber>1</sequenceNumber>
              <enabled>true</enabled>
              <script>logger.debug(&quot;Check Connector Version&quot;);

// store the the connector version
var connectorVersion = sourceMap.get(&apos;headers&apos;).getHeader(&apos;connectorVersion&apos;);
channelMap.put(&apos;connectorVersion&apos;, connectorVersion);

logger.debug(&quot;OBIB Connector Version: &quot; + connectorVersion);</script>
            </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            <com.mirth.connect.plugins.destinationsetfilter.DestinationSetFilterStep version="3.8.0">
              <name>Filter destination(s) if &quot;sourceMap.get(&apos;contextPath&apos;)&quot; equals &apos;/SubmitCDA&apos;</name>
              <sequenceNumber>2</sequenceNumber>
              <enabled>true</enabled>
              <behavior>REMOVE_ALL_EXCEPT</behavior>
              <metaDataIds>
                <int>1</int>
              </metaDataIds>
              <field>sourceMap.get(&apos;contextPath&apos;)</field>
              <condition>EQUALS</condition>
              <values>
                <string>&apos;/SubmitCDA&apos;</string>
              </values>
            </com.mirth.connect.plugins.destinationsetfilter.DestinationSetFilterStep>
            <com.mirth.connect.plugins.destinationsetfilter.DestinationSetFilterStep version="3.8.0">
              <name>Filter destination(s) if &quot;sourceMap.get(&apos;contextPath&apos;)&quot; equals &apos;/DistributionStatus&apos;</name>
              <sequenceNumber>3</sequenceNumber>
              <enabled>true</enabled>
              <behavior>REMOVE_ALL_EXCEPT</behavior>
              <metaDataIds>
                <int>18</int>
              </metaDataIds>
              <field>sourceMap.get(&apos;contextPath&apos;)</field>
              <condition>EQUALS</condition>
              <values>
                <string>&apos;/DistributionStatus&apos;</string>
              </values>
            </com.mirth.connect.plugins.destinationsetfilter.DestinationSetFilterStep>
            <com.mirth.connect.plugins.destinationsetfilter.DestinationSetFilterStep version="3.8.0">
              <name>Filter destination(s) if &quot;sourceMap.get(&apos;contextPath&apos;)&quot; equals &apos;/ListDocuments&apos;</name>
              <sequenceNumber>4</sequenceNumber>
              <enabled>true</enabled>
              <behavior>REMOVE_ALL_EXCEPT</behavior>
              <metaDataIds>
                <int>2</int>
              </metaDataIds>
              <field>sourceMap.get(&apos;contextPath&apos;)</field>
              <condition>EQUALS</condition>
              <values>
                <string>&apos;/ListDocuments&apos;</string>
              </values>
            </com.mirth.connect.plugins.destinationsetfilter.DestinationSetFilterStep>
            <com.mirth.connect.plugins.destinationsetfilter.DestinationSetFilterStep version="3.8.0">
              <name>Filter destination(s) if &quot;sourceMap.get(&apos;contextPath&apos;)&quot; equals &apos;/SearchDocuments&apos;</name>
              <sequenceNumber>5</sequenceNumber>
              <enabled>true</enabled>
              <behavior>REMOVE_ALL_EXCEPT</behavior>
              <metaDataIds>
                <int>16</int>
              </metaDataIds>
              <field>sourceMap.get(&apos;contextPath&apos;)</field>
              <condition>EQUALS</condition>
              <values>
                <string>&apos;/SearchDocuments&apos;</string>
              </values>
            </com.mirth.connect.plugins.destinationsetfilter.DestinationSetFilterStep>
            <com.mirth.connect.plugins.destinationsetfilter.DestinationSetFilterStep version="3.8.0">
              <name>Filter destination(s) if &quot;sourceMap.get(&apos;contextPath&apos;)&quot; equals &apos;/GetDocument&apos;</name>
              <sequenceNumber>6</sequenceNumber>
              <enabled>true</enabled>
              <behavior>REMOVE_ALL_EXCEPT</behavior>
              <metaDataIds>
                <int>11</int>
              </metaDataIds>
              <field>sourceMap.get(&apos;contextPath&apos;)</field>
              <condition>EQUALS</condition>
              <values>
                <string>&apos;/GetDocument&apos;</string>
              </values>
            </com.mirth.connect.plugins.destinationsetfilter.DestinationSetFilterStep>
            <com.mirth.connect.plugins.destinationsetfilter.DestinationSetFilterStep version="3.8.0">
              <name>Filter destination(s) if &quot;sourceMap.get(&apos;contextPath&apos;)&quot; equals &apos;/ListClinics&apos;</name>
              <sequenceNumber>7</sequenceNumber>
              <enabled>true</enabled>
              <behavior>REMOVE_ALL_EXCEPT</behavior>
              <metaDataIds>
                <int>14</int>
              </metaDataIds>
              <field>sourceMap.get(&apos;contextPath&apos;)</field>
              <condition>EQUALS</condition>
              <values>
                <string>&apos;/ListClinics&apos;</string>
              </values>
            </com.mirth.connect.plugins.destinationsetfilter.DestinationSetFilterStep>
            <com.mirth.connect.plugins.destinationsetfilter.DestinationSetFilterStep version="3.8.0">
              <name>Filter destination(s) if &quot;sourceMap.get(&apos;contextPath&apos;)&quot; equals &apos;/ListProviders&apos;</name>
              <sequenceNumber>8</sequenceNumber>
              <enabled>true</enabled>
              <behavior>REMOVE_ALL_EXCEPT</behavior>
              <metaDataIds>
                <int>15</int>
              </metaDataIds>
              <field>sourceMap.get(&apos;contextPath&apos;)</field>
              <condition>EQUALS</condition>
              <values>
                <string>&apos;/ListProviders&apos;</string>
              </values>
            </com.mirth.connect.plugins.destinationsetfilter.DestinationSetFilterStep>
            <com.mirth.connect.plugins.destinationsetfilter.DestinationSetFilterStep version="3.8.0">
              <name>Filter destination(s) if &quot;sourceMap.get(&apos;contextPath&apos;)&quot; equals &apos;/NotifyError&apos;</name>
              <sequenceNumber>9</sequenceNumber>
              <enabled>true</enabled>
              <behavior>REMOVE_ALL_EXCEPT</behavior>
              <metaDataIds>
                <int>17</int>
              </metaDataIds>
              <field>sourceMap.get(&apos;contextPath&apos;)</field>
              <condition>EQUALS</condition>
              <values>
                <string>&apos;/NotifyError&apos;</string>
              </values>
            </com.mirth.connect.plugins.destinationsetfilter.DestinationSetFilterStep>
          </elements>
          <inboundTemplate encoding="base64"></inboundTemplate>
          <outboundTemplate encoding="base64"></outboundTemplate>
          <inboundDataType>JSON</inboundDataType>
          <outboundDataType>JSON</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.8.0">
            <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.8.0">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </inboundProperties>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.8.0">
            <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.8.0">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="3.8.0">
          <elements/>
        </filter>
        <transportName>HTTP Listener</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="3.8.0">
          <metaDataId>1</metaDataId>
          <name>Service Submit Document</name>
          <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.8.0">
            <pluginProperties/>
            <destinationConnectorProperties version="3.8.0">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>true</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
                <entry>
                  <string>3ee0c1db-83b0-49f6-9323-8884b5bd43da</string>
                  <string>CDA Parser</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <script>logger.debug(&apos;Service Submit Document&apos;);

importPackage(Packages.ca.uvic.leadlab.cdxconnector);

if (responseMap.get(&apos;responseMessage&apos;)) { // If there is already an error on response
	logger.error(&quot;Returning error message: &quot; + responseMap.get(&apos;responseMessage&apos;));
	return; // Stop the processing
}

try {
	var client = new WSClientDocument($(&apos;cdx.base.url&apos;), $(&apos;username&apos;), $(&apos;password&apos;), $(&apos;certPath&apos;), $(&apos;certPass&apos;));

	// Get the message with the default namespace
	default xml namespace = &quot;urn:hl7-org:v3&quot;;
	var document = new XML(connectorMessage.getEncodedData());
	//logger.debug(&quot;DOCUMENT:\n&quot; + XmlUtil.prettyPrint(document));

	// Store the document, necessary in the response
	channelMap.put(&apos;document&apos;, document.toString());

	// Send the document to &quot;Document Storage&quot; channel
	var storeDoc = buildDocumentStorageMessage($(&apos;locationId&apos;), $(&apos;documentId&apos;), &apos;DOCUMENT&apos;, document.toString(), $(&apos;connectorVersion&apos;));
	router.routeMessage(&quot;Document Storage&quot;, JSON.stringify(storeDoc));
	
	// Get the attachments, if exist any
	var attachments = channelMap.get(&apos;attachments&apos;);
	/*if (attachments !== null &amp;&amp; attachments.length &gt; 0) {
		logger.debug(&apos;Service Submit Document - Handling Attachments&apos;);
		// TODO Save attachment - Transformer error ERROR MESSAGE: Error evaluating transformer
		for (var i = 0; i &lt; attachments.length; i++) {
			var storeAttach = buildDocumentStorageMessage($(&apos;locationId&apos;), $(&apos;documentId&apos;), &apos;ATTACHMENT&apos;, attachments[i], $(&apos;connectorVersion&apos;));
			router.routeMessage(&quot;Document Storage&quot;, JSON.stringify(storeAttach));
		}
	}*/

	// Call the WS method using CDX Connector
	var cdxResponse = client.submitDocument($(&apos;locationId&apos;), document, createDocumentAttachmentArray(attachments), $(&apos;receivers&apos;));

	// Send the response to &quot;Document Storage&quot; channel
	var storeResp = buildDocumentStorageMessage($(&apos;locationId&apos;), $(&apos;documentId&apos;), &apos;RESPONSE&apos;, cdxResponse.toString(), $(&apos;connectorVersion&apos;));
	router.routeMessage(&quot;Document Storage&quot;, JSON.stringify(storeResp));
	
	// return the raw response to be processed by the &apos;response transformers&apos;
	return ResponseFactory.getSentResponse(cdxResponse);
} catch (e) {
	logger.error(&quot;Error on &apos;Service Submit Document&apos;: &quot; + e);
	
	responseMap.put(&apos;responseMessage&apos;, createErrorMessage(&quot;Error on &apos;Service Submit Document&apos;: &quot; + e.message, null)); // create the error response
	responseMap.put(&apos;responseStatus&apos;, &apos;200&apos;); // return ok
}</script>
          </properties>
          <transformer version="3.8.0">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.8.0">
                <name>Get Receivers</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>logger.debug(&apos;Get Receivers&apos;);

try {
	// CONF-CDXOD023: RCMR_IN000002UV01 SHALL have one or more [1..*] receiver
	var receivers = [];
	for (var i = 0; i &lt; getArrayOrXmlLength(msg[&apos;receivers&apos;]); i++) {
    		receivers[i] = msg[&apos;receivers&apos;][i];
	}
	
	// store the receivers, necessary to call &apos;send document service&apos;
	channelMap.put(&apos;receivers&apos;, receivers);
} catch (e) {
    	var error = &apos;Error on &quot;Get Receivers&quot;: &apos; + e;
	logger.error(error); // log the error
    	storeOBIBError(&apos;obib.cda.build.error&apos;, error);
}

/* Validate the receivers */
var receivers = channelMap.get(&apos;receivers&apos;);
if (!receivers || receivers.length == 0) {
	storeOBIBError(&apos;obib.receiver.error&apos;, &apos;At least one receiver is required to submit document&apos;);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.8.0">
                <name>Header Attributes</name>
                <sequenceNumber>1</sequenceNumber>
                <enabled>true</enabled>
                <script>try {
	// 4.1. Header Attributes

	var msgLoinc = msg[&apos;loinc&apos;]; // inbound object
	
	// CONF-BC0001, CONF-BC0502, CONF-BC0002, CONF-BC0003, CONF-BC0004, CONF-BC0005 (fixed in the message template)
	//default xml namespace = &quot;urn:hl7-org:v3&quot;;

	// Check if the loinc is present
	if (!msgLoinc || !msgLoinc[&apos;loincCode&apos;] || !msgLoinc[&apos;displayName&apos;]) {
		storeOBIBError(&apos;obib.loinc.error&apos;, &apos;LOINC is required&apos;);
	}

	// ClinicalDocument/templateId
	if (msgLoinc) {
		tmp[&apos;templateId&apos;] = buildCDATemplateId(msgLoinc[&apos;loincCode&apos;]);
	}

	var isNew = true; // verify if the document is new or not
	if (msg[&apos;documentId&apos;]) {
		var parentDocumentId = buildCDAId(&quot;2.16.840.1.113883.3.277.100.3&quot;, msg[&apos;documentId&apos;]);
		channelMap.put(&apos;parentDocumentId&apos;, parentDocumentId); // store the parentDocumentId, used in RelatedDocument
		isNew = false;
	}
	
	// CONF-BC0014, CONF-BC0015
	var documentId = UUIDGenerator.getUUID();
	tmp[&apos;id&apos;] = buildCDAId(&quot;2.16.840.1.113883.3.277.100.3&quot;, documentId);
	channelMap.put(&apos;documentId&apos;, documentId); // store the documentId, necessary in the response
	
	// CONF-BC0016, CONF-BC0552, CONF-BC0553, CONF-BC0017, CONF-BC0018, CONF-BC0019, CONF-BC0020, CONF-BC0554, CONF-BC0555
	var versionNumber = createSegmentAfter(&apos;versionNumber&apos;, tmp[&apos;languageCode&apos;]);
	var setId = createSegmentAfter(&apos;setId&apos;, tmp[&apos;languageCode&apos;]);
	if (isNew) { // for new documents, set versionNumber to 1 and copy documentId into setId
		versionNumber[&apos;@value&apos;] = 1;
		
		tmp[&apos;setId&apos;][&apos;@root&apos;] = tmp[&apos;id&apos;][&apos;@root&apos;];
		tmp[&apos;setId&apos;][&apos;@extension&apos;] = tmp[&apos;id&apos;][&apos;@extension&apos;];
		tmp[&apos;setId&apos;][&apos;@assigningAuthorityName&apos;] = tmp[&apos;id&apos;][&apos;@assigningAuthorityName&apos;];
	} else { // for updated documents, increment versionNumber and copy parentDocumentId into setId
		versionNumber[&apos;@value&apos;] = msg[&apos;versionNumber&apos;] + 1;
		
		var parentDocumentId = $(&apos;parentDocumentId&apos;);
		tmp[&apos;setId&apos;][&apos;@root&apos;] = parentDocumentId[&apos;@root&apos;];
		tmp[&apos;setId&apos;][&apos;@extension&apos;] = parentDocumentId[&apos;@extension&apos;];
		tmp[&apos;setId&apos;][&apos;@assigningAuthorityName&apos;] = parentDocumentId[&apos;@assigningAuthorityName&apos;];
	}
	
	if (msgLoinc) {
		// ClinicalDocument/code CONF-BC0021, CONF-BC0022
		tmp[&apos;code&apos;][&apos;@code&apos;] = msgLoinc[&apos;loincCode&apos;];
		tmp[&apos;code&apos;][&apos;@displayName&apos;] = msgLoinc[&apos;displayName&apos;];
	
		// ClinicalDocument/title CONF-BC0023, CONF-BC0024
		tmp[&apos;title&apos;] = msgLoinc[&apos;displayName&apos;];
	}

	// ClinicalDocument/effectiveTime CONF-BC0025, CONF-BC0026 
	var effectiveTime = msg[&apos;effectiveTime&apos;];
	if (!effectiveTime) {
		effectiveTime = new Date();
	}
	tmp[&apos;effectiveTime&apos;][&apos;@value&apos;] = formatCDADateTime(effectiveTime);
	
	// ClinicalDocument/confidentialityCode CONF-BC0027, CONF-BC0028, CONF-BC0503 (fixed in the message template)
	
	// ClinicalDocument/languageCode CONF-BC0029, CONF-BC0030 (fixed in the message template)
} catch (e) {
	var error = &apos;Error on &quot;Header Attributes&quot;: &apos; + e;
    	logger.error(error); // log the error
    	storeOBIBError(&apos;obib.cda.build.error&apos;, error);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.8.0">
                <name>Record Target (Patient Identifiers)</name>
                <sequenceNumber>2</sequenceNumber>
                <enabled>true</enabled>
                <script>try {
	// 4.2.2. Record Target (Patient Identifiers) - Mandatory - 1..1

	var msgPatient = msg[&apos;patient&apos;]; // inbound object
	
	// CONF-BC0047, CONF-BC0507, CONF-BC0508 (fixed in the message template)

	var patientRole = tmp[&apos;recordTarget&apos;][&apos;patientRole&apos;];

	// CONF-BC0048: patientRole SHALL contain at least one or more [1..*] id
	if (getArrayOrXmlLength(msgPatient[&apos;ids&apos;]) == 0) {
		storeOBIBError(&apos;obib.patient.id.error&apos;, &apos;Patient shall contain at least one id&apos;);
	}
	// CONF-BC0049, CONF-BC0050
	for (var i = 0; i &lt; getArrayOrXmlLength(msgPatient[&apos;ids&apos;]); i++) {
		// Insert IDs as first children of &apos;patientRole&apos;
		patientRole.prependChild(buildCDAId(msgPatient[&apos;ids&apos;][i][&apos;type&apos;], 
								      msgPatient[&apos;ids&apos;][i][&apos;code&apos;]));
	}
	
	// CONF-BC0051: patientRole MAY contain zero or more [0..*] addr (address)
	for (var i = 0; i &lt; getArrayOrXmlLength(msgPatient[&apos;addresses&apos;]); i++) {
		patientRole[&apos;addr&apos;][i] = buildCDAAddress(msgPatient[&apos;addresses&apos;][i][&apos;use&apos;], 
										 msgPatient[&apos;addresses&apos;][i][&apos;streetAddress&apos;], 
										 msgPatient[&apos;addresses&apos;][i][&apos;city&apos;], 
										 msgPatient[&apos;addresses&apos;][i][&apos;province&apos;], 
										 msgPatient[&apos;addresses&apos;][i][&apos;postalCode&apos;], 
										 msgPatient[&apos;addresses&apos;][i][&apos;contry&apos;]);
	}
	
	// CONF-BC0052: patientRole MAY contain zero or more [0..*] telecom (address)
	for (var i = 0; i &lt; getArrayOrXmlLength(msgPatient[&apos;telecoms&apos;]); i++) {
		patientRole[&apos;telecom&apos;][i] = buildCDATelecom(msgPatient[&apos;telecoms&apos;][i][&apos;use&apos;], 
										    msgPatient[&apos;telecoms&apos;][i][&apos;type&apos;], 
										    msgPatient[&apos;telecoms&apos;][i][&apos;value&apos;]);
	}
	
	// CONF-BC0053, CONF-BC0509
	patientRole[&apos;patient&apos;] = new XML(&apos;&lt;patient classCode=&quot;PSN&quot; determinerCode=&quot;INSTANCE&quot;/&gt;&apos;);
	
	// CONF-BC0054: patient SHALL contain at least 1 [1..*] name
	if (getArrayOrXmlLength(msgPatient[&apos;names&apos;]) == 0) {
		storeOBIBError(&apos;obib.patient.name.error&apos;, &apos;Patient shall contain at least one name&apos;);
	}
	for (var i = 0; i &lt; getArrayOrXmlLength(msgPatient[&apos;names&apos;]); i++) {  
		patientRole[&apos;patient&apos;][&apos;name&apos;][i] = buildCDAName(msgPatient[&apos;names&apos;][i][&apos;use&apos;], 
											    msgPatient[&apos;names&apos;][i][&apos;family&apos;], 
											    msgPatient[&apos;names&apos;][i][&apos;given&apos;], 
											    msgPatient[&apos;names&apos;][i][&apos;prefix&apos;], 
											    msgPatient[&apos;names&apos;][i][&apos;suffix&apos;]);
	}
	
	// CONF-BC0055
	patientRole[&apos;patient&apos;][&apos;administrativeGenderCode&apos;][&apos;@code&apos;] = msgPatient[&apos;genderCode&apos;];
	
	// CONF-BC0056
	patientRole[&apos;patient&apos;][&apos;birthTime&apos;][&apos;@value&apos;] = formatCDADate(msgPatient[&apos;birthday&apos;]);
	
	// CONF-BC0057 TODO languageCommunication?
} catch (e) {
	var error = &apos;Error on &quot;Record Target&quot;: &apos; + e;
    	logger.error(error); // log the error
    	storeOBIBError(&apos;obib.cda.build.error&apos;, error);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.8.0">
                <name>Author</name>
                <sequenceNumber>3</sequenceNumber>
                <enabled>true</enabled>
                <script>try {
	// 4.2.3. Author - Mandatory - 1..*

	// Update the time for the first author, who is the system author, fixed in the message template
	tmp[&apos;author&apos;][0][&apos;time&apos;][&apos;@value&apos;] = formatCDADateTime(new Date());
	
	for (var i = 0; i &lt; getArrayOrXmlLength(msg[&apos;authors&apos;]); i++) {

		var msgAuthor = msg[&apos;authors&apos;][i]; // inbound object
		
		// CONF-BC0058, CONF-BC0510
	  	var author = new XML(&apos;&lt;author typeCode=&quot;AUT&quot; contextControlCode=&quot;OP&quot; /&gt;&apos;);

		// CONF-BC0059: author SHALL contain exactly one [1..1] time
	  	if (!msgAuthor[&apos;time&apos;]) {
			storeOBIBError(&apos;obib.author.time.error&apos;, &apos;Author shall contain one time&apos;);
		}
		// CONF-BC0060
	  	author[&apos;time&apos;][&apos;@value&apos;] = formatCDADateTime(msgAuthor[&apos;time&apos;]);
	
	  	// CONF-BC0061, CONF-BC0511
	  	author[&apos;assignedAuthor&apos;][&apos;@classCode&apos;] = &apos;ASSIGNED&apos;;
	  	
	  	// CONF-BC0062: assignedAuthor SHALL contain one or more [1..*] id
	  	if (getArrayOrXmlLength(msgAuthor[&apos;ids&apos;]) == 0) {
			storeOBIBError(&apos;obib.author.id.error&apos;, &apos;Author shall contain at least one id&apos;);
		}
	  	for (var j = 0; j &lt; getArrayOrXmlLength(msgAuthor[&apos;ids&apos;]); j++) {
			author[&apos;assignedAuthor&apos;][&apos;id&apos;][j] = buildCDAId(msgAuthor[&apos;ids&apos;][j][&apos;type&apos;], 
										  		  msgAuthor[&apos;ids&apos;][j][&apos;code&apos;]);
	  	}
	  	
	  	// CONF-BC0066: assignedAuthor MAY contain zero or more [0..*] addr (address)
		for (var j = 0; j &lt; getArrayOrXmlLength(msgAuthor[&apos;addresses&apos;]); j++) {
			author[&apos;assignedAuthor&apos;][&apos;addr&apos;][i] = buildCDAAddress(msgAuthor[&apos;addresses&apos;][j][&apos;use&apos;], 
													    msgAuthor[&apos;addresses&apos;][j][&apos;streetAddress&apos;], 
													    msgAuthor[&apos;addresses&apos;][j][&apos;city&apos;], 
													    msgAuthor[&apos;addresses&apos;][j][&apos;province&apos;], 
													    msgAuthor[&apos;addresses&apos;][j][&apos;postalCode&apos;], 
													    msgAuthor[&apos;addresses&apos;][j][&apos;contry&apos;]);
		}
		
		// CONF-BC0067: assignedAuthor MAY contain zero or more [0..*] telecom
		for (var j = 0; j &lt; getArrayOrXmlLength(msgAuthor[&apos;telecoms&apos;]); j++) {
			author[&apos;assignedAuthor&apos;][&apos;telecom&apos;][i] = buildCDATelecom(msgAuthor[&apos;telecoms&apos;][j][&apos;use&apos;], 
														  msgAuthor[&apos;telecoms&apos;][j][&apos;type&apos;], 
														  msgAuthor[&apos;telecoms&apos;][j][&apos;value&apos;]);
		}
		
		// CONF-BC0512
		var assignedPerson = new XML(&apos;&lt;assignedPerson classCode=&quot;PSN&quot; determinerCode=&quot;INSTANCE&quot;/&gt;&apos;);
	
	  	// CONF-BC0068: assignedPerson SHALL contain exactly one [1..1] name
	  	if (!msgAuthor[&apos;name&apos;]) {
			storeOBIBError(&apos;obib.author.name.error&apos;, &apos;Author shall contain one name&apos;);
		} else {
		  	assignedPerson[&apos;name&apos;] = buildCDAName(msgAuthor[&apos;name&apos;][&apos;use&apos;], 
		  								   msgAuthor[&apos;name&apos;][&apos;family&apos;], 
		  								   msgAuthor[&apos;name&apos;][&apos;given&apos;], 
		  								   msgAuthor[&apos;name&apos;][&apos;prefix&apos;], 
		  								   msgAuthor[&apos;name&apos;][&apos;suffix&apos;]);
		}
		
		// CONF-BC0065
		author[&apos;assignedAuthor&apos;][&apos;assignedPerson&apos;] = assignedPerson;
		
		// Insert authors after the first &apos;author&apos;
		tmp.insertChildAfter(tmp[&apos;author&apos;][0], author);
		
		// CONF-BC0513, CONF-BC0069 (fixed in the template)
	}
} catch (e) {
	var error = &apos;Error on &quot;Author&quot;: &apos; + e;
    	logger.error(error); // log the error
    	storeOBIBError(&apos;obib.cda.build.error&apos;, error);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.8.0">
                <name>Custodian</name>
                <sequenceNumber>4</sequenceNumber>
                <enabled>true</enabled>
                <script>try {
	// 4.2.6. Custodian - Mandatory - 1..1
	
	// CONF-BC0082, CONF-BC0083, CONF-BC0084, CONF-BC0514, CONF-BC0515 implemented by the message template
	
	// CONF-BC0086 If the clinical document is generated from an EMR, this id SHALL NOT contain the root OID of a Health Authority or of the BC Ministry of Health.
	tmp[&apos;custodian&apos;][&apos;assignedCustodian&apos;][&apos;representedCustodianOrganization&apos;][&apos;id&apos;] = buildCDAId(&quot;2.16.840.1.113883.3.277.100.2&quot;, $(&apos;locationId&apos;));
	
	// CONF-BC0087 contain zero or one [0..1] name
	tmp[&apos;custodian&apos;][&apos;assignedCustodian&apos;][&apos;representedCustodianOrganization&apos;][&apos;name&apos;] = $(&apos;locationName&apos;);
} catch (e) {
    	var error = &apos;Error on &quot;Custodian&quot;: &apos; + e;
    	logger.error(error); // log the error
    	storeOBIBError(&apos;obib.cda.build.error&apos;, error);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.8.0">
                <name>Information Recipient</name>
                <sequenceNumber>5</sequenceNumber>
                <enabled>true</enabled>
                <script>try {
	// 4.2.4. Information Recipient - CONF-BC0070: Optional - 0..*
	for (var i = 0; i &lt; getArrayOrXmlLength(msg[&apos;recipients&apos;]); i++) {

		var msgRecipient = msg[&apos;recipients&apos;][i]; // inbound object

		// Insert &apos;informationRecipient&apos; after &apos;custodian&apos;
		var recipient = createSegmentAfter(&apos;informationRecipient&apos;, tmp[&apos;custodian&apos;]);
		
		// CONF-BC0071
	  	// TODO Validate? There SHALL be at least one [1..*] primary recipient (“PRCP”).
	  	recipient[&apos;@typeCode&apos;] = msgRecipient[&apos;typeCode&apos;];
	
	  	// CONF-BC0072, CONF-BC0074
	  	recipient[&apos;intendedRecipient&apos;] = new XML(&apos;&lt;intendedRecipient classCode=&quot;ASSIGNED&quot;/&gt;&apos;);

		// CONF-BC0075: If the informationRecipient is a Provider, id is required
		if (msgRecipient[&apos;name&apos;]) {
			// CONF-BC0073: intendedRecipient SHOULD contain one to two [1..2] id
			if (getArrayOrXmlLength(msgRecipient[&apos;ids&apos;]) == 0) {
				storeOBIBError(&apos;obib.recipient.id.error&apos;, &apos;Recipient should contain one or two id&apos;);
			}
			
			for (var j = 0; j &lt; getArrayOrXmlLength(msgRecipient[&apos;ids&apos;]); j++) {
				recipient[&apos;intendedRecipient&apos;][&apos;id&apos;][j] = buildCDAId(msgRecipient[&apos;ids&apos;][j][&apos;type&apos;], 
											  		        msgRecipient[&apos;ids&apos;][j][&apos;code&apos;]);
		  	}
		}
		// CONF-BC0076: If the informationRecipient is a not a Provider, id is optional
		
	  	// CONF-BC0077: intendedRecipient MAY contain zero or more [0..*] addr
		for (var j = 0; j &lt; getArrayOrXmlLength(msgRecipient[&apos;addresses&apos;]); j++) {
			recipient[&apos;intendedRecipient&apos;][&apos;addr&apos;][i] = buildCDAAddress(msgRecipient[&apos;addresses&apos;][j][&apos;use&apos;], 
												       		msgRecipient[&apos;addresses&apos;][j][&apos;streetAddress&apos;], 
													       	msgRecipient[&apos;addresses&apos;][j][&apos;city&apos;], 
													       	msgRecipient[&apos;addresses&apos;][j][&apos;province&apos;], 
													       	msgRecipient[&apos;addresses&apos;][j][&apos;postalCode&apos;], 
													       	msgRecipient[&apos;addresses&apos;][j][&apos;contry&apos;]);
		}
		
		// CONF-BC0078: intendedRecipient MAY contain zero or more [0..*] telecom
		for (var j = 0; j &lt; getArrayOrXmlLength(msgRecipient[&apos;telecoms&apos;]); j++) {
			recipient[&apos;intendedRecipient&apos;][&apos;telecom&apos;][i] = buildCDATelecom(msgRecipient[&apos;telecoms&apos;][j][&apos;use&apos;], 
															   msgRecipient[&apos;telecoms&apos;][j][&apos;type&apos;], 
															   msgRecipient[&apos;telecoms&apos;][j][&apos;value&apos;]);
		}

		// CONF-???: intendedRecipient MAY contain zero or one [0..1] informationRecipient
		if (msgRecipient[&apos;name&apos;]) {
			// CONF-BC0079: intendedRecipient SHALL contain exactly one [1..1] informationRecipient/name
			var recipientName = new XML(&apos;&lt;informationRecipient classCode=&quot;PSN&quot; determinerCode=&quot;INSTANCE&quot; /&gt;&apos;);
		  	recipientName[&apos;name&apos;] = buildCDAName(msgRecipient[&apos;name&apos;][&apos;use&apos;], 
		  								  msgRecipient[&apos;name&apos;][&apos;family&apos;], 
		  								  msgRecipient[&apos;name&apos;][&apos;given&apos;], 
										  msgRecipient[&apos;name&apos;][&apos;prefix&apos;], 
		  								  msgRecipient[&apos;name&apos;][&apos;suffix&apos;]);
			recipient[&apos;intendedRecipient&apos;][&apos;informationRecipient&apos;] = recipientName;
		}

		// CONF-BC0080: intendedRecipient MAY contain zero or one [0..1] receivedOrganization
		if (msgRecipient[&apos;receivedOrganization&apos;]) {
			var receivedOrganization = new XML(&apos;&lt;receivedOrganization /&gt;&apos;);

			var orgazination = msgRecipient[&apos;receivedOrganization&apos;];

			// CONF-BC0545: receivedOrganization SHALL contain at least one [1..*] id
			if (getArrayOrXmlLength(orgazination[&apos;ids&apos;]) == 0) {
				storeOBIBError(&apos;obib.receivedorgazination.id.error&apos;, &apos;Received Organization shall contain at least one id&apos;);
			}
			for (var j = 0; j &lt; getArrayOrXmlLength(orgazination[&apos;ids&apos;]); j++) {
				receivedOrganization[&apos;id&apos;][j] = buildCDAId(orgazination[&apos;ids&apos;][j][&apos;type&apos;], 
							  		                  orgazination[&apos;ids&apos;][j][&apos;code&apos;]);
		  	}
		  	// CONF-BC0081: receivedOrganization, SHALL contain exactly one [1..1] name
		  	if (!orgazination[&apos;name&apos;]) {
				storeOBIBError(&apos;obib.receivedorgazination.name.error&apos;, &apos;Received Organization shall contain one name&apos;);
			} else {
				receivedOrganization[&apos;name&apos;] = orgazination[&apos;name&apos;]; // CONF-BC0081
			}
			recipient[&apos;intendedRecipient&apos;][&apos;receivedOrganization&apos;] = receivedOrganization;
		}
	}
} catch (e) {
	var error = &apos;Error on &quot;Information Recipient&quot;: &apos; + e;
    	logger.error(error); // log the error
    	storeOBIBError(&apos;obib.cda.build.error&apos;, error);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.8.0">
                <name>Data Enterer</name>
                <sequenceNumber>6</sequenceNumber>
                <enabled>true</enabled>
                <script>try {
	// 4.2.7. Data Enterer - Optional - 0..1	
	// CONF-BC0088: MAY contain zero or one [0..1] dataEnterer
	if (msg[&apos;dataEnterer&apos;]) {

		var msgDataEnterer = msg[&apos;dataEnterer&apos;]; // inbound object
		
		// CONF-BC0516 (Insert &apos;dataEnterer&apos; before &apos;component&apos;) 
		var dataEnterer = createSegmentBefore(&apos;dataEnterer&apos;, tmp[&apos;component&apos;]);
		dataEnterer[&apos;@typeCode&apos;] = &apos;ENT&apos;;
		dataEnterer[&apos;@contextControlCode&apos;] = &apos;OP&apos;;
	
		// CONF-BC0090, CONF-BC0517
		dataEnterer[&apos;assignedEntity&apos;][&apos;@classCode&apos;] = &quot;ASSIGNED&quot;;
	
		// CONF-BC0550: dataEnterer SHALL contain exactly one [1..1] time
		if (!msgDataEnterer[&apos;time&apos;]) {
			storeOBIBError(&apos;obib.dataenterer.time.error&apos;, &apos;Data Enterer shall contain one time&apos;);
		}
		dataEnterer[&apos;time&apos;][&apos;@value&apos;] = formatCDADateTime(msgDataEnterer[&apos;time&apos;]);
	
		// CONF-BC0091: assignedEntity SHOULD contain zero or one [0..1] id, which MAY be a local identifier
		if (msgDataEnterer[&apos;id&apos;]) {
			dataEnterer[&apos;assignedEntity&apos;][&apos;id&apos;] = buildCDAId(msgDataEnterer[&apos;ids&apos;][j][&apos;type&apos;], 
										  		    msgDataEnterer[&apos;ids&apos;][j][&apos;code&apos;]);
		}
	  
	  	// CONF-BC0092: assignedEntity MAY contain zero or more [0..*] addr elements
		for (var j = 0; j &lt; getArrayOrXmlLength(msgDataEnterer[&apos;addresses&apos;]); j++) {
			dataEnterer[&apos;assignedEntity&apos;][&apos;addr&apos;][i] = buildCDAAddress(msgDataEnterer[&apos;addresses&apos;][j][&apos;use&apos;], 
													    	    msgDataEnterer[&apos;addresses&apos;][j][&apos;streetAddress&apos;], 
													    	    msgDataEnterer[&apos;addresses&apos;][j][&apos;city&apos;], 
													    	    msgDataEnterer[&apos;addresses&apos;][j][&apos;province&apos;], 
													    	    msgDataEnterer[&apos;addresses&apos;][j][&apos;postalCode&apos;], 
													    	    msgDataEnterer[&apos;addresses&apos;][j][&apos;contry&apos;]);
		}
		
		// CONF-BC0093: assignedEntity MAY contain zero or more [0..*] telecom elements
		for (var j = 0; j &lt; getArrayOrXmlLength(msgDataEnterer[&apos;telecoms&apos;]); j++) {
			dataEnterer[&apos;assignedEntity&apos;][&apos;telecom&apos;][i] = buildCDATelecom(msgDataEnterer[&apos;telecoms&apos;][j][&apos;use&apos;], 
														       msgDataEnterer[&apos;telecoms&apos;][j][&apos;type&apos;], 
														       msgDataEnterer[&apos;telecoms&apos;][j][&apos;value&apos;]);
		}
	
		// CONF-BC0094: assignedEntity SHOULD contain zero or one [0..1]
		if (msgDataEnterer[&apos;name&apos;]) {
			// CONF-BC0518
			var assignedPerson = new XML(&apos;&lt;assignedPerson classCode=&quot;PSN&quot; determinerCode=&quot;INSTANCE&quot;/&gt;&apos;);
	
	  		// CONF-BC0095
	  		assignedPerson[&apos;name&apos;] = buildCDAName(msgDataEnterer[&apos;name&apos;][&apos;use&apos;], 
	  									   msgDataEnterer[&apos;name&apos;][&apos;family&apos;], 
	  									   msgDataEnterer[&apos;name&apos;][&apos;given&apos;], 
	  									   msgDataEnterer[&apos;name&apos;][&apos;prefix&apos;], 
	  									   msgDataEnterer[&apos;name&apos;][&apos;suffix&apos;]);
		
			dataEnterer[&apos;assignedEntity&apos;][&apos;assignedPerson&apos;] = assignedPerson;
		}
	}
} catch (e) {
    	var error = &apos;Error on &quot;Data Enterer&quot;: &apos; + e;
    	logger.error(error); // log the error
    	storeOBIBError(&apos;obib.cda.build.error&apos;, error);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.8.0">
                <name>Authenticator</name>
                <sequenceNumber>7</sequenceNumber>
                <enabled>true</enabled>
                <script>// 4.2.8. Authenticator and Legal Authenticator - Optional - 0..*
	
// CONF-BC0096 TODO ? Authenticator is the person or persons who attest to the content of the document.</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.8.0">
                <name>Generic Participant</name>
                <sequenceNumber>8</sequenceNumber>
                <enabled>true</enabled>
                <script>try { 
	// 4.2.9. Generic Participant - Optional - 0..*
	for (var i = 0; i &lt; getArrayOrXmlLength(msg[&apos;participants&apos;]); i++) {

		var msgParticipant = msg[&apos;participants&apos;][i]; // inbound object
		
		// CONF-8504 (Insert &apos;participant&apos; before &apos;component&apos;) 
		var participant = createSegmentBefore(&apos;participant&apos;, tmp[&apos;component&apos;]);
		
		// CONF-8505
		if (msgParticipant[&apos;typeCode&apos;]) {
			participant[&apos;@typeCode&apos;] = msgParticipant[&apos;typeCode&apos;];
		} else {
			participant[&apos;@typeCode&apos;] = &apos;IND&apos;;
		}
		participant[&apos;@contextControlCode&apos;] = &apos;OP&apos;;
	
		// CONF-8506
		participant[&apos;functionCode&apos;] = new XML(&apos;&lt;functionCode code=&quot;&apos; + msgParticipant[&apos;functionCode&apos;] + &apos;&quot; \
										codeSystem=&quot;2.16.840.1.113883.2.20.3.88&quot; \
									     codeSystemName=&quot;HL7ParticipationFunction&quot; displayName=&quot;Primary Care Physician&quot; /&gt;&apos;);
	
		// CONF-8507
		participant[&apos;associatedEntity&apos;][&apos;@classCode&apos;] = &quot;PROV&quot;;

		// CONF-BC0097: associatedEntity SHOULD contain exactly one to two [1..2] id
		if (getArrayOrXmlLength(msgParticipant[&apos;ids&apos;]) == 0) {
			storeOBIBError(&apos;obib.participant.id.error&apos;, &apos;Participant should contain one or two id&apos;);
		}
		// CONF-BC0098, CONF-BC0099
		for (var j = 0; j &lt; getArrayOrXmlLength(msgParticipant[&apos;ids&apos;]); j++) {
			participant[&apos;associatedEntity&apos;][&apos;id&apos;][j] = buildCDAId(msgParticipant[&apos;ids&apos;][j][&apos;type&apos;], 
										  		         msgParticipant[&apos;ids&apos;][j][&apos;code&apos;]);
	  	}
	
		// CONF-BC0101: associatedEntity MAY contain zero or more [0..*] addr
		for (var j = 0; j &lt; getArrayOrXmlLength(msgParticipant[&apos;addresses&apos;]); j++) {
			participant[&apos;associatedEntity&apos;][&apos;addr&apos;][i] = buildCDAAddress(msgParticipant[&apos;addresses&apos;][j][&apos;use&apos;], 
															 msgParticipant[&apos;addresses&apos;][j][&apos;streetAddress&apos;], 
															 msgParticipant[&apos;addresses&apos;][j][&apos;city&apos;], 
															 msgParticipant[&apos;addresses&apos;][j][&apos;province&apos;], 
															 msgParticipant[&apos;addresses&apos;][j][&apos;postalCode&apos;], 
															 msgParticipant[&apos;addresses&apos;][j][&apos;contry&apos;]);
		}
		
		// CONF-BC0102: associatedEntity MAY contain zero or more [0..*] telecom
		for (var j = 0; j &lt; getArrayOrXmlLength(msgParticipant[&apos;telecoms&apos;]); j++) {
			participant[&apos;associatedEntity&apos;][&apos;telecom&apos;][i] = buildCDATelecom(msgParticipant[&apos;telecoms&apos;][j][&apos;use&apos;], 
															    msgParticipant[&apos;telecoms&apos;][j][&apos;type&apos;], 
															    msgParticipant[&apos;telecoms&apos;][j][&apos;value&apos;]);
		}

		// CONF-8508, CONF-BC0519
		participant[&apos;associatedEntity&apos;][&apos;associatedPerson&apos;] = new XML(&apos;&lt;associatedPerson classCode=&quot;PSN&quot; determinerCode=&quot;INSTANCE&quot; /&gt;&apos;);
	
		// CONF-BC0100: associatedEntity/associatedPerson SHALL contain exactly one [1..1] name
		if (!msgParticipant[&apos;name&apos;]) {
			storeOBIBError(&apos;obib.participant.name.error&apos;, &apos;Participant shall contain one name&apos;);
		} else {
			participant[&apos;associatedEntity&apos;][&apos;associatedPerson&apos;][&apos;name&apos;] = buildCDAName(msgParticipant[&apos;name&apos;][&apos;use&apos;], 
																	     msgParticipant[&apos;name&apos;][&apos;family&apos;], 
																	     msgParticipant[&apos;name&apos;][&apos;given&apos;], 
																	     msgParticipant[&apos;name&apos;][&apos;prefix&apos;], 
																	     msgParticipant[&apos;name&apos;][&apos;suffix&apos;]);
		}
	}
} catch (e) {
    	var error = &apos;Error on &quot;Generic Participant&quot;: &apos; + e;
    	logger.error(error); // log the error
    	storeOBIBError(&apos;obib.cda.build.error&apos;, error);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.8.0">
                <name>Order (InFulfillmentOf)</name>
                <sequenceNumber>9</sequenceNumber>
                <enabled>true</enabled>
                <script>try { 
	// 4.3.2. Order - Optional - 0..* (zero or more)
	for (var i = 0; i &lt; getArrayOrXmlLength(msg[&apos;orders&apos;]); i++) {
		
		var msgOrder = msg[&apos;orders&apos;][i];  // inbound object
		
		// Insert &apos;inFulfillmentOf&apos; before &apos;component&apos;
		var inFulfillmentOf = createSegmentBefore(&apos;inFulfillmentOf&apos;, tmp[&apos;component&apos;]);
		
		// CONF-BC0524
		inFulfillmentOf[&apos;@typeCode&apos;] = &apos;FLFS&apos;; 
		
		// CONF-BC0123, CONF-BC0525
		inFulfillmentOf[&apos;order&apos;] = new XML(&apos;&lt;order classCode=&quot;ENC&quot; moodCode=&quot;RQO&quot;/&gt;&apos;); 
		
		// CONF-BC0124: inFulfillmentOf/order SHALL contain at least one [1..*] id
		if (getArrayOrXmlLength(msgOrder[&apos;ids&apos;]) == 0) {
			storeOBIBError(&apos;obib.infulfillmentof.id.error&apos;, &apos;InFulfillmentOf shall contain at least one id&apos;);
		}
		for (var j = 0; j &lt; getArrayOrXmlLength(msgOrder[&apos;ids&apos;]); j++) {
			var oscarOID = UUIDGenerator.getUUID(); // TODO using a random code for now
			inFulfillmentOf[&apos;order&apos;][&apos;id&apos;][j] = buildCDAId(oscarOID, msgOrder[&apos;ids&apos;][j][&apos;code&apos;]);
	  	}
		
		// CONF-BC0526
		if (msgOrder[&apos;statusCode&apos;] != null) {
			var code = new XML(&apos;&lt;code codeSystem=&quot;statusCode&quot;/&gt;&apos;); 
			code[&apos;@code&apos;] = msgOrder[&apos;statusCode&apos;];
			inFulfillmentOf[&apos;order&apos;][&apos;code&apos;] = code;
		}
	}
} catch (e) {
    	var error = &apos;Error on &quot;Order (InFulfillmentOf)&quot;: &apos; + e;
    	logger.error(error); // log the error
    	storeOBIBError(&apos;obib.cda.build.error&apos;, error);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.8.0">
                <name>ServiceEvent (documentationOf)</name>
                <sequenceNumber>10</sequenceNumber>
                <enabled>true</enabled>
                <script>try { 
	// 4.3.1. Service Event - Optional - 0..* (zero or more)
	for (var i = 0; i &lt; getArrayOrXmlLength(msg[&apos;serviceEvents&apos;]); i++) {
		
		var msgService = msg[&apos;serviceEvents&apos;][i];  // inbound object

		// Insert &apos;documentationOf&apos; before &apos;component&apos;
		var documentationOf = createSegmentBefore(&apos;documentationOf&apos;, tmp[&apos;component&apos;]);
		
		// CONF-BC0520
		documentationOf[&apos;@typeCode&apos;] = &apos;DOC&apos;; 
		
		// CONF-BC0103, CONF-BC0521, CONF-BC0547
		documentationOf[&apos;serviceEvent&apos;] = new XML(&apos;&lt;serviceEvent classCode=&quot;ACT&quot; moodCode=&quot;EVN&quot;/&gt;&apos;); 

		// CONF-BC00549 TODO ServiceEvent/code

		// 4.1.8. documentationOf/serviceEvent/effectiveTime
		// CONF-BC0548: ServiceEvent SHALL contain exactly one [1..1] effectiveTime
		if (!msgService[&apos;effectiveTime&apos;]) {
			storeOBIBError(&apos;obib.serviceEvents.effectiveTime.error&apos;, &apos;ServiceEvent shall contain one effectiveTime&apos;);
		}
		documentationOf[&apos;serviceEvent&apos;][&apos;effectiveTime&apos;][&apos;@value&apos;] = formatCDADateTime(msgService[&apos;effectiveTime&apos;]);
		
		// TODO Performer:
		// CONF-BC0104, CONF-BC0105, CONF-BC0106, CONF-BC0522, CONF-BC0107, CONF-BC0108, CONF-BC0109, CONF-BC0110
		// CONF-BC0523, CONF-BC0111, CONF-BC0112, CONF-BC0113

		// 4.1.7. documentationOf/serviceEvent/statusCode
		var statusCode = new XML(&apos;&lt;bccda:statusCode xmlns:bccda=&quot;urn:bccda&quot; /&gt;&apos;); 
		statusCode[&apos;@code&apos;] = msgService[&apos;statusCode&apos;];
		documentationOf[&apos;serviceEvent&apos;].*::[&apos;statusCode&apos;] = statusCode;
	}
} catch (e) {
    	var error = &apos;Error on &quot;ServiceEvent (documentationOf)&quot;: &apos; + e;
    	logger.error(error); // log the error
    	storeOBIBError(&apos;obib.cda.build.error&apos;, error);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.8.0">
                <name>RelatedDocument</name>
                <sequenceNumber>11</sequenceNumber>
                <enabled>true</enabled>
                <script>try { 
	// 4.3.3. relatedDocument - Optional - 0..2 (at most 2)	
	// TODO CONF-BC0125
	if ($(&apos;parentDocumentId&apos;)) {
		// CONF-BC0126, CONF-BC0559, CONF-BC0560
		var relatedDocument = createSegmentBefore(&apos;relatedDocument&apos;, tmp[&apos;component&apos;]);
		relatedDocument[&apos;@typeCode&apos;] = &apos;RPLC&apos;; // XFRM

    		// CONF-BC0127
    		relatedDocument[&apos;parentDocument&apos;] = new XML(&apos;&lt;parentDocument classCode=&quot;DOCCLIN&quot; moodCode=&quot;EVN&quot;/&gt;&apos;); 

	    	// CONF-BC0556, CONF-BC0557, CONF-BC0558, CONF-BC0527
	    	relatedDocument[&apos;parentDocument&apos;][&apos;id&apos;] = $(&apos;parentDocumentId&apos;);

	    	// TODO: CONF-BC0128, CONF-BC0129   	
	}
} catch (e) {
    	var error = &apos;Error on &quot;RelatedDocument&quot;: &apos; + e;
    	logger.error(error); // log the error
    	storeOBIBError(&apos;obib.cda.build.error&apos;, error);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.8.0">
                <name>Document Body</name>
                <sequenceNumber>12</sequenceNumber>
                <enabled>true</enabled>
                <script>try { 
	// 2.3. CDA LEVEL 1 NARRATIVE TEXT AND ATTACHMENTS

	var msgBody = msg[&apos;nonXMLBody&apos;];  // inbound object

	if (getArrayOrXmlLength(msg[&apos;attachments&apos;]) &gt; 0) {
		msgBody = {};
		msgBody[&apos;mediaType&apos;] = &apos;text/plain&apos;;
		msgBody[&apos;content&apos;] = &apos;Document has &apos; + getArrayOrXmlLength(msg[&apos;attachments&apos;]) + &apos; attachments.&apos;;
	}

	// CONF-BC0009, CONF-BC0010
	if (!msgBody || !msgBody[&apos;mediaType&apos;]) {
		storeOBIBError(&apos;obib.text.error&apos;, &apos;Document shall have exactly one text with mediaType defined&apos;);
	} else if (msgBody[&apos;mediaType&apos;] === &quot;text/plain&quot;) {
		// CONF-BC0011: text.mediaType=”text/plain”
		tmp[&apos;component&apos;][&apos;nonXMLBody&apos;][&apos;text&apos;] = new XML(&apos;&lt;text mediaType=&quot;&apos; + msgBody[&apos;mediaType&apos;] + &apos;&quot; representation=&quot;TXT&quot;&gt;&apos; 
			+ msgBody[&apos;content&apos;] + &apos; \n(Sent at: &apos; + new Date() + &apos;)&lt;/text&gt;&apos;);
	} else if (msgBody[&apos;mediaType&apos;] === &quot;text/rtf&quot; || msgBody[&apos;mediaType&apos;] === &quot;application/pdf&quot;) {
		// CONF-BC0012: text.mediaType=”text/rtf”, or “application/pdf”
		tmp[&apos;component&apos;][&apos;nonXMLBody&apos;][&apos;text&apos;] = new XML(&apos;&lt;text mediaType=&quot;&apos; + msgBody[&apos;mediaType&apos;] + &apos;&quot; &apos; 
											+ &apos;integrityCheck=&quot;&apos; + msgBody[&apos;integrityCheck&apos;] + &apos;&quot; &apos; 
											+ &apos;integrityCheckAlgorithm=&quot;&apos; + msgBody[&apos;integrityCheckAlgorithm&apos;] +&apos;&quot; &gt;&apos;);
		tmp[&apos;component&apos;][&apos;nonXMLBody&apos;][&apos;text&apos;][&apos;reference&apos;] = new XML(&apos;&lt;reference value=&quot;&apos; + msgBody[&apos;content&apos;] + &apos;&quot;/&gt;&apos;);
	} else {
		storeOBIBError(&apos;obib.text.error&apos;, &apos;MediaType is not valid&apos;);
	}
} catch (e) {
    	var error = &apos;Error on &quot;Document Body&quot;: &apos; + e;
    	logger.error(error); // log the error
    	storeOBIBError(&apos;obib.cda.build.error&apos;, error);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.8.0">
                <name>Attachments</name>
                <sequenceNumber>13</sequenceNumber>
                <enabled>true</enabled>
                <script>try {
	var attachments = [];
	for (var i = 0; i &lt; getArrayOrXmlLength(msg[&apos;attachments&apos;]); i++) {
		attachments.push(msg[&apos;attachments&apos;][i]); // inbound object
	}
	
	if (attachments.length &gt; 0) { // store the attachments in the channel map to be send by the connector
		logger.debug(&apos;Attachments being submitted: &apos; + attachments.length);
		channelMap.put(&apos;attachments&apos;, attachments);
	}
} catch (e) {
    	var error = &apos;Error on &quot;Attachments&quot;: &apos; + e;
    	logger.error(error); // log the error
    	storeOBIBError(&apos;obib.cda.build.error&apos;, error);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.8.0">
                <name>Document Validation</name>
                <sequenceNumber>14</sequenceNumber>
                <enabled>true</enabled>
                <script>logger.debug(&quot;Document Validation&quot;);

/* Validate the CDA using the XML Schemas */
try {
	// build the XML with correct namespaces
	default xml namespace = &quot;urn:hl7-org:v3&quot;;
	var msgValidate = new XML(tmp.toString());
	msgValidate.addNamespace(new Namespace(&apos;xsi&apos;,&apos;http://www.w3.org/2001/XMLSchema-instance&apos;));

	// get the validator using the xml schemas
	var factory = new Packages.javax.xml.validation.SchemaFactory.newInstance(&apos;http://www.w3.org/2001/XMLSchema&apos;);
	var schemaLocation = new Packages.java.io.File($(&apos;custom-lib&apos;) + &apos;CDA_with_BcCdaExtensions/&apos; + globalMap.get(&apos;CDASchema&apos;));
	var schema = factory.newSchema(schemaLocation);
	var validator = schema.newValidator();

	// transform the xml into a stream
	var reader = new Packages.java.io.StringReader(msgValidate);
	var source = new Packages.javax.xml.transform.stream.StreamSource(reader);

	// validate the stream
	try {
		validator.validate(source);
	} catch(e) {
		var error = &apos;CDA XML validation errors: &apos; + e.message.replace(&apos;org.xml.sax.SAXParseException:&apos;,&apos;&apos;).replace(/(&quot;|&apos;)/g, &apos;&apos;);
		logger.error(error); // log the error
    		storeOBIBError(&apos;obib.cda.validation.error&apos;, error);
	}
} catch(e) {
	var error = &apos;Error on &quot;Document Validation&quot;: &apos; + e;
	logger.error(error); // log the error
    	storeOBIBError(&apos;obib.cda.build.error&apos;, error);
}

// check for errors in the cda building
var obibErrors = channelMap.get(&apos;obibErrors&apos;);
if (obibErrors != null) {
	var error = &apos;Error building CDA.&apos;;
	
	responseMap.put(&apos;responseMessage&apos;, createErrorMessage(error, obibErrors)); // create the error response
	responseMap.put(&apos;responseStatus&apos;, &apos;200&apos;); // return ok
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64">ewogICJkb2N1bWVudElkIjoiIiwKICAidGVtcGxhdGUiOnsKICAgICJ0ZW1wbGF0ZUlkIjoiIiwK
ICAgICJ0ZW1wbGF0ZU5hbWUiOiIiCiAgfSwKICAibG9pbmMiOnsKICAgICJsb2luY0NvZGUiOiIi
LAogICAgImRpc3BsYXlOYW1lIjoiIgogIH0sCiAgInZlcnNpb24iOiAiIiwKICAiZWZmZWN0aXZl
VGltZSI6IiIsCiAgInRpdGxlIjoiIiwKICAicGF0aWVudCI6ewogICAgImlkcyI6WwogICAgICB7
CiAgICAgICAgImNvZGUiOiIiLAogICAgICAgICJ0eXBlIjoiIgogICAgICB9CiAgICBdLAogICAg
ImFkZHJlc3NlcyI6WwogICAgICB7CiAgICAgICAgInVzZSI6IiIsCiAgICAgICAgInN0cmVldEFk
ZHJlc3MiOiIiLAogICAgICAgICJjaXR5IjoiIiwKICAgICAgICAicHJvdmluY2UiOiIiLAogICAg
ICAgICJwb3N0YWxDb2RlIjoiIiwKICAgICAgICAiY291bnRyeSI6IiIKICAgICAgfQogICAgXSwK
ICAgICJ0ZWxlY29tcyI6WwogICAgICB7CiAgICAgICAgInVzZSI6IiIsCiAgICAgICAgInR5cGUi
OiIiLAogICAgICAgICJ2YWx1ZSI6IiIKICAgICAgfQogICAgXSwKICAgICJuYW1lcyI6WwogICAg
ICB7CiAgICAgICAgInVzZSI6IiIsCiAgICAgICAgImdpdmVuIjpbCiAgICAgICAgICAiIgogICAg
ICAgIF0sCiAgICAgICAgImZhbWlseSI6IiIsCiAgICAgICAgInByZWZpeCI6IiIsCiAgICAgICAg
InN1ZmZpeCI6IiIKICAgICAgfQogICAgXSwKICAgICJnZW5kZXJDb2RlIjoiIiwKICAgICJiaXJ0
aGRheSI6IiIKICB9LAogICJhdXRob3JzIjpbCiAgICB7CiAgICAgICJ0aW1lIjoiIiwKICAgICAg
ImlkcyI6WwogICAgICAgIHsKICAgICAgICAgICJjb2RlIjoiIiwKICAgICAgICAgICJ0eXBlIjoi
IgogICAgICAgIH0KICAgICAgXSwKICAgICAgImFkZHJlc3NlcyI6WwogICAgICAgIHsKICAgICAg
ICAgICJ1c2UiOiIiLAogICAgICAgICAgInN0cmVldEFkZHJlc3MiOiIiLAogICAgICAgICAgImNp
dHkiOiIiLAogICAgICAgICAgInByb3ZpbmNlIjoiIiwKICAgICAgICAgICJwb3N0YWxDb2RlIjoi
IiwKICAgICAgICAgICJjb3VudHJ5IjoiIgogICAgICAgIH0KICAgICAgXSwKICAgICAgInRlbGVj
b21zIjpbCiAgICAgICAgewogICAgICAgICAgInVzZSI6IiIsCiAgICAgICAgICAidHlwZSI6IiIs
CiAgICAgICAgICAidmFsdWUiOiIiCiAgICAgICAgfQogICAgICBdLAogICAgICAibmFtZSI6ewog
ICAgICAgICJ1c2UiOiIiLAogICAgICAgICJnaXZlbiI6WwogICAgICAgICAgIiIKICAgICAgICBd
LAogICAgICAgICJmYW1pbHkiOiIiLAogICAgICAgICJwcmVmaXgiOiIiLAogICAgICAgICJzdWZm
aXgiOiIiCiAgICAgIH0sCiAgICAgICJzb2Z0d2FyZSI6ewogICAgICAgICJuYW1lIjoiIiwKICAg
ICAgICAiY29kZSI6IiIKICAgICAgfQogICAgfQogIF0sCiAgInJlY2lwaWVudHMiOlsKICAgIHsK
ICAgICAgImlkcyI6WwogICAgICAgIHsKICAgICAgICAgICJjb2RlIjoiIiwKICAgICAgICAgICJ0
eXBlIjoiIgogICAgICAgIH0KICAgICAgXSwKICAgICAgImFkZHJlc3NlcyI6WwogICAgICAgIHsK
ICAgICAgICAgICJ1c2UiOiIiLAogICAgICAgICAgInN0cmVldEFkZHJlc3MiOiIiLAogICAgICAg
ICAgImNpdHkiOiIiLAogICAgICAgICAgInByb3ZpbmNlIjoiIiwKICAgICAgICAgICJwb3N0YWxD
b2RlIjoiIiwKICAgICAgICAgICJjb3VudHJ5IjoiIgogICAgICAgIH0KICAgICAgXSwKICAgICAg
InRlbGVjb21zIjpbCiAgICAgICAgewogICAgICAgICAgInVzZSI6IiIsCiAgICAgICAgICAidHlw
ZSI6IiIsCiAgICAgICAgICAidmFsdWUiOiIiCiAgICAgICAgfQogICAgICBdLAogICAgICAibmFt
ZSI6ewogICAgICAgICJ1c2UiOiIiLAogICAgICAgICJnaXZlbiI6WwogICAgICAgICAgIiIKICAg
ICAgICBdLAogICAgICAgICJmYW1pbHkiOiIiLAogICAgICAgICJwcmVmaXgiOiIiLAogICAgICAg
ICJzdWZmaXgiOiIiCiAgICAgIH0sCiAgICAgICJ0eXBlQ29kZSI6IiIsCiAgICAgICJyZWNlaXZl
ZE9yZ2FuaXphdGlvbiI6ewogICAgICAgICJpZHMiOlsKICAgICAgICAgIHsKICAgICAgICAgICAg
ImNvZGUiOiIiLAogICAgICAgICAgICAidHlwZSI6IiIKICAgICAgICAgIH0KICAgICAgICBdLAog
ICAgICAgICJuYW1lIjoiIgogICAgICB9CiAgICB9CiAgXSwKICAiY3VzdG9kaWFuIjp7CiAgICAi
aWQiOnsKICAgICAgImNvZGUiOiIiLAogICAgICAidHlwZSI6IiIKICAgIH0sCiAgICAibmFtZSI6
IiIKICB9LAogICJkYXRhRW50ZXJlciI6ewogICAgInRpbWUiOiIiLAogICAgImlkIjp7CiAgICAg
ICJjb2RlIjoiIiwKICAgICAgInR5cGUiOiIiCiAgICB9LAogICAgImFkZHJlc3NlcyI6WwogICAg
ICB7CiAgICAgICAgInVzZSI6IiIsCiAgICAgICAgInN0cmVldEFkZHJlc3MiOiIiLAogICAgICAg
ICJjaXR5IjoiIiwKICAgICAgICAicHJvdmluY2UiOiIiLAogICAgICAgICJwb3N0YWxDb2RlIjoi
IiwKICAgICAgICAiY291bnRyeSI6IiIKICAgICAgfQogICAgXSwKICAgICJ0ZWxlY29tcyI6Wwog
ICAgICB7CiAgICAgICAgInVzZSI6IiIsCiAgICAgICAgInR5cGUiOiIiLAogICAgICAgICJ2YWx1
ZSI6IiIKICAgICAgfQogICAgXSwKICAgICJuYW1lIjp7CiAgICAgICJ1c2UiOiIiLAogICAgICAi
Z2l2ZW4iOlsKICAgICAgICAiIgogICAgICBdLAogICAgICAiZmFtaWx5IjoiIiwKICAgICAgInBy
ZWZpeCI6IiIsCiAgICAgICJzdWZmaXgiOiIiCiAgICB9CiAgfSwKICAiYXV0aGVudGljYXRvcnMi
OlsKICAgIHsKICAgICAgImlkcyI6WwogICAgICAgIHsKICAgICAgICAgICJjb2RlIjoiIiwKICAg
ICAgICAgICJ0eXBlIjoiIgogICAgICAgIH0KICAgICAgXSwKICAgICAgImFkZHJlc3NlcyI6Wwog
ICAgICAgIHsKICAgICAgICAgICJ1c2UiOiIiLAogICAgICAgICAgInN0cmVldEFkZHJlc3MiOiIi
LAogICAgICAgICAgImNpdHkiOiIiLAogICAgICAgICAgInByb3ZpbmNlIjoiIiwKICAgICAgICAg
ICJwb3N0YWxDb2RlIjoiIiwKICAgICAgICAgICJjb3VudHJ5IjoiIgogICAgICAgIH0KICAgICAg
XSwKICAgICAgInRlbGVjb21zIjpbCiAgICAgICAgewogICAgICAgICAgInVzZSI6IiIsCiAgICAg
ICAgICAidHlwZSI6IiIsCiAgICAgICAgICAidmFsdWUiOiIiCiAgICAgICAgfQogICAgICBdLAog
ICAgICAibmFtZSI6ewogICAgICAgICJ1c2UiOiIiLAogICAgICAgICJnaXZlbiI6WwogICAgICAg
ICAgIiIKICAgICAgICBdLAogICAgICAgICJmYW1pbHkiOiIiLAogICAgICAgICJwcmVmaXgiOiIi
LAogICAgICAgICJzdWZmaXgiOiIiCiAgICAgIH0KICAgIH0KICBdLAogICJwYXJ0aWNpcGFudHMi
OlsKICAgIHsKICAgICAgImlkcyI6WwogICAgICAgIHsKICAgICAgICAgICJjb2RlIjoiIiwKICAg
ICAgICAgICJ0eXBlIjoiIgogICAgICAgIH0KICAgICAgXSwKICAgICAgImFkZHJlc3NlcyI6Wwog
ICAgICAgIHsKICAgICAgICAgICJ1c2UiOiIiLAogICAgICAgICAgInN0cmVldEFkZHJlc3MiOiIi
LAogICAgICAgICAgImNpdHkiOiIiLAogICAgICAgICAgInByb3ZpbmNlIjoiIiwKICAgICAgICAg
ICJwb3N0YWxDb2RlIjoiIiwKICAgICAgICAgICJjb3VudHJ5IjoiIgogICAgICAgIH0KICAgICAg
XSwKICAgICAgInRlbGVjb21zIjpbCiAgICAgICAgewogICAgICAgICAgInVzZSI6IiIsCiAgICAg
ICAgICAidHlwZSI6IiIsCiAgICAgICAgICAidmFsdWUiOiIiCiAgICAgICAgfQogICAgICBdLAog
ICAgICAibmFtZSI6ewogICAgICAgICJ1c2UiOiIiLAogICAgICAgICJnaXZlbiI6WwogICAgICAg
ICAgIiIKICAgICAgICBdLAogICAgICAgICJmYW1pbHkiOiIiLAogICAgICAgICJwcmVmaXgiOiIi
LAogICAgICAgICJzdWZmaXgiOiIiCiAgICAgIH0sCiAgICAgICJ0eXBlQ29kZSI6IiIsCiAgICAg
ICJmdW5jdGlvbkNvZGUiOiIiCiAgICB9CiAgXSwKICAib3JkZXJzIjpbCiAgICB7CiAgICAgICJp
ZHMiOlsKICAgICAgICB7CiAgICAgICAgICAiY29kZSI6IiIsCiAgICAgICAgICAidHlwZSI6IiIK
ICAgICAgICB9CiAgICAgIF0sCiAgICAgICJzdGF0dXNDb2RlIjoiIgogICAgfQogIF0sCiAgInNl
cnZpY2VFdmVudHMiOlsKICAgIHsKICAgICAgImVmZmVjdGl2ZVRpbWUiOiAiIiwKICAgICAgInN0
YXR1c0NvZGUiOiIiCiAgICB9CiAgXSwKICAibm9uWE1MQm9keSI6ewogICAgIm1lZGlhVHlwZSI6
IiIsCiAgICAiY29udGVudCI6IiIKICB9LAogICJhdHRhY2htZW50cyI6WwogICAgewogICAgICAi
bWVkaWFUeXBlIjoiIiwKICAgICAgImNvbnRlbnQiOiIiLAogICAgICAiaGFzaCI6IiIsCiAgICAg
ICJyZWZlcmVuY2UiOiIiCiAgICB9CiAgXSwKICAicmVjZWl2ZXJzIjpbCiAgICAiIgogIF0KfQ==
</inboundTemplate>
            <outboundTemplate encoding="base64">PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPENsaW5pY2FsRG9jdW1lbnQg
eG1sbnM9InVybjpobDctb3JnOnYzIiB4bWxuczpiY2NkYT0idXJuOmJjY2RhIiB4bWxuczpuczA9
Imh0dHA6Ly9taWNyb3NvZnQuY29tL0hlYWx0aENhcmUvSEw3LzJYIiB4bWxuczp4YWxhbj0iaHR0
cDovL3htbC5hcGFjaGUub3JnL3hzbHQiIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAw
MS9YTUxTY2hlbWEtaW5zdGFuY2UiIGNsYXNzQ29kZT0iRE9DQ0xJTiIgbW9vZENvZGU9IkVWTiI+
CiAgPHJlYWxtQ29kZSBjb2RlPSJDQS1CQyIgLz4NCiAgPHR5cGVJZCByb290PSIyLjE2Ljg0MC4x
LjExMzg4My4xLjMiIGV4dGVuc2lvbj0iUE9DRF9IRDAwMDA0MCIgYXNzaWduaW5nQXV0aG9yaXR5
TmFtZT0iSEw3IENEQSBSMiIgLz4NCiAgPHRlbXBsYXRlSWQgcm9vdD0iIiBhc3NpZ25pbmdBdXRo
b3JpdHlOYW1lPSIiIC8+DQogIDxpZCByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAu
MyIgZXh0ZW5zaW9uPSIiIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkNEWCBDbGluaWNhbCBEb2N1
bWVudCBJRCIgLz4NCiAgPGNvZGUgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi4xIiBj
b2RlPSIiIGNvZGVTeXN0ZW1OYW1lPSJMT0lOQyBDb2RlIiBkaXNwbGF5TmFtZT0iIiAvPg0KICA8
dGl0bGU+PC90aXRsZT4NCiAgPGVmZmVjdGl2ZVRpbWUgdmFsdWU9IiIgLz4NCiAgPGNvbmZpZGVu
dGlhbGl0eUNvZGUgY29kZT0iTiIgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNS4yNSIg
Y29kZVN5c3RlbU5hbWU9IkNvbmZpZGVudGlhbGl0eSIgLz4NCiAgPGxhbmd1YWdlQ29kZSBjb2Rl
PSJlbi1DQSIgLz4KCiAgPHJlY29yZFRhcmdldCB0eXBlQ29kZT0iUkNUIiBjb250ZXh0Q29udHJv
bENvZGU9Ik9QIj4NCiAgICA8cGF0aWVudFJvbGUgY2xhc3NDb2RlPSJQQVQiPgogICAgIDwvcGF0
aWVudFJvbGU+CiAgPC9yZWNvcmRUYXJnZXQ+CgogIDxhdXRob3IgdHlwZUNvZGU9IkFVVCIgY29u
dGV4dENvbnRyb2xDb2RlPSJPUCI+DQogICAgPHRpbWUgdmFsdWU9IiIgLz4NCiAgICA8YXNzaWdu
ZWRBdXRob3IgY2xhc3NDb2RlPSJBU1NJR05FRCI+DQogICAgICA8aWQgbnVsbEZsYXZvcj0iTkEi
IC8+DQogICAgICA8YXNzaWduZWRBdXRob3JpbmdEZXZpY2UgY2xhc3NDb2RlPSJERVYiIGRldGVy
bWluZXJDb2RlPSJJTlNUQU5DRSI+DQogICAgICAgIDxzb2Z0d2FyZU5hbWU+T1NDQVJTUDwvc29m
dHdhcmVOYW1lPgogICAgICA8L2Fzc2lnbmVkQXV0aG9yaW5nRGV2aWNlPg0KICAgIDwvYXNzaWdu
ZWRBdXRob3I+DQogIDwvYXV0aG9yPgoKICA8Y3VzdG9kaWFuIHR5cGVDb2RlPSJDU1QiPg0KICAg
IDxhc3NpZ25lZEN1c3RvZGlhbiBjbGFzc0NvZGU9IkFTU0lHTkVEIj4NCiAgICAgIDxyZXByZXNl
bnRlZEN1c3RvZGlhbk9yZ2FuaXphdGlvbiBjbGFzc0NvZGU9Ik9SRyIgZGV0ZXJtaW5lckNvZGU9
IklOU1RBTkNFIj4NCiAgICAgIDwvcmVwcmVzZW50ZWRDdXN0b2RpYW5Pcmdhbml6YXRpb24+DQog
ICAgPC9hc3NpZ25lZEN1c3RvZGlhbj4NCiAgPC9jdXN0b2RpYW4+CgogIDxjb21wb25lbnQgdHlw
ZUNvZGU9IkNPTVAiIGNvbnRleHRDb25kdWN0aW9uSW5kPSJ0cnVlIj4KICAgIDxub25YTUxCb2R5
IGNsYXNzQ29kZT0iRE9DQk9EWSIgbW9vZENvZGU9IkVWTiI+CiAgICA8L25vblhNTEJvZHk+CiAg
PC9jb21wb25lbnQ+CjwvQ2xpbmljYWxEb2N1bWVudD4=</outboundTemplate>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>HL7V3</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.8.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.8.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.8.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.8.0">
                <stripNamespaces>true</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.8.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.8.0">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.8.0">
                <name>Submit Document Response</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>logger.debug(&apos;Submit Document Response&apos;);

try {
	// Store the response to be returned by the &quot;Source Connector&quot;
	responseMap.put(&apos;responseMessage&apos;, handleResponseMessage(responseStatus, responseStatusMessage, msg, function() {
		// Ack details
		tmp[&apos;ackDetail&apos;][&apos;ackId&apos;] = msg[&apos;id&apos;][&apos;@extension&apos;].toString();
		tmp[&apos;ackDetail&apos;][&apos;ackTime&apos;] = parseCDADateTime(msg[&apos;creationTime&apos;][&apos;@value&apos;].toString());
		tmp[&apos;ackDetail&apos;][&apos;messageId&apos;] = msg[&apos;acknowledgement&apos;][&apos;targetMessage&apos;][&apos;id&apos;][&apos;@extension&apos;].toString();
		tmp[&apos;ackDetail&apos;][&apos;status&apos;] = msg[&apos;acknowledgement&apos;][&apos;acknowledgementDetail&apos;][&apos;@typeCode&apos;].toString();
		
		// Payload
        	tmp[&apos;documentId&apos;] = channelMap.get(&apos;documentId&apos;);

        	// Process the CDA Document in &apos;CDA Document Parser&apos; channel, and return it in the response
        	var chResponse = router.routeMessage(&quot;CDA Document Parser&quot;, new XML(channelMap.get(&apos;document&apos;)));
		if (chResponse.status === SENT) {
			tmp[&apos;document&apos;] = JSON.parse(chResponse.message);
			tmp[&apos;document&apos;][&apos;cdaXML&apos;] = channelMap.get(&apos;document&apos;);

			var attachments = channelMap.get(&apos;attachments&apos;);
			if (attachments !== null) {
				tmp[&apos;document&apos;][&apos;attachments&apos;] = attachments;
			}
		} else {
			logger.error(&apos;Error parsing CDA Document &apos; + chResponse.statusMessage);
		}
        	
		// Message status
		if (tmp[&apos;ackDetail&apos;][&apos;status&apos;] === &apos;I&apos;) {
			tmp[&apos;status&apos;] = &quot;SUCCESS&quot;;
			
			logger.debug(&apos;MessageId &apos; + tmp[&apos;ackDetail&apos;][&apos;messageId&apos;] + &apos; was successfully sent.&apos;);
		} else {
			tmp[&apos;status&apos;] = &quot;ERROR&quot;;
			
			if (tmp[&apos;ackDetail&apos;][&apos;status&apos;] === &apos;E&apos;) {
				tmp[&apos;message&apos;] = msg[&apos;acknowledgement&apos;][&apos;acknowledgementDetail&apos;][&apos;text&apos;].toString();
			} else {
				tmp[&apos;message&apos;] = &apos;Unespected error. Status code: &apos; + tmp[&apos;ackDetail&apos;][&apos;status&apos;];
			}
			
			logger.error(&apos;MessagId &apos; + tmp[&apos;ackDetail&apos;][&apos;messageId&apos;] + &apos; returned the error: &apos; + tmp[&apos;message&apos;] + &quot;&apos;&quot;);
		}

		return tmp; // Return the transformed message to be converted on &apos;handleResponseMessage&apos;
	}));
	responseMap.put(&apos;responseStatus&apos;, &apos;200&apos;);
} catch(e) {
	logger.error(&quot;Error on &apos;Submit Document Response&apos;: &quot; + e);

	responseMap.put(&apos;responseMessage&apos;, createErrorMessage(e.message, null));
	responseMap.put(&apos;responseStatus&apos;, &apos;200&apos;);

	return ResponseFactory.getErrorResponse(responseMap.get(&apos;responseMessage&apos;));
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64">PE1DQ0lfSU4wMDAwMDJVVjAxIElUU1ZlcnNpb249IlhNTF8xLjAiIHhtbG5zPSJ1cm46aGw3LW9y
Zzp2MyI+CiAgICA8aWQgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjEiIGV4dGVu
c2lvbj0iMzA5M2RiYTItMTRjOC00OWU1LTkzYzUtMTk1NTVjN2FiYWNkIi8+CiAgICA8Y3JlYXRp
b25UaW1lIHZhbHVlPSIyMDE5MDMxNDAwMDMtMDcwMCIvPgogICAgPHZlcnNpb25Db2RlIGNvZGU9
IkJhbGxvdDIwMDlNYXkiLz4KICAgIDxpbnRlcmFjdGlvbklkIHJvb3Q9IjIuMTYuODQwLjEuMTEz
ODgzLjEuNiIgZXh0ZW5zaW9uPSJNQ0NJX0lOMDAwMDAyVVYwMSIvPgogICAgPHByb2Nlc3NpbmdD
b2RlIGNvZGU9IlAiLz4KICAgIDxwcm9jZXNzaW5nTW9kZUNvZGUgY29kZT0iVCIvPgogICAgPGFj
Y2VwdEFja0NvZGUgY29kZT0iTkUiLz4KICAgIDxyZWNlaXZlcj4KICAgICAgICA8ZGV2aWNlIGNs
YXNzQ29kZT0iREVWIiBkZXRlcm1pbmVyQ29kZT0iSU5TVEFOQ0UiPgogICAgICAgICAgICA8aWQg
bnVsbEZsYXZvcj0iTkEiLz4KICAgICAgICAgICAgPGFzQWdlbnQgY2xhc3NDb2RlPSJBR05UIj4K
ICAgICAgICAgICAgICAgIDxyZXByZXNlbnRlZE9yZ2FuaXphdGlvbiBjbGFzc0NvZGU9Ik9SRyIg
ZGV0ZXJtaW5lckNvZGU9IklOU1RBTkNFIj4KICAgICAgICAgICAgICAgICAgICA8aWQgcm9vdD0i
Mi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjIiIGV4dGVuc2lvbj0iY2R4cG9zdHByb2Qtb3Rj
YSIgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQ0RYIENsaW5pYyBJRCIvPgogICAgICAgICAgICAg
ICAgICAgIDxub3RpZmljYXRpb25QYXJ0eSB4c2k6bmlsPSJ0cnVlIiB4bWxuczp4c2k9Imh0dHA6
Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIi8+CiAgICAgICAgICAgICAgICA8
L3JlcHJlc2VudGVkT3JnYW5pemF0aW9uPgogICAgICAgICAgICA8L2FzQWdlbnQ+CiAgICAgICAg
PC9kZXZpY2U+CiAgICA8L3JlY2VpdmVyPgogICAgPHNlbmRlcj4KICAgICAgICA8ZGV2aWNlIGNs
YXNzQ29kZT0iREVWIiBkZXRlcm1pbmVyQ29kZT0iSU5TVEFOQ0UiPgogICAgICAgICAgICA8aWQg
bnVsbEZsYXZvcj0iTkEiLz4KICAgICAgICAgICAgPGFzQWdlbnQgY2xhc3NDb2RlPSJBR05UIj4K
ICAgICAgICAgICAgICAgIDxyZXByZXNlbnRlZE9yZ2FuaXphdGlvbiBjbGFzc0NvZGU9Ik9SRyIg
ZGV0ZXJtaW5lckNvZGU9IklOU1RBTkNFIj4KICAgICAgICAgICAgICAgICAgICA8aWQgcm9vdD0i
Mi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjIiIGV4dGVuc2lvbj0iW29iamVjdCBPYmplY3Rd
LFtvYmplY3QgT2JqZWN0XSIgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQ0RYIENsaW5pYyBJRCIv
PgogICAgICAgICAgICAgICAgICAgIDxub3RpZmljYXRpb25QYXJ0eSB4c2k6bmlsPSJ0cnVlIiB4
bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIi8+CiAg
ICAgICAgICAgICAgICA8L3JlcHJlc2VudGVkT3JnYW5pemF0aW9uPgogICAgICAgICAgICA8L2Fz
QWdlbnQ+CiAgICAgICAgPC9kZXZpY2U+CiAgICA8L3NlbmRlcj4KICAgIDxhY2tub3dsZWRnZW1l
bnQgdHlwZUNvZGU9IkNFIj4KICAgICAgICA8dGFyZ2V0TWVzc2FnZT4KICAgICAgICAgICAgPGlk
IHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC4xIiBleHRlbnNpb249IjZmZGZmZjJj
LTA2MTQtNGE3MS05NDg0LTU5YjA0NTFiZTc3ZCIvPgogICAgICAgIDwvdGFyZ2V0TWVzc2FnZT4K
ICAgICAgICA8YWNrbm93bGVkZ2VtZW50RGV0YWlsIHR5cGVDb2RlPSJFIj4KICAgICAgICAgICAg
PHRleHQ+CiAgICAgICAgRG9jdW1lbnQgZXJyb3JzICgyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4x
MDAuMyA0ZTRiN2VlMC1kMWQ4LTQ4NDQtYjA3NC05N2FhMzEyYWQ0MTYpOgpOb2RlIE5hbWU6ICdp
ZCcsIEF0dHJpYnV0ZSBOYW1lOiAnJyBOYW1lU3BhY2U6ICd1cm46aGw3LW9yZzp2MycsIFR5cGU6
ICdFbGVtZW50JywgTGluZTogMSwgUG9zaXRpb24gMTE1OCwgVmFsdWU6ICcnLCBTZXZlcml0eTog
J0Vycm9yJy4gICBEZXNjcmlwdGlvbjogVGhlIGVsZW1lbnQgJ3BhdGllbnRSb2xlJyBpbiBuYW1l
c3BhY2UgJ3VybjpobDctb3JnOnYzJyBoYXMgaW52YWxpZCBjaGlsZCBlbGVtZW50ICdpZCcgaW4g
bmFtZXNwYWNlICd1cm46aGw3LW9yZzp2MycuIExpc3Qgb2YgcG9zc2libGUgZWxlbWVudHMgZXhw
ZWN0ZWQ6ICdwcm92aWRlck9yZ2FuaXphdGlvbicgaW4gbmFtZXNwYWNlICd1cm46aGw3LW9yZzp2
MycuCk5vZGUgTmFtZTogJ2luZm9ybWF0aW9uUmVjaXBpZW50JywgQXR0cmlidXRlIE5hbWU6ICcn
IE5hbWVTcGFjZTogJ3VybjpobDctb3JnOnYzJywgVHlwZTogJ0VsZW1lbnQnLCBMaW5lOiAxLCBQ
b3NpdGlvbiAyNTM3LCBWYWx1ZTogJycsIFNldmVyaXR5OiAnRXJyb3InLiAgIERlc2NyaXB0aW9u
OiBUaGUgZWxlbWVudCAnQ2xpbmljYWxEb2N1bWVudCcgaW4gbmFtZXNwYWNlICd1cm46aGw3LW9y
Zzp2MycgaGFzIGludmFsaWQgY2hpbGQgZWxlbWVudCAnaW5mb3JtYXRpb25SZWNpcGllbnQnIGlu
IG5hbWVzcGFjZSAndXJuOmhsNy1vcmc6djMnLgogICAgICA8L3RleHQ+CiAgICAgICAgPC9hY2tu
b3dsZWRnZW1lbnREZXRhaWw+CiAgICA8L2Fja25vd2xlZGdlbWVudD4KPC9NQ0NJX0lOMDAwMDAy
VVYwMT4=</inboundTemplate>
            <outboundTemplate encoding="base64">ewoJIm9iaWJWZXJzaW9uIjogIiIsCgkic3RhdHVzIjogIiIsCgkibWVzc2FnZSI6ICIiLAoJImFj
a0RldGFpbCI6IHsKCQkiYWNrSWQiOiAiIiwKCQkiYWNrVGltZSI6ICIiLAoJCSJtZXNzYWdlSWQi
OiAiIiwKCQkic3RhdHVzIjogIiIKCX0sCgkiZG9jdW1lbnRJZCI6ICIiLAoJImRvY3VtZW50Ijog
e30KfQ==</outboundTemplate>
            <inboundDataType>HL7V3</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.8.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.8.0">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.8.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.8.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.8.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.8.0">
            <elements/>
          </filter>
          <transportName>JavaScript Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
        <connector version="3.8.0">
          <metaDataId>2</metaDataId>
          <name>Service List New Documents</name>
          <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.8.0">
            <pluginProperties/>
            <destinationConnectorProperties version="3.8.0">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>true</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
                <entry>
                  <string>3ee0c1db-83b0-49f6-9323-8884b5bd43da</string>
                  <string>CDA Parser</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <script>logger.debug(&apos;Service List New Documents&apos;);

importPackage(Packages.ca.uvic.leadlab.cdxconnector);

try {
	var client = new WSClientDocument($(&apos;cdx.base.url&apos;), $(&apos;username&apos;), $(&apos;password&apos;), $(&apos;certPath&apos;), $(&apos;certPass&apos;));

	// Call the WS method using CDX Connector
	var cdxResponse = client.listNewDocuments($(&apos;locationId&apos;));

	// return the raw response to be processed by the &apos;response transformers&apos;
	return ResponseFactory.getSentResponse(cdxResponse);
} catch (e) {
	logger.error(&quot;Error on &apos;Service List New Documents&apos;: &quot; + e);
	
	responseMap.put(&apos;responseMessage&apos;, createErrorMessage(&quot;Error on &apos;Service List New Documents&apos;: &quot; + e.message, null)); // create the error response
	responseMap.put(&apos;responseStatus&apos;, &apos;200&apos;); // return ok
}</script>
          </properties>
          <transformer version="3.8.0">
            <elements/>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>HL7V3</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.8.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.8.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.8.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.8.0">
                <stripNamespaces>true</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.8.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.8.0">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.8.0">
                <name>List New Documents Response</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>logger.debug(&apos;List New Documents Response&apos;);

try {
	// Store the response to be returned by the &quot;Source Connector&quot;
	responseMap.put(&apos;responseMessage&apos;, handleResponseMessage(responseStatus, responseStatusMessage, msg, function() {
		// Ack details
		tmp[&apos;ackDetail&apos;][&apos;ackId&apos;] = msg[&apos;id&apos;][&apos;@extension&apos;].toString();
		tmp[&apos;ackDetail&apos;][&apos;ackTime&apos;] = parseCDADateTime(msg[&apos;creationTime&apos;][&apos;@value&apos;].toString());
		tmp[&apos;ackDetail&apos;][&apos;messageId&apos;] = msg[&apos;acknowledgement&apos;][&apos;targetMessage&apos;][&apos;id&apos;][&apos;@extension&apos;].toString();
		tmp[&apos;ackDetail&apos;][&apos;status&apos;] = msg[&apos;controlActProcess&apos;][&apos;queryAck&apos;][&apos;queryResponseCode&apos;][&apos;@code&apos;].toString();
		
		// Payload
		for (var i = 0; i &lt; getArrayOrXmlLength(msg[&apos;controlActProcess&apos;][&apos;subject&apos;]); i++) { // Document list
			var target = msg[&apos;controlActProcess&apos;][&apos;subject&apos;][i][&apos;target&apos;];
			var document = {};
			
			document[&apos;documentId&apos;] = target[&apos;id&apos;][&apos;@extension&apos;].toString();
			
			document[&apos;template&apos;] = {};
			document[&apos;template&apos;][&apos;templateId&apos;] = target[&apos;templateId&apos;][&apos;@extension&apos;].toString();
			document[&apos;template&apos;][&apos;templateName&apos;] = target[&apos;templateId&apos;][&apos;@assigningAuthorityName&apos;].toString();
			
			document[&apos;loinc&apos;] = {};
			document[&apos;loinc&apos;][&apos;loincCode&apos;] = target[&apos;code&apos;][&apos;@code&apos;].toString();
			document[&apos;loinc&apos;][&apos;displayName&apos;] = target[&apos;code&apos;][&apos;@displayName&apos;].toString();
			
			document[&apos;effectiveTime&apos;] = parseCDADateTime(target[&apos;effectiveTime&apos;][&apos;@value&apos;].toString());
			
			tmp[&apos;documents&apos;][i] = document;
		}

		return handleQueryResultStatus(tmp, msg, &apos;documents&apos;); // Return the transformed message to be converted on &apos;handleResponseMessage&apos;
	}));
	responseMap.put(&apos;responseStatus&apos;, &apos;200&apos;);
} catch(e) {
	logger.error(&quot;Error on &apos;List New Documents Response&apos;: &quot; + e);

	responseMap.put(&apos;responseMessage&apos;, createErrorMessage(e.message, null));
	responseMap.put(&apos;responseStatus&apos;, &apos;200&apos;);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64">PFJDTVJfSU4wMDAwMzBVVjAxIHhtbG5zPSJ1cm46aGw3LW9yZzp2MyIgSVRTVmVyc2lvbj0iWE1M
XzEuMCI+CiAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQ0RYIE1lc3NhZ2UgSUQiIGV4
dGVuc2lvbj0iY2EzMGM5YzUtNWUyNy00OTlhLTg0MjEtNTQ0MmFmNDU1MDQwIiByb290PSIyLjE2
Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuMSIvPgogICAgPGNyZWF0aW9uVGltZSB2YWx1ZT0iMjAx
OTA0MDExNDQxLTA3MDAiLz4KICAgIDx2ZXJzaW9uQ29kZSBjb2RlPSJCYWxsb3QyMDA5TWF5Ii8+
CiAgICA8aW50ZXJhY3Rpb25JZCByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xLjYiLz4KICAgIDxw
cm9jZXNzaW5nQ29kZSBjb2RlPSJQIi8+CiAgICA8cHJvY2Vzc2luZ01vZGVDb2RlIGNvZGU9IlQi
Lz4KICAgIDxhY2NlcHRBY2tDb2RlIGNvZGU9Ik5FIi8+CiAgICA8cmVjZWl2ZXI+CiAgICAgICAg
PGRldmljZSBjbGFzc0NvZGU9IkRFViIgZGV0ZXJtaW5lckNvZGU9IklOU1RBTkNFIj4KICAgICAg
ICAgICAgPGlkIG51bGxGbGF2b3I9Ik5BIi8+CiAgICAgICAgICAgIDxhc0FnZW50IGNsYXNzQ29k
ZT0iQUdOVCI+CiAgICAgICAgICAgICAgICA8cmVwcmVzZW50ZWRPcmdhbml6YXRpb24gY2xhc3ND
b2RlPSJPUkciIGRldGVybWluZXJDb2RlPSJJTlNUQU5DRSI+CiAgICAgICAgICAgICAgICAgICAg
PGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkNEWCBDbGluaWMgSUQiIGV4dGVuc2lvbj0iY2R4
cG9zdHByb2Qtb3RjYSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjIiLz4KICAg
ICAgICAgICAgICAgIDwvcmVwcmVzZW50ZWRPcmdhbml6YXRpb24+CiAgICAgICAgICAgIDwvYXNB
Z2VudD4KICAgICAgICA8L2RldmljZT4KICAgIDwvcmVjZWl2ZXI+CiAgICA8c2VuZGVyPgogICAg
ICAgIDxkZXZpY2UgY2xhc3NDb2RlPSJERVYiIGRldGVybWluZXJDb2RlPSJJTlNUQU5DRSI+CiAg
ICAgICAgICAgIDxpZCBudWxsRmxhdm9yPSJOQSIvPgogICAgICAgICAgICA8YXNBZ2VudCBjbGFz
c0NvZGU9IkFHTlQiPgogICAgICAgICAgICAgICAgPHJlcHJlc2VudGVkT3JnYW5pemF0aW9uIGNs
YXNzQ29kZT0iT1JHIiBkZXRlcm1pbmVyQ29kZT0iSU5TVEFOQ0UiPgogICAgICAgICAgICAgICAg
ICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJDRFggQ2xpbmljIElEIiBleHRlbnNpb249
IkNEWElIQSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjIiLz4KICAgICAgICAg
ICAgICAgIDwvcmVwcmVzZW50ZWRPcmdhbml6YXRpb24+CiAgICAgICAgICAgIDwvYXNBZ2VudD4K
ICAgICAgICA8L2RldmljZT4KICAgIDwvc2VuZGVyPgogICAgPGFja25vd2xlZGdlbWVudCB0eXBl
Q29kZT0iQUEiPgogICAgICAgIDx0YXJnZXRNZXNzYWdlPgogICAgICAgICAgICA8aWQgYXNzaWdu
aW5nQXV0aG9yaXR5TmFtZT0iQ0RYIE1lc3NhZ2UgSUQiIGV4dGVuc2lvbj0iYWQwNTQxZTYtY2Vl
Mi00NDk3LWJmMzktNzM1NjIxZWZiZjMzIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4x
MDAuMSIvPgogICAgICAgIDwvdGFyZ2V0TWVzc2FnZT4KICAgIDwvYWNrbm93bGVkZ2VtZW50Pgog
ICAgPGNvbnRyb2xBY3RQcm9jZXNzIGNsYXNzQ29kZT0iQ0FDVCIgbW9vZENvZGU9IkFQVCI+CiAg
ICAgICAgPHN1YmplY3QgdHlwZUNvZGU9IlNVQkoiPgogICAgICAgICAgICA8dGFyZ2V0IGNsYXNz
Q29kZT0iRE9DQ0xJTiIgbW9vZENvZGU9IkVWTiI+CiAgICAgICAgICAgICAgICA8dGVtcGxhdGVJ
ZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJDRFggQ29udGVudCBUeXBlIiBleHRlbnNpb249IkNE
QSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjIwIi8+CiAgICAgICAgICAgICAg
ICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQ0RYIE1lc3NhZ2UgSUQiIGV4dGVuc2lvbj0i
OGE5NmMxZDctMjgyMy1lOTExLWE5NmEtMDA1MDU2OGM1NWE2IiByb290PSIyLjE2Ljg0MC4xLjEx
Mzg4My4zLjI3Ny4xMDAuMSIvPgogICAgICAgICAgICAgICAgPGNvZGUgY29kZT0iMi4xNi44NDAu
MS4xMTM4ODMuMy41MS42MC4yLjEiIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuMSIg
ZGlzcGxheU5hbWU9IkxhYiBSZXBvcnQgVGVtcGxhdGUiLz4KICAgICAgICAgICAgICAgIDx0ZXh0
IG1lZGlhVHlwZT0idGV4dC94bWwiPkF0dGFjaG1lbnRDb3VudDowfFRvdGFsQXR0YWNobWVudFNp
emU6MDwvdGV4dD4KICAgICAgICAgICAgICAgIDxzdGF0dXNDb2RlIGNvZGU9ImNvbXBsZXRlZCIv
PgogICAgICAgICAgICAgICAgPGVmZmVjdGl2ZVRpbWUgdmFsdWU9IjIwMTkwMTI4MTAxNS0wODAw
Ii8+CiAgICAgICAgICAgICAgICA8Y29uZmlkZW50aWFsaXR5Q29kZSBjb2RlPSJOIiBjb2RlU3lz
dGVtPSIyLjE2Ljg0MC4xLjExMzg4My42LjEiLz4KICAgICAgICAgICAgICAgIDxyZWNvcmRUYXJn
ZXQgbnVsbEZsYXZvcj0iTkEiIHR5cGVDb2RlPSJSQ1QiPgogICAgICAgICAgICAgICAgICAgIDxw
YXRpZW50IGNsYXNzQ29kZT0iUEFUIiBudWxsRmxhdm9yPSJOQSI+CiAgICAgICAgICAgICAgICAg
ICAgICAgIDxwYXRpZW50Tm9uUGVyc29uTGl2aW5nU3ViamVjdCB4bWxuczp4c2k9Imh0dHA6Ly93
d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6bmlsPSJ0cnVlIi8+CiAgICAg
ICAgICAgICAgICAgICAgICAgIDxwYXRpZW50UGVyc29uIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53
My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTpuaWw9InRydWUiLz4KICAgICAgICAg
ICAgICAgICAgICA8L3BhdGllbnQ+CiAgICAgICAgICAgICAgICA8L3JlY29yZFRhcmdldD4KICAg
ICAgICAgICAgICAgIDxhdXRob3IgbnVsbEZsYXZvcj0iTkEiIHR5cGVDb2RlPSJBVVQiPgogICAg
ICAgICAgICAgICAgICAgIDx0aW1lIG51bGxGbGF2b3I9Ik5BIi8+CiAgICAgICAgICAgICAgICAg
ICAgPGFzc2lnbmVkQXV0aG9yIGNsYXNzQ29kZT0iQVNTSUdORUQiIG51bGxGbGF2b3I9Ik5BIj4K
ICAgICAgICAgICAgICAgICAgICAgICAgPGlkIG51bGxGbGF2b3I9Ik5BIi8+CiAgICAgICAgICAg
ICAgICAgICAgICAgIDxhc3NpZ25lZEF1dGhvcmluZ0RldmljZSB4bWxuczp4c2k9Imh0dHA6Ly93
d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6bmlsPSJ0cnVlIi8+CiAgICAg
ICAgICAgICAgICAgICAgICAgIDxhc3NpZ25lZFBlcnNvbiB4bWxuczp4c2k9Imh0dHA6Ly93d3cu
dzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6bmlsPSJ0cnVlIi8+CiAgICAgICAg
ICAgICAgICAgICAgPC9hc3NpZ25lZEF1dGhvcj4KICAgICAgICAgICAgICAgIDwvYXV0aG9yPgog
ICAgICAgICAgICAgICAgPGN1c3RvZGlhbiBudWxsRmxhdm9yPSJOQSIgdHlwZUNvZGU9IkNTVCI+
CiAgICAgICAgICAgICAgICAgICAgPGFzc2lnbmVkQ3VzdG9kaWFuIGNsYXNzQ29kZT0iQVNTSUdO
RUQiIG51bGxGbGF2b3I9Ik5BIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHJlcHJlc2VudGVk
T3JnYW5pemF0aW9uIGNsYXNzQ29kZT0iTkFUIiBkZXRlcm1pbmVyQ29kZT0iSU5TVEFOQ0UiIG51
bGxGbGF2b3I9Ik5BIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZCBudWxsRmxhdm9y
PSJOQSIvPgogICAgICAgICAgICAgICAgICAgICAgICA8L3JlcHJlc2VudGVkT3JnYW5pemF0aW9u
PgogICAgICAgICAgICAgICAgICAgIDwvYXNzaWduZWRDdXN0b2RpYW4+CiAgICAgICAgICAgICAg
ICA8L2N1c3RvZGlhbj4KICAgICAgICAgICAgPC90YXJnZXQ+CiAgICAgICAgPC9zdWJqZWN0Pgog
ICAgICAgIDxzdWJqZWN0IHR5cGVDb2RlPSJTVUJKIj4KICAgICAgICAgICAgPHRhcmdldCBjbGFz
c0NvZGU9IkRPQ0NMSU4iIG1vb2RDb2RlPSJFVk4iPgogICAgICAgICAgICAgICAgPHRlbXBsYXRl
SWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQ0RYIENvbnRlbnQgVHlwZSIgZXh0ZW5zaW9uPSJD
REEiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC4yMCIvPgogICAgICAgICAgICAg
ICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkNEWCBNZXNzYWdlIElEIiBleHRlbnNpb249
IjFiOTIwYWM3LWUyMjQtZTkxMS1hOTZhLTAwNTA1NjhjNTVhNiIgcm9vdD0iMi4xNi44NDAuMS4x
MTM4ODMuMy4yNzcuMTAwLjEiLz4KICAgICAgICAgICAgICAgIDxjb2RlIGNvZGU9IjIuMTYuODQw
LjEuMTEzODgzLjMuNTEuNjAuMi4xIiBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42LjEi
IGRpc3BsYXlOYW1lPSJMYWIgUmVwb3J0IFRlbXBsYXRlIi8+CiAgICAgICAgICAgICAgICA8dGV4
dCBtZWRpYVR5cGU9InRleHQveG1sIj5BdHRhY2htZW50Q291bnQ6MHxUb3RhbEF0dGFjaG1lbnRT
aXplOjA8L3RleHQ+CiAgICAgICAgICAgICAgICA8c3RhdHVzQ29kZSBjb2RlPSJjb21wbGV0ZWQi
Lz4KICAgICAgICAgICAgICAgIDxlZmZlY3RpdmVUaW1lIHZhbHVlPSIyMDE5MDEzMDE0NTktMDgw
MCIvPgogICAgICAgICAgICAgICAgPGNvbmZpZGVudGlhbGl0eUNvZGUgY29kZT0iTiIgY29kZVN5
c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi4xIi8+CiAgICAgICAgICAgICAgICA8cmVjb3JkVGFy
Z2V0IG51bGxGbGF2b3I9Ik5BIiB0eXBlQ29kZT0iUkNUIj4KICAgICAgICAgICAgICAgICAgICA8
cGF0aWVudCBjbGFzc0NvZGU9IlBBVCIgbnVsbEZsYXZvcj0iTkEiPgogICAgICAgICAgICAgICAg
ICAgICAgICA8cGF0aWVudE5vblBlcnNvbkxpdmluZ1N1YmplY3QgeG1sbnM6eHNpPSJodHRwOi8v
d3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOm5pbD0idHJ1ZSIvPgogICAg
ICAgICAgICAgICAgICAgICAgICA8cGF0aWVudFBlcnNvbiB4bWxuczp4c2k9Imh0dHA6Ly93d3cu
dzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6bmlsPSJ0cnVlIi8+CiAgICAgICAg
ICAgICAgICAgICAgPC9wYXRpZW50PgogICAgICAgICAgICAgICAgPC9yZWNvcmRUYXJnZXQ+CiAg
ICAgICAgICAgICAgICA8YXV0aG9yIG51bGxGbGF2b3I9Ik5BIiB0eXBlQ29kZT0iQVVUIj4KICAg
ICAgICAgICAgICAgICAgICA8dGltZSBudWxsRmxhdm9yPSJOQSIvPgogICAgICAgICAgICAgICAg
ICAgIDxhc3NpZ25lZEF1dGhvciBjbGFzc0NvZGU9IkFTU0lHTkVEIiBudWxsRmxhdm9yPSJOQSI+
CiAgICAgICAgICAgICAgICAgICAgICAgIDxpZCBudWxsRmxhdm9yPSJOQSIvPgogICAgICAgICAg
ICAgICAgICAgICAgICA8YXNzaWduZWRBdXRob3JpbmdEZXZpY2UgeG1sbnM6eHNpPSJodHRwOi8v
d3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOm5pbD0idHJ1ZSIvPgogICAg
ICAgICAgICAgICAgICAgICAgICA8YXNzaWduZWRQZXJzb24geG1sbnM6eHNpPSJodHRwOi8vd3d3
LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOm5pbD0idHJ1ZSIvPgogICAgICAg
ICAgICAgICAgICAgIDwvYXNzaWduZWRBdXRob3I+CiAgICAgICAgICAgICAgICA8L2F1dGhvcj4K
ICAgICAgICAgICAgICAgIDxjdXN0b2RpYW4gbnVsbEZsYXZvcj0iTkEiIHR5cGVDb2RlPSJDU1Qi
PgogICAgICAgICAgICAgICAgICAgIDxhc3NpZ25lZEN1c3RvZGlhbiBjbGFzc0NvZGU9IkFTU0lH
TkVEIiBudWxsRmxhdm9yPSJOQSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxyZXByZXNlbnRl
ZE9yZ2FuaXphdGlvbiBjbGFzc0NvZGU9Ik5BVCIgZGV0ZXJtaW5lckNvZGU9IklOU1RBTkNFIiBu
dWxsRmxhdm9yPSJOQSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQgbnVsbEZsYXZv
cj0iTkEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9yZXByZXNlbnRlZE9yZ2FuaXphdGlv
bj4KICAgICAgICAgICAgICAgICAgICA8L2Fzc2lnbmVkQ3VzdG9kaWFuPgogICAgICAgICAgICAg
ICAgPC9jdXN0b2RpYW4+CiAgICAgICAgICAgIDwvdGFyZ2V0PgogICAgICAgIDwvc3ViamVjdD4K
ICAgICAgICA8c3ViamVjdCB0eXBlQ29kZT0iU1VCSiI+CiAgICAgICAgICAgIDx0YXJnZXQgY2xh
c3NDb2RlPSJET0NDTElOIiBtb29kQ29kZT0iRVZOIj4KICAgICAgICAgICAgICAgIDx0ZW1wbGF0
ZUlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkNEWCBDb250ZW50IFR5cGUiIGV4dGVuc2lvbj0i
Q0RBIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuMjAiLz4KICAgICAgICAgICAg
ICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJDRFggTWVzc2FnZSBJRCIgZXh0ZW5zaW9u
PSJhOWRkMDVkOC05ZTI1LWU5MTEtYTk2YS0wMDUwNTY4YzU1YTYiIHJvb3Q9IjIuMTYuODQwLjEu
MTEzODgzLjMuMjc3LjEwMC4xIi8+CiAgICAgICAgICAgICAgICA8Y29kZSBjb2RlPSIyLjE2Ljg0
MC4xLjExMzg4My4zLjUxLjYwLjIuMSIgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi4x
IiBkaXNwbGF5TmFtZT0iTGFiIFJlcG9ydCBUZW1wbGF0ZSIvPgogICAgICAgICAgICAgICAgPHRl
eHQgbWVkaWFUeXBlPSJ0ZXh0L3htbCI+QXR0YWNobWVudENvdW50OjB8VG90YWxBdHRhY2htZW50
U2l6ZTowPC90ZXh0PgogICAgICAgICAgICAgICAgPHN0YXR1c0NvZGUgY29kZT0iY29tcGxldGVk
Ii8+CiAgICAgICAgICAgICAgICA8ZWZmZWN0aXZlVGltZSB2YWx1ZT0iMjAxOTAxMzExMzI1LTA4
MDAiLz4KICAgICAgICAgICAgICAgIDxjb25maWRlbnRpYWxpdHlDb2RlIGNvZGU9Ik4iIGNvZGVT
eXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuMSIvPgogICAgICAgICAgICAgICAgPHJlY29yZFRh
cmdldCBudWxsRmxhdm9yPSJOQSIgdHlwZUNvZGU9IlJDVCI+CiAgICAgICAgICAgICAgICAgICAg
PHBhdGllbnQgY2xhc3NDb2RlPSJQQVQiIG51bGxGbGF2b3I9Ik5BIj4KICAgICAgICAgICAgICAg
ICAgICAgICAgPHBhdGllbnROb25QZXJzb25MaXZpbmdTdWJqZWN0IHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTpuaWw9InRydWUiLz4KICAg
ICAgICAgICAgICAgICAgICAgICAgPHBhdGllbnRQZXJzb24geG1sbnM6eHNpPSJodHRwOi8vd3d3
LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOm5pbD0idHJ1ZSIvPgogICAgICAg
ICAgICAgICAgICAgIDwvcGF0aWVudD4KICAgICAgICAgICAgICAgIDwvcmVjb3JkVGFyZ2V0Pgog
ICAgICAgICAgICAgICAgPGF1dGhvciBudWxsRmxhdm9yPSJOQSIgdHlwZUNvZGU9IkFVVCI+CiAg
ICAgICAgICAgICAgICAgICAgPHRpbWUgbnVsbEZsYXZvcj0iTkEiLz4KICAgICAgICAgICAgICAg
ICAgICA8YXNzaWduZWRBdXRob3IgY2xhc3NDb2RlPSJBU1NJR05FRCIgbnVsbEZsYXZvcj0iTkEi
PgogICAgICAgICAgICAgICAgICAgICAgICA8aWQgbnVsbEZsYXZvcj0iTkEiLz4KICAgICAgICAg
ICAgICAgICAgICAgICAgPGFzc2lnbmVkQXV0aG9yaW5nRGV2aWNlIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTpuaWw9InRydWUiLz4KICAg
ICAgICAgICAgICAgICAgICAgICAgPGFzc2lnbmVkUGVyc29uIHhtbG5zOnhzaT0iaHR0cDovL3d3
dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTpuaWw9InRydWUiLz4KICAgICAg
ICAgICAgICAgICAgICA8L2Fzc2lnbmVkQXV0aG9yPgogICAgICAgICAgICAgICAgPC9hdXRob3I+
CiAgICAgICAgICAgICAgICA8Y3VzdG9kaWFuIG51bGxGbGF2b3I9Ik5BIiB0eXBlQ29kZT0iQ1NU
Ij4KICAgICAgICAgICAgICAgICAgICA8YXNzaWduZWRDdXN0b2RpYW4gY2xhc3NDb2RlPSJBU1NJ
R05FRCIgbnVsbEZsYXZvcj0iTkEiPgogICAgICAgICAgICAgICAgICAgICAgICA8cmVwcmVzZW50
ZWRPcmdhbml6YXRpb24gY2xhc3NDb2RlPSJOQVQiIGRldGVybWluZXJDb2RlPSJJTlNUQU5DRSIg
bnVsbEZsYXZvcj0iTkEiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkIG51bGxGbGF2
b3I9Ik5BIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcmVwcmVzZW50ZWRPcmdhbml6YXRp
b24+CiAgICAgICAgICAgICAgICAgICAgPC9hc3NpZ25lZEN1c3RvZGlhbj4KICAgICAgICAgICAg
ICAgIDwvY3VzdG9kaWFuPgogICAgICAgICAgICA8L3RhcmdldD4KICAgICAgICA8L3N1YmplY3Q+
CiAgICAgICAgPHN1YmplY3QgdHlwZUNvZGU9IlNVQkoiPgogICAgICAgICAgICA8dGFyZ2V0IGNs
YXNzQ29kZT0iRE9DQ0xJTiIgbW9vZENvZGU9IkVWTiI+CiAgICAgICAgICAgICAgICA8dGVtcGxh
dGVJZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJDRFggQ29udGVudCBUeXBlIiBleHRlbnNpb249
IkNEQSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjIwIi8+CiAgICAgICAgICAg
ICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQ0RYIE1lc3NhZ2UgSUQiIGV4dGVuc2lv
bj0iZTdhNGVmMGEtNzEyOS1lOTExLWE5NmEtMDA1MDU2OGM1NWE2IiByb290PSIyLjE2Ljg0MC4x
LjExMzg4My4zLjI3Ny4xMDAuMSIvPgogICAgICAgICAgICAgICAgPGNvZGUgY29kZT0iMi4xNi44
NDAuMS4xMTM4ODMuMy41MS42MC4yLjEiIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYu
MSIgZGlzcGxheU5hbWU9IkxhYiBSZXBvcnQgVGVtcGxhdGUiLz4KICAgICAgICAgICAgICAgIDx0
ZXh0IG1lZGlhVHlwZT0idGV4dC94bWwiPkF0dGFjaG1lbnRDb3VudDowfFRvdGFsQXR0YWNobWVu
dFNpemU6MDwvdGV4dD4KICAgICAgICAgICAgICAgIDxzdGF0dXNDb2RlIGNvZGU9ImNvbXBsZXRl
ZCIvPgogICAgICAgICAgICAgICAgPGVmZmVjdGl2ZVRpbWUgdmFsdWU9IjIwMTkwMjA1MTAwNy0w
ODAwIi8+CiAgICAgICAgICAgICAgICA8Y29uZmlkZW50aWFsaXR5Q29kZSBjb2RlPSJOIiBjb2Rl
U3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42LjEiLz4KICAgICAgICAgICAgICAgIDxyZWNvcmRU
YXJnZXQgbnVsbEZsYXZvcj0iTkEiIHR5cGVDb2RlPSJSQ1QiPgogICAgICAgICAgICAgICAgICAg
IDxwYXRpZW50IGNsYXNzQ29kZT0iUEFUIiBudWxsRmxhdm9yPSJOQSI+CiAgICAgICAgICAgICAg
ICAgICAgICAgIDxwYXRpZW50Tm9uUGVyc29uTGl2aW5nU3ViamVjdCB4bWxuczp4c2k9Imh0dHA6
Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6bmlsPSJ0cnVlIi8+CiAg
ICAgICAgICAgICAgICAgICAgICAgIDxwYXRpZW50UGVyc29uIHhtbG5zOnhzaT0iaHR0cDovL3d3
dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTpuaWw9InRydWUiLz4KICAgICAg
ICAgICAgICAgICAgICA8L3BhdGllbnQ+CiAgICAgICAgICAgICAgICA8L3JlY29yZFRhcmdldD4K
ICAgICAgICAgICAgICAgIDxhdXRob3IgbnVsbEZsYXZvcj0iTkEiIHR5cGVDb2RlPSJBVVQiPgog
ICAgICAgICAgICAgICAgICAgIDx0aW1lIG51bGxGbGF2b3I9Ik5BIi8+CiAgICAgICAgICAgICAg
ICAgICAgPGFzc2lnbmVkQXV0aG9yIGNsYXNzQ29kZT0iQVNTSUdORUQiIG51bGxGbGF2b3I9Ik5B
Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGlkIG51bGxGbGF2b3I9Ik5BIi8+CiAgICAgICAg
ICAgICAgICAgICAgICAgIDxhc3NpZ25lZEF1dGhvcmluZ0RldmljZSB4bWxuczp4c2k9Imh0dHA6
Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6bmlsPSJ0cnVlIi8+CiAg
ICAgICAgICAgICAgICAgICAgICAgIDxhc3NpZ25lZFBlcnNvbiB4bWxuczp4c2k9Imh0dHA6Ly93
d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6bmlsPSJ0cnVlIi8+CiAgICAg
ICAgICAgICAgICAgICAgPC9hc3NpZ25lZEF1dGhvcj4KICAgICAgICAgICAgICAgIDwvYXV0aG9y
PgogICAgICAgICAgICAgICAgPGN1c3RvZGlhbiBudWxsRmxhdm9yPSJOQSIgdHlwZUNvZGU9IkNT
VCI+CiAgICAgICAgICAgICAgICAgICAgPGFzc2lnbmVkQ3VzdG9kaWFuIGNsYXNzQ29kZT0iQVNT
SUdORUQiIG51bGxGbGF2b3I9Ik5BIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHJlcHJlc2Vu
dGVkT3JnYW5pemF0aW9uIGNsYXNzQ29kZT0iTkFUIiBkZXRlcm1pbmVyQ29kZT0iSU5TVEFOQ0Ui
IG51bGxGbGF2b3I9Ik5BIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZCBudWxsRmxh
dm9yPSJOQSIvPgogICAgICAgICAgICAgICAgICAgICAgICA8L3JlcHJlc2VudGVkT3JnYW5pemF0
aW9uPgogICAgICAgICAgICAgICAgICAgIDwvYXNzaWduZWRDdXN0b2RpYW4+CiAgICAgICAgICAg
ICAgICA8L2N1c3RvZGlhbj4KICAgICAgICAgICAgPC90YXJnZXQ+CiAgICAgICAgPC9zdWJqZWN0
PgogICAgICAgIDxzdWJqZWN0IHR5cGVDb2RlPSJTVUJKIj4KICAgICAgICAgICAgPHRhcmdldCBj
bGFzc0NvZGU9IkRPQ0NMSU4iIG1vb2RDb2RlPSJFVk4iPgogICAgICAgICAgICAgICAgPHRlbXBs
YXRlSWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQ0RYIENvbnRlbnQgVHlwZSIgZXh0ZW5zaW9u
PSJDREEiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC4yMCIvPgogICAgICAgICAg
ICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkNEWCBNZXNzYWdlIElEIiBleHRlbnNp
b249IjE4NzBiMzE4LTcxMjktZTkxMS1hOTZhLTAwNTA1NjhjNTVhNiIgcm9vdD0iMi4xNi44NDAu
MS4xMTM4ODMuMy4yNzcuMTAwLjEiLz4KICAgICAgICAgICAgICAgIDxjb2RlIGNvZGU9IjIuMTYu
ODQwLjEuMTEzODgzLjMuNTEuNjAuMi4xIiBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42
LjEiIGRpc3BsYXlOYW1lPSJMYWIgUmVwb3J0IFRlbXBsYXRlIi8+CiAgICAgICAgICAgICAgICA8
dGV4dCBtZWRpYVR5cGU9InRleHQveG1sIj5BdHRhY2htZW50Q291bnQ6MHxUb3RhbEF0dGFjaG1l
bnRTaXplOjA8L3RleHQ+CiAgICAgICAgICAgICAgICA8c3RhdHVzQ29kZSBjb2RlPSJjb21wbGV0
ZWQiLz4KICAgICAgICAgICAgICAgIDxlZmZlY3RpdmVUaW1lIHZhbHVlPSIyMDE5MDIwNTEwMDgt
MDgwMCIvPgogICAgICAgICAgICAgICAgPGNvbmZpZGVudGlhbGl0eUNvZGUgY29kZT0iTiIgY29k
ZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi4xIi8+CiAgICAgICAgICAgICAgICA8cmVjb3Jk
VGFyZ2V0IG51bGxGbGF2b3I9Ik5BIiB0eXBlQ29kZT0iUkNUIj4KICAgICAgICAgICAgICAgICAg
ICA8cGF0aWVudCBjbGFzc0NvZGU9IlBBVCIgbnVsbEZsYXZvcj0iTkEiPgogICAgICAgICAgICAg
ICAgICAgICAgICA8cGF0aWVudE5vblBlcnNvbkxpdmluZ1N1YmplY3QgeG1sbnM6eHNpPSJodHRw
Oi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOm5pbD0idHJ1ZSIvPgog
ICAgICAgICAgICAgICAgICAgICAgICA8cGF0aWVudFBlcnNvbiB4bWxuczp4c2k9Imh0dHA6Ly93
d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6bmlsPSJ0cnVlIi8+CiAgICAg
ICAgICAgICAgICAgICAgPC9wYXRpZW50PgogICAgICAgICAgICAgICAgPC9yZWNvcmRUYXJnZXQ+
CiAgICAgICAgICAgICAgICA8YXV0aG9yIG51bGxGbGF2b3I9Ik5BIiB0eXBlQ29kZT0iQVVUIj4K
ICAgICAgICAgICAgICAgICAgICA8dGltZSBudWxsRmxhdm9yPSJOQSIvPgogICAgICAgICAgICAg
ICAgICAgIDxhc3NpZ25lZEF1dGhvciBjbGFzc0NvZGU9IkFTU0lHTkVEIiBudWxsRmxhdm9yPSJO
QSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpZCBudWxsRmxhdm9yPSJOQSIvPgogICAgICAg
ICAgICAgICAgICAgICAgICA8YXNzaWduZWRBdXRob3JpbmdEZXZpY2UgeG1sbnM6eHNpPSJodHRw
Oi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOm5pbD0idHJ1ZSIvPgog
ICAgICAgICAgICAgICAgICAgICAgICA8YXNzaWduZWRQZXJzb24geG1sbnM6eHNpPSJodHRwOi8v
d3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOm5pbD0idHJ1ZSIvPgogICAg
ICAgICAgICAgICAgICAgIDwvYXNzaWduZWRBdXRob3I+CiAgICAgICAgICAgICAgICA8L2F1dGhv
cj4KICAgICAgICAgICAgICAgIDxjdXN0b2RpYW4gbnVsbEZsYXZvcj0iTkEiIHR5cGVDb2RlPSJD
U1QiPgogICAgICAgICAgICAgICAgICAgIDxhc3NpZ25lZEN1c3RvZGlhbiBjbGFzc0NvZGU9IkFT
U0lHTkVEIiBudWxsRmxhdm9yPSJOQSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxyZXByZXNl
bnRlZE9yZ2FuaXphdGlvbiBjbGFzc0NvZGU9Ik5BVCIgZGV0ZXJtaW5lckNvZGU9IklOU1RBTkNF
IiBudWxsRmxhdm9yPSJOQSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQgbnVsbEZs
YXZvcj0iTkEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9yZXByZXNlbnRlZE9yZ2FuaXph
dGlvbj4KICAgICAgICAgICAgICAgICAgICA8L2Fzc2lnbmVkQ3VzdG9kaWFuPgogICAgICAgICAg
ICAgICAgPC9jdXN0b2RpYW4+CiAgICAgICAgICAgIDwvdGFyZ2V0PgogICAgICAgIDwvc3ViamVj
dD4KICAgICAgICA8c3ViamVjdCB0eXBlQ29kZT0iU1VCSiI+CiAgICAgICAgICAgIDx0YXJnZXQg
Y2xhc3NDb2RlPSJET0NDTElOIiBtb29kQ29kZT0iRVZOIj4KICAgICAgICAgICAgICAgIDx0ZW1w
bGF0ZUlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkNEWCBDb250ZW50IFR5cGUiIGV4dGVuc2lv
bj0iQ0RBIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuMjAiLz4KICAgICAgICAg
ICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJDRFggTWVzc2FnZSBJRCIgZXh0ZW5z
aW9uPSI2ZWQ5NGY3NC03MTI5LWU5MTEtYTk2YS0wMDUwNTY4YzU1YTYiIHJvb3Q9IjIuMTYuODQw
LjEuMTEzODgzLjMuMjc3LjEwMC4xIi8+CiAgICAgICAgICAgICAgICA8Y29kZSBjb2RlPSIyLjE2
Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuMSIgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMu
Ni4xIiBkaXNwbGF5TmFtZT0iTGFiIFJlcG9ydCBUZW1wbGF0ZSIvPgogICAgICAgICAgICAgICAg
PHRleHQgbWVkaWFUeXBlPSJ0ZXh0L3htbCI+QXR0YWNobWVudENvdW50OjB8VG90YWxBdHRhY2ht
ZW50U2l6ZTowPC90ZXh0PgogICAgICAgICAgICAgICAgPHN0YXR1c0NvZGUgY29kZT0iY29tcGxl
dGVkIi8+CiAgICAgICAgICAgICAgICA8ZWZmZWN0aXZlVGltZSB2YWx1ZT0iMjAxOTAyMDUxMDEw
LTA4MDAiLz4KICAgICAgICAgICAgICAgIDxjb25maWRlbnRpYWxpdHlDb2RlIGNvZGU9Ik4iIGNv
ZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuMSIvPgogICAgICAgICAgICAgICAgPHJlY29y
ZFRhcmdldCBudWxsRmxhdm9yPSJOQSIgdHlwZUNvZGU9IlJDVCI+CiAgICAgICAgICAgICAgICAg
ICAgPHBhdGllbnQgY2xhc3NDb2RlPSJQQVQiIG51bGxGbGF2b3I9Ik5BIj4KICAgICAgICAgICAg
ICAgICAgICAgICAgPHBhdGllbnROb25QZXJzb25MaXZpbmdTdWJqZWN0IHhtbG5zOnhzaT0iaHR0
cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTpuaWw9InRydWUiLz4K
ICAgICAgICAgICAgICAgICAgICAgICAgPHBhdGllbnRQZXJzb24geG1sbnM6eHNpPSJodHRwOi8v
d3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOm5pbD0idHJ1ZSIvPgogICAg
ICAgICAgICAgICAgICAgIDwvcGF0aWVudD4KICAgICAgICAgICAgICAgIDwvcmVjb3JkVGFyZ2V0
PgogICAgICAgICAgICAgICAgPGF1dGhvciBudWxsRmxhdm9yPSJOQSIgdHlwZUNvZGU9IkFVVCI+
CiAgICAgICAgICAgICAgICAgICAgPHRpbWUgbnVsbEZsYXZvcj0iTkEiLz4KICAgICAgICAgICAg
ICAgICAgICA8YXNzaWduZWRBdXRob3IgY2xhc3NDb2RlPSJBU1NJR05FRCIgbnVsbEZsYXZvcj0i
TkEiPgogICAgICAgICAgICAgICAgICAgICAgICA8aWQgbnVsbEZsYXZvcj0iTkEiLz4KICAgICAg
ICAgICAgICAgICAgICAgICAgPGFzc2lnbmVkQXV0aG9yaW5nRGV2aWNlIHhtbG5zOnhzaT0iaHR0
cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTpuaWw9InRydWUiLz4K
ICAgICAgICAgICAgICAgICAgICAgICAgPGFzc2lnbmVkUGVyc29uIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTpuaWw9InRydWUiLz4KICAg
ICAgICAgICAgICAgICAgICA8L2Fzc2lnbmVkQXV0aG9yPgogICAgICAgICAgICAgICAgPC9hdXRo
b3I+CiAgICAgICAgICAgICAgICA8Y3VzdG9kaWFuIG51bGxGbGF2b3I9Ik5BIiB0eXBlQ29kZT0i
Q1NUIj4KICAgICAgICAgICAgICAgICAgICA8YXNzaWduZWRDdXN0b2RpYW4gY2xhc3NDb2RlPSJB
U1NJR05FRCIgbnVsbEZsYXZvcj0iTkEiPgogICAgICAgICAgICAgICAgICAgICAgICA8cmVwcmVz
ZW50ZWRPcmdhbml6YXRpb24gY2xhc3NDb2RlPSJOQVQiIGRldGVybWluZXJDb2RlPSJJTlNUQU5D
RSIgbnVsbEZsYXZvcj0iTkEiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkIG51bGxG
bGF2b3I9Ik5BIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcmVwcmVzZW50ZWRPcmdhbml6
YXRpb24+CiAgICAgICAgICAgICAgICAgICAgPC9hc3NpZ25lZEN1c3RvZGlhbj4KICAgICAgICAg
ICAgICAgIDwvY3VzdG9kaWFuPgogICAgICAgICAgICA8L3RhcmdldD4KICAgICAgICA8L3N1Ympl
Y3Q+CiAgICAgICAgPHN1YmplY3QgdHlwZUNvZGU9IlNVQkoiPgogICAgICAgICAgICA8dGFyZ2V0
IGNsYXNzQ29kZT0iRE9DQ0xJTiIgbW9vZENvZGU9IkVWTiI+CiAgICAgICAgICAgICAgICA8dGVt
cGxhdGVJZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJDRFggQ29udGVudCBUeXBlIiBleHRlbnNp
b249IkNEQSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjIwIi8+CiAgICAgICAg
ICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQ0RYIE1lc3NhZ2UgSUQiIGV4dGVu
c2lvbj0iMTE0NGI4MjYtN2EyZC1lOTExLWE5NmEtMDA1MDU2OGM1NWE2IiByb290PSIyLjE2Ljg0
MC4xLjExMzg4My4zLjI3Ny4xMDAuMSIvPgogICAgICAgICAgICAgICAgPGNvZGUgY29kZT0iMi4x
Ni44NDAuMS4xMTM4ODMuMy41MS42MC4yLjEiIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgz
LjYuMSIgZGlzcGxheU5hbWU9IkxhYiBSZXBvcnQgVGVtcGxhdGUiLz4KICAgICAgICAgICAgICAg
IDx0ZXh0IG1lZGlhVHlwZT0idGV4dC94bWwiPkF0dGFjaG1lbnRDb3VudDowfFRvdGFsQXR0YWNo
bWVudFNpemU6MDwvdGV4dD4KICAgICAgICAgICAgICAgIDxzdGF0dXNDb2RlIGNvZGU9ImNvbXBs
ZXRlZCIvPgogICAgICAgICAgICAgICAgPGVmZmVjdGl2ZVRpbWUgdmFsdWU9IjIwMTkwMjEwMTMy
My0wODAwIi8+CiAgICAgICAgICAgICAgICA8Y29uZmlkZW50aWFsaXR5Q29kZSBjb2RlPSJOIiBj
b2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42LjEiLz4KICAgICAgICAgICAgICAgIDxyZWNv
cmRUYXJnZXQgbnVsbEZsYXZvcj0iTkEiIHR5cGVDb2RlPSJSQ1QiPgogICAgICAgICAgICAgICAg
ICAgIDxwYXRpZW50IGNsYXNzQ29kZT0iUEFUIiBudWxsRmxhdm9yPSJOQSI+CiAgICAgICAgICAg
ICAgICAgICAgICAgIDxwYXRpZW50Tm9uUGVyc29uTGl2aW5nU3ViamVjdCB4bWxuczp4c2k9Imh0
dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6bmlsPSJ0cnVlIi8+
CiAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRpZW50UGVyc29uIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTpuaWw9InRydWUiLz4KICAg
ICAgICAgICAgICAgICAgICA8L3BhdGllbnQ+CiAgICAgICAgICAgICAgICA8L3JlY29yZFRhcmdl
dD4KICAgICAgICAgICAgICAgIDxhdXRob3IgbnVsbEZsYXZvcj0iTkEiIHR5cGVDb2RlPSJBVVQi
PgogICAgICAgICAgICAgICAgICAgIDx0aW1lIG51bGxGbGF2b3I9Ik5BIi8+CiAgICAgICAgICAg
ICAgICAgICAgPGFzc2lnbmVkQXV0aG9yIGNsYXNzQ29kZT0iQVNTSUdORUQiIG51bGxGbGF2b3I9
Ik5BIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGlkIG51bGxGbGF2b3I9Ik5BIi8+CiAgICAg
ICAgICAgICAgICAgICAgICAgIDxhc3NpZ25lZEF1dGhvcmluZ0RldmljZSB4bWxuczp4c2k9Imh0
dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6bmlsPSJ0cnVlIi8+
CiAgICAgICAgICAgICAgICAgICAgICAgIDxhc3NpZ25lZFBlcnNvbiB4bWxuczp4c2k9Imh0dHA6
Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6bmlsPSJ0cnVlIi8+CiAg
ICAgICAgICAgICAgICAgICAgPC9hc3NpZ25lZEF1dGhvcj4KICAgICAgICAgICAgICAgIDwvYXV0
aG9yPgogICAgICAgICAgICAgICAgPGN1c3RvZGlhbiBudWxsRmxhdm9yPSJOQSIgdHlwZUNvZGU9
IkNTVCI+CiAgICAgICAgICAgICAgICAgICAgPGFzc2lnbmVkQ3VzdG9kaWFuIGNsYXNzQ29kZT0i
QVNTSUdORUQiIG51bGxGbGF2b3I9Ik5BIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHJlcHJl
c2VudGVkT3JnYW5pemF0aW9uIGNsYXNzQ29kZT0iTkFUIiBkZXRlcm1pbmVyQ29kZT0iSU5TVEFO
Q0UiIG51bGxGbGF2b3I9Ik5BIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZCBudWxs
Rmxhdm9yPSJOQSIvPgogICAgICAgICAgICAgICAgICAgICAgICA8L3JlcHJlc2VudGVkT3JnYW5p
emF0aW9uPgogICAgICAgICAgICAgICAgICAgIDwvYXNzaWduZWRDdXN0b2RpYW4+CiAgICAgICAg
ICAgICAgICA8L2N1c3RvZGlhbj4KICAgICAgICAgICAgPC90YXJnZXQ+CiAgICAgICAgPC9zdWJq
ZWN0PgogICAgICAgIDxzdWJqZWN0IHR5cGVDb2RlPSJTVUJKIj4KICAgICAgICAgICAgPHRhcmdl
dCBjbGFzc0NvZGU9IkRPQ0NMSU4iIG1vb2RDb2RlPSJFVk4iPgogICAgICAgICAgICAgICAgPHRl
bXBsYXRlSWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQ0RYIENvbnRlbnQgVHlwZSIgZXh0ZW5z
aW9uPSJDREEiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC4yMCIvPgogICAgICAg
ICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkNEWCBNZXNzYWdlIElEIiBleHRl
bnNpb249ImUwMDVmOWNjLTFkM2EtZTkxMS1hOTZhLTAwNTA1NjhjNTVhNiIgcm9vdD0iMi4xNi44
NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjEiLz4KICAgICAgICAgICAgICAgIDxjb2RlIGNvZGU9IjIu
MTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi4xIiBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4
My42LjEiIGRpc3BsYXlOYW1lPSJMYWIgUmVwb3J0IFRlbXBsYXRlIi8+CiAgICAgICAgICAgICAg
ICA8dGV4dCBtZWRpYVR5cGU9InRleHQveG1sIj5BdHRhY2htZW50Q291bnQ6MHxUb3RhbEF0dGFj
aG1lbnRTaXplOjA8L3RleHQ+CiAgICAgICAgICAgICAgICA8c3RhdHVzQ29kZSBjb2RlPSJjb21w
bGV0ZWQiLz4KICAgICAgICAgICAgICAgIDxlZmZlY3RpdmVUaW1lIHZhbHVlPSIyMDE5MDIyNjE1
MjUtMDgwMCIvPgogICAgICAgICAgICAgICAgPGNvbmZpZGVudGlhbGl0eUNvZGUgY29kZT0iTiIg
Y29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi4xIi8+CiAgICAgICAgICAgICAgICA8cmVj
b3JkVGFyZ2V0IG51bGxGbGF2b3I9Ik5BIiB0eXBlQ29kZT0iUkNUIj4KICAgICAgICAgICAgICAg
ICAgICA8cGF0aWVudCBjbGFzc0NvZGU9IlBBVCIgbnVsbEZsYXZvcj0iTkEiPgogICAgICAgICAg
ICAgICAgICAgICAgICA8cGF0aWVudE5vblBlcnNvbkxpdmluZ1N1YmplY3QgeG1sbnM6eHNpPSJo
dHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOm5pbD0idHJ1ZSIv
PgogICAgICAgICAgICAgICAgICAgICAgICA8cGF0aWVudFBlcnNvbiB4bWxuczp4c2k9Imh0dHA6
Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6bmlsPSJ0cnVlIi8+CiAg
ICAgICAgICAgICAgICAgICAgPC9wYXRpZW50PgogICAgICAgICAgICAgICAgPC9yZWNvcmRUYXJn
ZXQ+CiAgICAgICAgICAgICAgICA8YXV0aG9yIG51bGxGbGF2b3I9Ik5BIiB0eXBlQ29kZT0iQVVU
Ij4KICAgICAgICAgICAgICAgICAgICA8dGltZSBudWxsRmxhdm9yPSJOQSIvPgogICAgICAgICAg
ICAgICAgICAgIDxhc3NpZ25lZEF1dGhvciBjbGFzc0NvZGU9IkFTU0lHTkVEIiBudWxsRmxhdm9y
PSJOQSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpZCBudWxsRmxhdm9yPSJOQSIvPgogICAg
ICAgICAgICAgICAgICAgICAgICA8YXNzaWduZWRBdXRob3JpbmdEZXZpY2UgeG1sbnM6eHNpPSJo
dHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOm5pbD0idHJ1ZSIv
PgogICAgICAgICAgICAgICAgICAgICAgICA8YXNzaWduZWRQZXJzb24geG1sbnM6eHNpPSJodHRw
Oi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOm5pbD0idHJ1ZSIvPgog
ICAgICAgICAgICAgICAgICAgIDwvYXNzaWduZWRBdXRob3I+CiAgICAgICAgICAgICAgICA8L2F1
dGhvcj4KICAgICAgICAgICAgICAgIDxjdXN0b2RpYW4gbnVsbEZsYXZvcj0iTkEiIHR5cGVDb2Rl
PSJDU1QiPgogICAgICAgICAgICAgICAgICAgIDxhc3NpZ25lZEN1c3RvZGlhbiBjbGFzc0NvZGU9
IkFTU0lHTkVEIiBudWxsRmxhdm9yPSJOQSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxyZXBy
ZXNlbnRlZE9yZ2FuaXphdGlvbiBjbGFzc0NvZGU9Ik5BVCIgZGV0ZXJtaW5lckNvZGU9IklOU1RB
TkNFIiBudWxsRmxhdm9yPSJOQSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQgbnVs
bEZsYXZvcj0iTkEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9yZXByZXNlbnRlZE9yZ2Fu
aXphdGlvbj4KICAgICAgICAgICAgICAgICAgICA8L2Fzc2lnbmVkQ3VzdG9kaWFuPgogICAgICAg
ICAgICAgICAgPC9jdXN0b2RpYW4+CiAgICAgICAgICAgIDwvdGFyZ2V0PgogICAgICAgIDwvc3Vi
amVjdD4KICAgICAgICA8c3ViamVjdCB0eXBlQ29kZT0iU1VCSiI+CiAgICAgICAgICAgIDx0YXJn
ZXQgY2xhc3NDb2RlPSJET0NDTElOIiBtb29kQ29kZT0iRVZOIj4KICAgICAgICAgICAgICAgIDx0
ZW1wbGF0ZUlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkNEWCBDb250ZW50IFR5cGUiIGV4dGVu
c2lvbj0iQ0RBIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuMjAiLz4KICAgICAg
ICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJDRFggTWVzc2FnZSBJRCIgZXh0
ZW5zaW9uPSJhZDAwMDdiNS1jODQ2LWU5MTEtYTk2YS0wMDUwNTY4YzU1YTYiIHJvb3Q9IjIuMTYu
ODQwLjEuMTEzODgzLjMuMjc3LjEwMC4xIi8+CiAgICAgICAgICAgICAgICA8Y29kZSBjb2RlPSIy
LjE2Ljg0MC4xLjExMzg4My4zLjE4MTguMTAuMS41IiBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjEx
Mzg4My42LjEiIGRpc3BsYXlOYW1lPSJlMmUgR2VuZXJpYyBVbnN0cnVjdHVyZWQgUmVmZXJyYWwi
Lz4KICAgICAgICAgICAgICAgIDx0ZXh0IG1lZGlhVHlwZT0idGV4dC94bWwiPkF0dGFjaG1lbnRD
b3VudDowfFRvdGFsQXR0YWNobWVudFNpemU6MDwvdGV4dD4KICAgICAgICAgICAgICAgIDxzdGF0
dXNDb2RlIGNvZGU9ImNvbXBsZXRlZCIvPgogICAgICAgICAgICAgICAgPGVmZmVjdGl2ZVRpbWUg
dmFsdWU9IjIwMTkwMzE0MTkwMy0wNzAwIi8+CiAgICAgICAgICAgICAgICA8Y29uZmlkZW50aWFs
aXR5Q29kZSBjb2RlPSJOIiBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42LjEiLz4KICAg
ICAgICAgICAgICAgIDxyZWNvcmRUYXJnZXQgbnVsbEZsYXZvcj0iTkEiIHR5cGVDb2RlPSJSQ1Qi
PgogICAgICAgICAgICAgICAgICAgIDxwYXRpZW50IGNsYXNzQ29kZT0iUEFUIiBudWxsRmxhdm9y
PSJOQSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRpZW50Tm9uUGVyc29uTGl2aW5nU3Vi
amVjdCB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNl
IiB4c2k6bmlsPSJ0cnVlIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRpZW50UGVyc29u
IHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhz
aTpuaWw9InRydWUiLz4KICAgICAgICAgICAgICAgICAgICA8L3BhdGllbnQ+CiAgICAgICAgICAg
ICAgICA8L3JlY29yZFRhcmdldD4KICAgICAgICAgICAgICAgIDxhdXRob3IgbnVsbEZsYXZvcj0i
TkEiIHR5cGVDb2RlPSJBVVQiPgogICAgICAgICAgICAgICAgICAgIDx0aW1lIG51bGxGbGF2b3I9
Ik5BIi8+CiAgICAgICAgICAgICAgICAgICAgPGFzc2lnbmVkQXV0aG9yIGNsYXNzQ29kZT0iQVNT
SUdORUQiIG51bGxGbGF2b3I9Ik5BIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGlkIG51bGxG
bGF2b3I9Ik5BIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhc3NpZ25lZEF1dGhvcmluZ0Rl
dmljZSB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNl
IiB4c2k6bmlsPSJ0cnVlIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhc3NpZ25lZFBlcnNv
biB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4
c2k6bmlsPSJ0cnVlIi8+CiAgICAgICAgICAgICAgICAgICAgPC9hc3NpZ25lZEF1dGhvcj4KICAg
ICAgICAgICAgICAgIDwvYXV0aG9yPgogICAgICAgICAgICAgICAgPGN1c3RvZGlhbiBudWxsRmxh
dm9yPSJOQSIgdHlwZUNvZGU9IkNTVCI+CiAgICAgICAgICAgICAgICAgICAgPGFzc2lnbmVkQ3Vz
dG9kaWFuIGNsYXNzQ29kZT0iQVNTSUdORUQiIG51bGxGbGF2b3I9Ik5BIj4KICAgICAgICAgICAg
ICAgICAgICAgICAgPHJlcHJlc2VudGVkT3JnYW5pemF0aW9uIGNsYXNzQ29kZT0iTkFUIiBkZXRl
cm1pbmVyQ29kZT0iSU5TVEFOQ0UiIG51bGxGbGF2b3I9Ik5BIj4KICAgICAgICAgICAgICAgICAg
ICAgICAgICAgIDxpZCBudWxsRmxhdm9yPSJOQSIvPgogICAgICAgICAgICAgICAgICAgICAgICA8
L3JlcHJlc2VudGVkT3JnYW5pemF0aW9uPgogICAgICAgICAgICAgICAgICAgIDwvYXNzaWduZWRD
dXN0b2RpYW4+CiAgICAgICAgICAgICAgICA8L2N1c3RvZGlhbj4KICAgICAgICAgICAgPC90YXJn
ZXQ+CiAgICAgICAgPC9zdWJqZWN0PgogICAgICAgIDxzdWJqZWN0IHR5cGVDb2RlPSJTVUJKIj4K
ICAgICAgICAgICAgPHRhcmdldCBjbGFzc0NvZGU9IkRPQ0NMSU4iIG1vb2RDb2RlPSJFVk4iPgog
ICAgICAgICAgICAgICAgPHRlbXBsYXRlSWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQ0RYIENv
bnRlbnQgVHlwZSIgZXh0ZW5zaW9uPSJDREEiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3
LjEwMC4yMCIvPgogICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkNE
WCBNZXNzYWdlIElEIiBleHRlbnNpb249ImRiMGU1ZmI4LWM5NDYtZTkxMS1hOTZhLTAwNTA1Njhj
NTVhNiIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjEiLz4KICAgICAgICAgICAg
ICAgIDxjb2RlIGNvZGU9IjIuMTYuODQwLjEuMTEzODgzLjMuMTgxOC4xMC4xLjUiIGNvZGVTeXN0
ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuMSIgZGlzcGxheU5hbWU9ImUyZSBHZW5lcmljIFVuc3Ry
dWN0dXJlZCBSZWZlcnJhbCIvPgogICAgICAgICAgICAgICAgPHRleHQgbWVkaWFUeXBlPSJ0ZXh0
L3htbCI+QXR0YWNobWVudENvdW50OjB8VG90YWxBdHRhY2htZW50U2l6ZTowPC90ZXh0PgogICAg
ICAgICAgICAgICAgPHN0YXR1c0NvZGUgY29kZT0iY29tcGxldGVkIi8+CiAgICAgICAgICAgICAg
ICA8ZWZmZWN0aXZlVGltZSB2YWx1ZT0iMjAxOTAzMTQxOTAzLTA3MDAiLz4KICAgICAgICAgICAg
ICAgIDxjb25maWRlbnRpYWxpdHlDb2RlIGNvZGU9Ik4iIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEu
MTEzODgzLjYuMSIvPgogICAgICAgICAgICAgICAgPHJlY29yZFRhcmdldCBudWxsRmxhdm9yPSJO
QSIgdHlwZUNvZGU9IlJDVCI+CiAgICAgICAgICAgICAgICAgICAgPHBhdGllbnQgY2xhc3NDb2Rl
PSJQQVQiIG51bGxGbGF2b3I9Ik5BIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHBhdGllbnRO
b25QZXJzb25MaXZpbmdTdWJqZWN0IHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9Y
TUxTY2hlbWEtaW5zdGFuY2UiIHhzaTpuaWw9InRydWUiLz4KICAgICAgICAgICAgICAgICAgICAg
ICAgPHBhdGllbnRQZXJzb24geG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNj
aGVtYS1pbnN0YW5jZSIgeHNpOm5pbD0idHJ1ZSIvPgogICAgICAgICAgICAgICAgICAgIDwvcGF0
aWVudD4KICAgICAgICAgICAgICAgIDwvcmVjb3JkVGFyZ2V0PgogICAgICAgICAgICAgICAgPGF1
dGhvciBudWxsRmxhdm9yPSJOQSIgdHlwZUNvZGU9IkFVVCI+CiAgICAgICAgICAgICAgICAgICAg
PHRpbWUgbnVsbEZsYXZvcj0iTkEiLz4KICAgICAgICAgICAgICAgICAgICA8YXNzaWduZWRBdXRo
b3IgY2xhc3NDb2RlPSJBU1NJR05FRCIgbnVsbEZsYXZvcj0iTkEiPgogICAgICAgICAgICAgICAg
ICAgICAgICA8aWQgbnVsbEZsYXZvcj0iTkEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPGFz
c2lnbmVkQXV0aG9yaW5nRGV2aWNlIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9Y
TUxTY2hlbWEtaW5zdGFuY2UiIHhzaTpuaWw9InRydWUiLz4KICAgICAgICAgICAgICAgICAgICAg
ICAgPGFzc2lnbmVkUGVyc29uIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxT
Y2hlbWEtaW5zdGFuY2UiIHhzaTpuaWw9InRydWUiLz4KICAgICAgICAgICAgICAgICAgICA8L2Fz
c2lnbmVkQXV0aG9yPgogICAgICAgICAgICAgICAgPC9hdXRob3I+CiAgICAgICAgICAgICAgICA8
Y3VzdG9kaWFuIG51bGxGbGF2b3I9Ik5BIiB0eXBlQ29kZT0iQ1NUIj4KICAgICAgICAgICAgICAg
ICAgICA8YXNzaWduZWRDdXN0b2RpYW4gY2xhc3NDb2RlPSJBU1NJR05FRCIgbnVsbEZsYXZvcj0i
TkEiPgogICAgICAgICAgICAgICAgICAgICAgICA8cmVwcmVzZW50ZWRPcmdhbml6YXRpb24gY2xh
c3NDb2RlPSJOQVQiIGRldGVybWluZXJDb2RlPSJJTlNUQU5DRSIgbnVsbEZsYXZvcj0iTkEiPgog
ICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkIG51bGxGbGF2b3I9Ik5BIi8+CiAgICAgICAg
ICAgICAgICAgICAgICAgIDwvcmVwcmVzZW50ZWRPcmdhbml6YXRpb24+CiAgICAgICAgICAgICAg
ICAgICAgPC9hc3NpZ25lZEN1c3RvZGlhbj4KICAgICAgICAgICAgICAgIDwvY3VzdG9kaWFuPgog
ICAgICAgICAgICA8L3RhcmdldD4KICAgICAgICA8L3N1YmplY3Q+CiAgICAgICAgPHN1YmplY3Qg
dHlwZUNvZGU9IlNVQkoiPgogICAgICAgICAgICA8dGFyZ2V0IGNsYXNzQ29kZT0iRE9DQ0xJTiIg
bW9vZENvZGU9IkVWTiI+CiAgICAgICAgICAgICAgICA8dGVtcGxhdGVJZCBhc3NpZ25pbmdBdXRo
b3JpdHlOYW1lPSJDRFggQ29udGVudCBUeXBlIiBleHRlbnNpb249IkNEQSIgcm9vdD0iMi4xNi44
NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjIwIi8+CiAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5n
QXV0aG9yaXR5TmFtZT0iQ0RYIE1lc3NhZ2UgSUQiIGV4dGVuc2lvbj0iMjE1ZjhiZDAtZTg0Yy1l
OTExLWE5NmEtMDA1MDU2OGM1NWE2IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAu
MSIvPgogICAgICAgICAgICAgICAgPGNvZGUgY29kZT0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42
MC4yLjEiIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuMSIgZGlzcGxheU5hbWU9Ikxh
YiBSZXBvcnQgVGVtcGxhdGUiLz4KICAgICAgICAgICAgICAgIDx0ZXh0IG1lZGlhVHlwZT0idGV4
dC94bWwiPkF0dGFjaG1lbnRDb3VudDowfFRvdGFsQXR0YWNobWVudFNpemU6MDwvdGV4dD4KICAg
ICAgICAgICAgICAgIDxzdGF0dXNDb2RlIGNvZGU9ImNvbXBsZXRlZCIvPgogICAgICAgICAgICAg
ICAgPGVmZmVjdGl2ZVRpbWUgdmFsdWU9IjIwMTkwMzIyMTQyMy0wNzAwIi8+CiAgICAgICAgICAg
ICAgICA8Y29uZmlkZW50aWFsaXR5Q29kZSBjb2RlPSJOIiBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4x
LjExMzg4My42LjEiLz4KICAgICAgICAgICAgICAgIDxyZWNvcmRUYXJnZXQgbnVsbEZsYXZvcj0i
TkEiIHR5cGVDb2RlPSJSQ1QiPgogICAgICAgICAgICAgICAgICAgIDxwYXRpZW50IGNsYXNzQ29k
ZT0iUEFUIiBudWxsRmxhdm9yPSJOQSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRpZW50
Tm9uUGVyc29uTGl2aW5nU3ViamVjdCB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEv
WE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6bmlsPSJ0cnVlIi8+CiAgICAgICAgICAgICAgICAgICAg
ICAgIDxwYXRpZW50UGVyc29uIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxT
Y2hlbWEtaW5zdGFuY2UiIHhzaTpuaWw9InRydWUiLz4KICAgICAgICAgICAgICAgICAgICA8L3Bh
dGllbnQ+CiAgICAgICAgICAgICAgICA8L3JlY29yZFRhcmdldD4KICAgICAgICAgICAgICAgIDxh
dXRob3IgbnVsbEZsYXZvcj0iTkEiIHR5cGVDb2RlPSJBVVQiPgogICAgICAgICAgICAgICAgICAg
IDx0aW1lIG51bGxGbGF2b3I9Ik5BIi8+CiAgICAgICAgICAgICAgICAgICAgPGFzc2lnbmVkQXV0
aG9yIGNsYXNzQ29kZT0iQVNTSUdORUQiIG51bGxGbGF2b3I9Ik5BIj4KICAgICAgICAgICAgICAg
ICAgICAgICAgPGlkIG51bGxGbGF2b3I9Ik5BIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxh
c3NpZ25lZEF1dGhvcmluZ0RldmljZSB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEv
WE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6bmlsPSJ0cnVlIi8+CiAgICAgICAgICAgICAgICAgICAg
ICAgIDxhc3NpZ25lZFBlcnNvbiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1M
U2NoZW1hLWluc3RhbmNlIiB4c2k6bmlsPSJ0cnVlIi8+CiAgICAgICAgICAgICAgICAgICAgPC9h
c3NpZ25lZEF1dGhvcj4KICAgICAgICAgICAgICAgIDwvYXV0aG9yPgogICAgICAgICAgICAgICAg
PGN1c3RvZGlhbiBudWxsRmxhdm9yPSJOQSIgdHlwZUNvZGU9IkNTVCI+CiAgICAgICAgICAgICAg
ICAgICAgPGFzc2lnbmVkQ3VzdG9kaWFuIGNsYXNzQ29kZT0iQVNTSUdORUQiIG51bGxGbGF2b3I9
Ik5BIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHJlcHJlc2VudGVkT3JnYW5pemF0aW9uIGNs
YXNzQ29kZT0iTkFUIiBkZXRlcm1pbmVyQ29kZT0iSU5TVEFOQ0UiIG51bGxGbGF2b3I9Ik5BIj4K
ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZCBudWxsRmxhdm9yPSJOQSIvPgogICAgICAg
ICAgICAgICAgICAgICAgICA8L3JlcHJlc2VudGVkT3JnYW5pemF0aW9uPgogICAgICAgICAgICAg
ICAgICAgIDwvYXNzaWduZWRDdXN0b2RpYW4+CiAgICAgICAgICAgICAgICA8L2N1c3RvZGlhbj4K
ICAgICAgICAgICAgPC90YXJnZXQ+CiAgICAgICAgPC9zdWJqZWN0PgogICAgICAgIDxzdWJqZWN0
IHR5cGVDb2RlPSJTVUJKIj4KICAgICAgICAgICAgPHRhcmdldCBjbGFzc0NvZGU9IkRPQ0NMSU4i
IG1vb2RDb2RlPSJFVk4iPgogICAgICAgICAgICAgICAgPHRlbXBsYXRlSWQgYXNzaWduaW5nQXV0
aG9yaXR5TmFtZT0iQ0RYIENvbnRlbnQgVHlwZSIgZXh0ZW5zaW9uPSJDREEiIHJvb3Q9IjIuMTYu
ODQwLjEuMTEzODgzLjMuMjc3LjEwMC4yMCIvPgogICAgICAgICAgICAgICAgPGlkIGFzc2lnbmlu
Z0F1dGhvcml0eU5hbWU9IkNEWCBNZXNzYWdlIElEIiBleHRlbnNpb249IjQ4OTM0NzI4LWU5NGMt
ZTkxMS1hOTZhLTAwNTA1NjhjNTVhNiIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAw
LjEiLz4KICAgICAgICAgICAgICAgIDxjb2RlIGNvZGU9IjIuMTYuODQwLjEuMTEzODgzLjMuNTEu
NjAuMi4xIiBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42LjEiIGRpc3BsYXlOYW1lPSJM
YWIgUmVwb3J0IFRlbXBsYXRlIi8+CiAgICAgICAgICAgICAgICA8dGV4dCBtZWRpYVR5cGU9InRl
eHQveG1sIj5BdHRhY2htZW50Q291bnQ6MHxUb3RhbEF0dGFjaG1lbnRTaXplOjA8L3RleHQ+CiAg
ICAgICAgICAgICAgICA8c3RhdHVzQ29kZSBjb2RlPSJjb21wbGV0ZWQiLz4KICAgICAgICAgICAg
ICAgIDxlZmZlY3RpdmVUaW1lIHZhbHVlPSIyMDE5MDMyMjE0MjYtMDcwMCIvPgogICAgICAgICAg
ICAgICAgPGNvbmZpZGVudGlhbGl0eUNvZGUgY29kZT0iTiIgY29kZVN5c3RlbT0iMi4xNi44NDAu
MS4xMTM4ODMuNi4xIi8+CiAgICAgICAgICAgICAgICA8cmVjb3JkVGFyZ2V0IG51bGxGbGF2b3I9
Ik5BIiB0eXBlQ29kZT0iUkNUIj4KICAgICAgICAgICAgICAgICAgICA8cGF0aWVudCBjbGFzc0Nv
ZGU9IlBBVCIgbnVsbEZsYXZvcj0iTkEiPgogICAgICAgICAgICAgICAgICAgICAgICA8cGF0aWVu
dE5vblBlcnNvbkxpdmluZ1N1YmplY3QgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAx
L1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOm5pbD0idHJ1ZSIvPgogICAgICAgICAgICAgICAgICAg
ICAgICA8cGF0aWVudFBlcnNvbiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1M
U2NoZW1hLWluc3RhbmNlIiB4c2k6bmlsPSJ0cnVlIi8+CiAgICAgICAgICAgICAgICAgICAgPC9w
YXRpZW50PgogICAgICAgICAgICAgICAgPC9yZWNvcmRUYXJnZXQ+CiAgICAgICAgICAgICAgICA8
YXV0aG9yIG51bGxGbGF2b3I9Ik5BIiB0eXBlQ29kZT0iQVVUIj4KICAgICAgICAgICAgICAgICAg
ICA8dGltZSBudWxsRmxhdm9yPSJOQSIvPgogICAgICAgICAgICAgICAgICAgIDxhc3NpZ25lZEF1
dGhvciBjbGFzc0NvZGU9IkFTU0lHTkVEIiBudWxsRmxhdm9yPSJOQSI+CiAgICAgICAgICAgICAg
ICAgICAgICAgIDxpZCBudWxsRmxhdm9yPSJOQSIvPgogICAgICAgICAgICAgICAgICAgICAgICA8
YXNzaWduZWRBdXRob3JpbmdEZXZpY2UgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAx
L1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOm5pbD0idHJ1ZSIvPgogICAgICAgICAgICAgICAgICAg
ICAgICA8YXNzaWduZWRQZXJzb24geG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hN
TFNjaGVtYS1pbnN0YW5jZSIgeHNpOm5pbD0idHJ1ZSIvPgogICAgICAgICAgICAgICAgICAgIDwv
YXNzaWduZWRBdXRob3I+CiAgICAgICAgICAgICAgICA8L2F1dGhvcj4KICAgICAgICAgICAgICAg
IDxjdXN0b2RpYW4gbnVsbEZsYXZvcj0iTkEiIHR5cGVDb2RlPSJDU1QiPgogICAgICAgICAgICAg
ICAgICAgIDxhc3NpZ25lZEN1c3RvZGlhbiBjbGFzc0NvZGU9IkFTU0lHTkVEIiBudWxsRmxhdm9y
PSJOQSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxyZXByZXNlbnRlZE9yZ2FuaXphdGlvbiBj
bGFzc0NvZGU9Ik5BVCIgZGV0ZXJtaW5lckNvZGU9IklOU1RBTkNFIiBudWxsRmxhdm9yPSJOQSI+
CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQgbnVsbEZsYXZvcj0iTkEiLz4KICAgICAg
ICAgICAgICAgICAgICAgICAgPC9yZXByZXNlbnRlZE9yZ2FuaXphdGlvbj4KICAgICAgICAgICAg
ICAgICAgICA8L2Fzc2lnbmVkQ3VzdG9kaWFuPgogICAgICAgICAgICAgICAgPC9jdXN0b2RpYW4+
CiAgICAgICAgICAgIDwvdGFyZ2V0PgogICAgICAgIDwvc3ViamVjdD4KICAgICAgICA8c3ViamVj
dCB0eXBlQ29kZT0iU1VCSiI+CiAgICAgICAgICAgIDx0YXJnZXQgY2xhc3NDb2RlPSJET0NDTElO
IiBtb29kQ29kZT0iRVZOIj4KICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkIGFzc2lnbmluZ0F1
dGhvcml0eU5hbWU9IkNEWCBDb250ZW50IFR5cGUiIGV4dGVuc2lvbj0iQ0RBIiByb290PSIyLjE2
Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuMjAiLz4KICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25p
bmdBdXRob3JpdHlOYW1lPSJDRFggTWVzc2FnZSBJRCIgZXh0ZW5zaW9uPSJkMjQ2MDc2Yy1mNDRj
LWU5MTEtYTk2YS0wMDUwNTY4YzU1YTYiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEw
MC4xIi8+CiAgICAgICAgICAgICAgICA8Y29kZSBjb2RlPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUx
LjYwLjIuMSIgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi4xIiBkaXNwbGF5TmFtZT0i
TGFiIFJlcG9ydCBUZW1wbGF0ZSIvPgogICAgICAgICAgICAgICAgPHRleHQgbWVkaWFUeXBlPSJ0
ZXh0L3htbCI+QXR0YWNobWVudENvdW50OjB8VG90YWxBdHRhY2htZW50U2l6ZTowPC90ZXh0Pgog
ICAgICAgICAgICAgICAgPHN0YXR1c0NvZGUgY29kZT0iY29tcGxldGVkIi8+CiAgICAgICAgICAg
ICAgICA8ZWZmZWN0aXZlVGltZSB2YWx1ZT0iMjAxOTAzMjIxNTQ2LTA3MDAiLz4KICAgICAgICAg
ICAgICAgIDxjb25maWRlbnRpYWxpdHlDb2RlIGNvZGU9Ik4iIGNvZGVTeXN0ZW09IjIuMTYuODQw
LjEuMTEzODgzLjYuMSIvPgogICAgICAgICAgICAgICAgPHJlY29yZFRhcmdldCBudWxsRmxhdm9y
PSJOQSIgdHlwZUNvZGU9IlJDVCI+CiAgICAgICAgICAgICAgICAgICAgPHBhdGllbnQgY2xhc3ND
b2RlPSJQQVQiIG51bGxGbGF2b3I9Ik5BIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHBhdGll
bnROb25QZXJzb25MaXZpbmdTdWJqZWN0IHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAw
MS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTpuaWw9InRydWUiLz4KICAgICAgICAgICAgICAgICAg
ICAgICAgPHBhdGllbnRQZXJzb24geG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hN
TFNjaGVtYS1pbnN0YW5jZSIgeHNpOm5pbD0idHJ1ZSIvPgogICAgICAgICAgICAgICAgICAgIDwv
cGF0aWVudD4KICAgICAgICAgICAgICAgIDwvcmVjb3JkVGFyZ2V0PgogICAgICAgICAgICAgICAg
PGF1dGhvciBudWxsRmxhdm9yPSJOQSIgdHlwZUNvZGU9IkFVVCI+CiAgICAgICAgICAgICAgICAg
ICAgPHRpbWUgbnVsbEZsYXZvcj0iTkEiLz4KICAgICAgICAgICAgICAgICAgICA8YXNzaWduZWRB
dXRob3IgY2xhc3NDb2RlPSJBU1NJR05FRCIgbnVsbEZsYXZvcj0iTkEiPgogICAgICAgICAgICAg
ICAgICAgICAgICA8aWQgbnVsbEZsYXZvcj0iTkEiLz4KICAgICAgICAgICAgICAgICAgICAgICAg
PGFzc2lnbmVkQXV0aG9yaW5nRGV2aWNlIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAw
MS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTpuaWw9InRydWUiLz4KICAgICAgICAgICAgICAgICAg
ICAgICAgPGFzc2lnbmVkUGVyc29uIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9Y
TUxTY2hlbWEtaW5zdGFuY2UiIHhzaTpuaWw9InRydWUiLz4KICAgICAgICAgICAgICAgICAgICA8
L2Fzc2lnbmVkQXV0aG9yPgogICAgICAgICAgICAgICAgPC9hdXRob3I+CiAgICAgICAgICAgICAg
ICA8Y3VzdG9kaWFuIG51bGxGbGF2b3I9Ik5BIiB0eXBlQ29kZT0iQ1NUIj4KICAgICAgICAgICAg
ICAgICAgICA8YXNzaWduZWRDdXN0b2RpYW4gY2xhc3NDb2RlPSJBU1NJR05FRCIgbnVsbEZsYXZv
cj0iTkEiPgogICAgICAgICAgICAgICAgICAgICAgICA8cmVwcmVzZW50ZWRPcmdhbml6YXRpb24g
Y2xhc3NDb2RlPSJOQVQiIGRldGVybWluZXJDb2RlPSJJTlNUQU5DRSIgbnVsbEZsYXZvcj0iTkEi
PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkIG51bGxGbGF2b3I9Ik5BIi8+CiAgICAg
ICAgICAgICAgICAgICAgICAgIDwvcmVwcmVzZW50ZWRPcmdhbml6YXRpb24+CiAgICAgICAgICAg
ICAgICAgICAgPC9hc3NpZ25lZEN1c3RvZGlhbj4KICAgICAgICAgICAgICAgIDwvY3VzdG9kaWFu
PgogICAgICAgICAgICA8L3RhcmdldD4KICAgICAgICA8L3N1YmplY3Q+CiAgICAgICAgPHF1ZXJ5
QWNrPgogICAgICAgICAgICA8cXVlcnlSZXNwb25zZUNvZGUgY29kZT0iT0siLz4KICAgICAgICAg
ICAgPHJlc3VsdFRvdGFsUXVhbnRpdHkgdmFsdWU9IjEzIi8+CiAgICAgICAgICAgIDxyZXN1bHRD
dXJyZW50UXVhbnRpdHkgdmFsdWU9IjEzIi8+CiAgICAgICAgICAgIDxyZXN1bHRSZW1haW5pbmdR
dWFudGl0eSB2YWx1ZT0iMCIvPgogICAgICAgIDwvcXVlcnlBY2s+CiAgICA8L2NvbnRyb2xBY3RQ
cm9jZXNzPgo8L1JDTVJfSU4wMDAwMzBVVjAxPgo=</inboundTemplate>
            <outboundTemplate encoding="base64">ewoJInN0YXR1cyI6ICIiLAoJIm1lc3NhZ2UiOiAiIiwKCSJhY2tEZXRhaWwiOiB7CgkJImFja0lk
IjogIiIsCgkJImFja1RpbWUiOiAiIiwKCQkibWVzc2FnZUlkIjogIiIsCgkJInN0YXR1cyI6ICIi
Cgl9LAoJImRvY3VtZW50cyI6IFtdCn0=</outboundTemplate>
            <inboundDataType>HL7V3</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.8.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.8.0">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.8.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.8.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.8.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.8.0">
            <elements/>
          </filter>
          <transportName>JavaScript Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>false</waitForPrevious>
        </connector>
        <connector version="3.8.0">
          <metaDataId>16</metaDataId>
          <name>Service Search Document</name>
          <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.8.0">
            <pluginProperties/>
            <destinationConnectorProperties version="3.8.0">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>true</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <script>logger.debug(&apos;Service Search Documents&apos;);

importPackage(Packages.ca.uvic.leadlab.cdxconnector);

try {
	var client = new WSClientDocument($(&apos;cdx.base.url&apos;), $(&apos;username&apos;), $(&apos;password&apos;), $(&apos;certPath&apos;), $(&apos;certPass&apos;));

	var effectiveTime = null;
	if ($(&apos;effectiveTime_start&apos;).length() &gt; 0 &amp;&amp; $(&apos;effectiveTime_end&apos;).length() &gt; 0) {
		effectiveTime = new DateRange(new Date($(&apos;effectiveTime_start&apos;)), true, new Date($(&apos;effectiveTime_end&apos;)), true);
	}
	
	var eventTime = null;
	if ($(&apos;eventTime_start&apos;).length() &gt; 0 &amp;&amp; $(&apos;eventTime_end&apos;).length() &gt; 0) {
		eventTime = new DateRange(new Date($(&apos;eventTime_start&apos;)), true, new Date($(&apos;eventTime_end&apos;)), true);
	}

	// Call the WS method using CDX Connector
	var cdxResponse = client.searchDocuments($(&apos;locationId&apos;), $(&apos;clinicId&apos;), $(&apos;documentId&apos;), effectiveTime, eventTime);
	
	// return the raw response to be processed by the &apos;response transformers&apos;
	return ResponseFactory.getSentResponse(cdxResponse);
} catch (e) {
	logger.error(&quot;Error on &apos;Service Search Documents&apos;: &quot; + e);
	
	responseMap.put(&apos;responseMessage&apos;, createErrorMessage(&quot;Error on &apos;Service Search Documents&apos;: &quot; + e.message, null)); // create the error response
	responseMap.put(&apos;responseStatus&apos;, &apos;200&apos;); // return ok
}</script>
          </properties>
          <transformer version="3.8.0">
            <elements>
              <com.mirth.connect.plugins.mapper.MapperStep version="3.8.0">
                <name>clinicId</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <variable>clinicId</variable>
                <mapping>msg[&apos;clinicId&apos;]</mapping>
                <defaultValue>&quot;&quot;</defaultValue>
                <replacements/>
                <scope>CHANNEL</scope>
              </com.mirth.connect.plugins.mapper.MapperStep>
              <com.mirth.connect.plugins.mapper.MapperStep version="3.8.0">
                <name>documentId</name>
                <sequenceNumber>1</sequenceNumber>
                <enabled>true</enabled>
                <variable>documentId</variable>
                <mapping>msg[&apos;documentId&apos;]</mapping>
                <defaultValue>&quot;&quot;</defaultValue>
                <replacements/>
                <scope>CHANNEL</scope>
              </com.mirth.connect.plugins.mapper.MapperStep>
              <com.mirth.connect.plugins.mapper.MapperStep version="3.8.0">
                <name>effectiveTime_start</name>
                <sequenceNumber>2</sequenceNumber>
                <enabled>true</enabled>
                <variable>effectiveTime_start</variable>
                <mapping>msg[&apos;effectiveTime&apos;][&apos;start&apos;]</mapping>
                <defaultValue>&quot;&quot;</defaultValue>
                <replacements/>
                <scope>CHANNEL</scope>
              </com.mirth.connect.plugins.mapper.MapperStep>
              <com.mirth.connect.plugins.mapper.MapperStep version="3.8.0">
                <name>effectiveTime_end</name>
                <sequenceNumber>3</sequenceNumber>
                <enabled>true</enabled>
                <variable>effectiveTime_end</variable>
                <mapping>msg[&apos;effectiveTime&apos;][&apos;end&apos;]</mapping>
                <defaultValue>&quot;&quot;</defaultValue>
                <replacements/>
                <scope>CHANNEL</scope>
              </com.mirth.connect.plugins.mapper.MapperStep>
              <com.mirth.connect.plugins.mapper.MapperStep version="3.8.0">
                <name>eventTime_start</name>
                <sequenceNumber>4</sequenceNumber>
                <enabled>true</enabled>
                <variable>eventTime_start</variable>
                <mapping>msg[&apos;eventTime&apos;][&apos;start&apos;]</mapping>
                <defaultValue>&quot;&quot;</defaultValue>
                <replacements/>
                <scope>CHANNEL</scope>
              </com.mirth.connect.plugins.mapper.MapperStep>
              <com.mirth.connect.plugins.mapper.MapperStep version="3.8.0">
                <name>eventTime_end</name>
                <sequenceNumber>5</sequenceNumber>
                <enabled>true</enabled>
                <variable>eventTime_end</variable>
                <mapping>msg[&apos;eventTime&apos;][&apos;end&apos;]</mapping>
                <defaultValue>&quot;&quot;</defaultValue>
                <replacements/>
                <scope>CHANNEL</scope>
              </com.mirth.connect.plugins.mapper.MapperStep>
            </elements>
            <inboundTemplate encoding="base64">ewoJImVmZmVjdGl2ZVRpbWUiOiB7CgkJInN0YXJ0IjogIiIsCgkJImVuZCI6ICIiCgl9LAoJImV2
ZW50VGltZSI6IHsKCQkic3RhcnQiOiAiIiwKCQkiZW5kIjogIiIKCX0sCgkiY2xpbmljSWQiOiAi
IiwKCSJkb2N1bWVudElkIjogIiIKfQ==</inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>HL7V3</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.8.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.8.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.8.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.8.0">
                <stripNamespaces>true</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.8.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.8.0">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.8.0">
                <name>Search Documents Response</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>logger.debug(&apos;Search Documents Response&apos;);

try {
	// Store the response to be returned by the &quot;Source Connector&quot;
	responseMap.put(&apos;responseMessage&apos;, handleResponseMessage(responseStatus, responseStatusMessage, msg, function() {
		// Ack details
		tmp[&apos;ackDetail&apos;][&apos;ackId&apos;] = msg[&apos;id&apos;][&apos;@extension&apos;].toString();
		tmp[&apos;ackDetail&apos;][&apos;ackTime&apos;] = parseCDADateTime(msg[&apos;creationTime&apos;][&apos;@value&apos;].toString());
		tmp[&apos;ackDetail&apos;][&apos;messageId&apos;] = msg[&apos;acknowledgement&apos;][&apos;targetMessage&apos;][&apos;id&apos;][&apos;@extension&apos;].toString();
		tmp[&apos;ackDetail&apos;][&apos;status&apos;] = msg[&apos;controlActProcess&apos;][&apos;queryAck&apos;][&apos;queryResponseCode&apos;][&apos;@code&apos;].toString();
		
		// Payload
		for (var i = 0; i &lt; getArrayOrXmlLength(msg[&apos;controlActProcess&apos;][&apos;subject&apos;]); i++) { // Document list
			var target = msg[&apos;controlActProcess&apos;][&apos;subject&apos;][i][&apos;target&apos;];
			var document = {};
			
			document[&apos;documentId&apos;] = target[&apos;id&apos;][&apos;@extension&apos;].toString();
			
			document[&apos;template&apos;] = {};
			document[&apos;template&apos;][&apos;templateId&apos;] = target[&apos;templateId&apos;][&apos;@extension&apos;].toString();
			document[&apos;template&apos;][&apos;templateName&apos;] = target[&apos;templateId&apos;][&apos;@assigningAuthorityName&apos;].toString();
				
			document[&apos;loinc&apos;] = {};
			document[&apos;loinc&apos;][&apos;loincCode&apos;] = target[&apos;code&apos;][&apos;@code&apos;].toString();
			document[&apos;loinc&apos;][&apos;displayName&apos;] = target[&apos;code&apos;][&apos;@displayName&apos;].toString();
			
			document[&apos;effectiveTime&apos;] = parseCDADateTime(target[&apos;effectiveTime&apos;][&apos;@value&apos;].toString());
			
			tmp[&apos;documents&apos;][i] = document;
		}

		return handleQueryResultStatus(tmp, msg, &apos;documents&apos;); // Return the transformed message to be converted on &apos;handleResponseMessage&apos;
	}));
	responseMap.put(&apos;responseStatus&apos;, &apos;200&apos;);
} catch(e) {
	logger.error(&quot;Error on &apos;Search Documents Response&apos;: &quot; + e);

	responseMap.put(&apos;responseMessage&apos;, createErrorMessage(e.message, null));
	responseMap.put(&apos;responseStatus&apos;, &apos;200&apos;);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64">PFJDTVJfSU4wMDAwMzBVVjAxIHhtbG5zPSJ1cm46aGw3LW9yZzp2MyIgeG1sbnM6bnMyPSJ1cm46
YmNjZHguY2EiIElUU1ZlcnNpb249IlhNTF8xLjAiPgogICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0
eU5hbWU9IkNEWCBNZXNzYWdlIElEIiBleHRlbnNpb249IjE4ZjExNTU1LWE4YjYtNDAyYy04Nzg0
LTM1MTJlYTIyMDNkOCIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjEiLz4KICAg
IDxjcmVhdGlvblRpbWUgdmFsdWU9IjIwMTkwNjAzMTQxNC0wNzAwIi8+CiAgICA8dmVyc2lvbkNv
ZGUgY29kZT0iQmFsbG90MjAwOU1heSIvPgogICAgPGludGVyYWN0aW9uSWQgcm9vdD0iMi4xNi44
NDAuMS4xMTM4ODMuMS42Ii8+CiAgICA8cHJvY2Vzc2luZ0NvZGUgY29kZT0iUCIvPgogICAgPHBy
b2Nlc3NpbmdNb2RlQ29kZSBjb2RlPSJUIi8+CiAgICA8YWNjZXB0QWNrQ29kZSBjb2RlPSJORSIv
PgogICAgPHJlY2VpdmVyPgogICAgICAgIDxkZXZpY2UgY2xhc3NDb2RlPSJERVYiIGRldGVybWlu
ZXJDb2RlPSJJTlNUQU5DRSI+CiAgICAgICAgICAgIDxpZCBudWxsRmxhdm9yPSJOQSIvPgogICAg
ICAgICAgICA8YXNBZ2VudCBjbGFzc0NvZGU9IkFHTlQiPgogICAgICAgICAgICAgICAgPHJlcHJl
c2VudGVkT3JnYW5pemF0aW9uIGNsYXNzQ29kZT0iT1JHIiBkZXRlcm1pbmVyQ29kZT0iSU5TVEFO
Q0UiPgogICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJDRFgg
Q2xpbmljIElEIiBleHRlbnNpb249ImNkeHBvc3Rwcm9kLW90Y2EiIHJvb3Q9IjIuMTYuODQwLjEu
MTEzODgzLjMuMjc3LjEwMC4yIi8+CiAgICAgICAgICAgICAgICA8L3JlcHJlc2VudGVkT3JnYW5p
emF0aW9uPgogICAgICAgICAgICA8L2FzQWdlbnQ+CiAgICAgICAgPC9kZXZpY2U+CiAgICA8L3Jl
Y2VpdmVyPgogICAgPHNlbmRlcj4KICAgICAgICA8ZGV2aWNlIGNsYXNzQ29kZT0iREVWIiBkZXRl
cm1pbmVyQ29kZT0iSU5TVEFOQ0UiPgogICAgICAgICAgICA8aWQgbnVsbEZsYXZvcj0iTkEiLz4K
ICAgICAgICAgICAgPGFzQWdlbnQgY2xhc3NDb2RlPSJBR05UIj4KICAgICAgICAgICAgICAgIDxy
ZXByZXNlbnRlZE9yZ2FuaXphdGlvbiBjbGFzc0NvZGU9Ik9SRyIgZGV0ZXJtaW5lckNvZGU9IklO
U1RBTkNFIj4KICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0i
Q0RYIENsaW5pYyBJRCIgZXh0ZW5zaW9uPSJDRFhJSEEiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgz
LjMuMjc3LjEwMC4yIi8+CiAgICAgICAgICAgICAgICA8L3JlcHJlc2VudGVkT3JnYW5pemF0aW9u
PgogICAgICAgICAgICA8L2FzQWdlbnQ+CiAgICAgICAgPC9kZXZpY2U+CiAgICA8L3NlbmRlcj4K
ICAgIDxhY2tub3dsZWRnZW1lbnQgdHlwZUNvZGU9IkFBIj4KICAgICAgICA8dGFyZ2V0TWVzc2Fn
ZT4KICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkNEWCBNZXNzYWdlIElE
IiBleHRlbnNpb249ImQxYTU2NWQ2LWRjNDItNDViYS1iYzNjLWNlYTBkYTEzMGUyZSIgcm9vdD0i
Mi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjEiLz4KICAgICAgICA8L3RhcmdldE1lc3NhZ2U+
CiAgICA8L2Fja25vd2xlZGdlbWVudD4KICAgIDxjb250cm9sQWN0UHJvY2VzcyBjbGFzc0NvZGU9
IkNBQ1QiIG1vb2RDb2RlPSJBUFQiPgogICAgICAgIDxzdWJqZWN0IHR5cGVDb2RlPSJTVUJKIj4K
ICAgICAgICAgICAgPHRhcmdldCBjbGFzc0NvZGU9IkRPQ0NMSU4iIG1vb2RDb2RlPSJFVk4iPgog
ICAgICAgICAgICAgICAgPHRlbXBsYXRlSWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQ0RYIENv
bnRlbnQgVHlwZSIgZXh0ZW5zaW9uPSJDREEiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3
LjEwMC4yMCIvPgogICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkNE
WCBNZXNzYWdlIElEIiBleHRlbnNpb249ImRiMGU1ZmI4LWM5NDYtZTkxMS1hOTZhLTAwNTA1Njhj
NTVhNiIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjEiLz4KICAgICAgICAgICAg
ICAgIDxjb2RlIGNvZGU9IjIuMTYuODQwLjEuMTEzODgzLjMuMTgxOC4xMC4xLjUiIGNvZGVTeXN0
ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuMSIgZGlzcGxheU5hbWU9ImUyZSBHZW5lcmljIFVuc3Ry
dWN0dXJlZCBSZWZlcnJhbCIvPgogICAgICAgICAgICAgICAgPHN0YXR1c0NvZGUgY29kZT0iY29t
cGxldGVkIi8+CiAgICAgICAgICAgICAgICA8ZWZmZWN0aXZlVGltZSB2YWx1ZT0iMjAxOTAzMTQx
OTAzLTA3MDAiLz4KICAgICAgICAgICAgICAgIDxjb25maWRlbnRpYWxpdHlDb2RlIGNvZGU9Ik4i
IGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuMSIvPgogICAgICAgICAgICAgICAgPHJl
Y29yZFRhcmdldCBudWxsRmxhdm9yPSJOQSIgdHlwZUNvZGU9IlJDVCI+CiAgICAgICAgICAgICAg
ICAgICAgPHBhdGllbnQgY2xhc3NDb2RlPSJQQVQiIG51bGxGbGF2b3I9Ik5BIj4KICAgICAgICAg
ICAgICAgICAgICAgICAgPHBhdGllbnROb25QZXJzb25MaXZpbmdTdWJqZWN0IHhtbG5zOnhzaT0i
aHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTpuaWw9InRydWUi
Lz4KICAgICAgICAgICAgICAgICAgICAgICAgPHBhdGllbnRQZXJzb24geG1sbnM6eHNpPSJodHRw
Oi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOm5pbD0idHJ1ZSIvPgog
ICAgICAgICAgICAgICAgICAgIDwvcGF0aWVudD4KICAgICAgICAgICAgICAgIDwvcmVjb3JkVGFy
Z2V0PgogICAgICAgICAgICAgICAgPGF1dGhvciBudWxsRmxhdm9yPSJOQSIgdHlwZUNvZGU9IkFV
VCI+CiAgICAgICAgICAgICAgICAgICAgPHRpbWUgbnVsbEZsYXZvcj0iTkEiLz4KICAgICAgICAg
ICAgICAgICAgICA8YXNzaWduZWRBdXRob3IgY2xhc3NDb2RlPSJBU1NJR05FRCIgbnVsbEZsYXZv
cj0iTkEiPgogICAgICAgICAgICAgICAgICAgICAgICA8aWQgbnVsbEZsYXZvcj0iTkEiLz4KICAg
ICAgICAgICAgICAgICAgICAgICAgPGFzc2lnbmVkQXV0aG9yaW5nRGV2aWNlIHhtbG5zOnhzaT0i
aHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTpuaWw9InRydWUi
Lz4KICAgICAgICAgICAgICAgICAgICAgICAgPGFzc2lnbmVkUGVyc29uIHhtbG5zOnhzaT0iaHR0
cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTpuaWw9InRydWUiLz4K
ICAgICAgICAgICAgICAgICAgICA8L2Fzc2lnbmVkQXV0aG9yPgogICAgICAgICAgICAgICAgPC9h
dXRob3I+CiAgICAgICAgICAgICAgICA8Y3VzdG9kaWFuIG51bGxGbGF2b3I9Ik5BIiB0eXBlQ29k
ZT0iQ1NUIj4KICAgICAgICAgICAgICAgICAgICA8YXNzaWduZWRDdXN0b2RpYW4gY2xhc3NDb2Rl
PSJBU1NJR05FRCIgbnVsbEZsYXZvcj0iTkEiPgogICAgICAgICAgICAgICAgICAgICAgICA8cmVw
cmVzZW50ZWRPcmdhbml6YXRpb24gY2xhc3NDb2RlPSJOQVQiIGRldGVybWluZXJDb2RlPSJJTlNU
QU5DRSIgbnVsbEZsYXZvcj0iTkEiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkIG51
bGxGbGF2b3I9Ik5BIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcmVwcmVzZW50ZWRPcmdh
bml6YXRpb24+CiAgICAgICAgICAgICAgICAgICAgPC9hc3NpZ25lZEN1c3RvZGlhbj4KICAgICAg
ICAgICAgICAgIDwvY3VzdG9kaWFuPgogICAgICAgICAgICA8L3RhcmdldD4KICAgICAgICA8L3N1
YmplY3Q+CiAgICAgICAgPHF1ZXJ5QWNrPgogICAgICAgICAgICA8cXVlcnlSZXNwb25zZUNvZGUg
Y29kZT0iT0siLz4KICAgICAgICAgICAgPHJlc3VsdFRvdGFsUXVhbnRpdHkgdmFsdWU9IjEiLz4K
ICAgICAgICAgICAgPHJlc3VsdEN1cnJlbnRRdWFudGl0eSB2YWx1ZT0iMSIvPgogICAgICAgICAg
ICA8cmVzdWx0UmVtYWluaW5nUXVhbnRpdHkgdmFsdWU9IjAiLz4KICAgICAgICA8L3F1ZXJ5QWNr
PgogICAgPC9jb250cm9sQWN0UHJvY2Vzcz4KPC9SQ01SX0lOMDAwMDMwVVYwMT4K</inboundTemplate>
            <outboundTemplate encoding="base64">ewoJInN0YXR1cyI6ICIiLAoJIm1lc3NhZ2UiOiAiIiwKCSJhY2tEZXRhaWwiOiB7CgkJImFja0lk
IjogIiIsCgkJImFja1RpbWUiOiAiIiwKCQkibWVzc2FnZUlkIjogIiIsCgkJInN0YXR1cyI6ICIi
Cgl9LAoJImRvY3VtZW50cyI6IFtdCn0=</outboundTemplate>
            <inboundDataType>HL7V3</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.8.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.8.0">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.8.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.8.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.8.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.8.0">
            <elements/>
          </filter>
          <transportName>JavaScript Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>false</waitForPrevious>
        </connector>
        <connector version="3.8.0">
          <metaDataId>11</metaDataId>
          <name>Service Get Document</name>
          <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.8.0">
            <pluginProperties/>
            <destinationConnectorProperties version="3.8.0">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>true</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <script>logger.debug(&apos;Service Get Document&apos;);

importPackage(Packages.ca.uvic.leadlab.cdxconnector);

try {
	var client = new WSClientDocument($(&apos;cdx.base.url&apos;), $(&apos;username&apos;), $(&apos;password&apos;), $(&apos;certPath&apos;), $(&apos;certPass&apos;));

	// Call the WS method using CDX Connector
	var cdxResponse = client.getDocument($(&apos;locationId&apos;), $(&apos;documentId&apos;));

	// return the raw response to be processed by the &apos;response transformers&apos;
	return ResponseFactory.getSentResponse(cdxResponse);
} catch (e) {
	logger.error(&quot;Error on &apos;Service Get Document&apos;: &quot; + e);
	
	responseMap.put(&apos;responseMessage&apos;, createErrorMessage(&quot;Error on &apos;Service Get Document&apos;: &quot; + e.message, null)); // create the error response
	responseMap.put(&apos;responseStatus&apos;, &apos;200&apos;); // return ok
}
</script>
          </properties>
          <transformer version="3.8.0">
            <elements>
              <com.mirth.connect.plugins.mapper.MapperStep version="3.8.0">
                <name>documentId</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <variable>documentId</variable>
                <mapping>msg[&apos;documentId&apos;]</mapping>
                <defaultValue>&quot;&quot;</defaultValue>
                <replacements/>
                <scope>CHANNEL</scope>
              </com.mirth.connect.plugins.mapper.MapperStep>
            </elements>
            <inboundTemplate encoding="base64">ewoJImRvY3VtZW50SWQiOiAiIgp9</inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>HL7V3</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.8.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.8.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.8.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.8.0">
                <stripNamespaces>true</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.8.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.8.0">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.8.0">
                <name>Build Response Document</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>try {
	if (responseStatus === SENT) { // process only SENT messages
		// Document list, CONF-CDXMCR069
		for (var i = 0; i &lt; getArrayOrXmlLength(msg[&apos;controlActProcess&apos;][&apos;subject&apos;]); i++) { 
			var target = msg[&apos;controlActProcess&apos;][&apos;subject&apos;][i][&apos;target&apos;]; // CONF-CDXMCR071

			// Process the CDA Document in &apos;CDA Document Parser&apos; channel
			var chResponse = router.routeMessage(&quot;CDA Document Parser&quot;, new XML(target[&apos;text&apos;].toString())); // CONF-CDXMCR082
			
			if (chResponse.status === SENT) {
				tmp[&apos;documents&apos;][i] = JSON.parse(chResponse.message);
				tmp[&apos;documents&apos;][i][&apos;cdaXML&apos;] = target[&apos;text&apos;].toString();
			} else {
				throw &apos;Error parsing CDA Document &apos; + chResponse.statusMessage;
			}
		}
	}
} catch(e) {
	logger.error(&quot;Error on &apos;Build Response Document&apos;: &quot; + e);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.8.0">
                <name>Get Attachments Response</name>
                <sequenceNumber>1</sequenceNumber>
                <enabled>true</enabled>
                <script>try {
	if (responseStatus === SENT) { // process only SENT messages
		if (getArrayOrXmlLength(msg[&apos;attachmentText&apos;]) &gt; 0) { // Attachment list, CONF-CDXMCR103
			tmp[&apos;documents&apos;][0][&apos;attachments&apos;] = [];
			for (var i = 0; i &lt; getArrayOrXmlLength(msg[&apos;attachmentText&apos;]); i++) { 
				var attachmentText = msg[&apos;attachmentText&apos;][i];

				var attachment = {};

				attachment[&apos;hash&apos;] = attachmentText[&apos;@integrityCheck&apos;].toString(); // CONF-CDXMCR105
				attachment[&apos;mediaType&apos;] = attachmentText[&apos;@mediaType&apos;].toString(); // CONF-CDXMCR107
				attachment[&apos;content&apos;] = attachmentText.toString(); // CONF-CDXMCR108

				// Attachment only has name with it is embedeed in the document
				if (tmp[&apos;documents&apos;][0][&apos;nonXMLBody&apos;][&apos;mediaType&apos;] !== &quot;text/plain&quot;) {
					attachment[&apos;reference&apos;] = tmp[&apos;documents&apos;][0][&apos;nonXMLBody&apos;][&apos;content&apos;];
				}
				
				// Save the attachment in the first and only returned document
				tmp[&apos;documents&apos;][0][&apos;attachments&apos;][i] = attachment; 
			}
		}
	}
} catch(e) {
	logger.error(&quot;Error on &apos;Get Attachments Response&apos;: &quot; + e);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.8.0">
                <name>Get Document Response</name>
                <sequenceNumber>2</sequenceNumber>
                <enabled>true</enabled>
                <script>try {
	// Store the response to be returned by the &quot;Source Connector&quot;
	responseMap.put(&apos;responseMessage&apos;, handleResponseMessage(responseStatus, responseStatusMessage, msg, function() {
		// Ack details
		tmp[&apos;ackDetail&apos;][&apos;ackId&apos;] = msg[&apos;id&apos;][&apos;@extension&apos;].toString();
		tmp[&apos;ackDetail&apos;][&apos;ackTime&apos;] = parseCDADateTime(msg[&apos;creationTime&apos;][&apos;@value&apos;].toString());
		tmp[&apos;ackDetail&apos;][&apos;messageId&apos;] = msg[&apos;acknowledgement&apos;][&apos;targetMessage&apos;][&apos;id&apos;][&apos;@extension&apos;].toString();
		tmp[&apos;ackDetail&apos;][&apos;status&apos;] = msg[&apos;controlActProcess&apos;][&apos;queryAck&apos;][&apos;queryResponseCode&apos;][&apos;@code&apos;].toString();

		// Payload set by the previous transformers

		return handleQueryResultStatus(tmp, msg, &apos;documents&apos;); // Return the transformed message to be converted on &apos;handleResponseMessage&apos;
	}));
	responseMap.put(&apos;responseStatus&apos;, &apos;200&apos;);
} catch(e) {
	logger.error(&quot;Error on &apos;Get Document Response&apos;: &quot; + e);

	responseMap.put(&apos;responseMessage&apos;, createErrorMessage(e.message, null));
	responseMap.put(&apos;responseStatus&apos;, &apos;200&apos;);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64">PFJDTVJfSU4wMDAwMzJVVjAxIHhtbG5zPSJ1cm46aGw3LW9yZzp2MyIgeG1sbnM6bnMyPSJ1cm46
YmNjZHguY2EiIElUU1ZlcnNpb249IlhNTF8xLjAiPgogICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0
eU5hbWU9IkNEWCBNZXNzYWdlIElEIiBleHRlbnNpb249ImQwOTg3ZDY0LWFhMjQtNDM3YS05OTBi
LWVmMTE0YmNlOGY0MiIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjEiLz4KICAg
IDxjcmVhdGlvblRpbWUgdmFsdWU9IjIwMTkwNjAzMTQxNi0wNzAwIi8+CiAgICA8dmVyc2lvbkNv
ZGUgY29kZT0iQmFsbG90MjAwOU1heSIvPgogICAgPGludGVyYWN0aW9uSWQgcm9vdD0iMi4xNi44
NDAuMS4xMTM4ODMuMS42Ii8+CiAgICA8cHJvY2Vzc2luZ0NvZGUgY29kZT0iUCIvPgogICAgPHBy
b2Nlc3NpbmdNb2RlQ29kZSBjb2RlPSJUIi8+CiAgICA8YWNjZXB0QWNrQ29kZSBjb2RlPSJORSIv
PgogICAgPHJlY2VpdmVyPgogICAgICAgIDxkZXZpY2UgY2xhc3NDb2RlPSJERVYiIGRldGVybWlu
ZXJDb2RlPSJJTlNUQU5DRSI+CiAgICAgICAgICAgIDxpZCBudWxsRmxhdm9yPSJOQSIvPgogICAg
ICAgICAgICA8YXNBZ2VudCBjbGFzc0NvZGU9IkFHTlQiPgogICAgICAgICAgICAgICAgPHJlcHJl
c2VudGVkT3JnYW5pemF0aW9uIGNsYXNzQ29kZT0iT1JHIiBkZXRlcm1pbmVyQ29kZT0iSU5TVEFO
Q0UiPgogICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJDRFgg
Q2xpbmljIElEIiBleHRlbnNpb249ImNkeHBvc3Rwcm9kLW90Y2EiIHJvb3Q9IjIuMTYuODQwLjEu
MTEzODgzLjMuMjc3LjEwMC4yIi8+CiAgICAgICAgICAgICAgICA8L3JlcHJlc2VudGVkT3JnYW5p
emF0aW9uPgogICAgICAgICAgICA8L2FzQWdlbnQ+CiAgICAgICAgPC9kZXZpY2U+CiAgICA8L3Jl
Y2VpdmVyPgogICAgPHNlbmRlcj4KICAgICAgICA8ZGV2aWNlIGNsYXNzQ29kZT0iREVWIiBkZXRl
cm1pbmVyQ29kZT0iSU5TVEFOQ0UiPgogICAgICAgICAgICA8aWQgbnVsbEZsYXZvcj0iTkEiLz4K
ICAgICAgICAgICAgPGFzQWdlbnQgY2xhc3NDb2RlPSJBR05UIj4KICAgICAgICAgICAgICAgIDxy
ZXByZXNlbnRlZE9yZ2FuaXphdGlvbiBjbGFzc0NvZGU9Ik9SRyIgZGV0ZXJtaW5lckNvZGU9IklO
U1RBTkNFIj4KICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0i
Q0RYIENsaW5pYyBJRCIgZXh0ZW5zaW9uPSJDRFhJSEEiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgz
LjMuMjc3LjEwMC4yIi8+CiAgICAgICAgICAgICAgICA8L3JlcHJlc2VudGVkT3JnYW5pemF0aW9u
PgogICAgICAgICAgICA8L2FzQWdlbnQ+CiAgICAgICAgPC9kZXZpY2U+CiAgICA8L3NlbmRlcj4K
ICAgIDxhY2tub3dsZWRnZW1lbnQgdHlwZUNvZGU9IkFBIj4KICAgICAgICA8dGFyZ2V0TWVzc2Fn
ZT4KICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkNEWCBNZXNzYWdlIElE
IiBleHRlbnNpb249IjcyOTFiYjEyLTU2OTYtNDNkNC04YTNmLWYzOWMzNDdkYjk0NyIgcm9vdD0i
Mi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjEiLz4KICAgICAgICA8L3RhcmdldE1lc3NhZ2U+
CiAgICA8L2Fja25vd2xlZGdlbWVudD4KICAgIDxjb250cm9sQWN0UHJvY2VzcyBjbGFzc0NvZGU9
IkNBQ1QiIG1vb2RDb2RlPSJBUFQiPgogICAgICAgIDxzdWJqZWN0IHR5cGVDb2RlPSJTVUJKIj4K
ICAgICAgICAgICAgPHRhcmdldCBjbGFzc0NvZGU9IkRPQ0NMSU4iIG1vb2RDb2RlPSJFVk4iPgog
ICAgICAgICAgICAgICAgPHRlbXBsYXRlSWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQ0RYIENv
bnRlbnQgVHlwZSIgZXh0ZW5zaW9uPSJDREEiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3
LjEwMC4yMCIvPgogICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkNE
WCBNZXNzYWdlIElEIiBleHRlbnNpb249ImRiMGU1ZmI4LWM5NDYtZTkxMS1hOTZhLTAwNTA1Njhj
NTVhNiIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjEiLz4KICAgICAgICAgICAg
ICAgIDxjb2RlIGNvZGU9IjIuMTYuODQwLjEuMTEzODgzLjMuMTgxOC4xMC4xLjUiIGNvZGVTeXN0
ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuMSIgZGlzcGxheU5hbWU9ImUyZSBHZW5lcmljIFVuc3Ry
dWN0dXJlZCBSZWZlcnJhbCIvPgogICAgICAgICAgICAgICAgPHRleHQgbWVkaWFUeXBlPSJ0ZXh0
L3htbCI+Jmx0Oz94bWwtc3R5bGVzaGVldCB0eXBlPSJ0ZXh0L3hzbCIgaHJlZj0iQ0RBLnhzbCI/
Jmd0OyZsdDtDbGluaWNhbERvY3VtZW50IHhtbG5zPSJ1cm46aGw3LW9yZzp2MyIgeG1sbnM6eHNp
PSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeG1sbnM6bnMwPSJo
dHRwOi8vbWljcm9zb2Z0LmNvbS9IZWFsdGhDYXJlL0hMNy8yWCIgeG1sbnM6YmNjZGE9InVybjpi
Y2NkYSIgeG1sbnM6eGFsYW49Imh0dHA6Ly94bWwuYXBhY2hlLm9yZy94c2x0IiBjbGFzc0NvZGU9
IkRPQ0NMSU4iIG1vb2RDb2RlPSJFVk4iJmd0OyZsdDtyZWFsbUNvZGUgY29kZT0iQ0EtQkMiIC8m
Z3Q7Jmx0O3R5cGVJZCByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xLjMiIGV4dGVuc2lvbj0iUE9D
RF9IRDAwMDA0MCIgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iSEw3IENEQSBSMiIgLyZndDsmbHQ7
dGVtcGxhdGVJZCByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjE4MTguMTAuMS41IiBhc3NpZ25p
bmdBdXRob3JpdHlOYW1lPSJlMmUgUmVmZXJyYWwgKFVuc3RydWN0dXJlZCkiIC8mZ3Q7Jmx0O2lk
IHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC4zIiBleHRlbnNpb249IjYxYTFhMzg3
LTQwOGItNGU1Yy1iZTI0LTE5NzZhY2UxYzI4MCIgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQ0RY
IENsaW5pY2FsIERvY3VtZW50IElEIiAvJmd0OyZsdDtjb2RlIGNvZGVTeXN0ZW09IjIuMTYuODQw
LjEuMTEzODgzLjYuMSIgY29kZT0iNTcxMzMtMSIgY29kZVN5c3RlbU5hbWU9IkxPSU5DIENvZGUi
IGRpc3BsYXlOYW1lPSJSZWZlcnJhbCBub3RlIiAvJmd0OyZsdDt0aXRsZSZndDtSZWZlcnJhbCBO
b3RlJmx0Oy90aXRsZSZndDsmbHQ7ZWZmZWN0aXZlVGltZSB2YWx1ZT0iMjAxOTAzMTQxOTAzLTA3
MDAiIC8mZ3Q7Jmx0O2NvbmZpZGVudGlhbGl0eUNvZGUgY29kZT0iTiIgY29kZVN5c3RlbT0iMi4x
Ni44NDAuMS4xMTM4ODMuNS4yNSIgY29kZVN5c3RlbU5hbWU9IkNvbmZpZGVudGlhbGl0eSIgLyZn
dDsmbHQ7bGFuZ3VhZ2VDb2RlIGNvZGU9ImVuLUNBIiAvJmd0OyZsdDtyZWNvcmRUYXJnZXQgdHlw
ZUNvZGU9IlJDVCIgY29udGV4dENvbnRyb2xDb2RlPSJPUCImZ3Q7Jmx0O3BhdGllbnRSb2xlIGNs
YXNzQ29kZT0iUEFUIiZndDsmbHQ7aWQgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuNC41MCIgZXh0
ZW5zaW9uPSI5Njk4NjUwMjY3IiBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJCQyBQYXRpZW50IEhl
YWx0aCBOdW1iZXIiIC8mZ3Q7Jmx0O2lkIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEu
NzMiIGV4dGVuc2lvbj0iQTAwMDAwMDI1IiBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJJSEEgUGF0
aWVudCBFTVIgTnVtYmVyIiAvJmd0OyZsdDtpZCByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3
Ny4xLjcxIiBleHRlbnNpb249IkVLMDAwMDAwMzYiIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IklI
QSBQYXRpZW50IFVuaXQgTnVtYmVyIiAvJmd0OyZsdDthZGRyIHVzZT0iSCImZ3Q7NzcxNSBSb3ll
IFNxJmx0O2RlbGltaXRlciAvJmd0OyZsdDtjaXR5Jmd0O0xpb25zIEJheSZsdDsvY2l0eSZndDsm
bHQ7c3RhdGUmZ3Q7Q0EtQkMmbHQ7L3N0YXRlJmd0OyZsdDtwb3N0YWxDb2RlJmd0O1YwTiAwQTIm
bHQ7L3Bvc3RhbENvZGUmZ3Q7Jmx0Oy9hZGRyJmd0OyZsdDt0ZWxlY29tIHVzZT0iSCIgdmFsdWU9
InRlbDoyNTAtMTIzLTQ1NjciIC8mZ3Q7Jmx0O3BhdGllbnQgY2xhc3NDb2RlPSJQU04iJmd0OyZs
dDtuYW1lIHVzZT0iTCImZ3Q7Jmx0O2ZhbWlseSZndDtJaGN1cnJlbmNlJmx0Oy9mYW1pbHkmZ3Q7
Jmx0O2dpdmVuJmd0O1BsaXMmbHQ7L2dpdmVuJmd0OyZsdDsvbmFtZSZndDsmbHQ7YWRtaW5pc3Ry
YXRpdmVHZW5kZXJDb2RlIGNvZGU9IkYiIC8mZ3Q7Jmx0O2JpcnRoVGltZSB2YWx1ZT0iMTk1ODAy
MjQiIC8mZ3Q7Jmx0Oy9wYXRpZW50Jmd0OyZsdDsvcGF0aWVudFJvbGUmZ3Q7Jmx0Oy9yZWNvcmRU
YXJnZXQmZ3Q7Jmx0O2F1dGhvciB0eXBlQ29kZT0iQVVUIiBjb250ZXh0Q29udHJvbENvZGU9Ik9Q
IiZndDsmbHQ7dGltZSB2YWx1ZT0iMjAxOTAzMTQxOTAzLTA3MDAiIC8mZ3Q7Jmx0O2Fzc2lnbmVk
QXV0aG9yIGNsYXNzQ29kZT0iQVNTSUdORUQiJmd0OyZsdDtpZCByb290PSIyLjE2Ljg0MC4xLjEx
Mzg4My4zLjI3Ny4xLjYxIiBleHRlbnNpb249IlBMSUYiIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9
IklIQSBNZWRpdGVjaCBJRCIgLyZndDsmbHQ7YXNzaWduZWRQZXJzb24gY2xhc3NDb2RlPSJQU04i
IGRldGVybWluZXJDb2RlPSJJTlNUQU5DRSImZ3Q7Jmx0O25hbWUgdXNlPSJMIiZndDsmbHQ7cHJl
Zml4Jmd0O0RyJmx0Oy9wcmVmaXgmZ3Q7Jmx0O2ZhbWlseSZndDtQbGlzJmx0Oy9mYW1pbHkmZ3Q7
Jmx0O2dpdmVuJmd0O0ZhbWlseSZsdDsvZ2l2ZW4mZ3Q7Jmx0Oy9uYW1lJmd0OyZsdDsvYXNzaWdu
ZWRQZXJzb24mZ3Q7Jmx0Oy9hc3NpZ25lZEF1dGhvciZndDsmbHQ7L2F1dGhvciZndDsmbHQ7YXV0
aG9yIHR5cGVDb2RlPSJBVVQiIGNvbnRleHRDb250cm9sQ29kZT0iT1AiJmd0OyZsdDt0aW1lIHZh
bHVlPSIyMDE5MDMxNDE5MDMtMDcwMCIgLyZndDsmbHQ7YXNzaWduZWRBdXRob3IgY2xhc3NDb2Rl
PSJBU1NJR05FRCImZ3Q7Jmx0O2lkIG51bGxGbGF2b3I9Ik5BIiAvJmd0OyZsdDthc3NpZ25lZEF1
dGhvcmluZ0RldmljZSZndDsmbHQ7c29mdHdhcmVOYW1lIGNvZGU9IkNEWEFQUCIgY29kZVN5c3Rl
bT0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMS4xMiIgY29kZVN5c3RlbU5hbWU9IklIQSBTb2Z0
d2FyZSBDb2RlIiBkaXNwbGF5TmFtZT0iQ0RYIFNhbXBsZSBBcHAiIC8mZ3Q7Jmx0Oy9hc3NpZ25l
ZEF1dGhvcmluZ0RldmljZSZndDsmbHQ7L2Fzc2lnbmVkQXV0aG9yJmd0OyZsdDsvYXV0aG9yJmd0
OyZsdDtjdXN0b2RpYW4gdHlwZUNvZGU9IkNTVCImZ3Q7Jmx0O2Fzc2lnbmVkQ3VzdG9kaWFuIGNs
YXNzQ29kZT0iQVNTSUdORUQiJmd0OyZsdDtyZXByZXNlbnRlZEN1c3RvZGlhbk9yZ2FuaXphdGlv
biBjbGFzc0NvZGU9Ik9SRyIgZGV0ZXJtaW5lckNvZGU9IklOU1RBTkNFIiZndDsmbHQ7aWQgcm9v
dD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjIiIGV4dGVuc2lvbj0iY2R4cG9zdHByb2Qt
b3RjYSIgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQ0RYIENsaW5pYyBSZWdpc3RyeSBJRCIgLyZn
dDsmbHQ7bmFtZSZndDtPc2NhciBUZXN0IENsaW5pYyBBJmx0Oy9uYW1lJmd0OyZsdDsvcmVwcmVz
ZW50ZWRDdXN0b2RpYW5Pcmdhbml6YXRpb24mZ3Q7Jmx0Oy9hc3NpZ25lZEN1c3RvZGlhbiZndDsm
bHQ7L2N1c3RvZGlhbiZndDsmbHQ7aW5mb3JtYXRpb25SZWNpcGllbnQgdHlwZUNvZGU9IlBSQ1Ai
Jmd0OyZsdDtpbnRlbmRlZFJlY2lwaWVudCBjbGFzc0NvZGU9IkFTU0lHTkVEIiZndDsmbHQ7aWQg
cm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy40MC4yLjExIiBleHRlbnNpb249IjkzMTg4IiBhc3Np
Z25pbmdBdXRob3JpdHlOYW1lPSJCQyBNaW5pc3RyeSBQcmFjdGl0aW9uZXIgSUQiIC8mZ3Q7Jmx0
O2lkIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEuNjEiIGV4dGVuc2lvbj0iUExJU0lI
TFUiIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IklIQSBNZWRpdGVjaCBJRCIgLyZndDsmbHQ7aW5m
b3JtYXRpb25SZWNpcGllbnQgY2xhc3NDb2RlPSJQU04iIGRldGVybWluZXJDb2RlPSJJTlNUQU5D
RSImZ3Q7Jmx0O25hbWUgdXNlPSJMIiZndDsmbHQ7cHJlZml4Jmd0O0RyLiZsdDsvcHJlZml4Jmd0
OyZsdDtmYW1pbHkmZ3Q7UGxpc2loYiZsdDsvZmFtaWx5Jmd0OyZsdDtnaXZlbiZndDtMdWNpdXMm
bHQ7L2dpdmVuJmd0OyZsdDsvbmFtZSZndDsmbHQ7L2luZm9ybWF0aW9uUmVjaXBpZW50Jmd0OyZs
dDtyZWNlaXZlZE9yZ2FuaXphdGlvbiZndDsmbHQ7aWQgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMu
My4yNzcuMTAwLjIiIGV4dGVuc2lvbj0iY2R4cG9zdHByb2Qtb3RjYSIgYXNzaWduaW5nQXV0aG9y
aXR5TmFtZT0iQ0RYIENsaW5pYyBSZWdpc3RyeSBJRCIgLyZndDsmbHQ7bmFtZSZndDtPc2NhciBU
ZXN0IENsaW5pYyBBJmx0Oy9uYW1lJmd0OyZsdDsvcmVjZWl2ZWRPcmdhbml6YXRpb24mZ3Q7Jmx0
Oy9pbnRlbmRlZFJlY2lwaWVudCZndDsmbHQ7L2luZm9ybWF0aW9uUmVjaXBpZW50Jmd0OyZsdDtp
bmZvcm1hdGlvblJlY2lwaWVudCB0eXBlQ29kZT0iVFJDIiZndDsmbHQ7aW50ZW5kZWRSZWNpcGll
bnQgY2xhc3NDb2RlPSJBU1NJR05FRCImZ3Q7Jmx0O2lkIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgz
LjMuNDAuMi4xMSIgZXh0ZW5zaW9uPSI5MzE5NCIgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQkMg
TWluaXN0cnkgUHJhY3RpdGlvbmVyIElEIiAvJmd0OyZsdDtpZCByb290PSIyLjE2Ljg0MC4xLjEx
Mzg4My4zLjI3Ny4xLjYxIiBleHRlbnNpb249IlBMSVNJSE5PIiBhc3NpZ25pbmdBdXRob3JpdHlO
YW1lPSJJSEEgTWVkaXRlY2ggSUQiIC8mZ3Q7Jmx0O2luZm9ybWF0aW9uUmVjaXBpZW50IGNsYXNz
Q29kZT0iUFNOIiBkZXRlcm1pbmVyQ29kZT0iSU5TVEFOQ0UiJmd0OyZsdDtuYW1lIHVzZT0iTCIm
Z3Q7Jmx0O3ByZWZpeCZndDtEci4mbHQ7L3ByZWZpeCZndDsmbHQ7ZmFtaWx5Jmd0O1BsaXNpaGcm
bHQ7L2ZhbWlseSZndDsmbHQ7Z2l2ZW4mZ3Q7Tm9lbCZsdDsvZ2l2ZW4mZ3Q7Jmx0Oy9uYW1lJmd0
OyZsdDsvaW5mb3JtYXRpb25SZWNpcGllbnQmZ3Q7Jmx0O3JlY2VpdmVkT3JnYW5pemF0aW9uJmd0
OyZsdDtpZCByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuMiIgZXh0ZW5zaW9uPSJj
ZHhwb3N0cHJvZC1vdGNhIiBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJDRFggQ2xpbmljIFJlZ2lz
dHJ5IElEIiAvJmd0OyZsdDtuYW1lJmd0O09zY2FyIFRlc3QgQ2xpbmljIEEmbHQ7L25hbWUmZ3Q7
Jmx0Oy9yZWNlaXZlZE9yZ2FuaXphdGlvbiZndDsmbHQ7L2ludGVuZGVkUmVjaXBpZW50Jmd0OyZs
dDsvaW5mb3JtYXRpb25SZWNpcGllbnQmZ3Q7Jmx0O3BhcnRpY2lwYW50IHR5cGVDb2RlPSJSRUYi
IGNvbnRleHRDb250cm9sQ29kZT0iT1AiJmd0OyZsdDtmdW5jdGlvbkNvZGUgY29kZVN5c3RlbT0i
Mi4xNi44NDAuMS4xMTM4ODMuMi4yMC4zLjg3IiBjb2RlPSJPUkQiIGNvZGVTeXN0ZW1OYW1lPSJI
TDdQYXJ0aWNpcGF0aW9uRnVuY3Rpb24iIGRpc3BsYXlOYW1lPSJPcmRlcmluZyBQcm92aWRlciIg
LyZndDsmbHQ7YXNzb2NpYXRlZEVudGl0eSBjbGFzc0NvZGU9IlBST1YiJmd0OyZsdDtpZCByb290
PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xLjYxIiBleHRlbnNpb249IlBMSUYiIGFzc2lnbmlu
Z0F1dGhvcml0eU5hbWU9IklIQSBNZWRpdGVjaCBJRCIgLyZndDsmbHQ7YXNzb2NpYXRlZFBlcnNv
biBjbGFzc0NvZGU9IlBTTiIgZGV0ZXJtaW5lckNvZGU9IklOU1RBTkNFIiZndDsmbHQ7bmFtZSB1
c2U9IkwiJmd0OyZsdDtwcmVmaXgmZ3Q7RHImbHQ7L3ByZWZpeCZndDsmbHQ7ZmFtaWx5Jmd0O1Bs
aXMmbHQ7L2ZhbWlseSZndDsmbHQ7Z2l2ZW4mZ3Q7RmFtaWx5Jmx0Oy9naXZlbiZndDsmbHQ7L25h
bWUmZ3Q7Jmx0Oy9hc3NvY2lhdGVkUGVyc29uJmd0OyZsdDsvYXNzb2NpYXRlZEVudGl0eSZndDsm
bHQ7L3BhcnRpY2lwYW50Jmd0OyZsdDtpbkZ1bGZpbGxtZW50T2YgdHlwZUNvZGU9IkZMRlMiJmd0
OyZsdDtvcmRlciBjbGFzc0NvZGU9IkVOQyIgbW9vZENvZGU9IlJRTyImZ3Q7Jmx0O2lkIG51bGxG
bGF2b3I9IlVOSyIgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iT3JkZXIgSUQiIC8mZ3Q7Jmx0Oy9v
cmRlciZndDsmbHQ7L2luRnVsZmlsbG1lbnRPZiZndDsmbHQ7ZG9jdW1lbnRhdGlvbk9mIHR5cGVD
b2RlPSJET0MiJmd0OyZsdDtzZXJ2aWNlRXZlbnQgY2xhc3NDb2RlPSJBQ1QiIG1vb2RDb2RlPSJF
Vk4iIG51bGxGbGF2b3I9IlVOSyImZ3Q7Jmx0O2NvZGUgLyZndDsmbHQ7ZWZmZWN0aXZlVGltZSB2
YWx1ZT0iMjAxOTAzMTQxOTAzLTA3MDAiIC8mZ3Q7Jmx0O3BlcmZvcm1lciB0eXBlQ29kZT0iUFBS
RiImZ3Q7Jmx0O2Fzc2lnbmVkRW50aXR5IGNsYXNzQ29kZT0iQVNTSUdORUQiJmd0OyZsdDtpZCBy
b290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjQwLjIuMTEiIGV4dGVuc2lvbj0iOTMxODgiIGFzc2ln
bmluZ0F1dGhvcml0eU5hbWU9IkJDIE1pbmlzdHJ5IFByYWN0aXRpb25lciBJRCIgLyZndDsmbHQ7
aWQgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMS42MSIgZXh0ZW5zaW9uPSJQTElTSUhM
VSIgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iSUhBIE1lZGl0ZWNoIElEIiAvJmd0OyZsdDthc3Np
Z25lZFBlcnNvbiBjbGFzc0NvZGU9IlBTTiIgZGV0ZXJtaW5lckNvZGU9IklOU1RBTkNFIiZndDsm
bHQ7bmFtZSB1c2U9IkwiJmd0OyZsdDtwcmVmaXgmZ3Q7RHIuJmx0Oy9wcmVmaXgmZ3Q7Jmx0O2Zh
bWlseSZndDtQbGlzaWhiJmx0Oy9mYW1pbHkmZ3Q7Jmx0O2dpdmVuJmd0O0x1Y2l1cyZsdDsvZ2l2
ZW4mZ3Q7Jmx0Oy9uYW1lJmd0OyZsdDsvYXNzaWduZWRQZXJzb24mZ3Q7Jmx0Oy9hc3NpZ25lZEVu
dGl0eSZndDsmbHQ7L3BlcmZvcm1lciZndDsmbHQ7c3RhdHVzQ29kZSB4bWxucz0idXJuOmJjY2Rh
IiBjb2RlPSJzaWduZWQiIC8mZ3Q7Jmx0Oy9zZXJ2aWNlRXZlbnQmZ3Q7Jmx0Oy9kb2N1bWVudGF0
aW9uT2YmZ3Q7Jmx0O2NvbXBvbmVudE9mIHR5cGVDb2RlPSJDT01QIiZndDsmbHQ7ZW5jb21wYXNz
aW5nRW5jb3VudGVyIGNsYXNzQ29kZT0iRU5DIiBtb29kQ29kZT0iRVZOIiZndDsmbHQ7aWQgbnVs
bEZsYXZvcj0iVU5LIiAvJmd0OyZsdDtlZmZlY3RpdmVUaW1lIHZhbHVlPSIyMDE5MDMxNDE5MDMt
MDcwMCIgLyZndDsmbHQ7ZW5jb3VudGVyUGFydGljaXBhbnQgdHlwZUNvZGU9IkNPTiImZ3Q7Jmx0
O2Fzc2lnbmVkRW50aXR5IGNsYXNzQ29kZT0iQVNTSUdORUQiJmd0OyZsdDtpZCByb290PSIyLjE2
Ljg0MC4xLjExMzg4My4zLjQwLjIuMTEiIGV4dGVuc2lvbj0iOTMxOTUiIGFzc2lnbmluZ0F1dGhv
cml0eU5hbWU9IkJDIE1pbmlzdHJ5IFByYWN0aXRpb25lciBJRCIgLyZndDsmbHQ7aWQgcm9vdD0i
Mi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMS42MSIgZXh0ZW5zaW9uPSJQTElTSUhITyIgYXNzaWdu
aW5nQXV0aG9yaXR5TmFtZT0iSUhBIE1lZGl0ZWNoIElEIiAvJmd0OyZsdDthc3NpZ25lZFBlcnNv
biBjbGFzc0NvZGU9IlBTTiIgZGV0ZXJtaW5lckNvZGU9IklOU1RBTkNFIiZndDsmbHQ7bmFtZSB1
c2U9IkwiJmd0OyZsdDtwcmVmaXgmZ3Q7RHIuJmx0Oy9wcmVmaXgmZ3Q7Jmx0O2ZhbWlseSZndDtQ
bGlzaWhoJmx0Oy9mYW1pbHkmZ3Q7Jmx0O2dpdmVuJmd0O0hvbWVyJmx0Oy9naXZlbiZndDsmbHQ7
L25hbWUmZ3Q7Jmx0Oy9hc3NpZ25lZFBlcnNvbiZndDsmbHQ7L2Fzc2lnbmVkRW50aXR5Jmd0OyZs
dDsvZW5jb3VudGVyUGFydGljaXBhbnQmZ3Q7Jmx0O2xvY2F0aW9uJmd0OyZsdDtoZWFsdGhDYXJl
RmFjaWxpdHkgY2xhc3NDb2RlPSJTRExPQyImZ3Q7Jmx0O2lkIHJvb3Q9IjIuMTYuODQwLjEuMTEz
ODgzLjMuMjc3LjEwMC4yIiBleHRlbnNpb249ImNkeHBvc3Rwcm9kLW90Y2EiIGFzc2lnbmluZ0F1
dGhvcml0eU5hbWU9IkNEWCBDbGluaWMgUmVnaXN0cnkgSUQiIC8mZ3Q7Jmx0O2xvY2F0aW9uIGRl
dGVybWluZXJDb2RlPSJJTlNUQU5DRSIgY2xhc3NDb2RlPSJQTEMiJmd0OyZsdDtuYW1lJmd0O09z
Y2FyIFRlc3QgQ2xpbmljIEEmbHQ7L25hbWUmZ3Q7Jmx0Oy9sb2NhdGlvbiZndDsmbHQ7L2hlYWx0
aENhcmVGYWNpbGl0eSZndDsmbHQ7L2xvY2F0aW9uJmd0OyZsdDsvZW5jb21wYXNzaW5nRW5jb3Vu
dGVyJmd0OyZsdDsvY29tcG9uZW50T2YmZ3Q7Jmx0O2NvbXBvbmVudCB0eXBlQ29kZT0iQ09NUCIm
Z3Q7Jmx0O25vblhNTEJvZHkmZ3Q7Jmx0O3RleHQgbWVkaWFUeXBlPSJ0ZXh0L3BsYWluIiByZXBy
ZXNlbnRhdGlvbj0iVFhUIiZndDtTYW1wbGUgUmVmZXJyYWwgdGVzdCBhZ2FpbiZsdDsvdGV4dCZn
dDsmbHQ7L25vblhNTEJvZHkmZ3Q7Jmx0Oy9jb21wb25lbnQmZ3Q7Jmx0Oy9DbGluaWNhbERvY3Vt
ZW50Jmd0OzwvdGV4dD4KICAgICAgICAgICAgICAgIDxzdGF0dXNDb2RlIGNvZGU9ImNvbXBsZXRl
ZCIvPgogICAgICAgICAgICAgICAgPGVmZmVjdGl2ZVRpbWUgdmFsdWU9IjIwMTkwNjAzMTQxNi0w
NzAwIi8+CiAgICAgICAgICAgICAgICA8Y29uZmlkZW50aWFsaXR5Q29kZSBjb2RlPSJOIiBjb2Rl
U3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42LjEiLz4KICAgICAgICAgICAgICAgIDxyZWNvcmRU
YXJnZXQgbnVsbEZsYXZvcj0iTkEiIHR5cGVDb2RlPSJSQ1QiPgogICAgICAgICAgICAgICAgICAg
IDxwYXRpZW50IGNsYXNzQ29kZT0iUEFUIiBudWxsRmxhdm9yPSJOQSI+CiAgICAgICAgICAgICAg
ICAgICAgICAgIDxwYXRpZW50Tm9uUGVyc29uTGl2aW5nU3ViamVjdCB4bWxuczp4c2k9Imh0dHA6
Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6bmlsPSJ0cnVlIi8+CiAg
ICAgICAgICAgICAgICAgICAgICAgIDxwYXRpZW50UGVyc29uIHhtbG5zOnhzaT0iaHR0cDovL3d3
dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTpuaWw9InRydWUiLz4KICAgICAg
ICAgICAgICAgICAgICA8L3BhdGllbnQ+CiAgICAgICAgICAgICAgICA8L3JlY29yZFRhcmdldD4K
ICAgICAgICAgICAgICAgIDxhdXRob3IgbnVsbEZsYXZvcj0iTkEiIHR5cGVDb2RlPSJBVVQiPgog
ICAgICAgICAgICAgICAgICAgIDx0aW1lIG51bGxGbGF2b3I9Ik5BIi8+CiAgICAgICAgICAgICAg
ICAgICAgPGFzc2lnbmVkQXV0aG9yIGNsYXNzQ29kZT0iQVNTSUdORUQiIG51bGxGbGF2b3I9Ik5B
Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPGlkIG51bGxGbGF2b3I9Ik5BIi8+CiAgICAgICAg
ICAgICAgICAgICAgICAgIDxhc3NpZ25lZEF1dGhvcmluZ0RldmljZSB4bWxuczp4c2k9Imh0dHA6
Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6bmlsPSJ0cnVlIi8+CiAg
ICAgICAgICAgICAgICAgICAgICAgIDxhc3NpZ25lZFBlcnNvbiB4bWxuczp4c2k9Imh0dHA6Ly93
d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6bmlsPSJ0cnVlIi8+CiAgICAg
ICAgICAgICAgICAgICAgPC9hc3NpZ25lZEF1dGhvcj4KICAgICAgICAgICAgICAgIDwvYXV0aG9y
PgogICAgICAgICAgICAgICAgPGN1c3RvZGlhbiBudWxsRmxhdm9yPSJOQSIgdHlwZUNvZGU9IkNT
VCI+CiAgICAgICAgICAgICAgICAgICAgPGFzc2lnbmVkQ3VzdG9kaWFuIGNsYXNzQ29kZT0iQVNT
SUdORUQiPgogICAgICAgICAgICAgICAgICAgICAgICA8cmVwcmVzZW50ZWRPcmdhbml6YXRpb24g
Y2xhc3NDb2RlPSJOQVQiIGRldGVybWluZXJDb2RlPSJJTlNUQU5DRSIgbnVsbEZsYXZvcj0iTkEi
PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkIG51bGxGbGF2b3I9Ik5BIi8+CiAgICAg
ICAgICAgICAgICAgICAgICAgIDwvcmVwcmVzZW50ZWRPcmdhbml6YXRpb24+CiAgICAgICAgICAg
ICAgICAgICAgPC9hc3NpZ25lZEN1c3RvZGlhbj4KICAgICAgICAgICAgICAgIDwvY3VzdG9kaWFu
PgogICAgICAgICAgICAgICAgPGluZm9ybWF0aW9uUmVjaXBpZW50IHR5cGVDb2RlPSJQUkNQIj4K
ICAgICAgICAgICAgICAgICAgICA8aW50ZW5kZWRSZWNpcGllbnQgY2xhc3NDb2RlPSJBU1NJR05F
RCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJC
QyBNaW5pc3RyeSBQcmFjdGl0aW9uZXIgSUQiIGV4dGVuc2lvbj0iOTMxODgiIHJvb3Q9IjIuMTYu
ODQwLjEuMTEzODgzLjMuNDAuMi4xMSIvPgogICAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNz
aWduaW5nQXV0aG9yaXR5TmFtZT0iSUhBIE1lZGl0ZWNoIElEIiBleHRlbnNpb249IlBMSVNJSExV
IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xLjYxIi8+CiAgICAgICAgICAgICAgICAg
ICAgICAgIDxpbmZvcm1hdGlvblJlY2lwaWVudCBjbGFzc0NvZGU9IlBTTiIgZGV0ZXJtaW5lckNv
ZGU9IklOU1RBTkNFIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPgogICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgIDxmYW1pbHk+UGxpc2loYjwvZmFtaWx5PgogICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgIDxnaXZlbj5MdWNpdXM8L2dpdmVuPgogICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgIDxwcmVmaXg+RHIuPC9wcmVmaXg+CiAgICAgICAgICAgICAg
ICAgICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvaW5mb3JtYXRp
b25SZWNpcGllbnQ+CiAgICAgICAgICAgICAgICAgICAgPC9pbnRlbmRlZFJlY2lwaWVudD4KICAg
ICAgICAgICAgICAgIDwvaW5mb3JtYXRpb25SZWNpcGllbnQ+CiAgICAgICAgICAgICAgICA8aW5m
b3JtYXRpb25SZWNpcGllbnQgdHlwZUNvZGU9IlBSQ1AiPgogICAgICAgICAgICAgICAgICAgIDxp
bnRlbmRlZFJlY2lwaWVudCBjbGFzc0NvZGU9IkFTU0lHTkVEIj4KICAgICAgICAgICAgICAgICAg
ICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkJDIE1pbmlzdHJ5IFByYWN0aXRpb25l
ciBJRCIgZXh0ZW5zaW9uPSI5MzE5NCIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy40MC4yLjEx
Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJJ
SEEgTWVkaXRlY2ggSUQiIGV4dGVuc2lvbj0iUExJU0lITk8iIHJvb3Q9IjIuMTYuODQwLjEuMTEz
ODgzLjMuMjc3LjEuNjEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPGluZm9ybWF0aW9uUmVj
aXBpZW50IGNsYXNzQ29kZT0iUFNOIiBkZXRlcm1pbmVyQ29kZT0iSU5TVEFOQ0UiPgogICAgICAg
ICAgICAgICAgICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgPGZhbWlseT5QbGlzaWhnPC9mYW1pbHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgPGdpdmVuPk5vZWw8L2dpdmVuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxw
cmVmaXg+RHIuPC9wcmVmaXg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L25hbWU+CiAg
ICAgICAgICAgICAgICAgICAgICAgIDwvaW5mb3JtYXRpb25SZWNpcGllbnQ+CiAgICAgICAgICAg
ICAgICAgICAgPC9pbnRlbmRlZFJlY2lwaWVudD4KICAgICAgICAgICAgICAgIDwvaW5mb3JtYXRp
b25SZWNpcGllbnQ+CiAgICAgICAgICAgICAgICA8aW5mb3JtYXRpb25SZWNpcGllbnQgdHlwZUNv
ZGU9IlBSQ1AiPgogICAgICAgICAgICAgICAgICAgIDxpbnRlbmRlZFJlY2lwaWVudCBjbGFzc0Nv
ZGU9IkFTU0lHTkVEIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhv
cml0eU5hbWU9IkJDIE1pbmlzdHJ5IFByYWN0aXRpb25lciBJRCIgZXh0ZW5zaW9uPSI5MzE4OCIg
cm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy40MC4yLjExIi8+CiAgICAgICAgICAgICAgICAgICAg
ICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJJSEEgTWVkaXRlY2ggSUQiIGV4dGVuc2lv
bj0iUExJU0lITFUiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEuNjEiLz4KICAgICAg
ICAgICAgICAgICAgICAgICAgPGluZm9ybWF0aW9uUmVjaXBpZW50IGNsYXNzQ29kZT0iUFNOIiBk
ZXRlcm1pbmVyQ29kZT0iSU5TVEFOQ0UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5h
bWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZhbWlseT5QbGlzaWhiPC9mYW1p
bHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGdpdmVuPkx1Y2l1czwvZ2l2ZW4+
CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHByZWZpeD5Eci48L3ByZWZpeD4KICAg
ICAgICAgICAgICAgICAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgICAgICAgICAgICAg
PC9pbmZvcm1hdGlvblJlY2lwaWVudD4KICAgICAgICAgICAgICAgICAgICA8L2ludGVuZGVkUmVj
aXBpZW50PgogICAgICAgICAgICAgICAgPC9pbmZvcm1hdGlvblJlY2lwaWVudD4KICAgICAgICAg
ICAgICAgIDxpbmZvcm1hdGlvblJlY2lwaWVudCB0eXBlQ29kZT0iUFJDUCI+CiAgICAgICAgICAg
ICAgICAgICAgPGludGVuZGVkUmVjaXBpZW50IGNsYXNzQ29kZT0iQVNTSUdORUQiPgogICAgICAg
ICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQkMgTWluaXN0cnkg
UHJhY3RpdGlvbmVyIElEIiBleHRlbnNpb249IjkzMTk0IiByb290PSIyLjE2Ljg0MC4xLjExMzg4
My4zLjQwLjIuMTEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhv
cml0eU5hbWU9IklIQSBNZWRpdGVjaCBJRCIgZXh0ZW5zaW9uPSJQTElTSUhOTyIgcm9vdD0iMi4x
Ni44NDAuMS4xMTM4ODMuMy4yNzcuMS42MSIvPgogICAgICAgICAgICAgICAgICAgICAgICA8aW5m
b3JtYXRpb25SZWNpcGllbnQgY2xhc3NDb2RlPSJQU04iIGRldGVybWluZXJDb2RlPSJJTlNUQU5D
RSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICA8ZmFtaWx5PlBsaXNpaGc8L2ZhbWlseT4KICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICA8Z2l2ZW4+Tm9lbDwvZ2l2ZW4+CiAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgPHByZWZpeD5Eci48L3ByZWZpeD4KICAgICAgICAgICAgICAgICAgICAgICAgICAg
IDwvbmFtZT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9pbmZvcm1hdGlvblJlY2lwaWVudD4K
ICAgICAgICAgICAgICAgICAgICA8L2ludGVuZGVkUmVjaXBpZW50PgogICAgICAgICAgICAgICAg
PC9pbmZvcm1hdGlvblJlY2lwaWVudD4KICAgICAgICAgICAgPC90YXJnZXQ+CiAgICAgICAgPC9z
dWJqZWN0PgogICAgICAgIDxxdWVyeUFjaz4KICAgICAgICAgICAgPHF1ZXJ5UmVzcG9uc2VDb2Rl
IGNvZGU9Ik9LIi8+CiAgICAgICAgICAgIDxyZXN1bHRUb3RhbFF1YW50aXR5IHZhbHVlPSIxIi8+
CiAgICAgICAgICAgIDxyZXN1bHRDdXJyZW50UXVhbnRpdHkgdmFsdWU9IjEiLz4KICAgICAgICAg
ICAgPHJlc3VsdFJlbWFpbmluZ1F1YW50aXR5IHZhbHVlPSIwIi8+CiAgICAgICAgPC9xdWVyeUFj
az4KICAgIDwvY29udHJvbEFjdFByb2Nlc3M+CjwvUkNNUl9JTjAwMDAzMlVWMDE+Cg==</inboundTemplate>
            <outboundTemplate encoding="base64">ewoJInN0YXR1cyI6ICIiLAoJIm1lc3NhZ2UiOiAiIiwKCSJhY2tEZXRhaWwiOiB7CgkJImFja0lk
IjogIiIsCgkJImFja1RpbWUiOiAiIiwKCQkibWVzc2FnZUlkIjogIiIsCgkJInN0YXR1cyI6ICIi
Cgl9LAoJImRvY3VtZW50cyI6IFtdCn0=</outboundTemplate>
            <inboundDataType>HL7V3</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.8.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.8.0">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.8.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.8.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.8.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.8.0">
            <elements/>
          </filter>
          <transportName>JavaScript Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>false</waitForPrevious>
        </connector>
        <connector version="3.8.0">
          <metaDataId>14</metaDataId>
          <name>Service List Clinics</name>
          <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.8.0">
            <pluginProperties/>
            <destinationConnectorProperties version="3.8.0">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>true</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <script>logger.debug(&apos;Service List Clinics&apos;);

importPackage(Packages.ca.uvic.leadlab.cdxconnector);

try {
	var client = new WSClientClinic($(&apos;cdx.base.url&apos;), $(&apos;username&apos;), $(&apos;password&apos;), $(&apos;certPath&apos;), $(&apos;certPass&apos;));

	// Call the WS method using CDX Connector
	var cdxResponse = client.listClinics($(&apos;locationId&apos;), $(&apos;clinicId&apos;), $(&apos;clinicName&apos;), $(&apos;clinicAddress&apos;));

	// return the raw response to be processed by the &apos;response transformers&apos;
	return ResponseFactory.getSentResponse(cdxResponse);
} catch (e) {
	logger.error(&quot;Error on &apos;Service List Clinics&apos;: &quot; + e);
	
	responseMap.put(&apos;responseMessage&apos;, createErrorMessage(&quot;Error on &apos;Service List Clinics&apos;: &quot; + e.message, null)); // create the error response
	responseMap.put(&apos;responseStatus&apos;, &apos;200&apos;); // return ok
}</script>
          </properties>
          <transformer version="3.8.0">
            <elements>
              <com.mirth.connect.plugins.mapper.MapperStep version="3.8.0">
                <name>clinicId</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <variable>clinicId</variable>
                <mapping>msg[&apos;clinicId&apos;]</mapping>
                <defaultValue>&quot;&quot;</defaultValue>
                <replacements/>
                <scope>CHANNEL</scope>
              </com.mirth.connect.plugins.mapper.MapperStep>
              <com.mirth.connect.plugins.mapper.MapperStep version="3.8.0">
                <name>clinicName</name>
                <sequenceNumber>1</sequenceNumber>
                <enabled>true</enabled>
                <variable>clinicName</variable>
                <mapping>msg[&apos;clinicName&apos;]</mapping>
                <defaultValue>&quot;&quot;</defaultValue>
                <replacements/>
                <scope>CHANNEL</scope>
              </com.mirth.connect.plugins.mapper.MapperStep>
              <com.mirth.connect.plugins.mapper.MapperStep version="3.8.0">
                <name>clinicAddress</name>
                <sequenceNumber>2</sequenceNumber>
                <enabled>true</enabled>
                <variable>clinicAddress</variable>
                <mapping>msg[&apos;clinicAddress&apos;]</mapping>
                <defaultValue>&quot;&quot;</defaultValue>
                <replacements/>
                <scope>CHANNEL</scope>
              </com.mirth.connect.plugins.mapper.MapperStep>
            </elements>
            <inboundTemplate encoding="base64">ewoJImNsaW5pY0lkIjogIiIsCgkiY2xpbmljTmFtZSI6ICIiLAoJImNsaW5pY0FkZHJlc3MiOiAi
Igp9</inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>HL7V3</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.8.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.8.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.8.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.8.0">
                <stripNamespaces>true</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.8.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.8.0">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.8.0">
                <name>List Clinics Response</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>try {
	// Store the response to be returned by the &quot;Source Connector&quot;
	responseMap.put(&apos;responseMessage&apos;, handleResponseMessage(responseStatus, responseStatusMessage, msg, function() {
		// Ack details
		tmp[&apos;ackDetail&apos;][&apos;ackId&apos;] = msg[&apos;id&apos;][&apos;@extension&apos;].toString();
		tmp[&apos;ackDetail&apos;][&apos;ackTime&apos;] = parseCDADateTime(msg[&apos;creationTime&apos;][&apos;@value&apos;].toString());
		tmp[&apos;ackDetail&apos;][&apos;messageId&apos;] = msg[&apos;acknowledgement&apos;][&apos;targetMessage&apos;][&apos;id&apos;][&apos;@extension&apos;].toString();
		tmp[&apos;ackDetail&apos;][&apos;status&apos;] = msg[&apos;controlActProcess&apos;][&apos;queryAck&apos;][&apos;queryResponseCode&apos;][&apos;@code&apos;].toString();
		
		// Payload
		for (var i = 0; i &lt; getArrayOrXmlLength(msg[&apos;controlActProcess&apos;][&apos;subject&apos;]); i++) { // List of clinics, CONF-CDXPR072
			var registry = msg[&apos;controlActProcess&apos;][&apos;subject&apos;][i][&apos;registrationEvent&apos;];

			// Process the registry in &apos;CDA Registry Parser&apos; channel
			var chResponse = router.routeMessage(&quot;CDA Registry Parser&quot;, new XML(registry.toString()));

			if (!chResponse) { // no response, clinic was not selected.
				logger.info(&apos;Clinic not selected: &apos; + registry[&apos;subject1&apos;][&apos;assignedEntity&apos;][&apos;name&apos;].toString());
			} else if (chResponse.status === SENT) {
				tmp[&apos;clinics&apos;].push(JSON.parse(chResponse.message));
			} else {
				logger.error(&apos;Error parsing Clinic &apos; + chResponse.statusMessage);
			}
		}
		
		return handleQueryResultStatus(tmp, msg, &apos;clinics&apos;); // Return the transformed message to be converted on &apos;handleResponseMessage&apos;
	}));
	responseMap.put(&apos;responseStatus&apos;, &apos;200&apos;);
} catch(e) {
	logger.error(&quot;Error on &apos;List Clinics Response&apos;: &quot; + e);

	responseMap.put(&apos;responseMessage&apos;, createErrorMessage(e.message, null));
	responseMap.put(&apos;responseStatus&apos;, &apos;200&apos;);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64">PFBSUE1fSU40MDYxMTBVVjAxIHhtbG5zPSJ1cm46aGw3LW9yZzp2MyIgSVRTVmVyc2lvbj0iWE1M
XzEuMCI+CiAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkNsaW5pYyBMaXN0IFJlc3BvbnNl
IFdyYXBwZXIgSUQiIGV4dGVuc2lvbj0iM2IwZGNlZTgtZTYwYi00ZmI2LTgwMjMtYTYwNWNkNDAw
MzMxIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuMSIvPgogIDxjcmVhdGlvblRp
bWUgdmFsdWU9IjIwMTkwNTA5MTExOC0wNzAwIi8+CiAgPHZlcnNpb25Db2RlIGNvZGU9IjIwMTBO
b3JtYXRpdmUiLz4KICA8aW50ZXJhY3Rpb25JZCBleHRlbnNpb249IlBSUE1fSU40MDYxMTBVVjAx
IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xLjYiLz4KICA8cHJvY2Vzc2luZ0NvZGUgY29kZT0i
UCIvPgogIDxwcm9jZXNzaW5nTW9kZUNvZGUgY29kZT0iVCIvPgogIDxhY2NlcHRBY2tDb2RlIGNv
ZGU9Ik5FIi8+CiAgPHJlY2VpdmVyPgogICAgPGRldmljZSBjbGFzc0NvZGU9IkRFViIgZGV0ZXJt
aW5lckNvZGU9IklOU1RBTkNFIj4KICAgICAgPGlkIG51bGxGbGF2b3I9Ik5BIi8+CiAgICAgIDxh
c0FnZW50IGNsYXNzQ29kZT0iQUdOVCI+CiAgICAgICAgPHJlcHJlc2VudGVkT3JnYW5pemF0aW9u
IGNsYXNzQ29kZT0iT1JHIiBkZXRlcm1pbmVyQ29kZT0iSU5TVEFOQ0UiPgogICAgICAgICAgPGlk
IGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkNEWCBDbGluaWMgUmVnaXN0cnkgSUQiIGV4dGVuc2lv
bj0iY2R4cG9zdHByb2Qtb3RjYSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjIi
Lz4KICAgICAgICA8L3JlcHJlc2VudGVkT3JnYW5pemF0aW9uPgogICAgICA8L2FzQWdlbnQ+CiAg
ICA8L2RldmljZT4KICA8L3JlY2VpdmVyPgogIDxzZW5kZXI+CiAgICA8ZGV2aWNlIGNsYXNzQ29k
ZT0iREVWIiBkZXRlcm1pbmVyQ29kZT0iSU5TVEFOQ0UiPgogICAgICA8aWQgbnVsbEZsYXZvcj0i
TkEiLz4KICAgICAgPGFzQWdlbnQgY2xhc3NDb2RlPSJBR05UIj4KICAgICAgICA8cmVwcmVzZW50
ZWRPcmdhbml6YXRpb24gY2xhc3NDb2RlPSJPUkciIGRldGVybWluZXJDb2RlPSJJTlNUQU5DRSI+
CiAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQ0RYIENsaW5pYyBSZWdpc3Ry
eSBJRCIgZXh0ZW5zaW9uPSJDRFgiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC4y
Ii8+CiAgICAgICAgPC9yZXByZXNlbnRlZE9yZ2FuaXphdGlvbj4KICAgICAgPC9hc0FnZW50Pgog
ICAgPC9kZXZpY2U+CiAgPC9zZW5kZXI+CiAgPGFja25vd2xlZGdlbWVudCB0eXBlQ29kZT0iQUEi
PgogICAgPHRhcmdldE1lc3NhZ2U+CiAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJD
RFggQ2xpbmljYWwgUmVwb3NpdG9yeSBRdWVyeSBJRCIgZXh0ZW5zaW9uPSI5ZGMwMTQzMS1iMzdj
LTQ0ZDAtOWJiZC00ZDA0OTkxOTZmYTUiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEw
MC4xIi8+CiAgICA8L3RhcmdldE1lc3NhZ2U+CiAgICA8YWNrbm93bGVkZ2VtZW50RGV0YWlsPgog
ICAgICA8dGV4dD5PSzwvdGV4dD4KICAgIDwvYWNrbm93bGVkZ2VtZW50RGV0YWlsPgogIDwvYWNr
bm93bGVkZ2VtZW50PgogIDxjb250cm9sQWN0UHJvY2VzcyBjbGFzc0NvZGU9IkNBQ1QiIG1vb2RD
b2RlPSJFVk4iPgogICAgPHN1YmplY3QgdHlwZUNvZGU9IlNVQkoiPgogICAgICA8cmVnaXN0cmF0
aW9uRXZlbnQgY2xhc3NDb2RlPSJSRUciIG1vb2RDb2RlPSJFVk4iPgogICAgICAgIDxzdGF0dXND
b2RlIGNvZGU9ImFjdGl2ZSIvPgogICAgICAgIDxzdWJqZWN0MSB0eXBlQ29kZT0iU0JKIj4KICAg
ICAgICAgIDxhc3NpZ25lZEVudGl0eSBjbGFzc0NvZGU9IkFTU0lHTkVEIj4KICAgICAgICAgICAg
PGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkNEWCBDbGluaWMgUmVnaXN0cnkgSUQiIGV4dGVu
c2lvbj0iY2R4cG9zdHByb2Qtb3RjYSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAw
LjIiLz4KICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IlBPSSBDbGluaWMg
SUQiIGV4dGVuc2lvbj0iY2R4cG9zdHByb2Qtb3RjYSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMu
My4yNzcuMTAwLjIuMSIvPgogICAgICAgICAgICA8Y29kZSBjb2RlPSJDbGluaWMiLz4KICAgICAg
ICAgICAgPG5hbWUgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1p
bnN0YW5jZSIgeHNpOnR5cGU9Ik9OIj5Pc2NhciBUZXN0IENsaW5pYyBBPC9uYW1lPgogICAgICAg
ICAgICA8YWRkcj4KICAgICAgICAgICAgICA8ZGVsaW1pdGVyPjE4MTggVGVzdCBBdmU8L2RlbGlt
aXRlcj4KICAgICAgICAgICAgICA8Y2l0eT5LZWxvd25hPC9jaXR5PgogICAgICAgICAgICAgIDxz
dGF0ZT5Ccml0aXNoIENvbHVtYmlhPC9zdGF0ZT4KICAgICAgICAgICAgICA8Y291bnRyeT5DYW5h
ZGE8L2NvdW50cnk+CiAgICAgICAgICAgICAgPHBvc3RhbENvZGU+VjFWMVYxPC9wb3N0YWxDb2Rl
PgogICAgICAgICAgICA8L2FkZHI+CiAgICAgICAgICAgIDxyZWxhdGVkVG8gdHlwZUNvZGU9IlBB
UlQiPgogICAgICAgICAgICAgIDxhc3NpZ25lZEVudGl0eSBjbGFzc0NvZGU9IkFTU0lHTkVEIj4K
ICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJCQyBNaW5pc3RyeSBQ
cmFjdGl0aW9uZXIgSUQiIGV4dGVuc2lvbj0iOTMxODgiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgz
LjMuNDAuMi4xMSIvPgogICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9
IklIQSBNZWRpdGVjaCBJRCIgZXh0ZW5zaW9uPSJQTElTSUhMVSIgcm9vdD0iMi4xNi44NDAuMS4x
MTM4ODMuMy4yNzcuMS42MSIvPgogICAgICAgICAgICAgICAgPGNvZGUgY29kZT0iUHJvdmlkZXIi
Lz4KICAgICAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgICAgICA8cHJlZml4PkRyLjwv
cHJlZml4PgogICAgICAgICAgICAgICAgICA8ZmFtaWx5PlBsaXNpaGI8L2ZhbWlseT4KICAgICAg
ICAgICAgICAgICAgPGdpdmVuPkx1Y2l1czwvZ2l2ZW4+CiAgICAgICAgICAgICAgICA8L25hbWU+
CiAgICAgICAgICAgICAgPC9hc3NpZ25lZEVudGl0eT4KICAgICAgICAgICAgICA8cXVhbGlmaWVk
RW50aXR5IHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFu
Y2UiIHhzaTpuaWw9InRydWUiLz4KICAgICAgICAgICAgPC9yZWxhdGVkVG8+CiAgICAgICAgICAg
IDxyZWxhdGVkVG8gdHlwZUNvZGU9IlBBUlQiPgogICAgICAgICAgICAgIDxhc3NpZ25lZEVudGl0
eSBjbGFzc0NvZGU9IkFTU0lHTkVEIj4KICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRo
b3JpdHlOYW1lPSJCQyBNaW5pc3RyeSBQcmFjdGl0aW9uZXIgSUQiIGV4dGVuc2lvbj0iOTMxOTAi
IHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuNDAuMi4xMSIvPgogICAgICAgICAgICAgICAgPGlk
IGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IklIQSBNZWRpdGVjaCBJRCIgZXh0ZW5zaW9uPSJQTElT
SUhBQSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMS42MSIvPgogICAgICAgICAgICAg
ICAgPGNvZGUgY29kZT0iUHJvdmlkZXIiLz4KICAgICAgICAgICAgICAgIDxuYW1lPgogICAgICAg
ICAgICAgICAgICA8cHJlZml4PkRyLjwvcHJlZml4PgogICAgICAgICAgICAgICAgICA8ZmFtaWx5
PlBsaXNpaGQ8L2ZhbWlseT4KICAgICAgICAgICAgICAgICAgPGdpdmVuPkFhcm9uPC9naXZlbj4K
ICAgICAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgICA8L2Fzc2lnbmVkRW50aXR5Pgog
ICAgICAgICAgICAgIDxxdWFsaWZpZWRFbnRpdHkgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9y
Zy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOm5pbD0idHJ1ZSIvPgogICAgICAgICAgICA8
L3JlbGF0ZWRUbz4KICAgICAgICAgICAgPHJlbGF0ZWRUbyB0eXBlQ29kZT0iUEFSVCI+CiAgICAg
ICAgICAgICAgPGFzc2lnbmVkRW50aXR5IGNsYXNzQ29kZT0iQVNTSUdORUQiPgogICAgICAgICAg
ICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkJDIE1pbmlzdHJ5IFByYWN0aXRpb25l
ciBJRCIgZXh0ZW5zaW9uPSI5MzE5MyIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy40MC4yLjEx
Ii8+CiAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iSUhBIE1lZGl0
ZWNoIElEIiBleHRlbnNpb249IlBMSVNJSE1JIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3
Ny4xLjYxIi8+CiAgICAgICAgICAgICAgICA8Y29kZSBjb2RlPSJQcm92aWRlciIvPgogICAgICAg
ICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgICAgIDxwcmVmaXg+RHIuPC9wcmVmaXg+CiAg
ICAgICAgICAgICAgICAgIDxmYW1pbHk+UGxpc2loZjwvZmFtaWx5PgogICAgICAgICAgICAgICAg
ICA8Z2l2ZW4+TWlrZWw8L2dpdmVuPgogICAgICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAg
ICAgIDwvYXNzaWduZWRFbnRpdHk+CiAgICAgICAgICAgICAgPHF1YWxpZmllZEVudGl0eSB4bWxu
czp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6bmls
PSJ0cnVlIi8+CiAgICAgICAgICAgIDwvcmVsYXRlZFRvPgogICAgICAgICAgICA8cmVsYXRlZFRv
IHR5cGVDb2RlPSJQQVJUIj4KICAgICAgICAgICAgICA8YXNzaWduZWRFbnRpdHkgY2xhc3NDb2Rl
PSJBU1NJR05FRCI+CiAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0i
QkMgTWluaXN0cnkgUHJhY3RpdGlvbmVyIElEIiBleHRlbnNpb249IjkzMTk0IiByb290PSIyLjE2
Ljg0MC4xLjExMzg4My4zLjQwLjIuMTEiLz4KICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdB
dXRob3JpdHlOYW1lPSJJSEEgTWVkaXRlY2ggSUQiIGV4dGVuc2lvbj0iUExJU0lITk8iIHJvb3Q9
IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEuNjEiLz4KICAgICAgICAgICAgICAgIDxjb2RlIGNv
ZGU9IlByb3ZpZGVyIi8+CiAgICAgICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICAgICAg
PHByZWZpeD5Eci48L3ByZWZpeD4KICAgICAgICAgICAgICAgICAgPGZhbWlseT5QbGlzaWhnPC9m
YW1pbHk+CiAgICAgICAgICAgICAgICAgIDxnaXZlbj5Ob2VsPC9naXZlbj4KICAgICAgICAgICAg
ICAgIDwvbmFtZT4KICAgICAgICAgICAgICA8L2Fzc2lnbmVkRW50aXR5PgogICAgICAgICAgICAg
IDxxdWFsaWZpZWRFbnRpdHkgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNj
aGVtYS1pbnN0YW5jZSIgeHNpOm5pbD0idHJ1ZSIvPgogICAgICAgICAgICA8L3JlbGF0ZWRUbz4K
ICAgICAgICAgICAgPHJlbGF0ZWRUbyB0eXBlQ29kZT0iUEFSVCI+CiAgICAgICAgICAgICAgPGFz
c2lnbmVkRW50aXR5IGNsYXNzQ29kZT0iQVNTSUdORUQiPgogICAgICAgICAgICAgICAgPGlkIGFz
c2lnbmluZ0F1dGhvcml0eU5hbWU9IkJDIE1pbmlzdHJ5IFByYWN0aXRpb25lciBJRCIgZXh0ZW5z
aW9uPSI5MzE5NSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy40MC4yLjExIi8+CiAgICAgICAg
ICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iSUhBIE1lZGl0ZWNoIElEIiBleHRl
bnNpb249IlBMSVNJSEhPIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xLjYxIi8+CiAg
ICAgICAgICAgICAgICA8Y29kZSBjb2RlPSJQcm92aWRlciIvPgogICAgICAgICAgICAgICAgPG5h
bWU+CiAgICAgICAgICAgICAgICAgIDxwcmVmaXg+RHIuPC9wcmVmaXg+CiAgICAgICAgICAgICAg
ICAgIDxmYW1pbHk+UGxpc2loaDwvZmFtaWx5PgogICAgICAgICAgICAgICAgICA8Z2l2ZW4+SG9t
ZXI8L2dpdmVuPgogICAgICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICAgIDwvYXNzaWdu
ZWRFbnRpdHk+CiAgICAgICAgICAgICAgPHF1YWxpZmllZEVudGl0eSB4bWxuczp4c2k9Imh0dHA6
Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6bmlsPSJ0cnVlIi8+CiAg
ICAgICAgICAgIDwvcmVsYXRlZFRvPgogICAgICAgICAgICA8cmVsYXRlZFRvIHR5cGVDb2RlPSJQ
QVJUIj4KICAgICAgICAgICAgICA8YXNzaWduZWRFbnRpdHkgY2xhc3NDb2RlPSJBU1NJR05FRCI+
CiAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQkMgTWluaXN0cnkg
UHJhY3RpdGlvbmVyIElEIiBleHRlbnNpb249Ijk0NzIyIiByb290PSIyLjE2Ljg0MC4xLjExMzg4
My4zLjQwLjIuMTEiLz4KICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1l
PSJJSEEgTWVkaXRlY2ggSUQiIGV4dGVuc2lvbj0iUExJU0lIR1IiIHJvb3Q9IjIuMTYuODQwLjEu
MTEzODgzLjMuMjc3LjEuNjEiLz4KICAgICAgICAgICAgICAgIDxjb2RlIGNvZGU9IlByb3ZpZGVy
Ii8+CiAgICAgICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICAgICAgPHByZWZpeD5Eci48
L3ByZWZpeD4KICAgICAgICAgICAgICAgICAgPGZhbWlseT5QbGlzaWhxPC9mYW1pbHk+CiAgICAg
ICAgICAgICAgICAgIDxnaXZlbj5HcmFudDwvZ2l2ZW4+CiAgICAgICAgICAgICAgICA8L25hbWU+
CiAgICAgICAgICAgICAgPC9hc3NpZ25lZEVudGl0eT4KICAgICAgICAgICAgICA8cXVhbGlmaWVk
RW50aXR5IHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFu
Y2UiIHhzaTpuaWw9InRydWUiLz4KICAgICAgICAgICAgPC9yZWxhdGVkVG8+CiAgICAgICAgICAg
IDxyZWxhdGVkVG8gdHlwZUNvZGU9IlBBUlQiPgogICAgICAgICAgICAgIDxhc3NpZ25lZEVudGl0
eSBjbGFzc0NvZGU9IkFTU0lHTkVEIj4KICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRo
b3JpdHlOYW1lPSJJSEEgTWVkaXRlY2ggSUQiIGV4dGVuc2lvbj0iUExJRiIgcm9vdD0iMi4xNi44
NDAuMS4xMTM4ODMuMy4yNzcuMS42MSIvPgogICAgICAgICAgICAgICAgPGNvZGUgY29kZT0iUHJv
dmlkZXIiLz4KICAgICAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgICAgICA8cHJlZml4
PkRyPC9wcmVmaXg+CiAgICAgICAgICAgICAgICAgIDxmYW1pbHk+UGxpczwvZmFtaWx5PgogICAg
ICAgICAgICAgICAgICA8Z2l2ZW4+RmFtaWx5PC9naXZlbj4KICAgICAgICAgICAgICAgIDwvbmFt
ZT4KICAgICAgICAgICAgICA8L2Fzc2lnbmVkRW50aXR5PgogICAgICAgICAgICAgIDxxdWFsaWZp
ZWRFbnRpdHkgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0
YW5jZSIgeHNpOm5pbD0idHJ1ZSIvPgogICAgICAgICAgICA8L3JlbGF0ZWRUbz4KICAgICAgICAg
IDwvYXNzaWduZWRFbnRpdHk+CiAgICAgICAgICA8cXVhbGlmaWVkRW50aXR5IHhtbG5zOnhzaT0i
aHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTpuaWw9InRydWUi
Lz4KICAgICAgICA8L3N1YmplY3QxPgogICAgICAgIDxjdXN0b2RpYW4gdHlwZUNvZGU9IkNTVCI+
CiAgICAgICAgICA8YXNzaWduZWRFbnRpdHkgY2xhc3NDb2RlPSJBU1NJR05FRCI+CiAgICAgICAg
ICAgIDxpZCBudWxsRmxhdm9yPSJOQSIvPgogICAgICAgICAgICA8YXNzaWduZWREZXZpY2UgeG1s
bnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOm5p
bD0idHJ1ZSIvPgogICAgICAgICAgICA8YXNzaWduZWRPcmdhbml6YXRpb24geG1sbnM6eHNpPSJo
dHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOm5pbD0idHJ1ZSIv
PgogICAgICAgICAgICA8YXNzaWduZWRQZXJzb24geG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9y
Zy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOm5pbD0idHJ1ZSIvPgogICAgICAgICAgPC9h
c3NpZ25lZEVudGl0eT4KICAgICAgICA8L2N1c3RvZGlhbj4KICAgICAgICA8ZGVmaW5pdGlvbiB0
eXBlQ29kZT0iSU5TVCI+CiAgICAgICAgICA8dGVtcGxhdGVJZCBhc3NpZ25pbmdBdXRob3JpdHlO
YW1lPSJEb2N1bWVudCBUZW1wbGF0ZSBPSUQiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3
LjEwMC40MCIvPgogICAgICAgICAgPGFjdERlZmluaXRpb24gY2xhc3NDb2RlPSJJTkZPIiBtb29k
Q29kZT0iREVGIj4KICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkFkbWl0
IE5vdGlmaWNhdGlvbiBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUx
LjYwLjIuNyIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAg
ICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkFuYXRvbWljIFBhdGhvbG9neSBSZXBv
cnQgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjIiIHJv
b3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgIDxpZCBh
c3NpZ25pbmdBdXRob3JpdHlOYW1lPSJDb25zdWx0YXRpb24gTm90ZSIgZXh0ZW5zaW9uPSIyLjE2
Ljg0MC4xLjExMzg4My4xMC4yMC40IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAu
NDAuMSIvPgogICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iRGlhZ25vc3Rp
YyBJbWFnaW5nIFJlcG9ydCBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4z
LjUxLjYwLjIuNSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAg
ICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkRpc2NoYXJnZSBOb3RpZmljYXRp
b24gVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjYiIHJv
b3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgIDxpZCBh
c3NpZ25pbmdBdXRob3JpdHlOYW1lPSJEaXNjaGFyZ2UgU3VtbWFyeSBUZW1wbGF0ZSIgZXh0ZW5z
aW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuNCIgcm9vdD0iMi4xNi44NDAuMS4xMTM4
ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5h
bWU9ImUyZSBHZW5lcmljIEVwaXNvZGljIERvY3VtZW50IiBleHRlbnNpb249IjIuMTYuODQwLjEu
MTEzODgzLjMuMTgxOC4xMC4xLjIiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40
MC4xIi8+CiAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJlMmUgR2VuZXJp
YyBVbnN0cnVjdHVyZWQgUmVmZXJyYWwiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy4x
ODE4LjEwLjEuNSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAg
ICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9ImUyZSBVbnN0cnVjdHVyZWQgRG9j
dW1lbnQiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy4xODE4LjEwLjEuNCIgcm9vdD0i
Mi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgPGlkIGFzc2ln
bmluZ0F1dGhvcml0eU5hbWU9Ikhpc3RvcnkgYW5kIFBoeXNpY2FsIE5vdGUiIGV4dGVuc2lvbj0i
Mi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMiIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcu
MTAwLjQwLjEiLz4KICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkxhYiBS
ZXBvcnQgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjEi
IHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgIDxp
ZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJPcGVyYXRpdmUgTm90ZSIgZXh0ZW5zaW9uPSIyLjE2
Ljg0MC4xLjExMzg4My4xMC4yMC43IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAu
NDAuMSIvPgogICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iUHJvY2VkdXJl
IE5vdGUgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjMi
IHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgIDxp
ZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJQcm9ncmVzcyBOb3RlIiBleHRlbnNpb249IjIuMTYu
ODQwLjEuMTEzODgzLjEwLjIwLjIxIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAu
NDAuMSIvPgogICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iVW5zdHJ1Y3R1
cmVkIFJlcG9ydCBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4x
OSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAg
PGNvZGUgbnVsbEZsYXZvcj0iVU5LIi8+CiAgICAgICAgICA8L2FjdERlZmluaXRpb24+CiAgICAg
ICAgPC9kZWZpbml0aW9uPgogICAgICA8L3JlZ2lzdHJhdGlvbkV2ZW50PgogICAgPC9zdWJqZWN0
PgogICAgPHF1ZXJ5QWNrPgogICAgICA8cXVlcnlJZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJD
RFggQ2xpbmljYWwgUmVwb3NpdG9yeSBRdWVyeSBJRCIgZXh0ZW5zaW9uPSI5ZGMwMTQzMS1iMzdj
LTQ0ZDAtOWJiZC00ZDA0OTkxOTZmYTUiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEw
MC4xIi8+CiAgICAgIDxzdGF0dXNDb2RlIGNvZGU9ImRlbGl2ZXJlZFJlc3BvbnNlIi8+CiAgICAg
IDxxdWVyeVJlc3BvbnNlQ29kZSBjb2RlPSJPSyIvPgogICAgICA8cmVzdWx0VG90YWxRdWFudGl0
eSB2YWx1ZT0iMSIvPgogICAgICA8cmVzdWx0Q3VycmVudFF1YW50aXR5IHZhbHVlPSIxIi8+CiAg
ICAgIDxyZXN1bHRSZW1haW5pbmdRdWFudGl0eSB2YWx1ZT0iMCIvPgogICAgPC9xdWVyeUFjaz4K
ICA8L2NvbnRyb2xBY3RQcm9jZXNzPgo8L1BSUE1fSU40MDYxMTBVVjAxPgo=</inboundTemplate>
            <outboundTemplate encoding="base64">ewoJInN0YXR1cyI6ICIiLAoJIm1lc3NhZ2UiOiAiIiwKCSJhY2tEZXRhaWwiOnsKCQkiYWNrSWQi
OiAiIiwKCQkiYWNrVGltZSI6ICIiLAoJCSJtZXNzYWdlSWQiOiAiIiwKCQkic3RhdHVzIjogIiIK
CX0sCgkiY2xpbmljcyI6W10KfQ==</outboundTemplate>
            <inboundDataType>HL7V3</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.8.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.8.0">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.8.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.8.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.8.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.8.0">
            <elements/>
          </filter>
          <transportName>JavaScript Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>false</waitForPrevious>
        </connector>
        <connector version="3.8.0">
          <metaDataId>15</metaDataId>
          <name>Service List Providers</name>
          <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.8.0">
            <pluginProperties/>
            <destinationConnectorProperties version="3.8.0">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>true</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <script>logger.debug(&apos;Service List Providers&apos;);

importPackage(Packages.ca.uvic.leadlab.cdxconnector);

try {
	var client = new WSClientProvider($(&apos;cdx.base.url&apos;), $(&apos;username&apos;), $(&apos;password&apos;), $(&apos;certPath&apos;), $(&apos;certPass&apos;));

	// Call the WS method using CDX Connector
	var cdxResponse = client.listProviders($(&apos;locationId&apos;), $(&quot;clinicId&quot;), $(&quot;providerId&quot;), $(&quot;providerName&quot;));

	// return the raw response to be processed by the &apos;response transformers&apos;
	return ResponseFactory.getSentResponse(cdxResponse);
} catch (e) {
	logger.error(&quot;Error on &apos;Service List Providers&apos;: &quot; + e);
	
	responseMap.put(&apos;responseMessage&apos;, createErrorMessage(&quot;Error on &apos;Service List Providers&apos;: &quot; + e.message, null)); // create the error response
	responseMap.put(&apos;responseStatus&apos;, &apos;200&apos;); // return ok
}</script>
          </properties>
          <transformer version="3.8.0">
            <elements>
              <com.mirth.connect.plugins.mapper.MapperStep version="3.8.0">
                <name>clinicId</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <variable>clinicId</variable>
                <mapping>msg[&apos;clinicId&apos;]</mapping>
                <defaultValue>&quot;&quot;</defaultValue>
                <replacements/>
                <scope>CHANNEL</scope>
              </com.mirth.connect.plugins.mapper.MapperStep>
              <com.mirth.connect.plugins.mapper.MapperStep version="3.8.0">
                <name>providerId</name>
                <sequenceNumber>1</sequenceNumber>
                <enabled>true</enabled>
                <variable>providerId</variable>
                <mapping>msg[&apos;providerId&apos;]</mapping>
                <defaultValue>&quot;&quot;</defaultValue>
                <replacements/>
                <scope>CHANNEL</scope>
              </com.mirth.connect.plugins.mapper.MapperStep>
              <com.mirth.connect.plugins.mapper.MapperStep version="3.8.0">
                <name>providerName</name>
                <sequenceNumber>2</sequenceNumber>
                <enabled>true</enabled>
                <variable>providerName</variable>
                <mapping>msg[&apos;providerName&apos;]</mapping>
                <defaultValue>&quot;&quot;</defaultValue>
                <replacements/>
                <scope>CHANNEL</scope>
              </com.mirth.connect.plugins.mapper.MapperStep>
            </elements>
            <inboundTemplate encoding="base64">ewoJImNsaW5pY0lkIjogIiIsCgkicHJvdmlkZXJJZCI6ICIiLAoJInByb3ZpZGVyTmFtZSI6ICIi
Cn0=</inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>HL7V3</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.8.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.8.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.8.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.8.0">
                <stripNamespaces>true</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.8.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.8.0">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.8.0">
                <name>List Providers Response</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>try {
	// Store the response to be returned by the &quot;Source Connector&quot;
	responseMap.put(&apos;responseMessage&apos;, handleResponseMessage(responseStatus, responseStatusMessage, msg, function() {
		// Ack details
		tmp[&apos;ackDetail&apos;][&apos;ackId&apos;] = msg[&apos;id&apos;][&apos;@extension&apos;].toString();
		tmp[&apos;ackDetail&apos;][&apos;ackTime&apos;] = parseCDADateTime(msg[&apos;creationTime&apos;][&apos;@value&apos;].toString());
		tmp[&apos;ackDetail&apos;][&apos;messageId&apos;] = msg[&apos;acknowledgement&apos;][&apos;targetMessage&apos;][&apos;id&apos;][&apos;@extension&apos;].toString();
		tmp[&apos;ackDetail&apos;][&apos;status&apos;] = msg[&apos;controlActProcess&apos;][&apos;queryAck&apos;][&apos;queryResponseCode&apos;][&apos;@code&apos;].toString();
		
		// Payload
		for (var i = 0; i &lt; getArrayOrXmlLength(msg[&apos;controlActProcess&apos;][&apos;subject&apos;]); i++) { // List of providers, CONF-CDXPR023
			var registry = msg[&apos;controlActProcess&apos;][&apos;subject&apos;][i][&apos;registrationEvent&apos;];

			// Process the registry in &apos;CDA Registry Parser&apos; channel
			var chResponse = router.routeMessage(&quot;CDA Registry Parser&quot;, new XML(registry.toString()));

			if (!chResponse) { // no response, provider was not selected.
				logger.info(&apos;Provider not selected: &apos; + registry[&apos;subject1&apos;][&apos;assignedEntity&apos;][&apos;name&apos;].toString());
			} else if (chResponse.status === SENT) {
				tmp[&apos;providers&apos;].push(JSON.parse(chResponse.message));
			} else {
				logger.error(&apos;Error parsing Provider &apos; + chResponse.statusMessage);
			}
		}

		return handleQueryResultStatus(tmp, msg, &apos;providers&apos;); // Return the transformed message to be converted on &apos;handleResponseMessage&apos;
	}));
	responseMap.put(&apos;responseStatus&apos;, &apos;200&apos;);
} catch(e) {
	logger.error(&quot;Error on &apos;List Providers Response&apos;: &quot; + e);

	responseMap.put(&apos;responseMessage&apos;, createErrorMessage(e.message, null));
	responseMap.put(&apos;responseStatus&apos;, &apos;200&apos;);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64">PFBSUE1fSU4zMDYwMTFVViB4bWxucz0idXJuOmhsNy1vcmc6djMiIHhtbG5zOm5zMj0idXJuOmJj
Y2R4IiBJVFNWZXJzaW9uPSJYTUxfMS4wIj4KICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0i
UHJvdmlkZXIgRGV0YWlscyBSZXNwb25zZSBXcmFwcGVyIElEIiBleHRlbnNpb249ImM0ZDBlNTc4
LTdjNjctNGZkZC04ZjMwLWU0ZWE2YWIxZmFjMSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4y
NzcuMTAwLjEiLz4KICA8Y3JlYXRpb25UaW1lIHZhbHVlPSIyMDE5MDUwOTExMjUtMDcwMCIvPgog
IDx2ZXJzaW9uQ29kZSBjb2RlPSIyMDEwTm9ybWF0aXZlIi8+CiAgPGludGVyYWN0aW9uSWQgZXh0
ZW5zaW9uPSJQUlBNX0lOMzA2MDExVVYiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjEuNiIvPgog
IDxwcm9jZXNzaW5nQ29kZSBjb2RlPSJQIi8+CiAgPHByb2Nlc3NpbmdNb2RlQ29kZSBjb2RlPSJU
Ii8+CiAgPGFjY2VwdEFja0NvZGUgY29kZT0iTkUiLz4KICA8cmVjZWl2ZXI+CiAgICA8ZGV2aWNl
IGNsYXNzQ29kZT0iREVWIiBkZXRlcm1pbmVyQ29kZT0iSU5TVEFOQ0UiPgogICAgICA8aWQgbnVs
bEZsYXZvcj0iTkEiLz4KICAgICAgPGFzQWdlbnQgY2xhc3NDb2RlPSJBR05UIj4KICAgICAgICA8
cmVwcmVzZW50ZWRPcmdhbml6YXRpb24gY2xhc3NDb2RlPSJPUkciIGRldGVybWluZXJDb2RlPSJJ
TlNUQU5DRSI+CiAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQ0RYIENsaW5p
YyBSZWdpc3RyeSBJRCIgZXh0ZW5zaW9uPSJjZHhwb3N0cHJvZC1vdGNhIiByb290PSIyLjE2Ljg0
MC4xLjExMzg4My4zLjI3Ny4xMDAuMiIvPgogICAgICAgIDwvcmVwcmVzZW50ZWRPcmdhbml6YXRp
b24+CiAgICAgIDwvYXNBZ2VudD4KICAgIDwvZGV2aWNlPgogIDwvcmVjZWl2ZXI+CiAgPHNlbmRl
cj4KICAgIDxkZXZpY2UgY2xhc3NDb2RlPSJERVYiIGRldGVybWluZXJDb2RlPSJJTlNUQU5DRSI+
CiAgICAgIDxpZCBudWxsRmxhdm9yPSJOQSIvPgogICAgICA8YXNBZ2VudCBjbGFzc0NvZGU9IkFH
TlQiPgogICAgICAgIDxyZXByZXNlbnRlZE9yZ2FuaXphdGlvbiBjbGFzc0NvZGU9Ik9SRyIgZGV0
ZXJtaW5lckNvZGU9IklOU1RBTkNFIj4KICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlO
YW1lPSJDRFggQ2xpbmljIFJlZ2lzdHJ5IElEIiBleHRlbnNpb249IkNEWCIgcm9vdD0iMi4xNi44
NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjIiLz4KICAgICAgICA8L3JlcHJlc2VudGVkT3JnYW5pemF0
aW9uPgogICAgICA8L2FzQWdlbnQ+CiAgICA8L2RldmljZT4KICA8L3NlbmRlcj4KICA8YWNrbm93
bGVkZ2VtZW50IHR5cGVDb2RlPSJBQSI+CiAgICA8dGFyZ2V0TWVzc2FnZT4KICAgICAgPGlkIGFz
c2lnbmluZ0F1dGhvcml0eU5hbWU9IkNEWCBQcm92aWRlciBSZXBvc2l0b3J5IFF1ZXJ5IElEIiBl
eHRlbnNpb249ImYyNGExNDI5LWFjZWItNDUzYi1iY2JlLTEyZTZhMGNkNDQwOSIgcm9vdD0iMi4x
Ni44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjEiLz4KICAgIDwvdGFyZ2V0TWVzc2FnZT4KICAgIDxh
Y2tub3dsZWRnZW1lbnREZXRhaWw+CiAgICAgIDx0ZXh0Pk9LPC90ZXh0PgogICAgPC9hY2tub3ds
ZWRnZW1lbnREZXRhaWw+CiAgPC9hY2tub3dsZWRnZW1lbnQ+CiAgPGNvbnRyb2xBY3RQcm9jZXNz
IGNsYXNzQ29kZT0iQ0FDVCIgbW9vZENvZGU9IkVWTiI+CiAgICA8aWQgbnVsbEZsYXZvcj0iTkEi
Lz4KICAgIDxzdWJqZWN0IHR5cGVDb2RlPSJTVUJKIj4KICAgICAgPHJlZ2lzdHJhdGlvbkV2ZW50
IGNsYXNzQ29kZT0iUkVHIiBtb29kQ29kZT0iRVZOIj4KICAgICAgICA8c3RhdHVzQ29kZSBjb2Rl
PSJhY3RpdmUiLz4KICAgICAgICA8c3ViamVjdDEgdHlwZUNvZGU9IlNCSiI+CiAgICAgICAgICA8
YXNzaWduZWRFbnRpdHkgY2xhc3NDb2RlPSJBU1NJR05FRCI+CiAgICAgICAgICAgIDxpZCBhc3Np
Z25pbmdBdXRob3JpdHlOYW1lPSJCQyBNaW5pc3RyeSBQcmFjdGl0aW9uZXIgSUQiIGV4dGVuc2lv
bj0iOTMxODgiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuNDAuMi4xMSIvPgogICAgICAgICAg
ICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iSUhBIE1lZGl0ZWNoIElEIiBleHRlbnNpb249
IlBMSVNJSExVIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xLjYxIi8+CiAgICAgICAg
ICAgIDxjb2RlIGNvZGU9IlByb3ZpZGVyIi8+CiAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAg
ICAgIDxwcmVmaXg+RHIuPC9wcmVmaXg+CiAgICAgICAgICAgICAgPGZhbWlseT5QbGlzaWhiPC9m
YW1pbHk+CiAgICAgICAgICAgICAgPGdpdmVuPkx1Y2l1czwvZ2l2ZW4+CiAgICAgICAgICAgIDwv
bmFtZT4KICAgICAgICAgICAgPHBlcmZvcm1hbmNlIHR5cGVDb2RlPSJQUFJGIj4KICAgICAgICAg
ICAgICA8YWN0RGVmaW5pdGlvbk9yRXZlbnQgY2xhc3NDb2RlPSJDQUNUIiBtb29kQ29kZT0iREVG
Ij4KICAgICAgICAgICAgICAgIDxsb2NhdGlvbiB0eXBlQ29kZT0iTE9DIj4KICAgICAgICAgICAg
ICAgICAgPHNlcXVlbmNlTnVtYmVyIHZhbHVlPSIxIi8+CiAgICAgICAgICAgICAgICAgIDxzZXJ2
aWNlRGVsaXZlcnlMb2NhdGlvbiBjbGFzc0NvZGU9IlNETE9DIj4KICAgICAgICAgICAgICAgICAg
ICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQ0RYIENsaW5pYyBSZWdpc3RyeSBJRCIgZXh0
ZW5zaW9uPSJDRFhDUjAwMDIxIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuMiIv
PgogICAgICAgICAgICAgICAgICAgIDxjb2RlIGNvZGU9IkNsaW5pYyIvPgogICAgICAgICAgICAg
ICAgICAgIDxhZGRyPgogICAgICAgICAgICAgICAgICAgICAgPGRlbGltaXRlcj4xNTAgS2luZyBT
dC4gVy4gU3RlIDEzMDA8L2RlbGltaXRlcj4KICAgICAgICAgICAgICAgICAgICAgIDxjaXR5PlRv
cm9udG88L2NpdHk+CiAgICAgICAgICAgICAgICAgICAgICA8c3RhdGU+QnJpdGlzaCBDb2x1bWJp
YTwvc3RhdGU+CiAgICAgICAgICAgICAgICAgICAgICA8Y291bnRyeT5DYW5hZGE8L2NvdW50cnk+
CiAgICAgICAgICAgICAgICAgICAgICA8cG9zdGFsQ29kZT5NNUggMUo5PC9wb3N0YWxDb2RlPgog
ICAgICAgICAgICAgICAgICAgIDwvYWRkcj4KICAgICAgICAgICAgICAgICAgICA8bG9jYXRpb24g
Y2xhc3NDb2RlPSJQTEMiIGRldGVybWluZXJDb2RlPSJJTlNUQU5DRSI+CiAgICAgICAgICAgICAg
ICAgICAgICA8bmFtZT5DYW5hZGEgSGVhbHRoIEluZm93YXkgVGVzdCBDbGluaWM8L25hbWU+CiAg
ICAgICAgICAgICAgICAgICAgPC9sb2NhdGlvbj4KICAgICAgICAgICAgICAgICAgPC9zZXJ2aWNl
RGVsaXZlcnlMb2NhdGlvbj4KICAgICAgICAgICAgICAgICAgPG5zMjpkZWZpbml0aW9uIHR5cGVD
b2RlPSJJTlNUIj4KICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGVJZCBhc3NpZ25pbmdBdXRo
b3JpdHlOYW1lPSJEb2N1bWVudCBUZW1wbGF0ZSBPSUQiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgz
LjMuMjc3LjEwMC40MCIvPgogICAgICAgICAgICAgICAgICAgIDxhY3REZWZpbml0aW9uIGNsYXNz
Q29kZT0iSU5GTyIgbW9vZENvZGU9IkRFRiI+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNz
aWduaW5nQXV0aG9yaXR5TmFtZT0iQW5hdG9taWMgUGF0aG9sb2d5IFJlcG9ydCBUZW1wbGF0ZSIg
ZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuMiIgcm9vdD0iMi4xNi44NDAu
MS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3Np
Z25pbmdBdXRob3JpdHlOYW1lPSJDb25zdWx0YXRpb24gTm90ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0
MC4xLjExMzg4My4xMC4yMC40IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAu
MSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkRp
YWdub3N0aWMgSW1hZ2luZyBSZXBvcnQgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4x
MTM4ODMuMy41MS42MC4yLjUiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4x
Ii8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iRGlz
Y2hhcmdlIFN1bW1hcnkgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41
MS42MC4yLjQiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAg
ICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iZTJlIEdlbmVyaWMg
RXBpc29kaWMgRG9jdW1lbnQiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy4xODE4LjEw
LjEuMiIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAg
ICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJlMmUgR2VuZXJpYyBVbnN0
cnVjdHVyZWQgUmVmZXJyYWwiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy4xODE4LjEw
LjEuNSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAg
ICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJlMmUgVW5zdHJ1Y3R1cmVk
IERvY3VtZW50IiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuMTgxOC4xMC4xLjQiIHJv
b3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAg
ICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iSGlzdG9yeSBhbmQgUGh5c2ljYWwgTm90
ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yIiByb290PSIyLjE2Ljg0MC4x
LjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2ln
bmluZ0F1dGhvcml0eU5hbWU9IkxhYiBSZXBvcnQgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44
NDAuMS4xMTM4ODMuMy41MS42MC4yLjEiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEw
MC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFt
ZT0iT3BlcmF0aXZlIE5vdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuNyIg
cm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAg
ICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJQcm9jZWR1cmUgTm90ZSBUZW1wbGF0
ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuMyIgcm9vdD0iMi4xNi44
NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBh
c3NpZ25pbmdBdXRob3JpdHlOYW1lPSJQcm9ncmVzcyBOb3RlIiBleHRlbnNpb249IjIuMTYuODQw
LjEuMTEzODgzLjEwLjIwLjIxIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAu
MSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IlVu
c3RydWN0dXJlZCBSZXBvcnQgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMu
MTAuMjAuMTkiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAg
ICAgICAgICAgICAgICAgICA8Y29kZSBudWxsRmxhdm9yPSJVTksiLz4KICAgICAgICAgICAgICAg
ICAgICA8L2FjdERlZmluaXRpb24+CiAgICAgICAgICAgICAgICAgIDwvbnMyOmRlZmluaXRpb24+
CiAgICAgICAgICAgICAgICA8L2xvY2F0aW9uPgogICAgICAgICAgICAgICAgPGxvY2F0aW9uIHR5
cGVDb2RlPSJMT0MiPgogICAgICAgICAgICAgICAgICA8c2VxdWVuY2VOdW1iZXIgdmFsdWU9IjIi
Lz4KICAgICAgICAgICAgICAgICAgPHNlcnZpY2VEZWxpdmVyeUxvY2F0aW9uIGNsYXNzQ29kZT0i
U0RMT0MiPgogICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJD
RFggQ2xpbmljIFJlZ2lzdHJ5IElEIiBleHRlbnNpb249ImNkeHRlc3QtY2hzIiByb290PSIyLjE2
Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuMiIvPgogICAgICAgICAgICAgICAgICAgIDxjb2RlIGNv
ZGU9IkNsaW5pYyIvPgogICAgICAgICAgICAgICAgICAgIDxhZGRyPgogICAgICAgICAgICAgICAg
ICAgICAgPHN0YXRlPkJyaXRpc2ggQ29sdW1iaWE8L3N0YXRlPgogICAgICAgICAgICAgICAgICAg
ICAgPGNvdW50cnk+Q2FuYWRhPC9jb3VudHJ5PgogICAgICAgICAgICAgICAgICAgIDwvYWRkcj4K
ICAgICAgICAgICAgICAgICAgICA8bG9jYXRpb24gY2xhc3NDb2RlPSJQTEMiIGRldGVybWluZXJD
b2RlPSJJTlNUQU5DRSI+CiAgICAgICAgICAgICAgICAgICAgICA8bmFtZT5DYW5kaWFuIEhlYWx0
aCBTeXN0ZW1zPC9uYW1lPgogICAgICAgICAgICAgICAgICAgIDwvbG9jYXRpb24+CiAgICAgICAg
ICAgICAgICAgIDwvc2VydmljZURlbGl2ZXJ5TG9jYXRpb24+CiAgICAgICAgICAgICAgICAgIDxu
czI6ZGVmaW5pdGlvbiB0eXBlQ29kZT0iSU5TVCI+CiAgICAgICAgICAgICAgICAgICAgPHRlbXBs
YXRlSWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iRG9jdW1lbnQgVGVtcGxhdGUgT0lEIiByb290
PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAiLz4KICAgICAgICAgICAgICAgICAgICA8
YWN0RGVmaW5pdGlvbiBjbGFzc0NvZGU9IklORk8iIG1vb2RDb2RlPSJERUYiPgogICAgICAgICAg
ICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkFkbWl0IE5vdGlmaWNhdGlv
biBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuNyIgcm9v
dD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAg
ICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJBbmF0b21pYyBQYXRob2xvZ3kgUmVwb3J0
IFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi4yIiByb290
PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAg
ICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkNvbnN1bHRhdGlvbiBOb3RlIiBleHRlbnNp
b249IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjQiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMu
Mjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9y
aXR5TmFtZT0iRGlhZ25vc3RpYyBJbWFnaW5nIFJlcG9ydCBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIy
LjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuNSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4y
NzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3Jp
dHlOYW1lPSJEaXNjaGFyZ2UgTm90aWZpY2F0aW9uIFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYu
ODQwLjEuMTEzODgzLjMuNTEuNjAuMi42IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4x
MDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5h
bWU9IkRpc2NoYXJnZSBTdW1tYXJ5IFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEz
ODgzLjMuNTEuNjAuMi40IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIv
PgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9ImUyZSBH
ZW5lcmljIEVwaXNvZGljIERvY3VtZW50IiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMu
MTgxOC4xMC4xLjIiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAg
ICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iZTJlIEdlbmVy
aWMgVW5zdHJ1Y3R1cmVkIFJlZmVycmFsIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMu
MTgxOC4xMC4xLjUiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAg
ICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iZTJlIFVuc3Ry
dWN0dXJlZCBEb2N1bWVudCIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjE4MTguMTAu
MS40IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAg
ICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9Ikhpc3RvcnkgYW5kIFBoeXNp
Y2FsIE5vdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMiIgcm9vdD0iMi4x
Ni44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxp
ZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJMYWIgUmVwb3J0IFRlbXBsYXRlIiBleHRlbnNpb249
IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi4xIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4z
LjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhv
cml0eU5hbWU9Ik9wZXJhdGl2ZSBOb3RlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjEw
LjIwLjciIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAg
ICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iUHJvY2VkdXJlIE5vdGUg
VGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjMiIHJvb3Q9
IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAg
ICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iUHJvZ3Jlc3MgTm90ZSIgZXh0ZW5zaW9uPSIy
LjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcu
MTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlO
YW1lPSJVbnN0cnVjdHVyZWQgUmVwb3J0IFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEu
MTEzODgzLjEwLjIwLjE5IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIv
PgogICAgICAgICAgICAgICAgICAgICAgPGNvZGUgbnVsbEZsYXZvcj0iVU5LIi8+CiAgICAgICAg
ICAgICAgICAgICAgPC9hY3REZWZpbml0aW9uPgogICAgICAgICAgICAgICAgICA8L25zMjpkZWZp
bml0aW9uPgogICAgICAgICAgICAgICAgPC9sb2NhdGlvbj4KICAgICAgICAgICAgICAgIDxsb2Nh
dGlvbiB0eXBlQ29kZT0iTE9DIj4KICAgICAgICAgICAgICAgICAgPHNlcXVlbmNlTnVtYmVyIHZh
bHVlPSIzIi8+CiAgICAgICAgICAgICAgICAgIDxzZXJ2aWNlRGVsaXZlcnlMb2NhdGlvbiBjbGFz
c0NvZGU9IlNETE9DIj4KICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5
TmFtZT0iQ0RYIENsaW5pYyBSZWdpc3RyeSBJRCIgZXh0ZW5zaW9uPSJDRFhDUjAwMDU1IiByb290
PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuMiIvPgogICAgICAgICAgICAgICAgICAgIDxj
b2RlIGNvZGU9IkNsaW5pYyIvPgogICAgICAgICAgICAgICAgICAgIDxhZGRyPgogICAgICAgICAg
ICAgICAgICAgICAgPHN0YXRlPkJyaXRpc2ggQ29sdW1iaWE8L3N0YXRlPgogICAgICAgICAgICAg
ICAgICAgICAgPGNvdW50cnk+Q2FuYWRhPC9jb3VudHJ5PgogICAgICAgICAgICAgICAgICAgIDwv
YWRkcj4KICAgICAgICAgICAgICAgICAgICA8bG9jYXRpb24gY2xhc3NDb2RlPSJQTEMiIGRldGVy
bWluZXJDb2RlPSJJTlNUQU5DRSI+CiAgICAgICAgICAgICAgICAgICAgICA8bmFtZT5Db25zdGFi
bGUgQ29uc3VsdGluZzwvbmFtZT4KICAgICAgICAgICAgICAgICAgICA8L2xvY2F0aW9uPgogICAg
ICAgICAgICAgICAgICA8L3NlcnZpY2VEZWxpdmVyeUxvY2F0aW9uPgogICAgICAgICAgICAgICAg
PC9sb2NhdGlvbj4KICAgICAgICAgICAgICAgIDxsb2NhdGlvbiB0eXBlQ29kZT0iTE9DIj4KICAg
ICAgICAgICAgICAgICAgPHNlcXVlbmNlTnVtYmVyIHZhbHVlPSI0Ii8+CiAgICAgICAgICAgICAg
ICAgIDxzZXJ2aWNlRGVsaXZlcnlMb2NhdGlvbiBjbGFzc0NvZGU9IlNETE9DIj4KICAgICAgICAg
ICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQ0RYIENsaW5pYyBSZWdpc3Ry
eSBJRCIgZXh0ZW5zaW9uPSJDRFgwMDAwMiIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcu
MTAwLjIiLz4KICAgICAgICAgICAgICAgICAgICA8Y29kZSBjb2RlPSJDbGluaWMiLz4KICAgICAg
ICAgICAgICAgICAgICA8YWRkcj4KICAgICAgICAgICAgICAgICAgICAgIDxkZWxpbWl0ZXI+U3Vp
dGUgMzkwLCA4ODkgSGFyYm91cnNpZGUgRHJpdmU8L2RlbGltaXRlcj4KICAgICAgICAgICAgICAg
ICAgICAgIDxjaXR5Pk5vcnRoIFZhbmNvdXZlcjwvY2l0eT4KICAgICAgICAgICAgICAgICAgICAg
IDxzdGF0ZT5Ccml0aXNoIENvbHVtYmlhPC9zdGF0ZT4KICAgICAgICAgICAgICAgICAgICAgIDxj
b3VudHJ5PkNhbmFkYTwvY291bnRyeT4KICAgICAgICAgICAgICAgICAgICAgIDxwb3N0YWxDb2Rl
PlY3UCAzUzE8L3Bvc3RhbENvZGU+CiAgICAgICAgICAgICAgICAgICAgPC9hZGRyPgogICAgICAg
ICAgICAgICAgICAgIDxsb2NhdGlvbiBjbGFzc0NvZGU9IlBMQyIgZGV0ZXJtaW5lckNvZGU9IklO
U1RBTkNFIj4KICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPkV4dGVybmFsIEludHJhaGVhbHRo
IFRlc3QgQ2xpbmljPC9uYW1lPgogICAgICAgICAgICAgICAgICAgIDwvbG9jYXRpb24+CiAgICAg
ICAgICAgICAgICAgIDwvc2VydmljZURlbGl2ZXJ5TG9jYXRpb24+CiAgICAgICAgICAgICAgICAg
IDxuczI6ZGVmaW5pdGlvbiB0eXBlQ29kZT0iSU5TVCI+CiAgICAgICAgICAgICAgICAgICAgPHRl
bXBsYXRlSWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iRG9jdW1lbnQgVGVtcGxhdGUgT0lEIiBy
b290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAiLz4KICAgICAgICAgICAgICAgICAg
ICA8YWN0RGVmaW5pdGlvbiBjbGFzc0NvZGU9IklORk8iIG1vb2RDb2RlPSJERUYiPgogICAgICAg
ICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkFkbWl0IE5vdGlmaWNh
dGlvbiBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuNyIg
cm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAg
ICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJBbmF0b21pYyBQYXRob2xvZ3kgUmVw
b3J0IFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi4yIiBy
b290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAg
ICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkNvbnN1bHRhdGlvbiBOb3RlIiBleHRl
bnNpb249IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjQiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgz
LjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0
aG9yaXR5TmFtZT0iRGlhZ25vc3RpYyBJbWFnaW5nIFJlcG9ydCBUZW1wbGF0ZSIgZXh0ZW5zaW9u
PSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuNSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMu
My4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRo
b3JpdHlOYW1lPSJEaXNjaGFyZ2UgTm90aWZpY2F0aW9uIFRlbXBsYXRlIiBleHRlbnNpb249IjIu
MTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi42IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3
Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0
eU5hbWU9IkRpc2NoYXJnZSBTdW1tYXJ5IFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEu
MTEzODgzLjMuNTEuNjAuMi40IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAu
MSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9ImUy
ZSBHZW5lcmljIEVwaXNvZGljIERvY3VtZW50IiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgz
LjMuMTgxOC4xMC4xLjIiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+
CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iZTJlIEdl
bmVyaWMgVW5zdHJ1Y3R1cmVkIFJlZmVycmFsIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgz
LjMuMTgxOC4xMC4xLjUiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+
CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iZTJlIFVu
c3RydWN0dXJlZCBEb2N1bWVudCIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjE4MTgu
MTAuMS40IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAg
ICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9Ikhpc3RvcnkgYW5kIFBo
eXNpY2FsIE5vdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMiIgcm9vdD0i
Mi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAg
IDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJMYWIgUmVwb3J0IFRlbXBsYXRlIiBleHRlbnNp
b249IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi4xIiByb290PSIyLjE2Ljg0MC4xLjExMzg4
My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1
dGhvcml0eU5hbWU9Ik9wZXJhdGl2ZSBOb3RlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgz
LjEwLjIwLjciIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAg
ICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iUHJvY2VkdXJlIE5v
dGUgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjMiIHJv
b3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAg
ICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iUHJvZ3Jlc3MgTm90ZSIgZXh0ZW5zaW9u
PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4y
NzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3Jp
dHlOYW1lPSJVbnN0cnVjdHVyZWQgUmVwb3J0IFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQw
LjEuMTEzODgzLjEwLjIwLjE5IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAu
MSIvPgogICAgICAgICAgICAgICAgICAgICAgPGNvZGUgbnVsbEZsYXZvcj0iVU5LIi8+CiAgICAg
ICAgICAgICAgICAgICAgPC9hY3REZWZpbml0aW9uPgogICAgICAgICAgICAgICAgICA8L25zMjpk
ZWZpbml0aW9uPgogICAgICAgICAgICAgICAgPC9sb2NhdGlvbj4KICAgICAgICAgICAgICAgIDxs
b2NhdGlvbiB0eXBlQ29kZT0iTE9DIj4KICAgICAgICAgICAgICAgICAgPHNlcXVlbmNlTnVtYmVy
IHZhbHVlPSI1Ii8+CiAgICAgICAgICAgICAgICAgIDxzZXJ2aWNlRGVsaXZlcnlMb2NhdGlvbiBj
bGFzc0NvZGU9IlNETE9DIj4KICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9y
aXR5TmFtZT0iQ0RYIENsaW5pYyBSZWdpc3RyeSBJRCIgZXh0ZW5zaW9uPSJDRFgwMDAwMyIgcm9v
dD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjIiLz4KICAgICAgICAgICAgICAgICAgICA8
Y29kZSBjb2RlPSJDbGluaWMiLz4KICAgICAgICAgICAgICAgICAgICA8YWRkcj4KICAgICAgICAg
ICAgICAgICAgICAgIDxkZWxpbWl0ZXI+U3VpdGUgMzkwLCA4ODkgSGFyYm91cnNpZGUgRHJpdmU8
L2RlbGltaXRlcj4KICAgICAgICAgICAgICAgICAgICAgIDxjaXR5Pk5vcnRoIFZhbmNvdXZlcjwv
Y2l0eT4KICAgICAgICAgICAgICAgICAgICAgIDxzdGF0ZT5Ccml0aXNoIENvbHVtYmlhPC9zdGF0
ZT4KICAgICAgICAgICAgICAgICAgICAgIDxjb3VudHJ5PkNhbmFkYTwvY291bnRyeT4KICAgICAg
ICAgICAgICAgICAgICAgIDxwb3N0YWxDb2RlPlY3UCAzUzE8L3Bvc3RhbENvZGU+CiAgICAgICAg
ICAgICAgICAgICAgPC9hZGRyPgogICAgICAgICAgICAgICAgICAgIDxsb2NhdGlvbiBjbGFzc0Nv
ZGU9IlBMQyIgZGV0ZXJtaW5lckNvZGU9IklOU1RBTkNFIj4KICAgICAgICAgICAgICAgICAgICAg
IDxuYW1lPkV4dGVybmFsIEludHJhaGVhbHRoIFRlc3RpbmcgQ2xpbmljIDI8L25hbWU+CiAgICAg
ICAgICAgICAgICAgICAgPC9sb2NhdGlvbj4KICAgICAgICAgICAgICAgICAgPC9zZXJ2aWNlRGVs
aXZlcnlMb2NhdGlvbj4KICAgICAgICAgICAgICAgICAgPG5zMjpkZWZpbml0aW9uIHR5cGVDb2Rl
PSJJTlNUIj4KICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGVJZCBhc3NpZ25pbmdBdXRob3Jp
dHlOYW1lPSJEb2N1bWVudCBUZW1wbGF0ZSBPSUQiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMu
Mjc3LjEwMC40MCIvPgogICAgICAgICAgICAgICAgICAgIDxhY3REZWZpbml0aW9uIGNsYXNzQ29k
ZT0iSU5GTyIgbW9vZENvZGU9IkRFRiI+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWdu
aW5nQXV0aG9yaXR5TmFtZT0iQW5hdG9taWMgUGF0aG9sb2d5IFJlcG9ydCBUZW1wbGF0ZSIgZXh0
ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuMiIgcm9vdD0iMi4xNi44NDAuMS4x
MTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25p
bmdBdXRob3JpdHlOYW1lPSJDb25zdWx0YXRpb24gTm90ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4x
LjExMzg4My4xMC4yMC40IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIv
PgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkRpYWdu
b3N0aWMgSW1hZ2luZyBSZXBvcnQgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4
ODMuMy41MS42MC4yLjUiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+
CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iRGlzY2hh
cmdlIFN1bW1hcnkgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42
MC4yLjQiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAg
ICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iZTJlIEdlbmVyaWMgRXBp
c29kaWMgRG9jdW1lbnQiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy4xODE4LjEwLjEu
MiIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAg
ICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJlMmUgR2VuZXJpYyBVbnN0cnVj
dHVyZWQgUmVmZXJyYWwiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy4xODE4LjEwLjEu
NSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAg
ICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJlMmUgVW5zdHJ1Y3R1cmVkIERv
Y3VtZW50IiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuMTgxOC4xMC4xLjQiIHJvb3Q9
IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAg
ICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iSGlzdG9yeSBhbmQgUGh5c2ljYWwgTm90ZSIg
ZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yIiByb290PSIyLjE2Ljg0MC4xLjEx
Mzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmlu
Z0F1dGhvcml0eU5hbWU9IkxhYiBSZXBvcnQgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAu
MS4xMTM4ODMuMy41MS42MC4yLjEiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40
MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0i
T3BlcmF0aXZlIE5vdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuNyIgcm9v
dD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAg
ICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJQcm9jZWR1cmUgTm90ZSBUZW1wbGF0ZSIg
ZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuMyIgcm9vdD0iMi4xNi44NDAu
MS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3Np
Z25pbmdBdXRob3JpdHlOYW1lPSJQcm9ncmVzcyBOb3RlIiBleHRlbnNpb249IjIuMTYuODQwLjEu
MTEzODgzLjEwLjIwLjIxIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIv
PgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IlVuc3Ry
dWN0dXJlZCBSZXBvcnQgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMTAu
MjAuMTkiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAg
ICAgICAgICAgICAgICA8Y29kZSBudWxsRmxhdm9yPSJVTksiLz4KICAgICAgICAgICAgICAgICAg
ICA8L2FjdERlZmluaXRpb24+CiAgICAgICAgICAgICAgICAgIDwvbnMyOmRlZmluaXRpb24+CiAg
ICAgICAgICAgICAgICA8L2xvY2F0aW9uPgogICAgICAgICAgICAgICAgPGxvY2F0aW9uIHR5cGVD
b2RlPSJMT0MiPgogICAgICAgICAgICAgICAgICA8c2VxdWVuY2VOdW1iZXIgdmFsdWU9IjYiLz4K
ICAgICAgICAgICAgICAgICAgPHNlcnZpY2VEZWxpdmVyeUxvY2F0aW9uIGNsYXNzQ29kZT0iU0RM
T0MiPgogICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJDRFgg
Q2xpbmljIFJlZ2lzdHJ5IElEIiBleHRlbnNpb249IkNEWENSMDAwMDciIHJvb3Q9IjIuMTYuODQw
LjEuMTEzODgzLjMuMjc3LjEwMC4yIi8+CiAgICAgICAgICAgICAgICAgICAgPGNvZGUgY29kZT0i
Q2xpbmljIi8+CiAgICAgICAgICAgICAgICAgICAgPGFkZHI+CiAgICAgICAgICAgICAgICAgICAg
ICA8ZGVsaW1pdGVyPjEyMyBBSUhTIFJvYWQ8L2RlbGltaXRlcj4KICAgICAgICAgICAgICAgICAg
ICAgIDxjaXR5PlByaW5jZSBHZW9yZ2U8L2NpdHk+CiAgICAgICAgICAgICAgICAgICAgICA8c3Rh
dGU+QnJpdGlzaCBDb2x1bWJpYTwvc3RhdGU+CiAgICAgICAgICAgICAgICAgICAgICA8Y291bnRy
eT5DYW5hZGE8L2NvdW50cnk+CiAgICAgICAgICAgICAgICAgICAgICA8cG9zdGFsQ29kZT5WMVgg
OUU0PC9wb3N0YWxDb2RlPgogICAgICAgICAgICAgICAgICAgIDwvYWRkcj4KICAgICAgICAgICAg
ICAgICAgICA8bG9jYXRpb24gY2xhc3NDb2RlPSJQTEMiIGRldGVybWluZXJDb2RlPSJJTlNUQU5D
RSI+CiAgICAgICAgICAgICAgICAgICAgICA8bmFtZT5NT0lTIENEWC1BSUhTPC9uYW1lPgogICAg
ICAgICAgICAgICAgICAgIDwvbG9jYXRpb24+CiAgICAgICAgICAgICAgICAgIDwvc2VydmljZURl
bGl2ZXJ5TG9jYXRpb24+CiAgICAgICAgICAgICAgICAgIDxuczI6ZGVmaW5pdGlvbiB0eXBlQ29k
ZT0iSU5TVCI+CiAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlSWQgYXNzaWduaW5nQXV0aG9y
aXR5TmFtZT0iRG9jdW1lbnQgVGVtcGxhdGUgT0lEIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4z
LjI3Ny4xMDAuNDAiLz4KICAgICAgICAgICAgICAgICAgICA8YWN0RGVmaW5pdGlvbiBjbGFzc0Nv
ZGU9IklORk8iIG1vb2RDb2RlPSJERUYiPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2ln
bmluZ0F1dGhvcml0eU5hbWU9IkFkbWl0IE5vdGlmaWNhdGlvbiBUZW1wbGF0ZSIgZXh0ZW5zaW9u
PSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuNyIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMu
My4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRo
b3JpdHlOYW1lPSJBbmF0b21pYyBQYXRob2xvZ3kgUmVwb3J0IFRlbXBsYXRlIiBleHRlbnNpb249
IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi4yIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4z
LjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhv
cml0eU5hbWU9IkNvbnN1bHRhdGlvbiBOb3RlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgz
LjEwLjIwLjQiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAg
ICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iRGlhZ25vc3RpYyBJ
bWFnaW5nIFJlcG9ydCBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUx
LjYwLjIuNSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAg
ICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJEaXNjaGFyZ2UgTm90
aWZpY2F0aW9uIFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAu
Mi42IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAg
ICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkRpc2NoYXJnZSBTdW1tYXJ5
IFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi40IiByb290
PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAg
ICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9ImUyZSBHZW5lcmljIEVwaXNvZGljIERvY3Vt
ZW50IiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuMTgxOC4xMC4xLjIiIHJvb3Q9IjIu
MTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8
aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iZTJlIEdlbmVyaWMgVW5zdHJ1Y3R1cmVkIFJlZmVy
cmFsIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuMTgxOC4xMC4xLjUiIHJvb3Q9IjIu
MTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8
aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iZTJlIFVuc3RydWN0dXJlZCBEb2N1bWVudCIgZXh0
ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjE4MTguMTAuMS40IiByb290PSIyLjE2Ljg0MC4x
LjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2ln
bmluZ0F1dGhvcml0eU5hbWU9Ikhpc3RvcnkgYW5kIFBoeXNpY2FsIE5vdGUiIGV4dGVuc2lvbj0i
Mi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMiIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcu
MTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlO
YW1lPSJMYWIgUmVwb3J0IFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMu
NTEuNjAuMi4xIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAg
ICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9Ik9wZXJhdGl2ZSBO
b3RlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjciIHJvb3Q9IjIuMTYuODQw
LjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNz
aWduaW5nQXV0aG9yaXR5TmFtZT0iUHJvY2VkdXJlIE5vdGUgVGVtcGxhdGUiIGV4dGVuc2lvbj0i
Mi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjMiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMu
Mjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9y
aXR5TmFtZT0iUHJvZ3Jlc3MgTm90ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4xMC4y
MC4yMSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAg
ICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJVbnN0cnVjdHVyZWQgUmVw
b3J0IFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjE5IiByb290
PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAg
ICAgPGNvZGUgbnVsbEZsYXZvcj0iVU5LIi8+CiAgICAgICAgICAgICAgICAgICAgPC9hY3REZWZp
bml0aW9uPgogICAgICAgICAgICAgICAgICA8L25zMjpkZWZpbml0aW9uPgogICAgICAgICAgICAg
ICAgPC9sb2NhdGlvbj4KICAgICAgICAgICAgICAgIDxsb2NhdGlvbiB0eXBlQ29kZT0iTE9DIj4K
ICAgICAgICAgICAgICAgICAgPHNlcXVlbmNlTnVtYmVyIHZhbHVlPSI3Ii8+CiAgICAgICAgICAg
ICAgICAgIDxzZXJ2aWNlRGVsaXZlcnlMb2NhdGlvbiBjbGFzc0NvZGU9IlNETE9DIj4KICAgICAg
ICAgICAgICAgICAgICA8aWQgbnVsbEZsYXZvcj0iTkEiLz4KICAgICAgICAgICAgICAgICAgICA8
Y29kZSBjb2RlPSJDbGluaWMiLz4KICAgICAgICAgICAgICAgICAgICA8YWRkcj4KICAgICAgICAg
ICAgICAgICAgICAgIDxkZWxpbWl0ZXI+MTIxMiBUd2VsZnRoIFN0LjwvZGVsaW1pdGVyPgogICAg
ICAgICAgICAgICAgICAgICAgPGNpdHk+VGVzdGluZ3RvbjwvY2l0eT4KICAgICAgICAgICAgICAg
ICAgICAgIDxzdGF0ZT5Ccml0aXNoIENvbHVtYmlhPC9zdGF0ZT4KICAgICAgICAgICAgICAgICAg
ICAgIDxjb3VudHJ5PkNhbmFkYTwvY291bnRyeT4KICAgICAgICAgICAgICAgICAgICA8L2FkZHI+
CiAgICAgICAgICAgICAgICAgICAgPGxvY2F0aW9uIGNsYXNzQ29kZT0iUExDIiBkZXRlcm1pbmVy
Q29kZT0iSU5TVEFOQ0UiPgogICAgICAgICAgICAgICAgICAgICAgPG5hbWU+TU9JUyBDRFgtQUlI
UyBUZXN0MjwvbmFtZT4KICAgICAgICAgICAgICAgICAgICA8L2xvY2F0aW9uPgogICAgICAgICAg
ICAgICAgICA8L3NlcnZpY2VEZWxpdmVyeUxvY2F0aW9uPgogICAgICAgICAgICAgICAgICA8bnMy
OmRlZmluaXRpb24gdHlwZUNvZGU9IklOU1QiPgogICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0
ZUlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkRvY3VtZW50IFRlbXBsYXRlIE9JRCIgcm9vdD0i
Mi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwIi8+CiAgICAgICAgICAgICAgICAgICAgPGFj
dERlZmluaXRpb24gY2xhc3NDb2RlPSJJTkZPIiBtb29kQ29kZT0iREVGIj4KICAgICAgICAgICAg
ICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJBbmF0b21pYyBQYXRob2xvZ3kg
UmVwb3J0IFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi4y
IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAg
ICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkNvbnN1bHRhdGlvbiBOb3RlIiBl
eHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjQiIHJvb3Q9IjIuMTYuODQwLjEuMTEz
ODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5n
QXV0aG9yaXR5TmFtZT0iRGlhZ25vc3RpYyBJbWFnaW5nIFJlcG9ydCBUZW1wbGF0ZSIgZXh0ZW5z
aW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuNSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4
ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdB
dXRob3JpdHlOYW1lPSJEaXNjaGFyZ2UgU3VtbWFyeSBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2
Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuNCIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcu
MTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlO
YW1lPSJlMmUgR2VuZXJpYyBFcGlzb2RpYyBEb2N1bWVudCIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4x
LjExMzg4My4zLjE4MTguMTAuMS4yIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAu
NDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9
ImUyZSBHZW5lcmljIFVuc3RydWN0dXJlZCBSZWZlcnJhbCIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4x
LjExMzg4My4zLjE4MTguMTAuMS41IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAu
NDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9
ImUyZSBVbnN0cnVjdHVyZWQgRG9jdW1lbnQiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMu
My4xODE4LjEwLjEuNCIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4K
ICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJIaXN0b3J5
IGFuZCBQaHlzaWNhbCBOb3RlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIi
IHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAg
ICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iTGFiIFJlcG9ydCBUZW1wbGF0ZSIg
ZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuMSIgcm9vdD0iMi4xNi44NDAu
MS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3Np
Z25pbmdBdXRob3JpdHlOYW1lPSJPcGVyYXRpdmUgTm90ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4x
LjExMzg4My4xMC4yMC43IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIv
PgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IlByb2Nl
ZHVyZSBOb3RlIFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAu
Mi4zIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAg
ICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IlByb2dyZXNzIE5vdGUiIGV4
dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjEiIHJvb3Q9IjIuMTYuODQwLjEuMTEz
ODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5n
QXV0aG9yaXR5TmFtZT0iVW5zdHJ1Y3R1cmVkIFJlcG9ydCBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIy
LjE2Ljg0MC4xLjExMzg4My4xMC4yMC4xOSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcu
MTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxjb2RlIG51bGxGbGF2b3I9IlVOSyIv
PgogICAgICAgICAgICAgICAgICAgIDwvYWN0RGVmaW5pdGlvbj4KICAgICAgICAgICAgICAgICAg
PC9uczI6ZGVmaW5pdGlvbj4KICAgICAgICAgICAgICAgIDwvbG9jYXRpb24+CiAgICAgICAgICAg
ICAgICA8bG9jYXRpb24gdHlwZUNvZGU9IkxPQyI+CiAgICAgICAgICAgICAgICAgIDxzZXF1ZW5j
ZU51bWJlciB2YWx1ZT0iOCIvPgogICAgICAgICAgICAgICAgICA8c2VydmljZURlbGl2ZXJ5TG9j
YXRpb24gY2xhc3NDb2RlPSJTRExPQyI+CiAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmlu
Z0F1dGhvcml0eU5hbWU9IkNEWCBDbGluaWMgUmVnaXN0cnkgSUQiIGV4dGVuc2lvbj0iQ0RYQ1Iw
MDAxOCIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjIiLz4KICAgICAgICAgICAg
ICAgICAgICA8Y29kZSBjb2RlPSJDbGluaWMiLz4KICAgICAgICAgICAgICAgICAgICA8YWRkcj4K
ICAgICAgICAgICAgICAgICAgICAgIDxkZWxpbWl0ZXI+MjAwIC0gMTExMCA2dGggQXZlPC9kZWxp
bWl0ZXI+CiAgICAgICAgICAgICAgICAgICAgICA8Y2l0eT5QcmluY2UgR2VvcmdlPC9jaXR5Pgog
ICAgICAgICAgICAgICAgICAgICAgPHN0YXRlPkJyaXRpc2ggQ29sdW1iaWE8L3N0YXRlPgogICAg
ICAgICAgICAgICAgICAgICAgPGNvdW50cnk+Q2FuYWRhPC9jb3VudHJ5PgogICAgICAgICAgICAg
ICAgICAgICAgPHBvc3RhbENvZGU+VjJMIDNNNjwvcG9zdGFsQ29kZT4KICAgICAgICAgICAgICAg
ICAgICA8L2FkZHI+CiAgICAgICAgICAgICAgICAgICAgPGxvY2F0aW9uIGNsYXNzQ29kZT0iUExD
IiBkZXRlcm1pbmVyQ29kZT0iSU5TVEFOQ0UiPgogICAgICAgICAgICAgICAgICAgICAgPG5hbWU+
TU9JUyBDb25mb3JtYW5jZSBPbmU8L25hbWU+CiAgICAgICAgICAgICAgICAgICAgPC9sb2NhdGlv
bj4KICAgICAgICAgICAgICAgICAgPC9zZXJ2aWNlRGVsaXZlcnlMb2NhdGlvbj4KICAgICAgICAg
ICAgICAgICAgPG5zMjpkZWZpbml0aW9uIHR5cGVDb2RlPSJJTlNUIj4KICAgICAgICAgICAgICAg
ICAgICA8dGVtcGxhdGVJZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJEb2N1bWVudCBUZW1wbGF0
ZSBPSUQiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MCIvPgogICAgICAgICAg
ICAgICAgICAgIDxhY3REZWZpbml0aW9uIGNsYXNzQ29kZT0iSU5GTyIgbW9vZENvZGU9IkRFRiI+
CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQW5hdG9t
aWMgUGF0aG9sb2d5IFJlcG9ydCBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4
My4zLjUxLjYwLjIuMiIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4K
ICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJDb25zdWx0
YXRpb24gTm90ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC40IiByb290PSIy
LjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAg
PGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkRpYWdub3N0aWMgSW1hZ2luZyBSZXBvcnQgVGVt
cGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjUiIHJvb3Q9IjIu
MTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8
aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iRGlzY2hhcmdlIFN1bW1hcnkgVGVtcGxhdGUiIGV4
dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjQiIHJvb3Q9IjIuMTYuODQwLjEu
MTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWdu
aW5nQXV0aG9yaXR5TmFtZT0iZTJlIEdlbmVyaWMgRXBpc29kaWMgRG9jdW1lbnQiIGV4dGVuc2lv
bj0iMi4xNi44NDAuMS4xMTM4ODMuMy4xODE4LjEwLjEuMiIgcm9vdD0iMi4xNi44NDAuMS4xMTM4
ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdB
dXRob3JpdHlOYW1lPSJlMmUgR2VuZXJpYyBVbnN0cnVjdHVyZWQgUmVmZXJyYWwiIGV4dGVuc2lv
bj0iMi4xNi44NDAuMS4xMTM4ODMuMy4xODE4LjEwLjEuNSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4
ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdB
dXRob3JpdHlOYW1lPSJlMmUgVW5zdHJ1Y3R1cmVkIERvY3VtZW50IiBleHRlbnNpb249IjIuMTYu
ODQwLjEuMTEzODgzLjMuMTgxOC4xMC4xLjQiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3
LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5
TmFtZT0iSGlzdG9yeSBhbmQgUGh5c2ljYWwgTm90ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjEx
Mzg4My4xMC4yMC4yIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgog
ICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkxhYiBSZXBv
cnQgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjEiIHJv
b3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAg
ICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iT3BlcmF0aXZlIE5vdGUiIGV4dGVuc2lv
bj0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuNyIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4y
NzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3Jp
dHlOYW1lPSJQcm9jZWR1cmUgTm90ZSBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjEx
Mzg4My4zLjUxLjYwLjIuMyIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEi
Lz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJQcm9n
cmVzcyBOb3RlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIxIiByb290PSIy
LjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAg
PGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IlVuc3RydWN0dXJlZCBSZXBvcnQgVGVtcGxhdGUi
IGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMTkiIHJvb3Q9IjIuMTYuODQwLjEu
MTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8Y29kZSBudWxs
Rmxhdm9yPSJVTksiLz4KICAgICAgICAgICAgICAgICAgICA8L2FjdERlZmluaXRpb24+CiAgICAg
ICAgICAgICAgICAgIDwvbnMyOmRlZmluaXRpb24+CiAgICAgICAgICAgICAgICA8L2xvY2F0aW9u
PgogICAgICAgICAgICAgICAgPGxvY2F0aW9uIHR5cGVDb2RlPSJMT0MiPgogICAgICAgICAgICAg
ICAgICA8c2VxdWVuY2VOdW1iZXIgdmFsdWU9IjkiLz4KICAgICAgICAgICAgICAgICAgPHNlcnZp
Y2VEZWxpdmVyeUxvY2F0aW9uIGNsYXNzQ29kZT0iU0RMT0MiPgogICAgICAgICAgICAgICAgICAg
IDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJDRFggQ2xpbmljIFJlZ2lzdHJ5IElEIiBleHRl
bnNpb249IkNEWENSMDAwMTIiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC4yIi8+
CiAgICAgICAgICAgICAgICAgICAgPGNvZGUgY29kZT0iQ2xpbmljIi8+CiAgICAgICAgICAgICAg
ICAgICAgPGFkZHI+CiAgICAgICAgICAgICAgICAgICAgICA8ZGVsaW1pdGVyPjEyMyBBSUhTIFN0
cmVldDwvZGVsaW1pdGVyPgogICAgICAgICAgICAgICAgICAgICAgPGNpdHk+UEc8L2NpdHk+CiAg
ICAgICAgICAgICAgICAgICAgICA8c3RhdGU+QnJpdGlzaCBDb2x1bWJpYTwvc3RhdGU+CiAgICAg
ICAgICAgICAgICAgICAgICA8Y291bnRyeT5DYW5hZGE8L2NvdW50cnk+CiAgICAgICAgICAgICAg
ICAgICAgICA8cG9zdGFsQ29kZT5IMEggMEgwPC9wb3N0YWxDb2RlPgogICAgICAgICAgICAgICAg
ICAgIDwvYWRkcj4KICAgICAgICAgICAgICAgICAgICA8bG9jYXRpb24gY2xhc3NDb2RlPSJQTEMi
IGRldGVybWluZXJDb2RlPSJJTlNUQU5DRSI+CiAgICAgICAgICAgICAgICAgICAgICA8bmFtZT5N
T0lTIERldiBBY2NvdW50MTwvbmFtZT4KICAgICAgICAgICAgICAgICAgICA8L2xvY2F0aW9uPgog
ICAgICAgICAgICAgICAgICA8L3NlcnZpY2VEZWxpdmVyeUxvY2F0aW9uPgogICAgICAgICAgICAg
ICAgICA8bnMyOmRlZmluaXRpb24gdHlwZUNvZGU9IklOU1QiPgogICAgICAgICAgICAgICAgICAg
IDx0ZW1wbGF0ZUlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkRvY3VtZW50IFRlbXBsYXRlIE9J
RCIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwIi8+CiAgICAgICAgICAgICAg
ICAgICAgPGFjdERlZmluaXRpb24gY2xhc3NDb2RlPSJJTkZPIiBtb29kQ29kZT0iREVGIj4KICAg
ICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJBbmF0b21pYyBQ
YXRob2xvZ3kgUmVwb3J0IFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMu
NTEuNjAuMi4yIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAg
ICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkNvbnN1bHRhdGlv
biBOb3RlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjQiIHJvb3Q9IjIuMTYu
ODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQg
YXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iRGlhZ25vc3RpYyBJbWFnaW5nIFJlcG9ydCBUZW1wbGF0
ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuNSIgcm9vdD0iMi4xNi44
NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBh
c3NpZ25pbmdBdXRob3JpdHlOYW1lPSJEaXNjaGFyZ2UgU3VtbWFyeSBUZW1wbGF0ZSIgZXh0ZW5z
aW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuNCIgcm9vdD0iMi4xNi44NDAuMS4xMTM4
ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdB
dXRob3JpdHlOYW1lPSJlMmUgR2VuZXJpYyBFcGlzb2RpYyBEb2N1bWVudCIgZXh0ZW5zaW9uPSIy
LjE2Ljg0MC4xLjExMzg4My4zLjE4MTguMTAuMS4yIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4z
LjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhv
cml0eU5hbWU9ImUyZSBHZW5lcmljIFVuc3RydWN0dXJlZCBSZWZlcnJhbCIgZXh0ZW5zaW9uPSIy
LjE2Ljg0MC4xLjExMzg4My4zLjE4MTguMTAuMS41IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4z
LjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhv
cml0eU5hbWU9ImUyZSBVbnN0cnVjdHVyZWQgRG9jdW1lbnQiIGV4dGVuc2lvbj0iMi4xNi44NDAu
MS4xMTM4ODMuMy4xODE4LjEwLjEuNCIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAw
LjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1l
PSJIaXN0b3J5IGFuZCBQaHlzaWNhbCBOb3RlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgz
LjEwLjIwLjIiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAg
ICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iTGFiIFJlcG9ydCBU
ZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuMSIgcm9vdD0i
Mi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAg
IDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJPcGVyYXRpdmUgTm90ZSIgZXh0ZW5zaW9uPSIy
LjE2Ljg0MC4xLjExMzg4My4xMC4yMC43IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4x
MDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5h
bWU9IlByb2NlZHVyZSBOb3RlIFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgz
LjMuNTEuNjAuMi4zIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgog
ICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IlByb2dyZXNz
IE5vdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjEiIHJvb3Q9IjIuMTYu
ODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQg
YXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iVW5zdHJ1Y3R1cmVkIFJlcG9ydCBUZW1wbGF0ZSIgZXh0
ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4xOSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4
ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxjb2RlIG51bGxGbGF2
b3I9IlVOSyIvPgogICAgICAgICAgICAgICAgICAgIDwvYWN0RGVmaW5pdGlvbj4KICAgICAgICAg
ICAgICAgICAgPC9uczI6ZGVmaW5pdGlvbj4KICAgICAgICAgICAgICAgIDwvbG9jYXRpb24+CiAg
ICAgICAgICAgICAgICA8bG9jYXRpb24gdHlwZUNvZGU9IkxPQyI+CiAgICAgICAgICAgICAgICAg
IDxzZXF1ZW5jZU51bWJlciB2YWx1ZT0iMTAiLz4KICAgICAgICAgICAgICAgICAgPHNlcnZpY2VE
ZWxpdmVyeUxvY2F0aW9uIGNsYXNzQ29kZT0iU0RMT0MiPgogICAgICAgICAgICAgICAgICAgIDxp
ZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJDRFggQ2xpbmljIFJlZ2lzdHJ5IElEIiBleHRlbnNp
b249IkNEWENSMDAwMTMiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC4yIi8+CiAg
ICAgICAgICAgICAgICAgICAgPGNvZGUgY29kZT0iQ2xpbmljIi8+CiAgICAgICAgICAgICAgICAg
ICAgPGFkZHI+CiAgICAgICAgICAgICAgICAgICAgICA8ZGVsaW1pdGVyPlVOQkMgU3RyZWV0PC9k
ZWxpbWl0ZXI+CiAgICAgICAgICAgICAgICAgICAgICA8Y2l0eT5QRzwvY2l0eT4KICAgICAgICAg
ICAgICAgICAgICAgIDxzdGF0ZT5Ccml0aXNoIENvbHVtYmlhPC9zdGF0ZT4KICAgICAgICAgICAg
ICAgICAgICAgIDxjb3VudHJ5PkNhbmFkYTwvY291bnRyeT4KICAgICAgICAgICAgICAgICAgICAg
IDxwb3N0YWxDb2RlPkgwSCAwSDA8L3Bvc3RhbENvZGU+CiAgICAgICAgICAgICAgICAgICAgPC9h
ZGRyPgogICAgICAgICAgICAgICAgICAgIDxsb2NhdGlvbiBjbGFzc0NvZGU9IlBMQyIgZGV0ZXJt
aW5lckNvZGU9IklOU1RBTkNFIj4KICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPk1PSVMgRGV2
IEFjY291bnQyIFVOQkM8L25hbWU+CiAgICAgICAgICAgICAgICAgICAgPC9sb2NhdGlvbj4KICAg
ICAgICAgICAgICAgICAgPC9zZXJ2aWNlRGVsaXZlcnlMb2NhdGlvbj4KICAgICAgICAgICAgICAg
ICAgPG5zMjpkZWZpbml0aW9uIHR5cGVDb2RlPSJJTlNUIj4KICAgICAgICAgICAgICAgICAgICA8
dGVtcGxhdGVJZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJEb2N1bWVudCBUZW1wbGF0ZSBPSUQi
IHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MCIvPgogICAgICAgICAgICAgICAg
ICAgIDxhY3REZWZpbml0aW9uIGNsYXNzQ29kZT0iSU5GTyIgbW9vZENvZGU9IkRFRiI+CiAgICAg
ICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQW5hdG9taWMgUGF0
aG9sb2d5IFJlcG9ydCBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUx
LjYwLjIuMiIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAg
ICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJDb25zdWx0YXRpb24g
Tm90ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC40IiByb290PSIyLjE2Ljg0
MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFz
c2lnbmluZ0F1dGhvcml0eU5hbWU9IkRpYWdub3N0aWMgSW1hZ2luZyBSZXBvcnQgVGVtcGxhdGUi
IGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjUiIHJvb3Q9IjIuMTYuODQw
LjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNz
aWduaW5nQXV0aG9yaXR5TmFtZT0iRGlzY2hhcmdlIFN1bW1hcnkgVGVtcGxhdGUiIGV4dGVuc2lv
bj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjQiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgz
LjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0
aG9yaXR5TmFtZT0iZTJlIEdlbmVyaWMgRXBpc29kaWMgRG9jdW1lbnQiIGV4dGVuc2lvbj0iMi4x
Ni44NDAuMS4xMTM4ODMuMy4xODE4LjEwLjEuMiIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4y
NzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3Jp
dHlOYW1lPSJlMmUgR2VuZXJpYyBVbnN0cnVjdHVyZWQgUmVmZXJyYWwiIGV4dGVuc2lvbj0iMi4x
Ni44NDAuMS4xMTM4ODMuMy4xODE4LjEwLjEuNSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4y
NzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3Jp
dHlOYW1lPSJlMmUgVW5zdHJ1Y3R1cmVkIERvY3VtZW50IiBleHRlbnNpb249IjIuMTYuODQwLjEu
MTEzODgzLjMuMTgxOC4xMC4xLjQiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40
MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0i
SGlzdG9yeSBhbmQgUGh5c2ljYWwgTm90ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4x
MC4yMC4yIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAg
ICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkxhYiBSZXBvcnQgVGVt
cGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjEiIHJvb3Q9IjIu
MTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8
aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iT3BlcmF0aXZlIE5vdGUiIGV4dGVuc2lvbj0iMi4x
Ni44NDAuMS4xMTM4ODMuMTAuMjAuNyIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAw
LjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1l
PSJQcm9jZWR1cmUgTm90ZSBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4z
LjUxLjYwLjIuMyIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAg
ICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJQcm9ncmVzcyBO
b3RlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIxIiByb290PSIyLjE2Ljg0
MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFz
c2lnbmluZ0F1dGhvcml0eU5hbWU9IlVuc3RydWN0dXJlZCBSZXBvcnQgVGVtcGxhdGUiIGV4dGVu
c2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMTkiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgz
LjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8Y29kZSBudWxsRmxhdm9y
PSJVTksiLz4KICAgICAgICAgICAgICAgICAgICA8L2FjdERlZmluaXRpb24+CiAgICAgICAgICAg
ICAgICAgIDwvbnMyOmRlZmluaXRpb24+CiAgICAgICAgICAgICAgICA8L2xvY2F0aW9uPgogICAg
ICAgICAgICAgICAgPGxvY2F0aW9uIHR5cGVDb2RlPSJMT0MiPgogICAgICAgICAgICAgICAgICA8
c2VxdWVuY2VOdW1iZXIgdmFsdWU9IjExIi8+CiAgICAgICAgICAgICAgICAgIDxzZXJ2aWNlRGVs
aXZlcnlMb2NhdGlvbiBjbGFzc0NvZGU9IlNETE9DIj4KICAgICAgICAgICAgICAgICAgICA8aWQg
YXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQ0RYIENsaW5pYyBSZWdpc3RyeSBJRCIgZXh0ZW5zaW9u
PSJjZHh0ZXN0LW5oOCIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjIiLz4KICAg
ICAgICAgICAgICAgICAgICA8Y29kZSBjb2RlPSJDbGluaWMiLz4KICAgICAgICAgICAgICAgICAg
ICA8YWRkcj4KICAgICAgICAgICAgICAgICAgICAgIDxjaXR5PlZhbmNvdXZlcjwvY2l0eT4KICAg
ICAgICAgICAgICAgICAgICAgIDxzdGF0ZT5Ccml0aXNoIENvbHVtYmlhPC9zdGF0ZT4KICAgICAg
ICAgICAgICAgICAgICAgIDxjb3VudHJ5PkNhbmFkYTwvY291bnRyeT4KICAgICAgICAgICAgICAg
ICAgICA8L2FkZHI+CiAgICAgICAgICAgICAgICAgICAgPGxvY2F0aW9uIGNsYXNzQ29kZT0iUExD
IiBkZXRlcm1pbmVyQ29kZT0iSU5TVEFOQ0UiPgogICAgICAgICAgICAgICAgICAgICAgPG5hbWU+
TmV3IEhpcHBvIEhlYWx0aCBDbGluaWM8L25hbWU+CiAgICAgICAgICAgICAgICAgICAgPC9sb2Nh
dGlvbj4KICAgICAgICAgICAgICAgICAgPC9zZXJ2aWNlRGVsaXZlcnlMb2NhdGlvbj4KICAgICAg
ICAgICAgICAgICAgPG5zMjpkZWZpbml0aW9uIHR5cGVDb2RlPSJJTlNUIj4KICAgICAgICAgICAg
ICAgICAgICA8dGVtcGxhdGVJZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJEb2N1bWVudCBUZW1w
bGF0ZSBPSUQiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MCIvPgogICAgICAg
ICAgICAgICAgICAgIDxhY3REZWZpbml0aW9uIGNsYXNzQ29kZT0iSU5GTyIgbW9vZENvZGU9IkRF
RiI+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQWRt
aXQgTm90aWZpY2F0aW9uIFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMu
NTEuNjAuMi43IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAg
ICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkFuYXRvbWljIFBh
dGhvbG9neSBSZXBvcnQgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41
MS42MC4yLjIiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAg
ICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQ29uc3VsdGF0aW9u
IE5vdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuNCIgcm9vdD0iMi4xNi44
NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBh
c3NpZ25pbmdBdXRob3JpdHlOYW1lPSJEaWFnbm9zdGljIEltYWdpbmcgUmVwb3J0IFRlbXBsYXRl
IiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi41IiByb290PSIyLjE2Ljg0
MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFz
c2lnbmluZ0F1dGhvcml0eU5hbWU9IkRpc2NoYXJnZSBOb3RpZmljYXRpb24gVGVtcGxhdGUiIGV4
dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjYiIHJvb3Q9IjIuMTYuODQwLjEu
MTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWdu
aW5nQXV0aG9yaXR5TmFtZT0iRGlzY2hhcmdlIFN1bW1hcnkgVGVtcGxhdGUiIGV4dGVuc2lvbj0i
Mi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjQiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMu
Mjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9y
aXR5TmFtZT0iZTJlIEdlbmVyaWMgRXBpc29kaWMgRG9jdW1lbnQiIGV4dGVuc2lvbj0iMi4xNi44
NDAuMS4xMTM4ODMuMy4xODE4LjEwLjEuMiIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcu
MTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlO
YW1lPSJlMmUgR2VuZXJpYyBVbnN0cnVjdHVyZWQgUmVmZXJyYWwiIGV4dGVuc2lvbj0iMi4xNi44
NDAuMS4xMTM4ODMuMy4xODE4LjEwLjEuNSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcu
MTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlO
YW1lPSJlMmUgVW5zdHJ1Y3R1cmVkIERvY3VtZW50IiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEz
ODgzLjMuMTgxOC4xMC4xLjQiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4x
Ii8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iSGlz
dG9yeSBhbmQgUGh5c2ljYWwgTm90ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4xMC4y
MC4yIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAg
ICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkxhYiBSZXBvcnQgVGVtcGxh
dGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjEiIHJvb3Q9IjIuMTYu
ODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQg
YXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iT3BlcmF0aXZlIE5vdGUiIGV4dGVuc2lvbj0iMi4xNi44
NDAuMS4xMTM4ODMuMTAuMjAuNyIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQw
LjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJQ
cm9jZWR1cmUgTm90ZSBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUx
LjYwLjIuMyIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAg
ICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJQcm9ncmVzcyBOb3Rl
IiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIxIiByb290PSIyLjE2Ljg0MC4x
LjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2ln
bmluZ0F1dGhvcml0eU5hbWU9IlVuc3RydWN0dXJlZCBSZXBvcnQgVGVtcGxhdGUiIGV4dGVuc2lv
bj0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMTkiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMu
Mjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8Y29kZSBudWxsRmxhdm9yPSJV
TksiLz4KICAgICAgICAgICAgICAgICAgICA8L2FjdERlZmluaXRpb24+CiAgICAgICAgICAgICAg
ICAgIDwvbnMyOmRlZmluaXRpb24+CiAgICAgICAgICAgICAgICA8L2xvY2F0aW9uPgogICAgICAg
ICAgICAgICAgPGxvY2F0aW9uIHR5cGVDb2RlPSJMT0MiPgogICAgICAgICAgICAgICAgICA8c2Vx
dWVuY2VOdW1iZXIgdmFsdWU9IjEyIi8+CiAgICAgICAgICAgICAgICAgIDxzZXJ2aWNlRGVsaXZl
cnlMb2NhdGlvbiBjbGFzc0NvZGU9IlNETE9DIj4KICAgICAgICAgICAgICAgICAgICA8aWQgYXNz
aWduaW5nQXV0aG9yaXR5TmFtZT0iQ0RYIENsaW5pYyBSZWdpc3RyeSBJRCIgZXh0ZW5zaW9uPSIx
MDAxMDA0IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuMiIvPgogICAgICAgICAg
ICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJDSVggQ2xpbmljIElEIiBleHRl
bnNpb249ImNkeHRlc3QtdGEiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC4yLjIi
Lz4KICAgICAgICAgICAgICAgICAgICA8Y29kZSBjb2RlPSJDbGluaWMiLz4KICAgICAgICAgICAg
ICAgICAgICA8YWRkcj4KICAgICAgICAgICAgICAgICAgICAgIDxzdGF0ZT5Ccml0aXNoIENvbHVt
YmlhPC9zdGF0ZT4KICAgICAgICAgICAgICAgICAgICAgIDxjb3VudHJ5PkNhbmFkYTwvY291bnRy
eT4KICAgICAgICAgICAgICAgICAgICA8L2FkZHI+CiAgICAgICAgICAgICAgICAgICAgPGxvY2F0
aW9uIGNsYXNzQ29kZT0iUExDIiBkZXRlcm1pbmVyQ29kZT0iSU5TVEFOQ0UiPgogICAgICAgICAg
ICAgICAgICAgICAgPG5hbWU+TkhBIFRlc3QgQ2xpbmljIC0gQUlIUzwvbmFtZT4KICAgICAgICAg
ICAgICAgICAgICA8L2xvY2F0aW9uPgogICAgICAgICAgICAgICAgICA8L3NlcnZpY2VEZWxpdmVy
eUxvY2F0aW9uPgogICAgICAgICAgICAgICAgICA8bnMyOmRlZmluaXRpb24gdHlwZUNvZGU9IklO
U1QiPgogICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkIGFzc2lnbmluZ0F1dGhvcml0eU5h
bWU9IkRvY3VtZW50IFRlbXBsYXRlIE9JRCIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcu
MTAwLjQwIi8+CiAgICAgICAgICAgICAgICAgICAgPGFjdERlZmluaXRpb24gY2xhc3NDb2RlPSJJ
TkZPIiBtb29kQ29kZT0iREVGIj4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdB
dXRob3JpdHlOYW1lPSJBZG1pdCBOb3RpZmljYXRpb24gVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4x
Ni44NDAuMS4xMTM4ODMuMy41MS42MC4yLjciIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3
LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5
TmFtZT0iQW5hdG9taWMgUGF0aG9sb2d5IFJlcG9ydCBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2
Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuMiIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcu
MTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlO
YW1lPSJDb25zdWx0YXRpb24gTm90ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4xMC4y
MC40IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAg
ICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkRpYWdub3N0aWMgSW1hZ2lu
ZyBSZXBvcnQgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4y
LjUiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAg
ICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iRGlzY2hhcmdlIE5vdGlmaWNh
dGlvbiBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuNiIg
cm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAg
ICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJEaXNjaGFyZ2UgU3VtbWFyeSBUZW1w
bGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuNCIgcm9vdD0iMi4x
Ni44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxp
ZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJlMmUgR2VuZXJpYyBFcGlzb2RpYyBEb2N1bWVudCIg
ZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjE4MTguMTAuMS4yIiByb290PSIyLjE2Ljg0
MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFz
c2lnbmluZ0F1dGhvcml0eU5hbWU9ImUyZSBHZW5lcmljIFVuc3RydWN0dXJlZCBSZWZlcnJhbCIg
ZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjE4MTguMTAuMS41IiByb290PSIyLjE2Ljg0
MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFz
c2lnbmluZ0F1dGhvcml0eU5hbWU9ImUyZSBVbnN0cnVjdHVyZWQgRG9jdW1lbnQiIGV4dGVuc2lv
bj0iMi4xNi44NDAuMS4xMTM4ODMuMy4xODE4LjEwLjEuNCIgcm9vdD0iMi4xNi44NDAuMS4xMTM4
ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdB
dXRob3JpdHlOYW1lPSJIaXN0b3J5IGFuZCBQaHlzaWNhbCBOb3RlIiBleHRlbnNpb249IjIuMTYu
ODQwLjEuMTEzODgzLjEwLjIwLjIiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40
MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0i
TGFiIFJlcG9ydCBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYw
LjIuMSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAg
ICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJPcGVyYXRpdmUgTm90ZSIg
ZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC43IiByb290PSIyLjE2Ljg0MC4xLjEx
Mzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmlu
Z0F1dGhvcml0eU5hbWU9IlByb2NlZHVyZSBOb3RlIFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYu
ODQwLjEuMTEzODgzLjMuNTEuNjAuMi4zIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4x
MDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5h
bWU9IlByb2dyZXNzIE5vdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjEi
IHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAg
ICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iVW5zdHJ1Y3R1cmVkIFJlcG9ydCBU
ZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4xOSIgcm9vdD0iMi4x
Ni44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxj
b2RlIG51bGxGbGF2b3I9IlVOSyIvPgogICAgICAgICAgICAgICAgICAgIDwvYWN0RGVmaW5pdGlv
bj4KICAgICAgICAgICAgICAgICAgPC9uczI6ZGVmaW5pdGlvbj4KICAgICAgICAgICAgICAgIDwv
bG9jYXRpb24+CiAgICAgICAgICAgICAgICA8bG9jYXRpb24gdHlwZUNvZGU9IkxPQyI+CiAgICAg
ICAgICAgICAgICAgIDxzZXF1ZW5jZU51bWJlciB2YWx1ZT0iMTMiLz4KICAgICAgICAgICAgICAg
ICAgPHNlcnZpY2VEZWxpdmVyeUxvY2F0aW9uIGNsYXNzQ29kZT0iU0RMT0MiPgogICAgICAgICAg
ICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJDRFggQ2xpbmljIFJlZ2lzdHJ5
IElEIiBleHRlbnNpb249IjEwMDEwMDIiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEw
MC4yIi8+CiAgICAgICAgICAgICAgICAgICAgPGNvZGUgY29kZT0iQ2xpbmljIi8+CiAgICAgICAg
ICAgICAgICAgICAgPGFkZHI+CiAgICAgICAgICAgICAgICAgICAgICA8c3RhdGU+QnJpdGlzaCBD
b2x1bWJpYTwvc3RhdGU+CiAgICAgICAgICAgICAgICAgICAgICA8Y291bnRyeT5DYW5hZGE8L2Nv
dW50cnk+CiAgICAgICAgICAgICAgICAgICAgPC9hZGRyPgogICAgICAgICAgICAgICAgICAgIDxs
b2NhdGlvbiBjbGFzc0NvZGU9IlBMQyIgZGV0ZXJtaW5lckNvZGU9IklOU1RBTkNFIj4KICAgICAg
ICAgICAgICAgICAgICAgIDxuYW1lPk5IQSBUZXN0IENsaW5pYyAtIGlDbGluaWM8L25hbWU+CiAg
ICAgICAgICAgICAgICAgICAgPC9sb2NhdGlvbj4KICAgICAgICAgICAgICAgICAgPC9zZXJ2aWNl
RGVsaXZlcnlMb2NhdGlvbj4KICAgICAgICAgICAgICAgICAgPG5zMjpkZWZpbml0aW9uIHR5cGVD
b2RlPSJJTlNUIj4KICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGVJZCBhc3NpZ25pbmdBdXRo
b3JpdHlOYW1lPSJEb2N1bWVudCBUZW1wbGF0ZSBPSUQiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgz
LjMuMjc3LjEwMC40MCIvPgogICAgICAgICAgICAgICAgICAgIDxhY3REZWZpbml0aW9uIGNsYXNz
Q29kZT0iSU5GTyIgbW9vZENvZGU9IkRFRiI+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNz
aWduaW5nQXV0aG9yaXR5TmFtZT0iQWRtaXQgTm90aWZpY2F0aW9uIFRlbXBsYXRlIiBleHRlbnNp
b249IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi43IiByb290PSIyLjE2Ljg0MC4xLjExMzg4
My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1
dGhvcml0eU5hbWU9IkFuYXRvbWljIFBhdGhvbG9neSBSZXBvcnQgVGVtcGxhdGUiIGV4dGVuc2lv
bj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjIiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgz
LjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0
aG9yaXR5TmFtZT0iQ29uc3VsdGF0aW9uIE5vdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4
ODMuMTAuMjAuNCIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAg
ICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJEaWFnbm9zdGlj
IEltYWdpbmcgUmVwb3J0IFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMu
NTEuNjAuMi41IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAg
ICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkRpc2NoYXJnZSBO
b3RpZmljYXRpb24gVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42
MC4yLjYiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAg
ICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iRGlzY2hhcmdlIFN1bW1h
cnkgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjQiIHJv
b3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAg
ICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iZTJlIEdlbmVyaWMgRXBpc29kaWMgRG9j
dW1lbnQiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy4xODE4LjEwLjEuMiIgcm9vdD0i
Mi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAg
IDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJlMmUgR2VuZXJpYyBVbnN0cnVjdHVyZWQgUmVm
ZXJyYWwiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy4xODE4LjEwLjEuNSIgcm9vdD0i
Mi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAg
IDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJlMmUgVW5zdHJ1Y3R1cmVkIERvY3VtZW50IiBl
eHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuMTgxOC4xMC4xLjQiIHJvb3Q9IjIuMTYuODQw
LjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNz
aWduaW5nQXV0aG9yaXR5TmFtZT0iSGlzdG9yeSBhbmQgUGh5c2ljYWwgTm90ZSIgZXh0ZW5zaW9u
PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3
Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0
eU5hbWU9IkxhYiBSZXBvcnQgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMu
My41MS42MC4yLjEiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAg
ICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iT3BlcmF0aXZl
IE5vdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuNyIgcm9vdD0iMi4xNi44
NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBh
c3NpZ25pbmdBdXRob3JpdHlOYW1lPSJQcm9jZWR1cmUgTm90ZSBUZW1wbGF0ZSIgZXh0ZW5zaW9u
PSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuMyIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMu
My4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRo
b3JpdHlOYW1lPSJQcm9ncmVzcyBOb3RlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjEw
LjIwLjIxIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAg
ICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IlVuc3RydWN0dXJlZCBS
ZXBvcnQgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMTkiIHJv
b3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAg
ICAgICA8Y29kZSBudWxsRmxhdm9yPSJVTksiLz4KICAgICAgICAgICAgICAgICAgICA8L2FjdERl
ZmluaXRpb24+CiAgICAgICAgICAgICAgICAgIDwvbnMyOmRlZmluaXRpb24+CiAgICAgICAgICAg
ICAgICA8L2xvY2F0aW9uPgogICAgICAgICAgICAgICAgPGxvY2F0aW9uIHR5cGVDb2RlPSJMT0Mi
PgogICAgICAgICAgICAgICAgICA8c2VxdWVuY2VOdW1iZXIgdmFsdWU9IjE0Ii8+CiAgICAgICAg
ICAgICAgICAgIDxzZXJ2aWNlRGVsaXZlcnlMb2NhdGlvbiBjbGFzc0NvZGU9IlNETE9DIj4KICAg
ICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQ0RYIENsaW5pYyBS
ZWdpc3RyeSBJRCIgZXh0ZW5zaW9uPSIxMDAxMDAxIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4z
LjI3Ny4xMDAuMiIvPgogICAgICAgICAgICAgICAgICAgIDxjb2RlIGNvZGU9IkNsaW5pYyIvPgog
ICAgICAgICAgICAgICAgICAgIDxhZGRyPgogICAgICAgICAgICAgICAgICAgICAgPHN0YXRlPkJy
aXRpc2ggQ29sdW1iaWE8L3N0YXRlPgogICAgICAgICAgICAgICAgICAgICAgPGNvdW50cnk+Q2Fu
YWRhPC9jb3VudHJ5PgogICAgICAgICAgICAgICAgICAgIDwvYWRkcj4KICAgICAgICAgICAgICAg
ICAgICA8bG9jYXRpb24gY2xhc3NDb2RlPSJQTEMiIGRldGVybWluZXJDb2RlPSJJTlNUQU5DRSI+
CiAgICAgICAgICAgICAgICAgICAgICA8bmFtZT5OSEEgVGVzdCBDbGluaWMgLSBJbnRyYWhlYWx0
aDwvbmFtZT4KICAgICAgICAgICAgICAgICAgICA8L2xvY2F0aW9uPgogICAgICAgICAgICAgICAg
ICA8L3NlcnZpY2VEZWxpdmVyeUxvY2F0aW9uPgogICAgICAgICAgICAgICAgICA8bnMyOmRlZmlu
aXRpb24gdHlwZUNvZGU9IklOU1QiPgogICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkIGFz
c2lnbmluZ0F1dGhvcml0eU5hbWU9IkRvY3VtZW50IFRlbXBsYXRlIE9JRCIgcm9vdD0iMi4xNi44
NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwIi8+CiAgICAgICAgICAgICAgICAgICAgPGFjdERlZmlu
aXRpb24gY2xhc3NDb2RlPSJJTkZPIiBtb29kQ29kZT0iREVGIj4KICAgICAgICAgICAgICAgICAg
ICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJBZG1pdCBOb3RpZmljYXRpb24gVGVtcGxh
dGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjciIHJvb3Q9IjIuMTYu
ODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQg
YXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQW5hdG9taWMgUGF0aG9sb2d5IFJlcG9ydCBUZW1wbGF0
ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuMiIgcm9vdD0iMi4xNi44
NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBh
c3NpZ25pbmdBdXRob3JpdHlOYW1lPSJDb25zdWx0YXRpb24gTm90ZSIgZXh0ZW5zaW9uPSIyLjE2
Ljg0MC4xLjExMzg4My4xMC4yMC40IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAu
NDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9
IkRpYWdub3N0aWMgSW1hZ2luZyBSZXBvcnQgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAu
MS4xMTM4ODMuMy41MS42MC4yLjUiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40
MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0i
RGlzY2hhcmdlIE5vdGlmaWNhdGlvbiBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjEx
Mzg4My4zLjUxLjYwLjIuNiIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEi
Lz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJEaXNj
aGFyZ2UgU3VtbWFyeSBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUx
LjYwLjIuNCIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAg
ICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJlMmUgR2VuZXJpYyBF
cGlzb2RpYyBEb2N1bWVudCIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjE4MTguMTAu
MS4yIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAg
ICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9ImUyZSBHZW5lcmljIFVuc3Ry
dWN0dXJlZCBSZWZlcnJhbCIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjE4MTguMTAu
MS41IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAg
ICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9ImUyZSBVbnN0cnVjdHVyZWQg
RG9jdW1lbnQiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy4xODE4LjEwLjEuNCIgcm9v
dD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAg
ICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJIaXN0b3J5IGFuZCBQaHlzaWNhbCBOb3Rl
IiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIiIHJvb3Q9IjIuMTYuODQwLjEu
MTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWdu
aW5nQXV0aG9yaXR5TmFtZT0iTGFiIFJlcG9ydCBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0
MC4xLjExMzg4My4zLjUxLjYwLjIuMSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAw
LjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1l
PSJPcGVyYXRpdmUgTm90ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC43IiBy
b290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAg
ICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IlByb2NlZHVyZSBOb3RlIFRlbXBsYXRl
IiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi4zIiByb290PSIyLjE2Ljg0
MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFz
c2lnbmluZ0F1dGhvcml0eU5hbWU9IlByb2dyZXNzIE5vdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAu
MS4xMTM4ODMuMTAuMjAuMjEiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4x
Ii8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iVW5z
dHJ1Y3R1cmVkIFJlcG9ydCBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4x
MC4yMC4xOSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAg
ICAgICAgICAgICAgICAgIDxjb2RlIG51bGxGbGF2b3I9IlVOSyIvPgogICAgICAgICAgICAgICAg
ICAgIDwvYWN0RGVmaW5pdGlvbj4KICAgICAgICAgICAgICAgICAgPC9uczI6ZGVmaW5pdGlvbj4K
ICAgICAgICAgICAgICAgIDwvbG9jYXRpb24+CiAgICAgICAgICAgICAgICA8bG9jYXRpb24gdHlw
ZUNvZGU9IkxPQyI+CiAgICAgICAgICAgICAgICAgIDxzZXF1ZW5jZU51bWJlciB2YWx1ZT0iMTUi
Lz4KICAgICAgICAgICAgICAgICAgPHNlcnZpY2VEZWxpdmVyeUxvY2F0aW9uIGNsYXNzQ29kZT0i
U0RMT0MiPgogICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJD
RFggQ2xpbmljIFJlZ2lzdHJ5IElEIiBleHRlbnNpb249IjEwMDEwMDMiIHJvb3Q9IjIuMTYuODQw
LjEuMTEzODgzLjMuMjc3LjEwMC4yIi8+CiAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmlu
Z0F1dGhvcml0eU5hbWU9IkNJWCBDbGluaWMgSUQiIGV4dGVuc2lvbj0iNDE1MzQ4NTIiIHJvb3Q9
IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC4yLjIiLz4KICAgICAgICAgICAgICAgICAgICA8
Y29kZSBjb2RlPSJDbGluaWMiLz4KICAgICAgICAgICAgICAgICAgICA8YWRkcj4KICAgICAgICAg
ICAgICAgICAgICAgIDxzdGF0ZT5Ccml0aXNoIENvbHVtYmlhPC9zdGF0ZT4KICAgICAgICAgICAg
ICAgICAgICAgIDxjb3VudHJ5PkNhbmFkYTwvY291bnRyeT4KICAgICAgICAgICAgICAgICAgICA8
L2FkZHI+CiAgICAgICAgICAgICAgICAgICAgPGxvY2F0aW9uIGNsYXNzQ29kZT0iUExDIiBkZXRl
cm1pbmVyQ29kZT0iSU5TVEFOQ0UiPgogICAgICAgICAgICAgICAgICAgICAgPG5hbWU+TkhBIFRl
c3QgQ2xpbmljIC0gUUhSPC9uYW1lPgogICAgICAgICAgICAgICAgICAgIDwvbG9jYXRpb24+CiAg
ICAgICAgICAgICAgICAgIDwvc2VydmljZURlbGl2ZXJ5TG9jYXRpb24+CiAgICAgICAgICAgICAg
ICAgIDxuczI6ZGVmaW5pdGlvbiB0eXBlQ29kZT0iSU5TVCI+CiAgICAgICAgICAgICAgICAgICAg
PHRlbXBsYXRlSWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iRG9jdW1lbnQgVGVtcGxhdGUgT0lE
IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAiLz4KICAgICAgICAgICAgICAg
ICAgICA8YWN0RGVmaW5pdGlvbiBjbGFzc0NvZGU9IklORk8iIG1vb2RDb2RlPSJERUYiPgogICAg
ICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkFkbWl0IE5vdGlm
aWNhdGlvbiBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIu
NyIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAg
ICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJBbmF0b21pYyBQYXRob2xvZ3kg
UmVwb3J0IFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi4y
IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAg
ICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkNvbnN1bHRhdGlvbiBOb3RlIiBl
eHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjQiIHJvb3Q9IjIuMTYuODQwLjEuMTEz
ODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5n
QXV0aG9yaXR5TmFtZT0iRGlhZ25vc3RpYyBJbWFnaW5nIFJlcG9ydCBUZW1wbGF0ZSIgZXh0ZW5z
aW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuNSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4
ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdB
dXRob3JpdHlOYW1lPSJEaXNjaGFyZ2UgTm90aWZpY2F0aW9uIFRlbXBsYXRlIiBleHRlbnNpb249
IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi42IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4z
LjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhv
cml0eU5hbWU9IkRpc2NoYXJnZSBTdW1tYXJ5IFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQw
LjEuMTEzODgzLjMuNTEuNjAuMi40IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAu
NDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9
ImUyZSBHZW5lcmljIEVwaXNvZGljIERvY3VtZW50IiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEz
ODgzLjMuMTgxOC4xMC4xLjIiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4x
Ii8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iZTJl
IEdlbmVyaWMgVW5zdHJ1Y3R1cmVkIFJlZmVycmFsIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEz
ODgzLjMuMTgxOC4xMC4xLjUiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4x
Ii8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iZTJl
IFVuc3RydWN0dXJlZCBEb2N1bWVudCIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjE4
MTguMTAuMS40IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAg
ICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9Ikhpc3RvcnkgYW5k
IFBoeXNpY2FsIE5vdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMiIgcm9v
dD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAg
ICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJMYWIgUmVwb3J0IFRlbXBsYXRlIiBleHRl
bnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi4xIiByb290PSIyLjE2Ljg0MC4xLjEx
Mzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmlu
Z0F1dGhvcml0eU5hbWU9Ik9wZXJhdGl2ZSBOb3RlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEz
ODgzLjEwLjIwLjciIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAg
ICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iUHJvY2VkdXJl
IE5vdGUgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjMi
IHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAg
ICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iUHJvZ3Jlc3MgTm90ZSIgZXh0ZW5z
aW9uPSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMu
My4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRo
b3JpdHlOYW1lPSJVbnN0cnVjdHVyZWQgUmVwb3J0IFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYu
ODQwLjEuMTEzODgzLjEwLjIwLjE5IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAu
NDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGNvZGUgbnVsbEZsYXZvcj0iVU5LIi8+CiAg
ICAgICAgICAgICAgICAgICAgPC9hY3REZWZpbml0aW9uPgogICAgICAgICAgICAgICAgICA8L25z
MjpkZWZpbml0aW9uPgogICAgICAgICAgICAgICAgPC9sb2NhdGlvbj4KICAgICAgICAgICAgICAg
IDxsb2NhdGlvbiB0eXBlQ29kZT0iTE9DIj4KICAgICAgICAgICAgICAgICAgPHNlcXVlbmNlTnVt
YmVyIHZhbHVlPSIxNiIvPgogICAgICAgICAgICAgICAgICA8c2VydmljZURlbGl2ZXJ5TG9jYXRp
b24gY2xhc3NDb2RlPSJTRExPQyI+CiAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1
dGhvcml0eU5hbWU9IkNEWCBDbGluaWMgUmVnaXN0cnkgSUQiIGV4dGVuc2lvbj0iY2R4cG9zdHBy
b2Qtb3RjYSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjIiLz4KICAgICAgICAg
ICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iUE9JIENsaW5pYyBJRCIgZXh0
ZW5zaW9uPSJjZHhwb3N0cHJvZC1vdGNhIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4x
MDAuMi4xIi8+CiAgICAgICAgICAgICAgICAgICAgPGNvZGUgY29kZT0iQ2xpbmljIi8+CiAgICAg
ICAgICAgICAgICAgICAgPGFkZHI+CiAgICAgICAgICAgICAgICAgICAgICA8ZGVsaW1pdGVyPjE4
MTggVGVzdCBBdmU8L2RlbGltaXRlcj4KICAgICAgICAgICAgICAgICAgICAgIDxjaXR5PktlbG93
bmE8L2NpdHk+CiAgICAgICAgICAgICAgICAgICAgICA8c3RhdGU+QnJpdGlzaCBDb2x1bWJpYTwv
c3RhdGU+CiAgICAgICAgICAgICAgICAgICAgICA8Y291bnRyeT5DYW5hZGE8L2NvdW50cnk+CiAg
ICAgICAgICAgICAgICAgICAgICA8cG9zdGFsQ29kZT5WMVYxVjE8L3Bvc3RhbENvZGU+CiAgICAg
ICAgICAgICAgICAgICAgPC9hZGRyPgogICAgICAgICAgICAgICAgICAgIDxsb2NhdGlvbiBjbGFz
c0NvZGU9IlBMQyIgZGV0ZXJtaW5lckNvZGU9IklOU1RBTkNFIj4KICAgICAgICAgICAgICAgICAg
ICAgIDxuYW1lPk9zY2FyIFRlc3QgQ2xpbmljIEE8L25hbWU+CiAgICAgICAgICAgICAgICAgICAg
PC9sb2NhdGlvbj4KICAgICAgICAgICAgICAgICAgPC9zZXJ2aWNlRGVsaXZlcnlMb2NhdGlvbj4K
ICAgICAgICAgICAgICAgICAgPG5zMjpkZWZpbml0aW9uIHR5cGVDb2RlPSJJTlNUIj4KICAgICAg
ICAgICAgICAgICAgICA8dGVtcGxhdGVJZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJEb2N1bWVu
dCBUZW1wbGF0ZSBPSUQiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MCIvPgog
ICAgICAgICAgICAgICAgICAgIDxhY3REZWZpbml0aW9uIGNsYXNzQ29kZT0iSU5GTyIgbW9vZENv
ZGU9IkRFRiI+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFt
ZT0iQWRtaXQgTm90aWZpY2F0aW9uIFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEz
ODgzLjMuNTEuNjAuMi43IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIv
PgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkFuYXRv
bWljIFBhdGhvbG9neSBSZXBvcnQgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4
ODMuMy41MS42MC4yLjIiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+
CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQ29uc3Vs
dGF0aW9uIE5vdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuNCIgcm9vdD0i
Mi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAg
IDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJEaWFnbm9zdGljIEltYWdpbmcgUmVwb3J0IFRl
bXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi41IiByb290PSIy
LjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAg
PGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkRpc2NoYXJnZSBOb3RpZmljYXRpb24gVGVtcGxh
dGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjYiIHJvb3Q9IjIuMTYu
ODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQg
YXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iRGlzY2hhcmdlIFN1bW1hcnkgVGVtcGxhdGUiIGV4dGVu
c2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjQiIHJvb3Q9IjIuMTYuODQwLjEuMTEz
ODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5n
QXV0aG9yaXR5TmFtZT0iZTJlIEdlbmVyaWMgRXBpc29kaWMgRG9jdW1lbnQiIGV4dGVuc2lvbj0i
Mi4xNi44NDAuMS4xMTM4ODMuMy4xODE4LjEwLjEuMiIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMu
My4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRo
b3JpdHlOYW1lPSJlMmUgR2VuZXJpYyBVbnN0cnVjdHVyZWQgUmVmZXJyYWwiIGV4dGVuc2lvbj0i
Mi4xNi44NDAuMS4xMTM4ODMuMy4xODE4LjEwLjEuNSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMu
My4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRo
b3JpdHlOYW1lPSJlMmUgVW5zdHJ1Y3R1cmVkIERvY3VtZW50IiBleHRlbnNpb249IjIuMTYuODQw
LjEuMTEzODgzLjMuMTgxOC4xMC4xLjQiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEw
MC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFt
ZT0iSGlzdG9yeSBhbmQgUGh5c2ljYWwgTm90ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4
My4xMC4yMC4yIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAg
ICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkxhYiBSZXBvcnQg
VGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjEiIHJvb3Q9
IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAg
ICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iT3BlcmF0aXZlIE5vdGUiIGV4dGVuc2lvbj0i
Mi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuNyIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcu
MTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlO
YW1lPSJQcm9jZWR1cmUgTm90ZSBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4
My4zLjUxLjYwLjIuMyIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4K
ICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJQcm9ncmVz
cyBOb3RlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIxIiByb290PSIyLjE2
Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlk
IGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IlVuc3RydWN0dXJlZCBSZXBvcnQgVGVtcGxhdGUiIGV4
dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMTkiIHJvb3Q9IjIuMTYuODQwLjEuMTEz
ODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8Y29kZSBudWxsRmxh
dm9yPSJVTksiLz4KICAgICAgICAgICAgICAgICAgICA8L2FjdERlZmluaXRpb24+CiAgICAgICAg
ICAgICAgICAgIDwvbnMyOmRlZmluaXRpb24+CiAgICAgICAgICAgICAgICA8L2xvY2F0aW9uPgog
ICAgICAgICAgICAgICAgPGxvY2F0aW9uIHR5cGVDb2RlPSJMT0MiPgogICAgICAgICAgICAgICAg
ICA8c2VxdWVuY2VOdW1iZXIgdmFsdWU9IjE3Ii8+CiAgICAgICAgICAgICAgICAgIDxzZXJ2aWNl
RGVsaXZlcnlMb2NhdGlvbiBjbGFzc0NvZGU9IlNETE9DIj4KICAgICAgICAgICAgICAgICAgICA8
aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQ0RYIENsaW5pYyBSZWdpc3RyeSBJRCIgZXh0ZW5z
aW9uPSJDRFhDUjY2NiIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjIiLz4KICAg
ICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iUE9JIENsaW5pYyBJ
RCIgZXh0ZW5zaW9uPSJjZHh0ZXN0LXB0ciIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcu
MTAwLjIuMSIvPgogICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1l
PSJDSVggQ2xpbmljIElEIiBleHRlbnNpb249ImNkeHRlc3QtcHRyMiIgcm9vdD0iMi4xNi44NDAu
MS4xMTM4ODMuMy4yNzcuMTAwLjIuMiIvPgogICAgICAgICAgICAgICAgICAgIDxjb2RlIGNvZGU9
IkNsaW5pYyIvPgogICAgICAgICAgICAgICAgICAgIDxhZGRyPgogICAgICAgICAgICAgICAgICAg
ICAgPHN0YXRlPkJyaXRpc2ggQ29sdW1iaWE8L3N0YXRlPgogICAgICAgICAgICAgICAgICAgICAg
PGNvdW50cnk+Q2FuYWRhPC9jb3VudHJ5PgogICAgICAgICAgICAgICAgICAgIDwvYWRkcj4KICAg
ICAgICAgICAgICAgICAgICA8bG9jYXRpb24gY2xhc3NDb2RlPSJQTEMiIGRldGVybWluZXJDb2Rl
PSJJTlNUQU5DRSI+CiAgICAgICAgICAgICAgICAgICAgICA8bmFtZT5QT0kgVGVzdCBSZWNpcGll
bnQxPC9uYW1lPgogICAgICAgICAgICAgICAgICAgIDwvbG9jYXRpb24+CiAgICAgICAgICAgICAg
ICAgIDwvc2VydmljZURlbGl2ZXJ5TG9jYXRpb24+CiAgICAgICAgICAgICAgICAgIDxuczI6ZGVm
aW5pdGlvbiB0eXBlQ29kZT0iSU5TVCI+CiAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlSWQg
YXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iRG9jdW1lbnQgVGVtcGxhdGUgT0lEIiByb290PSIyLjE2
Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAiLz4KICAgICAgICAgICAgICAgICAgICA8YWN0RGVm
aW5pdGlvbiBjbGFzc0NvZGU9IklORk8iIG1vb2RDb2RlPSJERUYiPgogICAgICAgICAgICAgICAg
ICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkFkbWl0IE5vdGlmaWNhdGlvbiBUZW1w
bGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuNyIgcm9vdD0iMi4x
Ni44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxp
ZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJBbmF0b21pYyBQYXRob2xvZ3kgUmVwb3J0IFRlbXBs
YXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi4yIiByb290PSIyLjE2
Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlk
IGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkNvbnN1bHRhdGlvbiBOb3RlIiBleHRlbnNpb249IjIu
MTYuODQwLjEuMTEzODgzLjEwLjIwLjQiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEw
MC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFt
ZT0iRGlhZ25vc3RpYyBJbWFnaW5nIFJlcG9ydCBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0
MC4xLjExMzg4My4zLjUxLjYwLjIuNSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAw
LjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1l
PSJEaXNjaGFyZ2UgTm90aWZpY2F0aW9uIFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEu
MTEzODgzLjMuNTEuNjAuMi42IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAu
MSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkRp
c2NoYXJnZSBTdW1tYXJ5IFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMu
NTEuNjAuMi40IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAg
ICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9ImUyZSBHZW5lcmlj
IEVwaXNvZGljIERvY3VtZW50IiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuMTgxOC4x
MC4xLjIiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAg
ICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iZTJlIEdlbmVyaWMgVW5z
dHJ1Y3R1cmVkIFJlZmVycmFsIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuMTgxOC4x
MC4xLjUiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAg
ICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iZTJlIFVuc3RydWN0dXJl
ZCBEb2N1bWVudCIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjE4MTguMTAuMS40IiBy
b290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAg
ICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9Ikhpc3RvcnkgYW5kIFBoeXNpY2FsIE5v
dGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMiIgcm9vdD0iMi4xNi44NDAu
MS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3Np
Z25pbmdBdXRob3JpdHlOYW1lPSJMYWIgUmVwb3J0IFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYu
ODQwLjEuMTEzODgzLjMuNTEuNjAuMi4xIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4x
MDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5h
bWU9Ik9wZXJhdGl2ZSBOb3RlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjci
IHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAg
ICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iUHJvY2VkdXJlIE5vdGUgVGVtcGxh
dGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjMiIHJvb3Q9IjIuMTYu
ODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQg
YXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iUHJvZ3Jlc3MgTm90ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0
MC4xLjExMzg4My4xMC4yMC4yMSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQw
LjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJV
bnN0cnVjdHVyZWQgUmVwb3J0IFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgz
LjEwLjIwLjE5IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAg
ICAgICAgICAgICAgICAgICAgPGNvZGUgbnVsbEZsYXZvcj0iVU5LIi8+CiAgICAgICAgICAgICAg
ICAgICAgPC9hY3REZWZpbml0aW9uPgogICAgICAgICAgICAgICAgICA8L25zMjpkZWZpbml0aW9u
PgogICAgICAgICAgICAgICAgPC9sb2NhdGlvbj4KICAgICAgICAgICAgICAgIDxsb2NhdGlvbiB0
eXBlQ29kZT0iTE9DIj4KICAgICAgICAgICAgICAgICAgPHNlcXVlbmNlTnVtYmVyIHZhbHVlPSIx
OCIvPgogICAgICAgICAgICAgICAgICA8c2VydmljZURlbGl2ZXJ5TG9jYXRpb24gY2xhc3NDb2Rl
PSJTRExPQyI+CiAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9
IkNEWCBDbGluaWMgUmVnaXN0cnkgSUQiIGV4dGVuc2lvbj0iQ0RYQ1IwMDAyMCIgcm9vdD0iMi4x
Ni44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjIiLz4KICAgICAgICAgICAgICAgICAgICA8Y29kZSBj
b2RlPSJDbGluaWMiLz4KICAgICAgICAgICAgICAgICAgICA8YWRkcj4KICAgICAgICAgICAgICAg
ICAgICAgIDxkZWxpbWl0ZXI+MzAxLCAzMjEwLTI1dGggQXZlPC9kZWxpbWl0ZXI+CiAgICAgICAg
ICAgICAgICAgICAgICA8Y2l0eT5WZXJub248L2NpdHk+CiAgICAgICAgICAgICAgICAgICAgICA8
c3RhdGU+QnJpdGlzaCBDb2x1bWJpYTwvc3RhdGU+CiAgICAgICAgICAgICAgICAgICAgICA8Y291
bnRyeT5DYW5hZGE8L2NvdW50cnk+CiAgICAgICAgICAgICAgICAgICAgICA8cG9zdGFsQ29kZT5W
MVQgMVAxPC9wb3N0YWxDb2RlPgogICAgICAgICAgICAgICAgICAgIDwvYWRkcj4KICAgICAgICAg
ICAgICAgICAgICA8bG9jYXRpb24gY2xhc3NDb2RlPSJQTEMiIGRldGVybWluZXJDb2RlPSJJTlNU
QU5DRSI+CiAgICAgICAgICAgICAgICAgICAgICA8bmFtZT5Qb3VsaW4gVGVzdCBDbGluaWM8L25h
bWU+CiAgICAgICAgICAgICAgICAgICAgPC9sb2NhdGlvbj4KICAgICAgICAgICAgICAgICAgPC9z
ZXJ2aWNlRGVsaXZlcnlMb2NhdGlvbj4KICAgICAgICAgICAgICAgICAgPG5zMjpkZWZpbml0aW9u
IHR5cGVDb2RlPSJJTlNUIj4KICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGVJZCBhc3NpZ25p
bmdBdXRob3JpdHlOYW1lPSJEb2N1bWVudCBUZW1wbGF0ZSBPSUQiIHJvb3Q9IjIuMTYuODQwLjEu
MTEzODgzLjMuMjc3LjEwMC40MCIvPgogICAgICAgICAgICAgICAgICAgIDxhY3REZWZpbml0aW9u
IGNsYXNzQ29kZT0iSU5GTyIgbW9vZENvZGU9IkRFRiI+CiAgICAgICAgICAgICAgICAgICAgICA8
aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQW5hdG9taWMgUGF0aG9sb2d5IFJlcG9ydCBUZW1w
bGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuMiIgcm9vdD0iMi4x
Ni44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxp
ZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJDb25zdWx0YXRpb24gTm90ZSIgZXh0ZW5zaW9uPSIy
LjE2Ljg0MC4xLjExMzg4My4xMC4yMC40IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4x
MDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5h
bWU9IkRpYWdub3N0aWMgSW1hZ2luZyBSZXBvcnQgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44
NDAuMS4xMTM4ODMuMy41MS42MC4yLjUiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEw
MC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFt
ZT0iRGlzY2hhcmdlIFN1bW1hcnkgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4
ODMuMy41MS42MC4yLjQiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+
CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iZTJlIEdl
bmVyaWMgRXBpc29kaWMgRG9jdW1lbnQiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy4x
ODE4LjEwLjEuMiIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAg
ICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJlMmUgR2VuZXJp
YyBVbnN0cnVjdHVyZWQgUmVmZXJyYWwiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy4x
ODE4LjEwLjEuNSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAg
ICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJlMmUgVW5zdHJ1
Y3R1cmVkIERvY3VtZW50IiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuMTgxOC4xMC4x
LjQiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAg
ICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iSGlzdG9yeSBhbmQgUGh5c2lj
YWwgTm90ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yIiByb290PSIyLjE2
Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlk
IGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkxhYiBSZXBvcnQgVGVtcGxhdGUiIGV4dGVuc2lvbj0i
Mi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjEiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMu
Mjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9y
aXR5TmFtZT0iT3BlcmF0aXZlIE5vdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMTAu
MjAuNyIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAg
ICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJQcm9jZWR1cmUgTm90ZSBU
ZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuMyIgcm9vdD0i
Mi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAg
IDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJQcm9ncmVzcyBOb3RlIiBleHRlbnNpb249IjIu
MTYuODQwLjEuMTEzODgzLjEwLjIwLjIxIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4x
MDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5h
bWU9IlVuc3RydWN0dXJlZCBSZXBvcnQgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4x
MTM4ODMuMTAuMjAuMTkiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+
CiAgICAgICAgICAgICAgICAgICAgICA8Y29kZSBudWxsRmxhdm9yPSJVTksiLz4KICAgICAgICAg
ICAgICAgICAgICA8L2FjdERlZmluaXRpb24+CiAgICAgICAgICAgICAgICAgIDwvbnMyOmRlZmlu
aXRpb24+CiAgICAgICAgICAgICAgICA8L2xvY2F0aW9uPgogICAgICAgICAgICAgICAgPGxvY2F0
aW9uIHR5cGVDb2RlPSJMT0MiPgogICAgICAgICAgICAgICAgICA8c2VxdWVuY2VOdW1iZXIgdmFs
dWU9IjE5Ii8+CiAgICAgICAgICAgICAgICAgIDxzZXJ2aWNlRGVsaXZlcnlMb2NhdGlvbiBjbGFz
c0NvZGU9IlNETE9DIj4KICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5
TmFtZT0iQ0RYIENsaW5pYyBSZWdpc3RyeSBJRCIgZXh0ZW5zaW9uPSJDRFhDUjAwMDIzIiByb290
PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuMiIvPgogICAgICAgICAgICAgICAgICAgIDxp
ZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJDSVggQ2xpbmljIElEIiBleHRlbnNpb249ImNkeHRl
c3QtcXRjIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuMi4yIi8+CiAgICAgICAg
ICAgICAgICAgICAgPGNvZGUgY29kZT0iQ2xpbmljIi8+CiAgICAgICAgICAgICAgICAgICAgPGFk
ZHI+CiAgICAgICAgICAgICAgICAgICAgICA8ZGVsaW1pdGVyPjE2MjAgRGlja3NvbiBBdmVudWU8
L2RlbGltaXRlcj4KICAgICAgICAgICAgICAgICAgICAgIDxjaXR5PktlbG93bmE8L2NpdHk+CiAg
ICAgICAgICAgICAgICAgICAgICA8c3RhdGU+QnJpdGlzaCBDb2x1bWJpYTwvc3RhdGU+CiAgICAg
ICAgICAgICAgICAgICAgICA8Y291bnRyeT5DYW5hZGE8L2NvdW50cnk+CiAgICAgICAgICAgICAg
ICAgICAgICA8cG9zdGFsQ29kZT5WMVkgOVkyPC9wb3N0YWxDb2RlPgogICAgICAgICAgICAgICAg
ICAgIDwvYWRkcj4KICAgICAgICAgICAgICAgICAgICA8bG9jYXRpb24gY2xhc3NDb2RlPSJQTEMi
IGRldGVybWluZXJDb2RlPSJJTlNUQU5DRSI+CiAgICAgICAgICAgICAgICAgICAgICA8bmFtZT5R
SFIgVGVzdCBDbGluaWM8L25hbWU+CiAgICAgICAgICAgICAgICAgICAgPC9sb2NhdGlvbj4KICAg
ICAgICAgICAgICAgICAgPC9zZXJ2aWNlRGVsaXZlcnlMb2NhdGlvbj4KICAgICAgICAgICAgICAg
ICAgPG5zMjpkZWZpbml0aW9uIHR5cGVDb2RlPSJJTlNUIj4KICAgICAgICAgICAgICAgICAgICA8
dGVtcGxhdGVJZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJEb2N1bWVudCBUZW1wbGF0ZSBPSUQi
IHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MCIvPgogICAgICAgICAgICAgICAg
ICAgIDxhY3REZWZpbml0aW9uIGNsYXNzQ29kZT0iSU5GTyIgbW9vZENvZGU9IkRFRiI+CiAgICAg
ICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQWRtaXQgTm90aWZp
Y2F0aW9uIFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi43
IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAg
ICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkFuYXRvbWljIFBhdGhvbG9neSBS
ZXBvcnQgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjIi
IHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAg
ICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQ29uc3VsdGF0aW9uIE5vdGUiIGV4
dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuNCIgcm9vdD0iMi4xNi44NDAuMS4xMTM4
ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdB
dXRob3JpdHlOYW1lPSJEaWFnbm9zdGljIEltYWdpbmcgUmVwb3J0IFRlbXBsYXRlIiBleHRlbnNp
b249IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi41IiByb290PSIyLjE2Ljg0MC4xLjExMzg4
My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1
dGhvcml0eU5hbWU9IkRpc2NoYXJnZSBOb3RpZmljYXRpb24gVGVtcGxhdGUiIGV4dGVuc2lvbj0i
Mi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjYiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMu
Mjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9y
aXR5TmFtZT0iRGlzY2hhcmdlIFN1bW1hcnkgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAu
MS4xMTM4ODMuMy41MS42MC4yLjQiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40
MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0i
ZTJlIEdlbmVyaWMgRXBpc29kaWMgRG9jdW1lbnQiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4
ODMuMy4xODE4LjEwLjEuMiIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEi
Lz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJlMmUg
R2VuZXJpYyBVbnN0cnVjdHVyZWQgUmVmZXJyYWwiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4
ODMuMy4xODE4LjEwLjEuNSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEi
Lz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJlMmUg
VW5zdHJ1Y3R1cmVkIERvY3VtZW50IiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuMTgx
OC4xMC4xLjQiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAg
ICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iSGlzdG9yeSBhbmQg
UGh5c2ljYWwgTm90ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yIiByb290
PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAg
ICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkxhYiBSZXBvcnQgVGVtcGxhdGUiIGV4dGVu
c2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjEiIHJvb3Q9IjIuMTYuODQwLjEuMTEz
ODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5n
QXV0aG9yaXR5TmFtZT0iT3BlcmF0aXZlIE5vdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4
ODMuMTAuMjAuNyIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAg
ICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJQcm9jZWR1cmUg
Tm90ZSBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuMyIg
cm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAg
ICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJQcm9ncmVzcyBOb3RlIiBleHRlbnNp
b249IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIxIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4z
LjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhv
cml0eU5hbWU9IlVuc3RydWN0dXJlZCBSZXBvcnQgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44
NDAuMS4xMTM4ODMuMTAuMjAuMTkiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40
MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8Y29kZSBudWxsRmxhdm9yPSJVTksiLz4KICAg
ICAgICAgICAgICAgICAgICA8L2FjdERlZmluaXRpb24+CiAgICAgICAgICAgICAgICAgIDwvbnMy
OmRlZmluaXRpb24+CiAgICAgICAgICAgICAgICA8L2xvY2F0aW9uPgogICAgICAgICAgICAgICAg
PGxvY2F0aW9uIHR5cGVDb2RlPSJMT0MiPgogICAgICAgICAgICAgICAgICA8c2VxdWVuY2VOdW1i
ZXIgdmFsdWU9IjIwIi8+CiAgICAgICAgICAgICAgICAgIDxzZXJ2aWNlRGVsaXZlcnlMb2NhdGlv
biBjbGFzc0NvZGU9IlNETE9DIj4KICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0
aG9yaXR5TmFtZT0iQ0RYIENsaW5pYyBSZWdpc3RyeSBJRCIgZXh0ZW5zaW9uPSJDRFhURVNUMDAw
MDQiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC4yIi8+CiAgICAgICAgICAgICAg
ICAgICAgPGNvZGUgY29kZT0iQ2xpbmljIi8+CiAgICAgICAgICAgICAgICAgICAgPGFkZHI+CiAg
ICAgICAgICAgICAgICAgICAgICA8ZGVsaW1pdGVyPjIwMC0xMDgwIE1haW5sYW5kIFN0LjwvZGVs
aW1pdGVyPgogICAgICAgICAgICAgICAgICAgICAgPGNpdHk+VmFuY291dmVyPC9jaXR5PgogICAg
ICAgICAgICAgICAgICAgICAgPHN0YXRlPkJyaXRpc2ggQ29sdW1iaWE8L3N0YXRlPgogICAgICAg
ICAgICAgICAgICAgICAgPGNvdW50cnk+Q2FuYWRhPC9jb3VudHJ5PgogICAgICAgICAgICAgICAg
ICAgICAgPHBvc3RhbENvZGU+VjZCMlQ0PC9wb3N0YWxDb2RlPgogICAgICAgICAgICAgICAgICAg
IDwvYWRkcj4KICAgICAgICAgICAgICAgICAgICA8bG9jYXRpb24gY2xhc3NDb2RlPSJQTEMiIGRl
dGVybWluZXJDb2RlPSJJTlNUQU5DRSI+CiAgICAgICAgICAgICAgICAgICAgICA8bmFtZT5URVNU
IC0gaUNsaW5pYyBTeXN0ZW1zIEluYy48L25hbWU+CiAgICAgICAgICAgICAgICAgICAgPC9sb2Nh
dGlvbj4KICAgICAgICAgICAgICAgICAgPC9zZXJ2aWNlRGVsaXZlcnlMb2NhdGlvbj4KICAgICAg
ICAgICAgICAgICAgPG5zMjpkZWZpbml0aW9uIHR5cGVDb2RlPSJJTlNUIj4KICAgICAgICAgICAg
ICAgICAgICA8dGVtcGxhdGVJZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJEb2N1bWVudCBUZW1w
bGF0ZSBPSUQiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MCIvPgogICAgICAg
ICAgICAgICAgICAgIDxhY3REZWZpbml0aW9uIGNsYXNzQ29kZT0iSU5GTyIgbW9vZENvZGU9IkRF
RiI+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQWRt
aXQgTm90aWZpY2F0aW9uIFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMu
NTEuNjAuMi43IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAg
ICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkFuYXRvbWljIFBh
dGhvbG9neSBSZXBvcnQgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41
MS42MC4yLjIiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAg
ICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQ29uc3VsdGF0aW9u
IE5vdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuNCIgcm9vdD0iMi4xNi44
NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBh
c3NpZ25pbmdBdXRob3JpdHlOYW1lPSJEaWFnbm9zdGljIEltYWdpbmcgUmVwb3J0IFRlbXBsYXRl
IiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi41IiByb290PSIyLjE2Ljg0
MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFz
c2lnbmluZ0F1dGhvcml0eU5hbWU9IkRpc2NoYXJnZSBOb3RpZmljYXRpb24gVGVtcGxhdGUiIGV4
dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjYiIHJvb3Q9IjIuMTYuODQwLjEu
MTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWdu
aW5nQXV0aG9yaXR5TmFtZT0iRGlzY2hhcmdlIFN1bW1hcnkgVGVtcGxhdGUiIGV4dGVuc2lvbj0i
Mi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjQiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMu
Mjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9y
aXR5TmFtZT0iZTJlIEdlbmVyaWMgRXBpc29kaWMgRG9jdW1lbnQiIGV4dGVuc2lvbj0iMi4xNi44
NDAuMS4xMTM4ODMuMy4xODE4LjEwLjEuMiIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcu
MTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlO
YW1lPSJlMmUgR2VuZXJpYyBVbnN0cnVjdHVyZWQgUmVmZXJyYWwiIGV4dGVuc2lvbj0iMi4xNi44
NDAuMS4xMTM4ODMuMy4xODE4LjEwLjEuNSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcu
MTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlO
YW1lPSJlMmUgVW5zdHJ1Y3R1cmVkIERvY3VtZW50IiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEz
ODgzLjMuMTgxOC4xMC4xLjQiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4x
Ii8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iSGlz
dG9yeSBhbmQgUGh5c2ljYWwgTm90ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4xMC4y
MC4yIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAg
ICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9Ik9wZXJhdGl2ZSBOb3RlIiBl
eHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjciIHJvb3Q9IjIuMTYuODQwLjEuMTEz
ODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5n
QXV0aG9yaXR5TmFtZT0iUHJvY2VkdXJlIE5vdGUgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44
NDAuMS4xMTM4ODMuMy41MS42MC4yLjMiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEw
MC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFt
ZT0iUHJvZ3Jlc3MgTm90ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMSIg
cm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAg
ICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJVbnN0cnVjdHVyZWQgUmVwb3J0IFRl
bXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjE5IiByb290PSIyLjE2
Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGNv
ZGUgbnVsbEZsYXZvcj0iVU5LIi8+CiAgICAgICAgICAgICAgICAgICAgPC9hY3REZWZpbml0aW9u
PgogICAgICAgICAgICAgICAgICA8L25zMjpkZWZpbml0aW9uPgogICAgICAgICAgICAgICAgPC9s
b2NhdGlvbj4KICAgICAgICAgICAgICAgIDxsb2NhdGlvbiB0eXBlQ29kZT0iTE9DIj4KICAgICAg
ICAgICAgICAgICAgPHNlcXVlbmNlTnVtYmVyIHZhbHVlPSIyMSIvPgogICAgICAgICAgICAgICAg
ICA8c2VydmljZURlbGl2ZXJ5TG9jYXRpb24gY2xhc3NDb2RlPSJTRExPQyI+CiAgICAgICAgICAg
ICAgICAgICAgPGlkIG51bGxGbGF2b3I9Ik5BIi8+CiAgICAgICAgICAgICAgICAgICAgPGNvZGUg
Y29kZT0iQ2xpbmljIi8+CiAgICAgICAgICAgICAgICAgICAgPGFkZHI+CiAgICAgICAgICAgICAg
ICAgICAgICA8ZGVsaW1pdGVyPjIyMjIgdWx0cmEgQXZlLjwvZGVsaW1pdGVyPgogICAgICAgICAg
ICAgICAgICAgICAgPGNpdHk+TWVnYXRvd248L2NpdHk+CiAgICAgICAgICAgICAgICAgICAgICA8
c3RhdGU+QnJpdGlzaCBDb2x1bWJpYTwvc3RhdGU+CiAgICAgICAgICAgICAgICAgICAgICA8Y291
bnRyeT5DYW5hZGE8L2NvdW50cnk+CiAgICAgICAgICAgICAgICAgICAgPC9hZGRyPgogICAgICAg
ICAgICAgICAgICAgIDxsb2NhdGlvbiBjbGFzc0NvZGU9IlBMQyIgZGV0ZXJtaW5lckNvZGU9IklO
U1RBTkNFIj4KICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPlRFU1QgQ2xpbmljIFVsdHJhIG1l
Z2EgQ2xpbmljPC9uYW1lPgogICAgICAgICAgICAgICAgICAgIDwvbG9jYXRpb24+CiAgICAgICAg
ICAgICAgICAgIDwvc2VydmljZURlbGl2ZXJ5TG9jYXRpb24+CiAgICAgICAgICAgICAgICAgIDxu
czI6ZGVmaW5pdGlvbiB0eXBlQ29kZT0iSU5TVCI+CiAgICAgICAgICAgICAgICAgICAgPHRlbXBs
YXRlSWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iRG9jdW1lbnQgVGVtcGxhdGUgT0lEIiByb290
PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAiLz4KICAgICAgICAgICAgICAgICAgICA8
YWN0RGVmaW5pdGlvbiBjbGFzc0NvZGU9IklORk8iIG1vb2RDb2RlPSJERUYiPgogICAgICAgICAg
ICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkFuYXRvbWljIFBhdGhvbG9n
eSBSZXBvcnQgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4y
LjIiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAg
ICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQ29uc3VsdGF0aW9uIE5vdGUi
IGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuNCIgcm9vdD0iMi4xNi44NDAuMS4x
MTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25p
bmdBdXRob3JpdHlOYW1lPSJEaWFnbm9zdGljIEltYWdpbmcgUmVwb3J0IFRlbXBsYXRlIiBleHRl
bnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi41IiByb290PSIyLjE2Ljg0MC4xLjEx
Mzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmlu
Z0F1dGhvcml0eU5hbWU9IkRpc2NoYXJnZSBTdW1tYXJ5IFRlbXBsYXRlIiBleHRlbnNpb249IjIu
MTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi40IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3
Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0
eU5hbWU9ImUyZSBHZW5lcmljIEVwaXNvZGljIERvY3VtZW50IiBleHRlbnNpb249IjIuMTYuODQw
LjEuMTEzODgzLjMuMTgxOC4xMC4xLjIiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEw
MC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFt
ZT0iZTJlIEdlbmVyaWMgVW5zdHJ1Y3R1cmVkIFJlZmVycmFsIiBleHRlbnNpb249IjIuMTYuODQw
LjEuMTEzODgzLjMuMTgxOC4xMC4xLjUiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEw
MC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFt
ZT0iZTJlIFVuc3RydWN0dXJlZCBEb2N1bWVudCIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4
My4zLjE4MTguMTAuMS40IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIv
PgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9Ikhpc3Rv
cnkgYW5kIFBoeXNpY2FsIE5vdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAu
MiIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAg
ICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJMYWIgUmVwb3J0IFRlbXBsYXRl
IiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi4xIiByb290PSIyLjE2Ljg0
MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGlkIGFz
c2lnbmluZ0F1dGhvcml0eU5hbWU9Ik9wZXJhdGl2ZSBOb3RlIiBleHRlbnNpb249IjIuMTYuODQw
LjEuMTEzODgzLjEwLjIwLjciIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4x
Ii8+CiAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iUHJv
Y2VkdXJlIE5vdGUgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42
MC4yLjMiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAg
ICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iUHJvZ3Jlc3MgTm90ZSIg
ZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMSIgcm9vdD0iMi4xNi44NDAuMS4x
MTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25p
bmdBdXRob3JpdHlOYW1lPSJVbnN0cnVjdHVyZWQgUmVwb3J0IFRlbXBsYXRlIiBleHRlbnNpb249
IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjE5IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3
Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgPGNvZGUgbnVsbEZsYXZvcj0iVU5L
Ii8+CiAgICAgICAgICAgICAgICAgICAgPC9hY3REZWZpbml0aW9uPgogICAgICAgICAgICAgICAg
ICA8L25zMjpkZWZpbml0aW9uPgogICAgICAgICAgICAgICAgPC9sb2NhdGlvbj4KICAgICAgICAg
ICAgICA8L2FjdERlZmluaXRpb25PckV2ZW50PgogICAgICAgICAgICA8L3BlcmZvcm1hbmNlPgog
ICAgICAgICAgPC9hc3NpZ25lZEVudGl0eT4KICAgICAgICAgIDxoZWFsdGhDYXJlUHJvdmlkZXIg
eG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNp
Om5pbD0idHJ1ZSIvPgogICAgICAgICAgPHF1YWxpZmllZEVudGl0eSB4bWxuczp4c2k9Imh0dHA6
Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6bmlsPSJ0cnVlIi8+CiAg
ICAgICAgPC9zdWJqZWN0MT4KICAgICAgICA8Y3VzdG9kaWFuIHR5cGVDb2RlPSJDU1QiPgogICAg
ICAgICAgPGFzc2lnbmVkRW50aXR5IGNsYXNzQ29kZT0iQVNTSUdORUQiPgogICAgICAgICAgICA8
aWQgbnVsbEZsYXZvcj0iTkEiLz4KICAgICAgICAgICAgPGFzc2lnbmVkRGV2aWNlIHhtbG5zOnhz
aT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTpuaWw9InRy
dWUiLz4KICAgICAgICAgICAgPGFzc2lnbmVkT3JnYW5pemF0aW9uIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTpuaWw9InRydWUiLz4KICAg
ICAgICAgICAgPGFzc2lnbmVkUGVyc29uIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAw
MS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTpuaWw9InRydWUiLz4KICAgICAgICAgIDwvYXNzaWdu
ZWRFbnRpdHk+CiAgICAgICAgPC9jdXN0b2RpYW4+CiAgICAgIDwvcmVnaXN0cmF0aW9uRXZlbnQ+
CiAgICA8L3N1YmplY3Q+CiAgICA8cXVlcnlBY2s+CiAgICAgIDxxdWVyeUlkIGFzc2lnbmluZ0F1
dGhvcml0eU5hbWU9IkNEWCBQcm92aWRlciBSZXBvc2l0b3J5IFF1ZXJ5IElEIiBleHRlbnNpb249
ImYyNGExNDI5LWFjZWItNDUzYi1iY2JlLTEyZTZhMGNkNDQwOSIgcm9vdD0iMi4xNi44NDAuMS4x
MTM4ODMuMy4yNzcuMTAwLjEiLz4KICAgICAgPHN0YXR1c0NvZGUgY29kZT0iZGVsaXZlcmVkUmVz
cG9uc2UiLz4KICAgICAgPHF1ZXJ5UmVzcG9uc2VDb2RlIGNvZGU9Ik9LIi8+CiAgICAgIDxyZXN1
bHRUb3RhbFF1YW50aXR5IHZhbHVlPSIxIi8+CiAgICAgIDxyZXN1bHRDdXJyZW50UXVhbnRpdHkg
dmFsdWU9IjEiLz4KICAgICAgPHJlc3VsdFJlbWFpbmluZ1F1YW50aXR5IHZhbHVlPSIwIi8+CiAg
ICA8L3F1ZXJ5QWNrPgogIDwvY29udHJvbEFjdFByb2Nlc3M+CjwvUFJQTV9JTjMwNjAxMVVWPg==
</inboundTemplate>
            <outboundTemplate encoding="base64">ewoJInN0YXR1cyI6ICIiLAoJIm1lc3NhZ2UiOiAiIiwKCSJhY2tEZXRhaWwiOnsKCQkiYWNrSWQi
OiAiIiwKCQkiYWNrVGltZSI6ICIiLAoJCSJtZXNzYWdlSWQiOiAiIiwKCQkic3RhdHVzIjogIiIK
CX0sCgkicHJvdmlkZXJzIjpbXQp9</outboundTemplate>
            <inboundDataType>HL7V3</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.8.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.8.0">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.8.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.8.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.8.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.8.0">
            <elements/>
          </filter>
          <transportName>JavaScript Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>false</waitForPrevious>
        </connector>
        <connector version="3.8.0">
          <metaDataId>17</metaDataId>
          <name>Service OSP Support</name>
          <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.8.0">
            <pluginProperties/>
            <destinationConnectorProperties version="3.8.0">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>true</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <script>logger.debug(&apos;Service OSP Support&apos;);

try {
	// Send the message to &quot;OSP Support&quot; channel
	var chResponse = router.routeMessage(&quot;OSP Support&quot;, JSON.stringify(connectorMessage.getEncodedData()));
	
	var resp = {}
	resp[&apos;status&apos;] = chResponse.status;
		
	if (chResponse.status !== SENT) {
		logger.error(&apos;Error parsing CDA Document &apos; + chResponse.statusMessage);
		resp[&apos;message&apos;] = chResponse.statusMessage;
	}
		
	// return the raw response to be processed by the &apos;response transformers&apos;
	return ResponseFactory.getSentResponse(JSON.stringify(resp));
} catch(e) {
	logger.error(&quot;Error on &apos;Service OSP Support&apos;: &quot; + e);
	
	responseMap.put(&apos;responseMessage&apos;, createErrorMessage(&quot;Error on &apos;Service OSP Support&apos;: &quot; + e.message, null)); // create the error response
	responseMap.put(&apos;responseStatus&apos;, &apos;200&apos;); // return ok
}
</script>
          </properties>
          <transformer version="3.8.0">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.8.0">
                <name>Build OSP Message</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>try {
	tmp = msg;
 
	tmp[&apos;clinicId&apos;] = $(&apos;locationId&apos;);
 
	if ($(&apos;documentId&apos;)) {
		tmp[&apos;messageId&apos;] = $(&apos;documentId&apos;);
	}

	tmp[&apos;obibVersion&apos;] = $(&apos;obib.version&apos;);
	tmp[&apos;connectorVersion&apos;] = $(&apos;connectorVersion&apos;);
} catch(e) {
	logger.error(&quot;Error on &apos;Build OSP Message&apos;: &quot; + e);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64">ewogICJkYXRlIjogIiIsCiAgImNvbnRleHQiIDogIiIsCiAgInRyYWNlIiA6ICIiCn0=</inboundTemplate>
            <outboundTemplate encoding="base64">ewogICJjbGluaWNJZCI6ICIiLAogICJtZXNzYWdlSWQiOiAiIiwKICAiZGF0ZSI6ICIiLAogICJj
b250ZXh0IiA6ICIiLAogICJ0cmFjZSIgOiAiIgp9</outboundTemplate>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.8.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.8.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.8.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.8.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.8.0">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.8.0">
                <name>OSP Support Response</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>try {
	// Store the response to be returned by the &quot;Source Connector&quot;
	responseMap.put(&apos;responseMessage&apos;, handleResponseMessage(responseStatus, responseStatusMessage, msg, function() {
		
		tmp = msg
		tmp[&apos;status&apos;] = responseStatus === SENT ? &apos;SUCCESS&apos; : &apos;ERROR&apos;;
		
		return tmp; // Return the transformed message to be converted on &apos;handleResponseMessage&apos;
	}));
	responseMap.put(&apos;responseStatus&apos;, &apos;200&apos;);
} catch(e) {
	logger.error(&quot;Error on &apos;OSP Support Response&apos;: &quot; + e);

	responseMap.put(&apos;responseMessage&apos;, createErrorMessage(e.message, null));
	responseMap.put(&apos;responseStatus&apos;, &apos;200&apos;);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64">ewoJInN0YXR1cyI6ICIiLAoJIm1lc3NhZ2UiOiAiIgp9</inboundTemplate>
            <outboundTemplate encoding="base64">ewoJInN0YXR1cyI6ICIiLAoJIm1lc3NhZ2UiOiAiIgp9</outboundTemplate>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.8.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.8.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.8.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.8.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.8.0">
            <elements/>
          </filter>
          <transportName>JavaScript Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>false</waitForPrevious>
        </connector>
        <connector version="3.8.0">
          <metaDataId>18</metaDataId>
          <name>Service Distribution Status</name>
          <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.8.0">
            <pluginProperties/>
            <destinationConnectorProperties version="3.8.0">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>true</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <script>logger.debug(&apos;Service Distribution Status&apos;);

importPackage(Packages.ca.uvic.leadlab.cdxconnector);

try {
	var client = new WSClientDocument($(&apos;cdx.base.url&apos;), $(&apos;username&apos;), $(&apos;password&apos;), $(&apos;certPath&apos;), $(&apos;certPass&apos;));

	var effectiveTime = null;
	if ($(&apos;effectiveTime_start&apos;).length() &gt; 0 &amp;&amp; $(&apos;effectiveTime_end&apos;).length() &gt; 0) {
		effectiveTime = new DateRange(new Date($(&apos;effectiveTime_start&apos;)), true, new Date($(&apos;effectiveTime_end&apos;)), true);
	}
	
	var eventTime = null;
	if ($(&apos;eventTime_start&apos;).length() &gt; 0 &amp;&amp; $(&apos;eventTime_end&apos;).length() &gt; 0) {
		eventTime = new DateRange(new Date($(&apos;eventTime_start&apos;)), true, new Date($(&apos;eventTime_end&apos;)), true);
	}

	// Call the WS method using CDX Connector
	var cdxResponse = client.getDistributionStatus($(&apos;locationId&apos;), $(&apos;clinicId&apos;), $(&apos;documentId&apos;), effectiveTime, eventTime);
	
	// return the raw response to be processed by the &apos;response transformers&apos;
	return ResponseFactory.getSentResponse(cdxResponse);
} catch (e) {
	logger.error(&quot;Error on &apos;Service Distribution Status&apos;: &quot; + e);

	responseMap.put(&apos;responseMessage&apos;, createErrorMessage(&quot;Error on &apos;Service Distribution Status&apos;: &quot; + e.message, null)); // create the error response
	responseMap.put(&apos;responseStatus&apos;, &apos;200&apos;); // return ok
}</script>
          </properties>
          <transformer version="3.8.0">
            <elements>
              <com.mirth.connect.plugins.mapper.MapperStep version="3.8.0">
                <name>clinicId</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <variable>clinicId</variable>
                <mapping>msg[&apos;clinicId&apos;]</mapping>
                <defaultValue>&quot;&quot;</defaultValue>
                <replacements/>
                <scope>CHANNEL</scope>
              </com.mirth.connect.plugins.mapper.MapperStep>
              <com.mirth.connect.plugins.mapper.MapperStep version="3.8.0">
                <name>documentId</name>
                <sequenceNumber>1</sequenceNumber>
                <enabled>true</enabled>
                <variable>documentId</variable>
                <mapping>msg[&apos;documentId&apos;]</mapping>
                <defaultValue>&quot;&quot;</defaultValue>
                <replacements/>
                <scope>CHANNEL</scope>
              </com.mirth.connect.plugins.mapper.MapperStep>
              <com.mirth.connect.plugins.mapper.MapperStep version="3.8.0">
                <name>effectiveTime_start</name>
                <sequenceNumber>2</sequenceNumber>
                <enabled>true</enabled>
                <variable>effectiveTime_start</variable>
                <mapping>msg[&apos;effectiveTime&apos;][&apos;start&apos;]</mapping>
                <defaultValue>&quot;&quot;</defaultValue>
                <replacements/>
                <scope>CHANNEL</scope>
              </com.mirth.connect.plugins.mapper.MapperStep>
              <com.mirth.connect.plugins.mapper.MapperStep version="3.8.0">
                <name>effectiveTime_end</name>
                <sequenceNumber>3</sequenceNumber>
                <enabled>true</enabled>
                <variable>effectiveTime_end</variable>
                <mapping>msg[&apos;effectiveTime&apos;][&apos;end&apos;]</mapping>
                <defaultValue>&quot;&quot;</defaultValue>
                <replacements/>
                <scope>CHANNEL</scope>
              </com.mirth.connect.plugins.mapper.MapperStep>
              <com.mirth.connect.plugins.mapper.MapperStep version="3.8.0">
                <name>eventTime_start</name>
                <sequenceNumber>4</sequenceNumber>
                <enabled>true</enabled>
                <variable>eventTime_start</variable>
                <mapping>msg[&apos;eventTime&apos;][&apos;start&apos;]</mapping>
                <defaultValue>&quot;&quot;</defaultValue>
                <replacements/>
                <scope>CHANNEL</scope>
              </com.mirth.connect.plugins.mapper.MapperStep>
              <com.mirth.connect.plugins.mapper.MapperStep version="3.8.0">
                <name>eventTime_end</name>
                <sequenceNumber>5</sequenceNumber>
                <enabled>true</enabled>
                <variable>eventTime_end</variable>
                <mapping>msg[&apos;eventTime&apos;][&apos;end&apos;]</mapping>
                <defaultValue>&quot;&quot;</defaultValue>
                <replacements/>
                <scope>CHANNEL</scope>
              </com.mirth.connect.plugins.mapper.MapperStep>
            </elements>
            <inboundTemplate encoding="base64">ewoJImVmZmVjdGl2ZVRpbWUiOiB7CgkJInN0YXJ0IjogIiIsCgkJImVuZCI6ICIiCgl9LAoJImV2
ZW50VGltZSI6IHsKCQkic3RhcnQiOiAiIiwKCQkiZW5kIjogIiIKCX0sCgkiY2xpbmljSWQiOiAi
IiwKCSJkb2N1bWVudElkIjogIiIKfQo=</inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>HL7V3</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.8.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.8.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.8.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.8.0">
                <stripNamespaces>true</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.8.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.8.0">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.8.0">
                <name>Distribution Status Response</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>logger.debug(&apos;Distribution Status Response&apos;);

try {
	// Store the response to be returned by the &quot;Source Connector&quot;
	responseMap.put(&apos;responseMessage&apos;, handleResponseMessage(responseStatus, responseStatusMessage, msg, function() {
		// Ack details
		tmp[&apos;ackDetail&apos;][&apos;ackId&apos;] = msg[&apos;id&apos;][&apos;@extension&apos;].toString();
		tmp[&apos;ackDetail&apos;][&apos;ackTime&apos;] = parseCDADateTime(msg[&apos;creationTime&apos;][&apos;@value&apos;].toString());
		tmp[&apos;ackDetail&apos;][&apos;messageId&apos;] = msg[&apos;acknowledgement&apos;][&apos;targetMessage&apos;][&apos;id&apos;][&apos;@extension&apos;].toString();
		tmp[&apos;ackDetail&apos;][&apos;status&apos;] = msg[&apos;controlActProcess&apos;][&apos;queryAck&apos;][&apos;queryResponseCode&apos;][&apos;@code&apos;].toString();
		
		// Payload
		for (var i = 0; i &lt; getArrayOrXmlLength(msg[&apos;controlActProcess&apos;][&apos;subject&apos;]); i++) { // Document list
			var target = msg[&apos;controlActProcess&apos;][&apos;subject&apos;][i][&apos;target&apos;];
			var document = {};
			
			document[&apos;documentId&apos;] = target[&apos;id&apos;][&apos;@extension&apos;].toString();
			
			document[&apos;template&apos;] = {};
			document[&apos;template&apos;][&apos;templateId&apos;] = target[&apos;templateId&apos;][&apos;@extension&apos;].toString();
			document[&apos;template&apos;][&apos;templateName&apos;] = target[&apos;templateId&apos;][&apos;@assigningAuthorityName&apos;].toString();
				
			document[&apos;loinc&apos;] = {};
			document[&apos;loinc&apos;][&apos;loincCode&apos;] = target[&apos;code&apos;][&apos;@code&apos;].toString();
			document[&apos;loinc&apos;][&apos;displayName&apos;] = target[&apos;code&apos;][&apos;@displayName&apos;].toString();
			
			document[&apos;effectiveTime&apos;] = parseCDADateTime(target[&apos;effectiveTime&apos;][&apos;@value&apos;].toString());

			// Distribution Statuses
			document[&apos;distributionStatuses&apos;] = [];
			for (var j = 0; j &lt; getArrayOrXmlLength(target[&apos;informationRecipient&apos;]); j++) {
				var intendedRecipient = target[&apos;informationRecipient&apos;][j][&apos;intendedRecipient&apos;];

				// Distribution Status
				var distributionStatus = {};
				distributionStatus[&apos;statusCode&apos;] = intendedRecipient[&apos;receivedOrganization&apos;].*::[&apos;distributionStatus&apos;].*::[&apos;statusCode&apos;][&apos;@code&apos;].toString();
				distributionStatus[&apos;statusName&apos;] = intendedRecipient[&apos;receivedOrganization&apos;].*::[&apos;distributionStatus&apos;].*::[&apos;statusCode&apos;][&apos;@displayName&apos;].toString();
				distributionStatus[&apos;statusTime&apos;] = parseCDADateTime(intendedRecipient[&apos;receivedOrganization&apos;].*::[&apos;distributionStatus&apos;].*::[&apos;statusTime&apos;][&apos;@value&apos;].toString());
								
				// Primary Recipient
				distributionStatus[&apos;recipient&apos;] = {};
				distributionStatus[&apos;recipient&apos;][&apos;typeCode&apos;] = target[&apos;informationRecipient&apos;][j][&apos;@typeCode&apos;].toString();
				distributionStatus[&apos;recipient&apos;][&apos;ids&apos;] = [];
				for (var k = 0; k &lt; getArrayOrXmlLength(intendedRecipient[&apos;id&apos;]); k++) {
					distributionStatus[&apos;recipient&apos;][&apos;ids&apos;][k] = parseCDAId(intendedRecipient[&apos;id&apos;][k]);
				}
				distributionStatus[&apos;recipient&apos;][&apos;name&apos;] = parseCDAName(intendedRecipient[&apos;informationRecipient&apos;][&apos;name&apos;]);

				// Received Organization
				distributionStatus[&apos;recipient&apos;][&apos;receivedOrganization&apos;] = {};
				distributionStatus[&apos;recipient&apos;][&apos;receivedOrganization&apos;][&apos;ids&apos;] = [];
				for (var k = 0; k &lt; getArrayOrXmlLength(intendedRecipient[&apos;receivedOrganization&apos;][&apos;id&apos;]); k++) {
					distributionStatus[&apos;recipient&apos;][&apos;receivedOrganization&apos;][&apos;ids&apos;][k] = parseCDAId(intendedRecipient[&apos;receivedOrganization&apos;][&apos;id&apos;][k]);
				}
				distributionStatus[&apos;recipient&apos;][&apos;receivedOrganization&apos;][&apos;name&apos;] = intendedRecipient[&apos;receivedOrganization&apos;][&apos;name&apos;].toString();
				// TODO Received Organization Address?

				document[&apos;distributionStatuses&apos;][j] = distributionStatus;
			}
			
			tmp[&apos;documents&apos;][i] = document;
		}

		return handleQueryResultStatus(tmp, msg, &apos;documents&apos;); // Return the transformed message to be converted on &apos;handleResponseMessage&apos;
	}));
	responseMap.put(&apos;responseStatus&apos;, &apos;200&apos;);
} catch(e) {
	logger.error(&quot;Error on &apos;Distribution Status Response&apos;: &quot; + e);

	responseMap.put(&apos;responseMessage&apos;, createErrorMessage(e.message, null));
	responseMap.put(&apos;responseStatus&apos;, &apos;200&apos;);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64">PFJDTVJfSU4wMDAwMzBVVjAxIHhtbG5zPSJ1cm46aGw3LW9yZzp2MyIgeG1sbnM6bnMyPSJ1cm46
YmNjZHguY2EiIElUU1ZlcnNpb249IlhNTF8xLjAiPgogICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0
eU5hbWU9IkNEWCBNZXNzYWdlIElEIiBleHRlbnNpb249ImU3ZTlmZGI5LWI1Y2YtNGNmYi04ZWVm
LWFmODAxNWU1MzMwNyIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjEiLz4KICAg
IDxjcmVhdGlvblRpbWUgdmFsdWU9IjIwMTkwNjAzMTU1Ny0wNzAwIi8+CiAgICA8dmVyc2lvbkNv
ZGUgY29kZT0iQmFsbG90MjAwOU1heSIvPgogICAgPGludGVyYWN0aW9uSWQgcm9vdD0iMi4xNi44
NDAuMS4xMTM4ODMuMS42Ii8+CiAgICA8cHJvY2Vzc2luZ0NvZGUgY29kZT0iUCIvPgogICAgPHBy
b2Nlc3NpbmdNb2RlQ29kZSBjb2RlPSJUIi8+CiAgICA8YWNjZXB0QWNrQ29kZSBjb2RlPSJORSIv
PgogICAgPHJlY2VpdmVyPgogICAgICAgIDxkZXZpY2UgY2xhc3NDb2RlPSJERVYiIGRldGVybWlu
ZXJDb2RlPSJJTlNUQU5DRSI+CiAgICAgICAgICAgIDxpZCBudWxsRmxhdm9yPSJOQSIvPgogICAg
ICAgICAgICA8YXNBZ2VudCBjbGFzc0NvZGU9IkFHTlQiPgogICAgICAgICAgICAgICAgPHJlcHJl
c2VudGVkT3JnYW5pemF0aW9uIGNsYXNzQ29kZT0iT1JHIiBkZXRlcm1pbmVyQ29kZT0iSU5TVEFO
Q0UiPgogICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJDRFgg
Q2xpbmljIElEIiBleHRlbnNpb249ImNkeHBvc3Rwcm9kLW90Y2EiIHJvb3Q9IjIuMTYuODQwLjEu
MTEzODgzLjMuMjc3LjEwMC4yIi8+CiAgICAgICAgICAgICAgICA8L3JlcHJlc2VudGVkT3JnYW5p
emF0aW9uPgogICAgICAgICAgICA8L2FzQWdlbnQ+CiAgICAgICAgPC9kZXZpY2U+CiAgICA8L3Jl
Y2VpdmVyPgogICAgPHNlbmRlcj4KICAgICAgICA8ZGV2aWNlIGNsYXNzQ29kZT0iREVWIiBkZXRl
cm1pbmVyQ29kZT0iSU5TVEFOQ0UiPgogICAgICAgICAgICA8aWQgbnVsbEZsYXZvcj0iTkEiLz4K
ICAgICAgICAgICAgPGFzQWdlbnQgY2xhc3NDb2RlPSJBR05UIj4KICAgICAgICAgICAgICAgIDxy
ZXByZXNlbnRlZE9yZ2FuaXphdGlvbiBjbGFzc0NvZGU9Ik9SRyIgZGV0ZXJtaW5lckNvZGU9IklO
U1RBTkNFIj4KICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0i
Q0RYIENsaW5pYyBJRCIgZXh0ZW5zaW9uPSJDRFhJSEEiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgz
LjMuMjc3LjEwMC4yIi8+CiAgICAgICAgICAgICAgICA8L3JlcHJlc2VudGVkT3JnYW5pemF0aW9u
PgogICAgICAgICAgICA8L2FzQWdlbnQ+CiAgICAgICAgPC9kZXZpY2U+CiAgICA8L3NlbmRlcj4K
ICAgIDxhY2tub3dsZWRnZW1lbnQgdHlwZUNvZGU9IkFBIj4KICAgICAgICA8dGFyZ2V0TWVzc2Fn
ZT4KICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkNEWCBNZXNzYWdlIElE
IiBleHRlbnNpb249ImRjNDU3MmQ3LTI4MmQtNGZkMi05NWI2LWM3Njg2NzM3YzlkMSIgcm9vdD0i
Mi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjEiLz4KICAgICAgICA8L3RhcmdldE1lc3NhZ2U+
CiAgICA8L2Fja25vd2xlZGdlbWVudD4KICAgIDxjb250cm9sQWN0UHJvY2VzcyBjbGFzc0NvZGU9
IkNBQ1QiIG1vb2RDb2RlPSJBUFQiPgogICAgICAgIDxzdWJqZWN0IHR5cGVDb2RlPSJTVUJKIj4K
ICAgICAgICAgICAgPHRhcmdldCBjbGFzc0NvZGU9IkRPQ0NMSU4iIG1vb2RDb2RlPSJFVk4iPgog
ICAgICAgICAgICAgICAgPHRlbXBsYXRlSWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQ0RYIENv
bnRlbnQgVHlwZSIgZXh0ZW5zaW9uPSJDREEiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3
LjEwMC4yMCIvPgogICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkNE
WCBDbGluaWNhbCBEb2N1bWVudCBJRCIgZXh0ZW5zaW9uPSIwMDZCODNCQy1CRTk2LTQ2QkItQkVC
MS00NzJEQ0IxMkM1NkEiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC4zIi8+CiAg
ICAgICAgICAgICAgICA8Y29kZSBjb2RlPSIyLjE2Ljg0MC4xLjExMzg4My4zLjE4MTguMTAuMS41
IiBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42LjEiIGRpc3BsYXlOYW1lPSJlMmUgR2Vu
ZXJpYyBVbnN0cnVjdHVyZWQgUmVmZXJyYWwiLz4KICAgICAgICAgICAgICAgIDxzdGF0dXNDb2Rl
IGNvZGU9ImNvbXBsZXRlZCIvPgogICAgICAgICAgICAgICAgPGVmZmVjdGl2ZVRpbWUgdmFsdWU9
IjIwMTkwNjAzMTU1Ny0wNzAwIi8+CiAgICAgICAgICAgICAgICA8Y29uZmlkZW50aWFsaXR5Q29k
ZSBjb2RlPSJOIiBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42LjEiLz4KICAgICAgICAg
ICAgICAgIDxyZWNvcmRUYXJnZXQgbnVsbEZsYXZvcj0iTkEiIHR5cGVDb2RlPSJSQ1QiPgogICAg
ICAgICAgICAgICAgICAgIDxwYXRpZW50IGNsYXNzQ29kZT0iUEFUIiBudWxsRmxhdm9yPSJOQSI+
CiAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRpZW50Tm9uUGVyc29uTGl2aW5nU3ViamVjdCB4
bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6
bmlsPSJ0cnVlIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwYXRpZW50UGVyc29uIHhtbG5z
OnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTpuaWw9
InRydWUiLz4KICAgICAgICAgICAgICAgICAgICA8L3BhdGllbnQ+CiAgICAgICAgICAgICAgICA8
L3JlY29yZFRhcmdldD4KICAgICAgICAgICAgICAgIDxhdXRob3IgbnVsbEZsYXZvcj0iTkEiIHR5
cGVDb2RlPSJBVVQiPgogICAgICAgICAgICAgICAgICAgIDx0aW1lIG51bGxGbGF2b3I9Ik5BIi8+
CiAgICAgICAgICAgICAgICAgICAgPGFzc2lnbmVkQXV0aG9yIGNsYXNzQ29kZT0iQVNTSUdORUQi
IG51bGxGbGF2b3I9Ik5BIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGlkIG51bGxGbGF2b3I9
Ik5BIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhc3NpZ25lZEF1dGhvcmluZ0RldmljZSB4
bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6
bmlsPSJ0cnVlIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhc3NpZ25lZFBlcnNvbiB4bWxu
czp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6bmls
PSJ0cnVlIi8+CiAgICAgICAgICAgICAgICAgICAgPC9hc3NpZ25lZEF1dGhvcj4KICAgICAgICAg
ICAgICAgIDwvYXV0aG9yPgogICAgICAgICAgICAgICAgPGN1c3RvZGlhbiBudWxsRmxhdm9yPSJO
QSIgdHlwZUNvZGU9IkNTVCI+CiAgICAgICAgICAgICAgICAgICAgPGFzc2lnbmVkQ3VzdG9kaWFu
IGNsYXNzQ29kZT0iQVNTSUdORUQiIG51bGxGbGF2b3I9Ik5BIj4KICAgICAgICAgICAgICAgICAg
ICAgICAgPHJlcHJlc2VudGVkT3JnYW5pemF0aW9uIGNsYXNzQ29kZT0iTkFUIiBkZXRlcm1pbmVy
Q29kZT0iSU5TVEFOQ0UiIG51bGxGbGF2b3I9Ik5BIj4KICAgICAgICAgICAgICAgICAgICAgICAg
ICAgIDxpZCBudWxsRmxhdm9yPSJOQSIvPgogICAgICAgICAgICAgICAgICAgICAgICA8L3JlcHJl
c2VudGVkT3JnYW5pemF0aW9uPgogICAgICAgICAgICAgICAgICAgIDwvYXNzaWduZWRDdXN0b2Rp
YW4+CiAgICAgICAgICAgICAgICA8L2N1c3RvZGlhbj4KICAgICAgICAgICAgICAgIDxpbmZvcm1h
dGlvblJlY2lwaWVudCB0eXBlQ29kZT0iUFJDUCI+CiAgICAgICAgICAgICAgICAgICAgPGludGVu
ZGVkUmVjaXBpZW50IGNsYXNzQ29kZT0iQVNTSUdORUQiPgogICAgICAgICAgICAgICAgICAgICAg
ICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQkMgTWluaXN0cnkgUHJhY3RpdGlvbmVyIElE
IiBleHRlbnNpb249IjkzMTkwIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjQwLjIuMTEiLz4K
ICAgICAgICAgICAgICAgICAgICAgICAgPGluZm9ybWF0aW9uUmVjaXBpZW50IGNsYXNzQ29kZT0i
UFNOIiBkZXRlcm1pbmVyQ29kZT0iSU5TVEFOQ0UiPgogICAgICAgICAgICAgICAgICAgICAgICAg
ICAgPG5hbWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZhbWlseT5QbGlzaWhk
PC9mYW1pbHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGdpdmVuPkFhcm9uPC9n
aXZlbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cHJlZml4PkRyLjwvcHJlZml4
PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICAgICAgICAg
ICAgICA8L2luZm9ybWF0aW9uUmVjaXBpZW50PgogICAgICAgICAgICAgICAgICAgICAgICA8cmVj
ZWl2ZWRPcmdhbml6YXRpb24gY2xhc3NDb2RlPSJOQVQiIGRldGVybWluZXJDb2RlPSJJTlNUQU5D
RSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFt
ZT0iQ0RYIENsaW5pYyBSZWdpc3RyeSBJRCIgZXh0ZW5zaW9uPSJDRFhULU5BVCIgcm9vdD0iMi4x
Ni44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjIiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAg
IDxuYW1lPk5hdGFsaWUncyBUZXN0IENsaW5pYzwvbmFtZT4KICAgICAgICAgICAgICAgICAgICAg
ICAgICAgIDxhZGRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkZWxpbWl0ZXI+
MTQxMSAzcmQgQXZlPC9kZWxpbWl0ZXI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
PGNpdHk+UHJpbmNlIEdlb3JnZTwvY2l0eT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICA8c3RhdGU+QnJpdGlzaCBDb2x1bWJpYTwvc3RhdGU+CiAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgPGNvdW50cnk+Q2FuYWRhPC9jb3VudHJ5PgogICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgIDxwb3N0YWxDb2RlPlYyTCAzRzE8L3Bvc3RhbENvZGU+CiAgICAgICAgICAgICAg
ICAgICAgICAgICAgICA8L2FkZHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bnMyOmRp
c3RyaWJ1dGlvblN0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bnMyOnN0
YXR1c0NvZGUgY29kZT0iNDAwLjEwIiBkaXNwbGF5TmFtZT0iVU5LTk9XTjogU3RhdHVzIFVua25v
d24uIFBsZWFzZSBjb250YWN0IENEWCBzdXBwb3J0IHRvIGludmVzdGlnYXRlLiIvPgogICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgIDxuczI6c3RhdHVzVGltZSBudWxsRmxhdm9yPSJOQSIv
PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9uczI6ZGlzdHJpYnV0aW9uU3RhdHVzPgog
ICAgICAgICAgICAgICAgICAgICAgICA8L3JlY2VpdmVkT3JnYW5pemF0aW9uPgogICAgICAgICAg
ICAgICAgICAgIDwvaW50ZW5kZWRSZWNpcGllbnQ+CiAgICAgICAgICAgICAgICA8L2luZm9ybWF0
aW9uUmVjaXBpZW50PgogICAgICAgICAgICAgICAgPGluZm9ybWF0aW9uUmVjaXBpZW50IHR5cGVD
b2RlPSJQUkNQIj4KICAgICAgICAgICAgICAgICAgICA8aW50ZW5kZWRSZWNpcGllbnQgY2xhc3ND
b2RlPSJBU1NJR05FRCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRo
b3JpdHlOYW1lPSJCQyBNaW5pc3RyeSBQcmFjdGl0aW9uZXIgSUQiIGV4dGVuc2lvbj0iOTMxOTAi
IHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuNDAuMi4xMSIvPgogICAgICAgICAgICAgICAgICAg
ICAgICA8aW5mb3JtYXRpb25SZWNpcGllbnQgY2xhc3NDb2RlPSJQU04iIGRldGVybWluZXJDb2Rl
PSJJTlNUQU5DRSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT4KICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICA8ZmFtaWx5PlBsaXNpaGQ8L2ZhbWlseT4KICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICA8Z2l2ZW4+QWFyb248L2dpdmVuPgogICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgIDxwcmVmaXg+RHIuPC9wcmVmaXg+CiAgICAgICAgICAgICAgICAg
ICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvaW5mb3JtYXRpb25S
ZWNpcGllbnQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDxyZWNlaXZlZE9yZ2FuaXphdGlvbiBj
bGFzc0NvZGU9Ik5BVCIgZGV0ZXJtaW5lckNvZGU9IklOU1RBTkNFIj4KICAgICAgICAgICAgICAg
ICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJDRFggQ2xpbmljIFJlZ2lz
dHJ5IElEIiBleHRlbnNpb249IkNEWENSMDAwMDciIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMu
Mjc3LjEwMC4yIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT5NT0lTIENEWC1B
SUhTPC9uYW1lPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFkZHI+CiAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgPGRlbGltaXRlcj4xMjMgQUlIUyBSb2FkPC9kZWxpbWl0ZXI+
CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNpdHk+UHJpbmNlIEdlb3JnZTwvY2l0
eT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3RhdGU+QnJpdGlzaCBDb2x1bWJp
YTwvc3RhdGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvdW50cnk+Q2FuYWRh
PC9jb3VudHJ5PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwb3N0YWxDb2RlPlYx
WCA5RTQ8L3Bvc3RhbENvZGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2FkZHI+CiAg
ICAgICAgICAgICAgICAgICAgICAgICAgICA8bnMyOmRpc3RyaWJ1dGlvblN0YXR1cz4KICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICA8bnMyOnN0YXR1c0NvZGUgY29kZT0iMjAwIiBkaXNw
bGF5TmFtZT0iUVVFVUVEIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5zMjpz
dGF0dXNUaW1lIHZhbHVlPSIyMDE5MDUyMTEwMTQtMDcwMCIvPgogICAgICAgICAgICAgICAgICAg
ICAgICAgICAgPC9uczI6ZGlzdHJpYnV0aW9uU3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAg
ICA8L3JlY2VpdmVkT3JnYW5pemF0aW9uPgogICAgICAgICAgICAgICAgICAgIDwvaW50ZW5kZWRS
ZWNpcGllbnQ+CiAgICAgICAgICAgICAgICA8L2luZm9ybWF0aW9uUmVjaXBpZW50PgogICAgICAg
ICAgICAgICAgPGluZm9ybWF0aW9uUmVjaXBpZW50IHR5cGVDb2RlPSJQUkNQIj4KICAgICAgICAg
ICAgICAgICAgICA8aW50ZW5kZWRSZWNpcGllbnQgY2xhc3NDb2RlPSJBU1NJR05FRCI+CiAgICAg
ICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJCQyBNaW5pc3Ry
eSBQcmFjdGl0aW9uZXIgSUQiIGV4dGVuc2lvbj0iOTMxOTAiIHJvb3Q9IjIuMTYuODQwLjEuMTEz
ODgzLjMuNDAuMi4xMSIvPgogICAgICAgICAgICAgICAgICAgICAgICA8aW5mb3JtYXRpb25SZWNp
cGllbnQgY2xhc3NDb2RlPSJQU04iIGRldGVybWluZXJDb2RlPSJJTlNUQU5DRSI+CiAgICAgICAg
ICAgICAgICAgICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICA8ZmFtaWx5PlBsaXNpaGQ8L2ZhbWlseT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICA8Z2l2ZW4+QWFyb248L2dpdmVuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxw
cmVmaXg+RHIuPC9wcmVmaXg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L25hbWU+CiAg
ICAgICAgICAgICAgICAgICAgICAgIDwvaW5mb3JtYXRpb25SZWNpcGllbnQ+CiAgICAgICAgICAg
ICAgICAgICAgICAgIDxyZWNlaXZlZE9yZ2FuaXphdGlvbiBjbGFzc0NvZGU9Ik5BVCIgZGV0ZXJt
aW5lckNvZGU9IklOU1RBTkNFIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3Np
Z25pbmdBdXRob3JpdHlOYW1lPSJDRFggQ2xpbmljIFJlZ2lzdHJ5IElEIiBleHRlbnNpb249IkNE
WDAwMDAyIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuMiIvPgogICAgICAgICAg
ICAgICAgICAgICAgICAgICAgPG5hbWU+RXh0ZXJuYWwgSW50cmFoZWFsdGggVGVzdCBDbGluaWM8
L25hbWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YWRkcj4KICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICA8ZGVsaW1pdGVyPlN1aXRlIDM5MCwgODg5IEhhcmJvdXJzaWRlIERy
aXZlPC9kZWxpbWl0ZXI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNpdHk+Tm9y
dGggVmFuY291dmVyPC9jaXR5PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdGF0
ZT5Ccml0aXNoIENvbHVtYmlhPC9zdGF0ZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICA8Y291bnRyeT5DYW5hZGE8L2NvdW50cnk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgPHBvc3RhbENvZGU+VjdQIDNTMTwvcG9zdGFsQ29kZT4KICAgICAgICAgICAgICAgICAgICAg
ICAgICAgIDwvYWRkcj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuczI6ZGlzdHJpYnV0
aW9uU3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuczI6c3RhdHVzQ29k
ZSBjb2RlPSIyMDAiIGRpc3BsYXlOYW1lPSJRVUVVRUQiLz4KICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICA8bnMyOnN0YXR1c1RpbWUgdmFsdWU9IjIwMTkwNTIxMTAxNC0wNzAwIi8+CiAg
ICAgICAgICAgICAgICAgICAgICAgICAgICA8L25zMjpkaXN0cmlidXRpb25TdGF0dXM+CiAgICAg
ICAgICAgICAgICAgICAgICAgIDwvcmVjZWl2ZWRPcmdhbml6YXRpb24+CiAgICAgICAgICAgICAg
ICAgICAgPC9pbnRlbmRlZFJlY2lwaWVudD4KICAgICAgICAgICAgICAgIDwvaW5mb3JtYXRpb25S
ZWNpcGllbnQ+CiAgICAgICAgICAgICAgICA8aW5mb3JtYXRpb25SZWNpcGllbnQgdHlwZUNvZGU9
IlBSQ1AiPgogICAgICAgICAgICAgICAgICAgIDxpbnRlbmRlZFJlY2lwaWVudCBjbGFzc0NvZGU9
IkFTU0lHTkVEIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0
eU5hbWU9IkJDIE1pbmlzdHJ5IFByYWN0aXRpb25lciBJRCIgZXh0ZW5zaW9uPSI5MzE5MCIgcm9v
dD0iMi4xNi44NDAuMS4xMTM4ODMuMy40MC4yLjExIi8+CiAgICAgICAgICAgICAgICAgICAgICAg
IDxpbmZvcm1hdGlvblJlY2lwaWVudCBjbGFzc0NvZGU9IlBTTiIgZGV0ZXJtaW5lckNvZGU9IklO
U1RBTkNFIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgIDxmYW1pbHk+UGxpc2loZDwvZmFtaWx5PgogICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgIDxnaXZlbj5BYXJvbjwvZ2l2ZW4+CiAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgPHByZWZpeD5Eci48L3ByZWZpeD4KICAgICAgICAgICAgICAgICAgICAg
ICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9pbmZvcm1hdGlvblJlY2lw
aWVudD4KICAgICAgICAgICAgICAgICAgICAgICAgPHJlY2VpdmVkT3JnYW5pemF0aW9uIGNsYXNz
Q29kZT0iTkFUIiBkZXRlcm1pbmVyQ29kZT0iSU5TVEFOQ0UiPgogICAgICAgICAgICAgICAgICAg
ICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkNEWCBDbGluaWMgUmVnaXN0cnkg
SUQiIGV4dGVuc2lvbj0iQ0RYQ1IwMDAxMyIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcu
MTAwLjIiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPk1PSVMgRGV2IEFjY291
bnQyIFVOQkM8L25hbWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YWRkcj4KICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGVsaW1pdGVyPlVOQkMgU3RyZWV0PC9kZWxpbWl0
ZXI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNpdHk+UEc8L2NpdHk+CiAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0YXRlPkJyaXRpc2ggQ29sdW1iaWE8L3N0YXRl
PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb3VudHJ5PkNhbmFkYTwvY291bnRy
eT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cG9zdGFsQ29kZT5IMEggMEgwPC9w
b3N0YWxDb2RlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hZGRyPgogICAgICAgICAg
ICAgICAgICAgICAgICAgICAgPG5zMjpkaXN0cmlidXRpb25TdGF0dXM+CiAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgPG5zMjpzdGF0dXNDb2RlIGNvZGU9IjIwMCIgZGlzcGxheU5hbWU9
IlFVRVVFRCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuczI6c3RhdHVzVGlt
ZSB2YWx1ZT0iMjAxOTA1MjExMDE0LTA3MDAiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAg
IDwvbnMyOmRpc3RyaWJ1dGlvblN0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9yZWNl
aXZlZE9yZ2FuaXphdGlvbj4KICAgICAgICAgICAgICAgICAgICA8L2ludGVuZGVkUmVjaXBpZW50
PgogICAgICAgICAgICAgICAgPC9pbmZvcm1hdGlvblJlY2lwaWVudD4KICAgICAgICAgICAgICAg
IDxpbmZvcm1hdGlvblJlY2lwaWVudCB0eXBlQ29kZT0iUFJDUCI+CiAgICAgICAgICAgICAgICAg
ICAgPGludGVuZGVkUmVjaXBpZW50IGNsYXNzQ29kZT0iQVNTSUdORUQiPgogICAgICAgICAgICAg
ICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQkMgTWluaXN0cnkgUHJhY3Rp
dGlvbmVyIElEIiBleHRlbnNpb249IjkzMTkwIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjQw
LjIuMTEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPGluZm9ybWF0aW9uUmVjaXBpZW50IGNs
YXNzQ29kZT0iUFNOIiBkZXRlcm1pbmVyQ29kZT0iSU5TVEFOQ0UiPgogICAgICAgICAgICAgICAg
ICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZhbWls
eT5QbGlzaWhkPC9mYW1pbHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGdpdmVu
PkFhcm9uPC9naXZlbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cHJlZml4PkRy
LjwvcHJlZml4PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAg
ICAgICAgICAgICAgICA8L2luZm9ybWF0aW9uUmVjaXBpZW50PgogICAgICAgICAgICAgICAgICAg
ICAgICA8cmVjZWl2ZWRPcmdhbml6YXRpb24gY2xhc3NDb2RlPSJOQVQiIGRldGVybWluZXJDb2Rl
PSJJTlNUQU5DRSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0
aG9yaXR5TmFtZT0iQ0RYIENsaW5pYyBSZWdpc3RyeSBJRCIgZXh0ZW5zaW9uPSJDRFhDUjAwMDEy
IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuMiIvPgogICAgICAgICAgICAgICAg
ICAgICAgICAgICAgPG5hbWU+TU9JUyBEZXYgQWNjb3VudDE8L25hbWU+CiAgICAgICAgICAgICAg
ICAgICAgICAgICAgICA8YWRkcj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGVs
aW1pdGVyPjEyMyBBSUhTIFN0cmVldDwvZGVsaW1pdGVyPgogICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgIDxjaXR5PlBHPC9jaXR5PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
IDxzdGF0ZT5Ccml0aXNoIENvbHVtYmlhPC9zdGF0ZT4KICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICA8Y291bnRyeT5DYW5hZGE8L2NvdW50cnk+CiAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgPHBvc3RhbENvZGU+SDBIIDBIMDwvcG9zdGFsQ29kZT4KICAgICAgICAgICAgICAg
ICAgICAgICAgICAgIDwvYWRkcj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuczI6ZGlz
dHJpYnV0aW9uU3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuczI6c3Rh
dHVzQ29kZSBjb2RlPSIyMDAiIGRpc3BsYXlOYW1lPSJRVUVVRUQiLz4KICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICA8bnMyOnN0YXR1c1RpbWUgdmFsdWU9IjIwMTkwNTIxMTAxNC0wNzAw
Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L25zMjpkaXN0cmlidXRpb25TdGF0dXM+
CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcmVjZWl2ZWRPcmdhbml6YXRpb24+CiAgICAgICAg
ICAgICAgICAgICAgPC9pbnRlbmRlZFJlY2lwaWVudD4KICAgICAgICAgICAgICAgIDwvaW5mb3Jt
YXRpb25SZWNpcGllbnQ+CiAgICAgICAgICAgICAgICA8aW5mb3JtYXRpb25SZWNpcGllbnQgdHlw
ZUNvZGU9IlBSQ1AiPgogICAgICAgICAgICAgICAgICAgIDxpbnRlbmRlZFJlY2lwaWVudCBjbGFz
c0NvZGU9IkFTU0lHTkVEIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1
dGhvcml0eU5hbWU9IkJDIE1pbmlzdHJ5IFByYWN0aXRpb25lciBJRCIgZXh0ZW5zaW9uPSI5MzE5
MCIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy40MC4yLjExIi8+CiAgICAgICAgICAgICAgICAg
ICAgICAgIDxpbmZvcm1hdGlvblJlY2lwaWVudCBjbGFzc0NvZGU9IlBTTiIgZGV0ZXJtaW5lckNv
ZGU9IklOU1RBTkNFIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPgogICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgIDxmYW1pbHk+UGxpc2loZDwvZmFtaWx5PgogICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgIDxnaXZlbj5BYXJvbjwvZ2l2ZW4+CiAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgPHByZWZpeD5Eci48L3ByZWZpeD4KICAgICAgICAgICAgICAg
ICAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9pbmZvcm1hdGlv
blJlY2lwaWVudD4KICAgICAgICAgICAgICAgICAgICAgICAgPHJlY2VpdmVkT3JnYW5pemF0aW9u
IGNsYXNzQ29kZT0iTkFUIiBkZXRlcm1pbmVyQ29kZT0iSU5TVEFOQ0UiPgogICAgICAgICAgICAg
ICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkNEWCBDbGluaWMgUmVn
aXN0cnkgSUQiIGV4dGVuc2lvbj0iY2R4dGVzdC1uaDgiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgz
LjMuMjc3LjEwMC4yIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT5OZXcgSGlw
cG8gSGVhbHRoIENsaW5pYzwvbmFtZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhZGRy
PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjaXR5PlZhbmNvdXZlcjwvY2l0eT4K
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3RhdGU+QnJpdGlzaCBDb2x1bWJpYTwv
c3RhdGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvdW50cnk+Q2FuYWRhPC9j
b3VudHJ5PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hZGRyPgogICAgICAgICAgICAg
ICAgICAgICAgICAgICAgPG5zMjpkaXN0cmlidXRpb25TdGF0dXM+CiAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgPG5zMjpzdGF0dXNDb2RlIGNvZGU9IjIwMCIgZGlzcGxheU5hbWU9IlFV
RVVFRCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuczI6c3RhdHVzVGltZSB2
YWx1ZT0iMjAxOTA1MjExMDE0LTA3MDAiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwv
bnMyOmRpc3RyaWJ1dGlvblN0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9yZWNlaXZl
ZE9yZ2FuaXphdGlvbj4KICAgICAgICAgICAgICAgICAgICA8L2ludGVuZGVkUmVjaXBpZW50Pgog
ICAgICAgICAgICAgICAgPC9pbmZvcm1hdGlvblJlY2lwaWVudD4KICAgICAgICAgICAgICAgIDxp
bmZvcm1hdGlvblJlY2lwaWVudCB0eXBlQ29kZT0iUFJDUCI+CiAgICAgICAgICAgICAgICAgICAg
PGludGVuZGVkUmVjaXBpZW50IGNsYXNzQ29kZT0iQVNTSUdORUQiPgogICAgICAgICAgICAgICAg
ICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQkMgTWluaXN0cnkgUHJhY3RpdGlv
bmVyIElEIiBleHRlbnNpb249IjkzMTkwIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjQwLjIu
MTEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPGluZm9ybWF0aW9uUmVjaXBpZW50IGNsYXNz
Q29kZT0iUFNOIiBkZXRlcm1pbmVyQ29kZT0iSU5TVEFOQ0UiPgogICAgICAgICAgICAgICAgICAg
ICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZhbWlseT5Q
bGlzaWhkPC9mYW1pbHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGdpdmVuPkFh
cm9uPC9naXZlbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cHJlZml4PkRyLjwv
cHJlZml4PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICAg
ICAgICAgICAgICA8L2luZm9ybWF0aW9uUmVjaXBpZW50PgogICAgICAgICAgICAgICAgICAgICAg
ICA8cmVjZWl2ZWRPcmdhbml6YXRpb24gY2xhc3NDb2RlPSJOQVQiIGRldGVybWluZXJDb2RlPSJJ
TlNUQU5DRSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9y
aXR5TmFtZT0iQ0RYIENsaW5pYyBSZWdpc3RyeSBJRCIgZXh0ZW5zaW9uPSJjZHh0ZXN0LWNocyIg
cm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjIiLz4KICAgICAgICAgICAgICAgICAg
ICAgICAgICAgIDxuYW1lPkNhbmRpYW4gSGVhbHRoIFN5c3RlbXM8L25hbWU+CiAgICAgICAgICAg
ICAgICAgICAgICAgICAgICA8YWRkcj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8
c3RhdGU+QnJpdGlzaCBDb2x1bWJpYTwvc3RhdGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgPGNvdW50cnk+Q2FuYWRhPC9jb3VudHJ5PgogICAgICAgICAgICAgICAgICAgICAgICAg
ICAgPC9hZGRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5zMjpkaXN0cmlidXRpb25T
dGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5zMjpzdGF0dXNDb2RlIGNv
ZGU9IjIwMCIgZGlzcGxheU5hbWU9IlFVRVVFRCIvPgogICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgIDxuczI6c3RhdHVzVGltZSB2YWx1ZT0iMjAxOTA1MjExMDE0LTA3MDAiLz4KICAgICAg
ICAgICAgICAgICAgICAgICAgICAgIDwvbnMyOmRpc3RyaWJ1dGlvblN0YXR1cz4KICAgICAgICAg
ICAgICAgICAgICAgICAgPC9yZWNlaXZlZE9yZ2FuaXphdGlvbj4KICAgICAgICAgICAgICAgICAg
ICA8L2ludGVuZGVkUmVjaXBpZW50PgogICAgICAgICAgICAgICAgPC9pbmZvcm1hdGlvblJlY2lw
aWVudD4KICAgICAgICAgICAgICAgIDxpbmZvcm1hdGlvblJlY2lwaWVudCB0eXBlQ29kZT0iUFJD
UCI+CiAgICAgICAgICAgICAgICAgICAgPGludGVuZGVkUmVjaXBpZW50IGNsYXNzQ29kZT0iQVNT
SUdORUQiPgogICAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFt
ZT0iQkMgTWluaXN0cnkgUHJhY3RpdGlvbmVyIElEIiBleHRlbnNpb249IjkzMTkwIiByb290PSIy
LjE2Ljg0MC4xLjExMzg4My4zLjQwLjIuMTEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPGlu
Zm9ybWF0aW9uUmVjaXBpZW50IGNsYXNzQ29kZT0iUFNOIiBkZXRlcm1pbmVyQ29kZT0iSU5TVEFO
Q0UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgPGZhbWlseT5QbGlzaWhkPC9mYW1pbHk+CiAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgPGdpdmVuPkFhcm9uPC9naXZlbj4KICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICA8cHJlZml4PkRyLjwvcHJlZml4PgogICAgICAgICAgICAgICAgICAgICAgICAg
ICAgPC9uYW1lPgogICAgICAgICAgICAgICAgICAgICAgICA8L2luZm9ybWF0aW9uUmVjaXBpZW50
PgogICAgICAgICAgICAgICAgICAgICAgICA8cmVjZWl2ZWRPcmdhbml6YXRpb24gY2xhc3NDb2Rl
PSJOQVQiIGRldGVybWluZXJDb2RlPSJJTlNUQU5DRSI+CiAgICAgICAgICAgICAgICAgICAgICAg
ICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQ0RYIENsaW5pYyBSZWdpc3RyeSBJRCIg
ZXh0ZW5zaW9uPSJDRFhDUjAwMDU1IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAu
MiIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+Q29uc3RhYmxlIENvbnN1bHRp
bmc8L25hbWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YWRkcj4KICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICA8c3RhdGU+QnJpdGlzaCBDb2x1bWJpYTwvc3RhdGU+CiAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvdW50cnk+Q2FuYWRhPC9jb3VudHJ5PgogICAg
ICAgICAgICAgICAgICAgICAgICAgICAgPC9hZGRyPgogICAgICAgICAgICAgICAgICAgICAgICAg
ICAgPG5zMjpkaXN0cmlidXRpb25TdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgPG5zMjpzdGF0dXNDb2RlIGNvZGU9IjQwMC40IiBkaXNwbGF5TmFtZT0iVU5ERUxJVkVSQUJM
RTogTG9jYXRpb24gbm90IGNhcGFibGUgb2YgcmVjZWlwdC4iLz4KICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICA8bnMyOnN0YXR1c1RpbWUgbnVsbEZsYXZvcj0iTkEiLz4KICAgICAgICAg
ICAgICAgICAgICAgICAgICAgIDwvbnMyOmRpc3RyaWJ1dGlvblN0YXR1cz4KICAgICAgICAgICAg
ICAgICAgICAgICAgPC9yZWNlaXZlZE9yZ2FuaXphdGlvbj4KICAgICAgICAgICAgICAgICAgICA8
L2ludGVuZGVkUmVjaXBpZW50PgogICAgICAgICAgICAgICAgPC9pbmZvcm1hdGlvblJlY2lwaWVu
dD4KICAgICAgICAgICAgICAgIDxpbmZvcm1hdGlvblJlY2lwaWVudCB0eXBlQ29kZT0iUFJDUCI+
CiAgICAgICAgICAgICAgICAgICAgPGludGVuZGVkUmVjaXBpZW50IGNsYXNzQ29kZT0iQVNTSUdO
RUQiPgogICAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0i
QkMgTWluaXN0cnkgUHJhY3RpdGlvbmVyIElEIiBleHRlbnNpb249IjkzMTkwIiByb290PSIyLjE2
Ljg0MC4xLjExMzg4My4zLjQwLjIuMTEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPGluZm9y
bWF0aW9uUmVjaXBpZW50IGNsYXNzQ29kZT0iUFNOIiBkZXRlcm1pbmVyQ29kZT0iSU5TVEFOQ0Ui
PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgPGZhbWlseT5QbGlzaWhkPC9mYW1pbHk+CiAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgPGdpdmVuPkFhcm9uPC9naXZlbj4KICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICA8cHJlZml4PkRyLjwvcHJlZml4PgogICAgICAgICAgICAgICAgICAgICAgICAgICAg
PC9uYW1lPgogICAgICAgICAgICAgICAgICAgICAgICA8L2luZm9ybWF0aW9uUmVjaXBpZW50Pgog
ICAgICAgICAgICAgICAgICAgICAgICA8cmVjZWl2ZWRPcmdhbml6YXRpb24gY2xhc3NDb2RlPSJO
QVQiIGRldGVybWluZXJDb2RlPSJJTlNUQU5DRSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAg
ICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQ0RYIENsaW5pYyBSZWdpc3RyeSBJRCIgZXh0
ZW5zaW9uPSJDRFhDUjY2NiIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjIiLz4K
ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPlBPSSBUZXN0IFJlY2lwaWVudDE8L25h
bWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YWRkcj4KICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICA8c3RhdGU+QnJpdGlzaCBDb2x1bWJpYTwvc3RhdGU+CiAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgPGNvdW50cnk+Q2FuYWRhPC9jb3VudHJ5PgogICAgICAgICAg
ICAgICAgICAgICAgICAgICAgPC9hZGRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5z
MjpkaXN0cmlidXRpb25TdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5z
MjpzdGF0dXNDb2RlIGNvZGU9IjIwMCIgZGlzcGxheU5hbWU9IlFVRVVFRCIvPgogICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgIDxuczI6c3RhdHVzVGltZSB2YWx1ZT0iMjAxOTA1MjExMDE0
LTA3MDAiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbnMyOmRpc3RyaWJ1dGlvblN0
YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9yZWNlaXZlZE9yZ2FuaXphdGlvbj4KICAg
ICAgICAgICAgICAgICAgICA8L2ludGVuZGVkUmVjaXBpZW50PgogICAgICAgICAgICAgICAgPC9p
bmZvcm1hdGlvblJlY2lwaWVudD4KICAgICAgICAgICAgICAgIDxpbmZvcm1hdGlvblJlY2lwaWVu
dCB0eXBlQ29kZT0iUFJDUCI+CiAgICAgICAgICAgICAgICAgICAgPGludGVuZGVkUmVjaXBpZW50
IGNsYXNzQ29kZT0iQVNTSUdORUQiPgogICAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWdu
aW5nQXV0aG9yaXR5TmFtZT0iQkMgTWluaXN0cnkgUHJhY3RpdGlvbmVyIElEIiBleHRlbnNpb249
IjkzMTkwIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjQwLjIuMTEiLz4KICAgICAgICAgICAg
ICAgICAgICAgICAgPGluZm9ybWF0aW9uUmVjaXBpZW50IGNsYXNzQ29kZT0iUFNOIiBkZXRlcm1p
bmVyQ29kZT0iSU5TVEFOQ0UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+CiAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZhbWlseT5QbGlzaWhkPC9mYW1pbHk+CiAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGdpdmVuPkFhcm9uPC9naXZlbj4KICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICA8cHJlZml4PkRyLjwvcHJlZml4PgogICAgICAgICAg
ICAgICAgICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICAgICAgICAgICAgICA8L2luZm9y
bWF0aW9uUmVjaXBpZW50PgogICAgICAgICAgICAgICAgICAgICAgICA8cmVjZWl2ZWRPcmdhbml6
YXRpb24gY2xhc3NDb2RlPSJOQVQiIGRldGVybWluZXJDb2RlPSJJTlNUQU5DRSI+CiAgICAgICAg
ICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQ0RYIENsaW5p
YyBSZWdpc3RyeSBJRCIgZXh0ZW5zaW9uPSIxMDAxMDAxIiByb290PSIyLjE2Ljg0MC4xLjExMzg4
My4zLjI3Ny4xMDAuMiIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+TkhBIFRl
c3QgQ2xpbmljIC0gSW50cmFoZWFsdGg8L25hbWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAg
ICA8YWRkcj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3RhdGU+QnJpdGlzaCBD
b2x1bWJpYTwvc3RhdGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvdW50cnk+
Q2FuYWRhPC9jb3VudHJ5PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hZGRyPgogICAg
ICAgICAgICAgICAgICAgICAgICAgICAgPG5zMjpkaXN0cmlidXRpb25TdGF0dXM+CiAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgPG5zMjpzdGF0dXNDb2RlIGNvZGU9IjIwMCIgZGlzcGxh
eU5hbWU9IlFVRVVFRCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuczI6c3Rh
dHVzVGltZSB2YWx1ZT0iMjAxOTA1MjExMDE0LTA3MDAiLz4KICAgICAgICAgICAgICAgICAgICAg
ICAgICAgIDwvbnMyOmRpc3RyaWJ1dGlvblN0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAg
PC9yZWNlaXZlZE9yZ2FuaXphdGlvbj4KICAgICAgICAgICAgICAgICAgICA8L2ludGVuZGVkUmVj
aXBpZW50PgogICAgICAgICAgICAgICAgPC9pbmZvcm1hdGlvblJlY2lwaWVudD4KICAgICAgICAg
ICAgICAgIDxpbmZvcm1hdGlvblJlY2lwaWVudCB0eXBlQ29kZT0iUFJDUCI+CiAgICAgICAgICAg
ICAgICAgICAgPGludGVuZGVkUmVjaXBpZW50IGNsYXNzQ29kZT0iQVNTSUdORUQiPgogICAgICAg
ICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQkMgTWluaXN0cnkg
UHJhY3RpdGlvbmVyIElEIiBleHRlbnNpb249IjkzMTkwIiByb290PSIyLjE2Ljg0MC4xLjExMzg4
My4zLjQwLjIuMTEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPGluZm9ybWF0aW9uUmVjaXBp
ZW50IGNsYXNzQ29kZT0iUFNOIiBkZXRlcm1pbmVyQ29kZT0iSU5TVEFOQ0UiPgogICAgICAgICAg
ICAgICAgICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
PGZhbWlseT5QbGlzaWhkPC9mYW1pbHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
PGdpdmVuPkFhcm9uPC9naXZlbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cHJl
Zml4PkRyLjwvcHJlZml4PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9uYW1lPgogICAg
ICAgICAgICAgICAgICAgICAgICA8L2luZm9ybWF0aW9uUmVjaXBpZW50PgogICAgICAgICAgICAg
ICAgICAgICAgICA8cmVjZWl2ZWRPcmdhbml6YXRpb24gY2xhc3NDb2RlPSJOQVQiIGRldGVybWlu
ZXJDb2RlPSJJTlNUQU5DRSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWdu
aW5nQXV0aG9yaXR5TmFtZT0iQ0RYIENsaW5pYyBSZWdpc3RyeSBJRCIgZXh0ZW5zaW9uPSIxMDAx
MDAyIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuMiIvPgogICAgICAgICAgICAg
ICAgICAgICAgICAgICAgPG5hbWU+TkhBIFRlc3QgQ2xpbmljIC0gaUNsaW5pYzwvbmFtZT4KICAg
ICAgICAgICAgICAgICAgICAgICAgICAgIDxhZGRyPgogICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgIDxzdGF0ZT5Ccml0aXNoIENvbHVtYmlhPC9zdGF0ZT4KICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICA8Y291bnRyeT5DYW5hZGE8L2NvdW50cnk+CiAgICAgICAgICAgICAgICAg
ICAgICAgICAgICA8L2FkZHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bnMyOmRpc3Ry
aWJ1dGlvblN0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bnMyOnN0YXR1
c0NvZGUgY29kZT0iMjAwIiBkaXNwbGF5TmFtZT0iUVVFVUVEIi8+CiAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgPG5zMjpzdGF0dXNUaW1lIHZhbHVlPSIyMDE5MDUyMTEwMTQtMDcwMCIv
PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9uczI6ZGlzdHJpYnV0aW9uU3RhdHVzPgog
ICAgICAgICAgICAgICAgICAgICAgICA8L3JlY2VpdmVkT3JnYW5pemF0aW9uPgogICAgICAgICAg
ICAgICAgICAgIDwvaW50ZW5kZWRSZWNpcGllbnQ+CiAgICAgICAgICAgICAgICA8L2luZm9ybWF0
aW9uUmVjaXBpZW50PgogICAgICAgICAgICAgICAgPGluZm9ybWF0aW9uUmVjaXBpZW50IHR5cGVD
b2RlPSJQUkNQIj4KICAgICAgICAgICAgICAgICAgICA8aW50ZW5kZWRSZWNpcGllbnQgY2xhc3ND
b2RlPSJBU1NJR05FRCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRo
b3JpdHlOYW1lPSJCQyBNaW5pc3RyeSBQcmFjdGl0aW9uZXIgSUQiIGV4dGVuc2lvbj0iOTMxOTAi
IHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuNDAuMi4xMSIvPgogICAgICAgICAgICAgICAgICAg
ICAgICA8aW5mb3JtYXRpb25SZWNpcGllbnQgY2xhc3NDb2RlPSJQU04iIGRldGVybWluZXJDb2Rl
PSJJTlNUQU5DRSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT4KICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICA8ZmFtaWx5PlBsaXNpaGQ8L2ZhbWlseT4KICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICA8Z2l2ZW4+QWFyb248L2dpdmVuPgogICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgIDxwcmVmaXg+RHIuPC9wcmVmaXg+CiAgICAgICAgICAgICAgICAg
ICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvaW5mb3JtYXRpb25S
ZWNpcGllbnQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDxyZWNlaXZlZE9yZ2FuaXphdGlvbiBj
bGFzc0NvZGU9Ik5BVCIgZGV0ZXJtaW5lckNvZGU9IklOU1RBTkNFIj4KICAgICAgICAgICAgICAg
ICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJDRFggQ2xpbmljIFJlZ2lz
dHJ5IElEIiBleHRlbnNpb249IjEwMDEwMDQiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3
LjEwMC4yIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT5OSEEgVGVzdCBDbGlu
aWMgLSBBSUhTPC9uYW1lPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFkZHI+CiAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0YXRlPkJyaXRpc2ggQ29sdW1iaWE8L3N0YXRl
PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb3VudHJ5PkNhbmFkYTwvY291bnRy
eT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYWRkcj4KICAgICAgICAgICAgICAgICAg
ICAgICAgICAgIDxuczI6ZGlzdHJpYnV0aW9uU3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgIDxuczI6c3RhdHVzQ29kZSBjb2RlPSIyMDAiIGRpc3BsYXlOYW1lPSJRVUVVRUQi
Lz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bnMyOnN0YXR1c1RpbWUgdmFsdWU9
IjIwMTkwNTIxMTAxNC0wNzAwIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L25zMjpk
aXN0cmlidXRpb25TdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcmVjZWl2ZWRPcmdh
bml6YXRpb24+CiAgICAgICAgICAgICAgICAgICAgPC9pbnRlbmRlZFJlY2lwaWVudD4KICAgICAg
ICAgICAgICAgIDwvaW5mb3JtYXRpb25SZWNpcGllbnQ+CiAgICAgICAgICAgICAgICA8aW5mb3Jt
YXRpb25SZWNpcGllbnQgdHlwZUNvZGU9IlBSQ1AiPgogICAgICAgICAgICAgICAgICAgIDxpbnRl
bmRlZFJlY2lwaWVudCBjbGFzc0NvZGU9IkFTU0lHTkVEIj4KICAgICAgICAgICAgICAgICAgICAg
ICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkJDIE1pbmlzdHJ5IFByYWN0aXRpb25lciBJ
RCIgZXh0ZW5zaW9uPSI5MzE5MCIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy40MC4yLjExIi8+
CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbmZvcm1hdGlvblJlY2lwaWVudCBjbGFzc0NvZGU9
IlBTTiIgZGV0ZXJtaW5lckNvZGU9IklOU1RBTkNFIj4KICAgICAgICAgICAgICAgICAgICAgICAg
ICAgIDxuYW1lPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmYW1pbHk+UGxpc2lo
ZDwvZmFtaWx5PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxnaXZlbj5BYXJvbjwv
Z2l2ZW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHByZWZpeD5Eci48L3ByZWZp
eD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgICAgICAg
ICAgICAgPC9pbmZvcm1hdGlvblJlY2lwaWVudD4KICAgICAgICAgICAgICAgICAgICAgICAgPHJl
Y2VpdmVkT3JnYW5pemF0aW9uIGNsYXNzQ29kZT0iTkFUIiBkZXRlcm1pbmVyQ29kZT0iSU5TVEFO
Q0UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5h
bWU9IkNEWCBDbGluaWMgUmVnaXN0cnkgSUQiIGV4dGVuc2lvbj0iMTAwMTAwMyIgcm9vdD0iMi4x
Ni44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjIiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAg
IDxuYW1lPk5IQSBUZXN0IENsaW5pYyAtIFFIUjwvbmFtZT4KICAgICAgICAgICAgICAgICAgICAg
ICAgICAgIDxhZGRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdGF0ZT5Ccml0
aXNoIENvbHVtYmlhPC9zdGF0ZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y291
bnRyeT5DYW5hZGE8L2NvdW50cnk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2FkZHI+
CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bnMyOmRpc3RyaWJ1dGlvblN0YXR1cz4KICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bnMyOnN0YXR1c0NvZGUgY29kZT0iMjAwIiBk
aXNwbGF5TmFtZT0iUVVFVUVEIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5z
MjpzdGF0dXNUaW1lIHZhbHVlPSIyMDE5MDUyMTEwMTQtMDcwMCIvPgogICAgICAgICAgICAgICAg
ICAgICAgICAgICAgPC9uczI6ZGlzdHJpYnV0aW9uU3RhdHVzPgogICAgICAgICAgICAgICAgICAg
ICAgICA8L3JlY2VpdmVkT3JnYW5pemF0aW9uPgogICAgICAgICAgICAgICAgICAgIDwvaW50ZW5k
ZWRSZWNpcGllbnQ+CiAgICAgICAgICAgICAgICA8L2luZm9ybWF0aW9uUmVjaXBpZW50PgogICAg
ICAgICAgICAgICAgPGluZm9ybWF0aW9uUmVjaXBpZW50IHR5cGVDb2RlPSJQUkNQIj4KICAgICAg
ICAgICAgICAgICAgICA8aW50ZW5kZWRSZWNpcGllbnQgY2xhc3NDb2RlPSJBU1NJR05FRCI+CiAg
ICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJCQyBNaW5p
c3RyeSBQcmFjdGl0aW9uZXIgSUQiIGV4dGVuc2lvbj0iOTMxOTAiIHJvb3Q9IjIuMTYuODQwLjEu
MTEzODgzLjMuNDAuMi4xMSIvPgogICAgICAgICAgICAgICAgICAgICAgICA8aW5mb3JtYXRpb25S
ZWNpcGllbnQgY2xhc3NDb2RlPSJQU04iIGRldGVybWluZXJDb2RlPSJJTlNUQU5DRSI+CiAgICAg
ICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICA8ZmFtaWx5PlBsaXNpaGQ8L2ZhbWlseT4KICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICA8Z2l2ZW4+QWFyb248L2dpdmVuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
IDxwcmVmaXg+RHIuPC9wcmVmaXg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L25hbWU+
CiAgICAgICAgICAgICAgICAgICAgICAgIDwvaW5mb3JtYXRpb25SZWNpcGllbnQ+CiAgICAgICAg
ICAgICAgICAgICAgICAgIDxyZWNlaXZlZE9yZ2FuaXphdGlvbiBjbGFzc0NvZGU9Ik5BVCIgZGV0
ZXJtaW5lckNvZGU9IklOU1RBTkNFIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZCBh
c3NpZ25pbmdBdXRob3JpdHlOYW1lPSJDRFggQ2xpbmljIFJlZ2lzdHJ5IElEIiBleHRlbnNpb249
IkNEWENSMDAwMjMiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC4yIi8+CiAgICAg
ICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT5RSFIgVGVzdCBDbGluaWM8L25hbWU+CiAgICAg
ICAgICAgICAgICAgICAgICAgICAgICA8YWRkcj4KICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICA8ZGVsaW1pdGVyPjE2MjAgRGlja3NvbiBBdmVudWU8L2RlbGltaXRlcj4KICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICA8Y2l0eT5LZWxvd25hPC9jaXR5PgogICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgIDxzdGF0ZT5Ccml0aXNoIENvbHVtYmlhPC9zdGF0ZT4KICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICA8Y291bnRyeT5DYW5hZGE8L2NvdW50cnk+CiAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgPHBvc3RhbENvZGU+VjFZIDlZMjwvcG9zdGFsQ29k
ZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYWRkcj4KICAgICAgICAgICAgICAgICAg
ICAgICAgICAgIDxuczI6ZGlzdHJpYnV0aW9uU3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgIDxuczI6c3RhdHVzQ29kZSBjb2RlPSIyMDAiIGRpc3BsYXlOYW1lPSJRVUVVRUQi
Lz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bnMyOnN0YXR1c1RpbWUgdmFsdWU9
IjIwMTkwNTIxMTAxNC0wNzAwIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L25zMjpk
aXN0cmlidXRpb25TdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcmVjZWl2ZWRPcmdh
bml6YXRpb24+CiAgICAgICAgICAgICAgICAgICAgPC9pbnRlbmRlZFJlY2lwaWVudD4KICAgICAg
ICAgICAgICAgIDwvaW5mb3JtYXRpb25SZWNpcGllbnQ+CiAgICAgICAgICAgICAgICA8aW5mb3Jt
YXRpb25SZWNpcGllbnQgdHlwZUNvZGU9IlBSQ1AiPgogICAgICAgICAgICAgICAgICAgIDxpbnRl
bmRlZFJlY2lwaWVudCBjbGFzc0NvZGU9IkFTU0lHTkVEIj4KICAgICAgICAgICAgICAgICAgICAg
ICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkJDIE1pbmlzdHJ5IFByYWN0aXRpb25lciBJ
RCIgZXh0ZW5zaW9uPSI5MzE5MCIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy40MC4yLjExIi8+
CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbmZvcm1hdGlvblJlY2lwaWVudCBjbGFzc0NvZGU9
IlBTTiIgZGV0ZXJtaW5lckNvZGU9IklOU1RBTkNFIj4KICAgICAgICAgICAgICAgICAgICAgICAg
ICAgIDxuYW1lPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmYW1pbHk+UGxpc2lo
ZDwvZmFtaWx5PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxnaXZlbj5BYXJvbjwv
Z2l2ZW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHByZWZpeD5Eci48L3ByZWZp
eD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgICAgICAg
ICAgICAgPC9pbmZvcm1hdGlvblJlY2lwaWVudD4KICAgICAgICAgICAgICAgICAgICAgICAgPHJl
Y2VpdmVkT3JnYW5pemF0aW9uIGNsYXNzQ29kZT0iTkFUIiBkZXRlcm1pbmVyQ29kZT0iSU5TVEFO
Q0UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5h
bWU9IkNEWCBDbGluaWMgUmVnaXN0cnkgSUQiIGV4dGVuc2lvbj0iQ0RYVEVTVDAwMDA0IiByb290
PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuMiIvPgogICAgICAgICAgICAgICAgICAgICAg
ICAgICAgPG5hbWU+VEVTVCAtIGlDbGluaWMgU3lzdGVtcyBJbmMuPC9uYW1lPgogICAgICAgICAg
ICAgICAgICAgICAgICAgICAgPGFkZHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
PGRlbGltaXRlcj4yMDAtMTA4MCBNYWlubGFuZCBTdC48L2RlbGltaXRlcj4KICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICA8Y2l0eT5WYW5jb3V2ZXI8L2NpdHk+CiAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgPHN0YXRlPkJyaXRpc2ggQ29sdW1iaWE8L3N0YXRlPgogICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgIDxjb3VudHJ5PkNhbmFkYTwvY291bnRyeT4KICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICA8cG9zdGFsQ29kZT5WNkIyVDQ8L3Bvc3RhbENvZGU+
CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2FkZHI+CiAgICAgICAgICAgICAgICAgICAg
ICAgICAgICA8bnMyOmRpc3RyaWJ1dGlvblN0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICA8bnMyOnN0YXR1c0NvZGUgY29kZT0iMjAwIiBkaXNwbGF5TmFtZT0iUVVFVUVEIi8+
CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5zMjpzdGF0dXNUaW1lIHZhbHVlPSIy
MDE5MDUyMTEwMTQtMDcwMCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9uczI6ZGlz
dHJpYnV0aW9uU3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICA8L3JlY2VpdmVkT3JnYW5p
emF0aW9uPgogICAgICAgICAgICAgICAgICAgIDwvaW50ZW5kZWRSZWNpcGllbnQ+CiAgICAgICAg
ICAgICAgICA8L2luZm9ybWF0aW9uUmVjaXBpZW50PgogICAgICAgICAgICAgICAgPGluZm9ybWF0
aW9uUmVjaXBpZW50IHR5cGVDb2RlPSJQUkNQIj4KICAgICAgICAgICAgICAgICAgICA8aW50ZW5k
ZWRSZWNpcGllbnQgY2xhc3NDb2RlPSJBU1NJR05FRCI+CiAgICAgICAgICAgICAgICAgICAgICAg
IDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJCQyBNaW5pc3RyeSBQcmFjdGl0aW9uZXIgSUQi
IGV4dGVuc2lvbj0iOTMxOTAiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuNDAuMi4xMSIvPgog
ICAgICAgICAgICAgICAgICAgICAgICA8aW5mb3JtYXRpb25SZWNpcGllbnQgY2xhc3NDb2RlPSJQ
U04iIGRldGVybWluZXJDb2RlPSJJTlNUQU5DRSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAg
ICA8bmFtZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZmFtaWx5PlBsaXNpaGQ8
L2ZhbWlseT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Z2l2ZW4+QWFyb248L2dp
dmVuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwcmVmaXg+RHIuPC9wcmVmaXg+
CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICAgICAgICAgICAg
ICAgIDwvaW5mb3JtYXRpb25SZWNpcGllbnQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDxyZWNl
aXZlZE9yZ2FuaXphdGlvbiBjbGFzc0NvZGU9Ik5BVCIgZGV0ZXJtaW5lckNvZGU9IklOU1RBTkNF
Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1l
PSJDRFggQ2xpbmljIFJlZ2lzdHJ5IElEIiBleHRlbnNpb249IkNEWDAwMDAzIiByb290PSIyLjE2
Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuMiIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAg
PG5hbWU+RXh0ZXJuYWwgSW50cmFoZWFsdGggVGVzdGluZyBDbGluaWMgMjwvbmFtZT4KICAgICAg
ICAgICAgICAgICAgICAgICAgICAgIDxhZGRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgIDxkZWxpbWl0ZXI+U3VpdGUgMzkwLCA4ODkgSGFyYm91cnNpZGUgRHJpdmU8L2RlbGltaXRl
cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y2l0eT5Ob3J0aCBWYW5jb3V2ZXI8
L2NpdHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0YXRlPkJyaXRpc2ggQ29s
dW1iaWE8L3N0YXRlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb3VudHJ5PkNh
bmFkYTwvY291bnRyeT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cG9zdGFsQ29k
ZT5WN1AgM1MxPC9wb3N0YWxDb2RlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hZGRy
PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5zMjpkaXN0cmlidXRpb25TdGF0dXM+CiAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5zMjpzdGF0dXNDb2RlIGNvZGU9IjIwMCIg
ZGlzcGxheU5hbWU9IlFVRVVFRCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxu
czI6c3RhdHVzVGltZSB2YWx1ZT0iMjAxOTA1MjExMDE0LTA3MDAiLz4KICAgICAgICAgICAgICAg
ICAgICAgICAgICAgIDwvbnMyOmRpc3RyaWJ1dGlvblN0YXR1cz4KICAgICAgICAgICAgICAgICAg
ICAgICAgPC9yZWNlaXZlZE9yZ2FuaXphdGlvbj4KICAgICAgICAgICAgICAgICAgICA8L2ludGVu
ZGVkUmVjaXBpZW50PgogICAgICAgICAgICAgICAgPC9pbmZvcm1hdGlvblJlY2lwaWVudD4KICAg
ICAgICAgICAgICAgIDxpbmZvcm1hdGlvblJlY2lwaWVudCB0eXBlQ29kZT0iUFJDUCI+CiAgICAg
ICAgICAgICAgICAgICAgPGludGVuZGVkUmVjaXBpZW50IGNsYXNzQ29kZT0iQVNTSUdORUQiPgog
ICAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQkMgTWlu
aXN0cnkgUHJhY3RpdGlvbmVyIElEIiBleHRlbnNpb249IjkzMTkwIiByb290PSIyLjE2Ljg0MC4x
LjExMzg4My4zLjQwLjIuMTEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPGluZm9ybWF0aW9u
UmVjaXBpZW50IGNsYXNzQ29kZT0iUFNOIiBkZXRlcm1pbmVyQ29kZT0iSU5TVEFOQ0UiPgogICAg
ICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgPGZhbWlseT5QbGlzaWhkPC9mYW1pbHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgPGdpdmVuPkFhcm9uPC9naXZlbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICA8cHJlZml4PkRyLjwvcHJlZml4PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9uYW1l
PgogICAgICAgICAgICAgICAgICAgICAgICA8L2luZm9ybWF0aW9uUmVjaXBpZW50PgogICAgICAg
ICAgICAgICAgICAgICAgICA8cmVjZWl2ZWRPcmdhbml6YXRpb24gY2xhc3NDb2RlPSJOQVQiIGRl
dGVybWluZXJDb2RlPSJJTlNUQU5DRSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQg
YXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQ0RYIENsaW5pYyBSZWdpc3RyeSBJRCIgZXh0ZW5zaW9u
PSJDRFhDUjAwMDIwIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuMiIvPgogICAg
ICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+UG91bGluIFRlc3QgQ2xpbmljPC9uYW1lPgog
ICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFkZHI+CiAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgPGRlbGltaXRlcj4zMDEsIDMyMTAtMjV0aCBBdmU8L2RlbGltaXRlcj4KICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICA8Y2l0eT5WZXJub248L2NpdHk+CiAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgPHN0YXRlPkJyaXRpc2ggQ29sdW1iaWE8L3N0YXRlPgogICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb3VudHJ5PkNhbmFkYTwvY291bnRyeT4KICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cG9zdGFsQ29kZT5WMVQgMVAxPC9wb3N0YWxD
b2RlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hZGRyPgogICAgICAgICAgICAgICAg
ICAgICAgICAgICAgPG5zMjpkaXN0cmlidXRpb25TdGF0dXM+CiAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgPG5zMjpzdGF0dXNDb2RlIGNvZGU9IjIwMCIgZGlzcGxheU5hbWU9IlFVRVVF
RCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuczI6c3RhdHVzVGltZSB2YWx1
ZT0iMjAxOTA1MjExMDE0LTA3MDAiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbnMy
OmRpc3RyaWJ1dGlvblN0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9yZWNlaXZlZE9y
Z2FuaXphdGlvbj4KICAgICAgICAgICAgICAgICAgICA8L2ludGVuZGVkUmVjaXBpZW50PgogICAg
ICAgICAgICAgICAgPC9pbmZvcm1hdGlvblJlY2lwaWVudD4KICAgICAgICAgICAgICAgIDxpbmZv
cm1hdGlvblJlY2lwaWVudCB0eXBlQ29kZT0iUFJDUCI+CiAgICAgICAgICAgICAgICAgICAgPGlu
dGVuZGVkUmVjaXBpZW50IGNsYXNzQ29kZT0iQVNTSUdORUQiPgogICAgICAgICAgICAgICAgICAg
ICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQkMgTWluaXN0cnkgUHJhY3RpdGlvbmVy
IElEIiBleHRlbnNpb249IjkzMTkwIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjQwLjIuMTEi
Lz4KICAgICAgICAgICAgICAgICAgICAgICAgPGluZm9ybWF0aW9uUmVjaXBpZW50IGNsYXNzQ29k
ZT0iUFNOIiBkZXRlcm1pbmVyQ29kZT0iSU5TVEFOQ0UiPgogICAgICAgICAgICAgICAgICAgICAg
ICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGZhbWlseT5QbGlz
aWhkPC9mYW1pbHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGdpdmVuPkFhcm9u
PC9naXZlbj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cHJlZml4PkRyLjwvcHJl
Zml4PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICAgICAg
ICAgICAgICA8L2luZm9ybWF0aW9uUmVjaXBpZW50PgogICAgICAgICAgICAgICAgICAgICAgICA8
cmVjZWl2ZWRPcmdhbml6YXRpb24gY2xhc3NDb2RlPSJOQVQiIGRldGVybWluZXJDb2RlPSJJTlNU
QU5DRSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5
TmFtZT0iQ0RYIENsaW5pYyBSZWdpc3RyeSBJRCIgZXh0ZW5zaW9uPSJjZHh0ZXN0LWpheXNjbGlu
aWMiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC4yIi8+CiAgICAgICAgICAgICAg
ICAgICAgICAgICAgICA8bmFtZT5JSF9qIGEgeSBzIGMgbCBpIG4gaSBjPC9uYW1lPgogICAgICAg
ICAgICAgICAgICAgICAgICAgICAgPGFkZHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgPHN0YXRlPkJyaXRpc2ggQ29sdW1iaWE8L3N0YXRlPgogICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgIDxjb3VudHJ5PkNhbmFkYTwvY291bnRyeT4KICAgICAgICAgICAgICAgICAgICAg
ICAgICAgIDwvYWRkcj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuczI6ZGlzdHJpYnV0
aW9uU3RhdHVzPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuczI6c3RhdHVzQ29k
ZSBjb2RlPSIyMDAiIGRpc3BsYXlOYW1lPSJRVUVVRUQiLz4KICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICA8bnMyOnN0YXR1c1RpbWUgdmFsdWU9IjIwMTkwNTIxMTAxNC0wNzAwIi8+CiAg
ICAgICAgICAgICAgICAgICAgICAgICAgICA8L25zMjpkaXN0cmlidXRpb25TdGF0dXM+CiAgICAg
ICAgICAgICAgICAgICAgICAgIDwvcmVjZWl2ZWRPcmdhbml6YXRpb24+CiAgICAgICAgICAgICAg
ICAgICAgPC9pbnRlbmRlZFJlY2lwaWVudD4KICAgICAgICAgICAgICAgIDwvaW5mb3JtYXRpb25S
ZWNpcGllbnQ+CiAgICAgICAgICAgICAgICA8aW5mb3JtYXRpb25SZWNpcGllbnQgdHlwZUNvZGU9
IlBSQ1AiPgogICAgICAgICAgICAgICAgICAgIDxpbnRlbmRlZFJlY2lwaWVudCBjbGFzc0NvZGU9
IkFTU0lHTkVEIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0
eU5hbWU9IkJDIE1pbmlzdHJ5IFByYWN0aXRpb25lciBJRCIgZXh0ZW5zaW9uPSI5MzE5MCIgcm9v
dD0iMi4xNi44NDAuMS4xMTM4ODMuMy40MC4yLjExIi8+CiAgICAgICAgICAgICAgICAgICAgICAg
IDxpbmZvcm1hdGlvblJlY2lwaWVudCBjbGFzc0NvZGU9IlBTTiIgZGV0ZXJtaW5lckNvZGU9IklO
U1RBTkNFIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgIDxmYW1pbHk+UGxpc2loZDwvZmFtaWx5PgogICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgIDxnaXZlbj5BYXJvbjwvZ2l2ZW4+CiAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgPHByZWZpeD5Eci48L3ByZWZpeD4KICAgICAgICAgICAgICAgICAgICAg
ICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9pbmZvcm1hdGlvblJlY2lw
aWVudD4KICAgICAgICAgICAgICAgICAgICAgICAgPHJlY2VpdmVkT3JnYW5pemF0aW9uIGNsYXNz
Q29kZT0iTkFUIiBkZXRlcm1pbmVyQ29kZT0iSU5TVEFOQ0UiPgogICAgICAgICAgICAgICAgICAg
ICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkNEWCBDbGluaWMgUmVnaXN0cnkg
SUQiIGV4dGVuc2lvbj0iQ0RYQ1IwMDAyMSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcu
MTAwLjIiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPkNhbmFkYSBIZWFsdGgg
SW5mb3dheSBUZXN0IENsaW5pYzwvbmFtZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxh
ZGRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkZWxpbWl0ZXI+MTUwIEtpbmcg
U3QuIFcuIFN0ZSAxMzAwPC9kZWxpbWl0ZXI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgPGNpdHk+VG9yb250bzwvY2l0eT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8
c3RhdGU+QnJpdGlzaCBDb2x1bWJpYTwvc3RhdGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgPGNvdW50cnk+Q2FuYWRhPC9jb3VudHJ5PgogICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgIDxwb3N0YWxDb2RlPk01SCAxSjk8L3Bvc3RhbENvZGU+CiAgICAgICAgICAgICAgICAg
ICAgICAgICAgICA8L2FkZHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bnMyOmRpc3Ry
aWJ1dGlvblN0YXR1cz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bnMyOnN0YXR1
c0NvZGUgY29kZT0iMjAwIiBkaXNwbGF5TmFtZT0iUVVFVUVEIi8+CiAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgPG5zMjpzdGF0dXNUaW1lIHZhbHVlPSIyMDE5MDUyMTEwMTQtMDcwMCIv
PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9uczI6ZGlzdHJpYnV0aW9uU3RhdHVzPgog
ICAgICAgICAgICAgICAgICAgICAgICA8L3JlY2VpdmVkT3JnYW5pemF0aW9uPgogICAgICAgICAg
ICAgICAgICAgIDwvaW50ZW5kZWRSZWNpcGllbnQ+CiAgICAgICAgICAgICAgICA8L2luZm9ybWF0
aW9uUmVjaXBpZW50PgogICAgICAgICAgICAgICAgPGluZm9ybWF0aW9uUmVjaXBpZW50IHR5cGVD
b2RlPSJQUkNQIj4KICAgICAgICAgICAgICAgICAgICA8aW50ZW5kZWRSZWNpcGllbnQgY2xhc3ND
b2RlPSJBU1NJR05FRCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRo
b3JpdHlOYW1lPSJCQyBNaW5pc3RyeSBQcmFjdGl0aW9uZXIgSUQiIGV4dGVuc2lvbj0iOTMxOTAi
IHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuNDAuMi4xMSIvPgogICAgICAgICAgICAgICAgICAg
ICAgICA8aW5mb3JtYXRpb25SZWNpcGllbnQgY2xhc3NDb2RlPSJQU04iIGRldGVybWluZXJDb2Rl
PSJJTlNUQU5DRSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT4KICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICA8ZmFtaWx5PlBsaXNpaGQ8L2ZhbWlseT4KICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICA8Z2l2ZW4+QWFyb248L2dpdmVuPgogICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgIDxwcmVmaXg+RHIuPC9wcmVmaXg+CiAgICAgICAgICAgICAgICAg
ICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvaW5mb3JtYXRpb25S
ZWNpcGllbnQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDxyZWNlaXZlZE9yZ2FuaXphdGlvbiBj
bGFzc0NvZGU9Ik5BVCIgZGV0ZXJtaW5lckNvZGU9IklOU1RBTkNFIj4KICAgICAgICAgICAgICAg
ICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJDRFggQ2xpbmljIFJlZ2lz
dHJ5IElEIiBleHRlbnNpb249ImNkeHBvc3Rwcm9kLW90Y2IiIHJvb3Q9IjIuMTYuODQwLjEuMTEz
ODgzLjMuMjc3LjEwMC4yIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT5Pc2Nh
ciBUZXN0IENsaW5pYyBCPC9uYW1lPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFkZHI+
CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRlbGltaXRlcj4xODE5IFRlc3QgQXZl
PC9kZWxpbWl0ZXI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNpdHk+S2Vsb3du
YTwvY2l0eT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3RhdGU+QnJpdGlzaCBD
b2x1bWJpYTwvc3RhdGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvdW50cnk+
Q2FuYWRhPC9jb3VudHJ5PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwb3N0YWxD
b2RlPlYxVjFWMjwvcG9zdGFsQ29kZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYWRk
cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuczI6ZGlzdHJpYnV0aW9uU3RhdHVzPgog
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuczI6c3RhdHVzQ29kZSBjb2RlPSI0MDAu
NCIgZGlzcGxheU5hbWU9IlVOREVMSVZFUkFCTEU6IExvY2F0aW9uIG5vdCBjYXBhYmxlIG9mIHJl
Y2VpcHQuIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5zMjpzdGF0dXNUaW1l
IG51bGxGbGF2b3I9Ik5BIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L25zMjpkaXN0
cmlidXRpb25TdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvcmVjZWl2ZWRPcmdhbml6
YXRpb24+CiAgICAgICAgICAgICAgICAgICAgPC9pbnRlbmRlZFJlY2lwaWVudD4KICAgICAgICAg
ICAgICAgIDwvaW5mb3JtYXRpb25SZWNpcGllbnQ+CiAgICAgICAgICAgICAgICA8aW5mb3JtYXRp
b25SZWNpcGllbnQgdHlwZUNvZGU9IlBSQ1AiPgogICAgICAgICAgICAgICAgICAgIDxpbnRlbmRl
ZFJlY2lwaWVudCBjbGFzc0NvZGU9IkFTU0lHTkVEIj4KICAgICAgICAgICAgICAgICAgICAgICAg
PGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkJDIE1pbmlzdHJ5IFByYWN0aXRpb25lciBJRCIg
ZXh0ZW5zaW9uPSI5MzE5MCIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy40MC4yLjExIi8+CiAg
ICAgICAgICAgICAgICAgICAgICAgIDxpbmZvcm1hdGlvblJlY2lwaWVudCBjbGFzc0NvZGU9IlBT
TiIgZGV0ZXJtaW5lckNvZGU9IklOU1RBTkNFIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAg
IDxuYW1lPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxmYW1pbHk+UGxpc2loZDwv
ZmFtaWx5PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxnaXZlbj5BYXJvbjwvZ2l2
ZW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHByZWZpeD5Eci48L3ByZWZpeD4K
ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgICAgICAgICAg
ICAgPC9pbmZvcm1hdGlvblJlY2lwaWVudD4KICAgICAgICAgICAgICAgICAgICAgICAgPHJlY2Vp
dmVkT3JnYW5pemF0aW9uIGNsYXNzQ29kZT0iTkFUIiBkZXRlcm1pbmVyQ29kZT0iSU5TVEFOQ0Ui
PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9
IkNEWCBDbGluaWMgUmVnaXN0cnkgSUQiIGV4dGVuc2lvbj0iY2R4cG9zdHByb2Qtb3RjYSIgcm9v
dD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjIiLz4KICAgICAgICAgICAgICAgICAgICAg
ICAgICAgIDxuYW1lPk9zY2FyIFRlc3QgQ2xpbmljIEE8L25hbWU+CiAgICAgICAgICAgICAgICAg
ICAgICAgICAgICA8YWRkcj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGVsaW1p
dGVyPjE4MTggVGVzdCBBdmU8L2RlbGltaXRlcj4KICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICA8Y2l0eT5LZWxvd25hPC9jaXR5PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
IDxzdGF0ZT5Ccml0aXNoIENvbHVtYmlhPC9zdGF0ZT4KICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICA8Y291bnRyeT5DYW5hZGE8L2NvdW50cnk+CiAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgPHBvc3RhbENvZGU+VjFWMVYxPC9wb3N0YWxDb2RlPgogICAgICAgICAgICAgICAg
ICAgICAgICAgICAgPC9hZGRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5zMjpkaXN0
cmlidXRpb25TdGF0dXM+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5zMjpzdGF0
dXNDb2RlIGNvZGU9IjEwMCIgZGlzcGxheU5hbWU9IkRFTElWRVJFRCIvPgogICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgIDxuczI6c3RhdHVzVGltZSB2YWx1ZT0iMjAxOTA1MjExMDE0LTA3
MDAiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbnMyOmRpc3RyaWJ1dGlvblN0YXR1
cz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9yZWNlaXZlZE9yZ2FuaXphdGlvbj4KICAgICAg
ICAgICAgICAgICAgICA8L2ludGVuZGVkUmVjaXBpZW50PgogICAgICAgICAgICAgICAgPC9pbmZv
cm1hdGlvblJlY2lwaWVudD4KICAgICAgICAgICAgPC90YXJnZXQ+CiAgICAgICAgPC9zdWJqZWN0
PgogICAgICAgIDxxdWVyeUFjaz4KICAgICAgICAgICAgPHF1ZXJ5UmVzcG9uc2VDb2RlIGNvZGU9
Ik9LIi8+CiAgICAgICAgICAgIDxyZXN1bHRUb3RhbFF1YW50aXR5IHZhbHVlPSIxIi8+CiAgICAg
ICAgICAgIDxyZXN1bHRDdXJyZW50UXVhbnRpdHkgdmFsdWU9IjEiLz4KICAgICAgICAgICAgPHJl
c3VsdFJlbWFpbmluZ1F1YW50aXR5IHZhbHVlPSIwIi8+CiAgICAgICAgPC9xdWVyeUFjaz4KICAg
IDwvY29udHJvbEFjdFByb2Nlc3M+CjwvUkNNUl9JTjAwMDAzMFVWMDE+Cg==</inboundTemplate>
            <outboundTemplate encoding="base64">ewoJInN0YXR1cyI6ICIiLAoJIm1lc3NhZ2UiOiAiIiwKCSJhY2tEZXRhaWwiOiB7CgkJImFja0lk
IjogIiIsCgkJImFja1RpbWUiOiAiIiwKCQkibWVzc2FnZUlkIjogIiIsCgkJInN0YXR1cyI6ICIi
Cgl9LAoJImRvY3VtZW50cyI6IFtdCn0=</outboundTemplate>
            <inboundDataType>HL7V3</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.8.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.8.0">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.8.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.8.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.8.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.8.0">
            <elements/>
          </filter>
          <transportName>JavaScript Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>false</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data

logger.debug(&quot;OBIB version &apos;&quot; + globalMap.get(&apos;obib.version&apos;) + &quot;&apos; deployed.&quot;);

return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
      <properties version="3.8.0">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>DEVELOPMENT</messageStorageMode>
        <encryptData>false</encryptData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>true</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TYPE</name>
            <type>STRING</type>
            <mappingName>mirth_type</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>VERSION</name>
            <type>STRING</type>
            <mappingName>mirth_version</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="3.8.0">
          <type>None</type>
          <properties/>
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
          <entry>
            <string>3ee0c1db-83b0-49f6-9323-8884b5bd43da</string>
            <string>CDA Parser</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>true</enabled>
          <lastModified>
            <time>1573856923433</time>
            <timezone>America/Vancouver</timezone>
          </lastModified>
          <pruningSettings>
            <archiveEnabled>true</archiveEnabled>
          </pruningSettings>
        </metadata>
        <codeTemplateLibraries>
          <codeTemplateLibrary version="3.8.0">
            <id>a689ef28-f6b5-43bf-95c0-3a7f0cfadaff</id>
            <name>CDA</name>
            <revision>3</revision>
            <lastModified>
              <time>1571944443031</time>
              <timezone>Canada/Pacific</timezone>
            </lastModified>
            <description>Functions to build/format/parse CDA message fragments</description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>e995ffe5-fe5f-4260-a385-98f81c8418fe</string>
              <string>b2f0c503-a881-4126-995e-844c3e7692fd</string>
              <string>f3a65b72-9187-42ef-88cd-1d7626887e2e</string>
              <string>2375f320-7fd5-48cd-b3bb-53c22dab182b</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.8.0">
                <id>9914a610-67bc-42b7-aa87-6a693ed1800c</id>
                <name>Build CDA Address</name>
                <revision>6</revision>
                <lastModified>
                  <time>1571963472067</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Build a XML address tag based on &apos;4.2.1.2. Addresses&apos;

	@param {String} use - 
	@param {String} streetAddress - 
	@param {String} city - 
	@param {String} state - 
	@param {String} postalCode - 
	@param {String} country - 
	@return {Object} return the XML address tag
*/
function buildCDAAddress(use, streetAddress, city, state, postalCode, country) {
	var addr = new XML(&quot;&lt;addr&gt;&quot; + (streetAddress ? streetAddress + &quot;&lt;delimiter/&gt;&quot; : &quot;&quot;) + &quot;&lt;/addr&gt;&quot;); // CONF-BC0039
  	if (streetAddress) {
  		addr[&apos;@use&apos;] = use; // CONF-BC0041
  	}
  	if (city) {
  		addr[&apos;city&apos;] = city;
  	}
  	if (state) {
  		if (state.length == 2) {
  			state = &apos;CA-&apos; + state;
  		}
  		addr[&apos;state&apos;] = state; // CONF-BC0045
  	}
  	if (postalCode) {
  		addr[&apos;postalCode&apos;] = postalCode;
  	}
  	if (country) {
  		addr[&apos;country&apos;] = country; // CONF-BC0044
  	}
  	return addr;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>d56207a8-0d51-40fb-9437-73815405b6a2</id>
                <name>Build CDA ID</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650189148</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Build a XML id tag

	@param {String} root - 
	@param {String} extension - 
	@return {Object} return the XML id tag
*/
function buildCDAId(root, extension) {
	if (extension != null &amp;&amp; (&quot;&quot;+extension).length &gt; 0) {
		var id = new XML(&apos;&lt;id/&gt;&apos;);
	  	id[&apos;@extension&apos;] = extension;
		if (root != null) {
		  	id[&apos;@root&apos;] = root;
		  	// Get the authority name from the GlobalMap (loaded from database)
		  	var authName = globalMap.get(root);
		  	if (authName) {
		  		id[&apos;@assigningAuthorityName&apos;] = authName;
		  	}
		}
	  	return id;
	}
	return new XML(&apos;&lt;id nullFlavor=&quot;NA&quot; /&gt;&apos;);
}

</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>aaee9682-0184-43e5-a80b-32615c89dae0</id>
                <name>Build CDA Name</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650189270</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Build a XML name tag based on &apos;4.2.1.1. Person Names&apos;

	@param {String} use -
	@param {String} family -
	@param {String} given -
	@param {String} prefix -
	@param {String} suffix -
	@return {Object} return the XML name tag
*/
function buildCDAName(use, family, given, prefix, suffix) {
	var name = new XML(&quot;&lt;name/&gt;&quot;);
  	name[&apos;@use&apos;] = use; // CONF-BC0038
  	name[&apos;family&apos;] = family;
  	if (given instanceof Array) { // CONF-BC0031, CONF-BC0034
  		for (var i = 0; i &lt; given.length; i++) {
  			name[&apos;given&apos;][i] = given[i];
  		}
  	} else {
  		name[&apos;given&apos;] = given;
  	}
  	if (prefix) { // CONF-BC0035
  		name[&apos;prefix&apos;] = prefix;
  	}
  	if (suffix) { // CONF-BC0036
  		name[&apos;suffix&apos;] = suffix;
  	}
  	return name;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>39f73e3c-ac8d-46ee-904c-32d6a73d93c0</id>
                <name>Build CDA Telecom</name>
                <revision>2</revision>
                <lastModified>
                  <time>1571955126036</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Build a XML telecom tag

	@param {String} use - &apos;H&apos; = home, &apos;W&apos; = work, &apos;M&apos; = mobile
	@param {String} type - &apos;tel&apos; or &apos;email&apos;
	@param {String} value - number of telefone or email address
	@return {Object} return the XML telecom tag
*/
function buildCDATelecom(use, type, value) {
	var telecom = new XML(&quot;&lt;telecom/&gt;&quot;);
	if (use &amp;&amp; type &amp;&amp; value) {
  		telecom[&apos;@use&apos;] = use;
  		telecom[&apos;@value&apos;] = type + &quot;:&quot; + value;
	}
  	return telecom;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>978d7943-1810-4652-a684-8f7b6bc3bc11</id>
                <name>Build CDA TemplateId</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650189497</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Build a XML templateId tag

	@param {String} code - 
	@return {Object} return the XML template tag
*/
function buildCDATemplateId(code) {
	var templateId = new XML(&apos;&lt;templateId/&gt;&apos;);

	// Get the attributes from the GlobalMap (loaded from database)
  	var loinc_code = globalMap.get(code);
  	
  	templateId[&apos;@root&apos;] = loinc_code[&apos;template_id&apos;];
  	templateId[&apos;@assigningAuthorityName&apos;] = loinc_code[&apos;template_name&apos;];
		  	
  	return templateId;&#xd;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>0b2ecd99-756c-4a93-9bba-230bf83b0c62</id>
                <name>Format CDA Date</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650190912</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Format the date for the CDA format &apos;yyyyMMdd&apos;

	@param {Date/String} date -
	@return {String} return the formated date
*/
function formatCDADate(date) {
	return DateUtil.convertDate(&quot;yyyy-MM-dd&quot;, &quot;yyyyMMdd&quot;, date);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>07a8a226-a4d4-4248-b816-00011d888d0f</id>
                <name>Format CDA Date/Time</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650190779</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Format the date/time for the CDA format &apos;yyyyMMddHHmmZZZ&apos;

	@param {Date/String} dateTime - 
	@return {String} return the formated dateTime
*/
function formatCDADateTime(dateTime) {
	return DateUtil.formatDate(&apos;yyyyMMddHHmmZZZ&apos;, new Date(dateTime));
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>f4743440-d5d2-44f2-acd9-35746c48d9b3</id>
                <name>Parse CDA Address</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650191291</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Parse the CDA Address to JSON Object

	@param {String} cdaAddress - 
	@return {String} return the parsed Address object
*/
function parseCDAAddress(cdaAddress) {
	var addr = {};
	addr[&apos;use&apos;] = cdaAddress[&apos;@use&apos;].toString();
	// Try to get the street address from the body of the tag &lt;addr&gt; (Document format)
	var strtAddr = cdaAddress.toString().match(/&lt;addr.*&gt;(.+?)(?=&lt;delimiter\/&gt;)/); // return array of matchs
	if (strtAddr) {
		addr[&apos;streetAddress&apos;] = strtAddr[1]; //.replace(/(&lt;\/?[^&gt;]+&gt;)/gi, &apos;&apos;); // strip xml tags?
	}
	// Try to append the list of &apos;delimiters&apos; (List clinics/providers format)
	if (getArrayOrXmlLength(cdaAddress[&apos;delimiter&apos;]) &gt; 0) {
		for (var i = 0; i &lt; getArrayOrXmlLength(cdaAddress[&apos;delimiter&apos;]); i++) {
			addr[&apos;streetAddress&apos;] = (addr[&apos;streetAddress&apos;] ? addr[&apos;streetAddress&apos;] + &apos; &apos; : &apos;&apos;) + cdaAddress[&apos;delimiter&apos;][i].toString();
		}
		addr[&apos;streetAddress&apos;] = addr[&apos;streetAddress&apos;].trim(); // trim any whitespace from both side of the address
	}
	if (getArrayOrXmlLength(cdaAddress[&apos;city&apos;]) &gt; 0) {
		addr[&apos;city&apos;] = cdaAddress[&apos;city&apos;].toString();
	}
	if (getArrayOrXmlLength(cdaAddress[&apos;province&apos;]) &gt; 0) {
		addr[&apos;province&apos;] = cdaAddress[&apos;state&apos;].toString();
	}
	if (getArrayOrXmlLength(cdaAddress[&apos;postalCode&apos;]) &gt; 0) {
		addr[&apos;postalCode&apos;] = cdaAddress[&apos;postalCode&apos;].toString();
	}
	if (getArrayOrXmlLength(cdaAddress[&apos;country&apos;]) &gt; 0) {
		addr[&apos;country&apos;] = cdaAddress[&apos;country&apos;].toString();
	}
	return addr;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>41f1daa2-e22b-439a-b0b5-16bc108c007e</id>
                <name>Parse CDA Date/Time</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650191523</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Parse the CDA Date/Time to Date object

	@param {String} cdaDateTime - 
	@return {String} return the Date object
*/
function parseCDADateTime(cdaDateTime) {
	if (!cdaDateTime || cdaDateTime.length == 0) {
		return null;
	}
	if (cdaDateTime.length &lt;= 8) {
		return DateUtil.convertDate(&quot;yyyyMMdd&quot;, &quot;yyyy-MM-dd&quot;, cdaDateTime);
	}
	return DateUtil.convertDate(&quot;yyyyMMddHHmmZZZ&quot;, &quot;yyyy-MM-dd\&apos;T\&apos;HH:mm:ssZ&quot;, cdaDateTime);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>1dc8b8fe-b046-4292-a7c2-218c37bd0d2d</id>
                <name>Parse CDA Date/TIme to DB format</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650191405</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Parse the CDA Date/Time to Date in DB format

	@param {String} cdaDateTime - 
	@return {String} return the Date in DB format
*/
function parseCDADateTimeToDB(cdaDateTime) {
	if (!cdaDateTime || cdaDateTime.length == 0) {
		return null;
	}
	if (cdaDateTime.length &lt;= 8) {
		return DateUtil.convertDate(&quot;yyyyMMdd&quot;, &quot;yyyy-MM-dd&quot;, cdaDateTime);
	}
	return DateUtil.convertDate(&quot;yyyyMMddHHmmZZZ&quot;, &quot;yyyy-MM-dd hh:mm:ss&quot;, cdaDateTime);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>a2f73260-eb70-4dcc-8b8a-9350c3bec9fd</id>
                <name>Parse CDA ID</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650191647</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Parse the CDA Id to JSON object

	@param {String} cdaID - 
	@return {String} return the parsed ID object
*/
function parseCDAId(cdaID) {
	var id = {};
	if (cdaID[&apos;@extension&apos;]) {
		id[&apos;code&apos;] = cdaID[&apos;@extension&apos;].toString();
	}
	if (cdaID[&apos;@root&apos;]) {
		id[&apos;type&apos;] = cdaID[&apos;@root&apos;].toString();
	}
	return id;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>a0354d90-ffa8-47c5-9776-e41927d2f0d0</id>
                <name>Parse CDA Name</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650191787</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Parse the CDA Name to JSON object

	@param {String} cdaName - 
	@return {String} return the parsed Name object
*/
function parseCDAName(cdaName) {
	var name = {};
	name[&apos;use&apos;] = cdaName[&apos;@use&apos;].toString();
	name[&apos;family&apos;] = cdaName[&apos;family&apos;].toString();
	name[&apos;given&apos;] = [];
	for (var i = 0; i &lt; getArrayOrXmlLength(cdaName[&apos;given&apos;]); i++) {
		name[&apos;given&apos;][i] = cdaName[&apos;given&apos;][i].toString();
	}
	if (getArrayOrXmlLength(cdaName[&apos;prefix&apos;]) &gt; 0) {
		name[&apos;prefix&apos;] = cdaName[&apos;prefix&apos;].toString();
	}
	if (getArrayOrXmlLength(cdaName[&apos;suffix&apos;]) &gt; 0) {
		name[&apos;suffix&apos;] = cdaName[&apos;suffix&apos;].toString();
	}
	return name;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>407e6d63-57cf-42f8-b555-5d6c575f4f55</id>
                <name>Parse CDA Telecom</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650191892</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Parse the CDA Telecom to JSON object

	@param {String} telecom - 
	@return {String} return the parsed Telecom object
*/
function parseCDATelecom(cdaTelecom) {
	var telecom = {};
	telecom[&apos;use&apos;] = cdaTelecom[&apos;@use&apos;].toString();
	telecom[&apos;type&apos;] = &quot;tel&quot;; 
	if (getArrayOrXmlLength(cdaTelecom[&apos;@value&apos;]) &gt; 0) {
		var telParts = cdaTelecom[&apos;@value&apos;].split(&apos;:&apos;);
		telecom[&apos;type&apos;] = telParts[0];	
		telecom[&apos;value&apos;] = telParts[1];
	}
	return telecom;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.8.0">
            <id>5d2a129c-da07-49cc-950c-d941a93cd271</id>
            <name>OBIB</name>
            <revision>5</revision>
            <lastModified>
              <time>1572641956778</time>
              <timezone>Canada/Pacific</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>e995ffe5-fe5f-4260-a385-98f81c8418fe</string>
              <string>b2f0c503-a881-4126-995e-844c3e7692fd</string>
              <string>f3a65b72-9187-42ef-88cd-1d7626887e2e</string>
              <string>2375f320-7fd5-48cd-b3bb-53c22dab182b</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.8.0">
                <id>0d5c946b-11fe-4dde-8c69-7d9296ea32a0</id>
                <name>Build Document Storage Message</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650189617</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Build a Document Storage Message.

	@param {String} locationId - Location / Clinic Id
	@param {String} documentId - Document Id
	@param {String} messageType - DOCUMENT, RESPONSE or ATTACHMENT
	@param {String} content - Content of the message / document
	@param {String} connectorVersion - OBBI Connector version
	@return {String} return the Document Storage Message JSON object
*/
function buildDocumentStorageMessage(locationId, documentId, messageType, messageContent, connectorVersion) {
	var storageMsg = {};
	storageMsg[&apos;locationId&apos;] = locationId;
	storageMsg[&apos;documentId&apos;] = documentId;
	storageMsg[&apos;messageType&apos;] = messageType;
	storageMsg[&apos;messageContent&apos;] = messageContent;
	storageMsg[&apos;obibVersion&apos;] = globalMap.get(&quot;obib.version&quot;);
	storageMsg[&apos;connectorVersion&apos;] = connectorVersion;
	return storageMsg;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>738d81a1-d04c-482e-a011-30c61a09b3d3</id>
                <name>Create Array of DocumentAttachment</name>
                <revision>2</revision>
                <lastModified>
                  <time>1570827114602</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Create an Array of DocumentAttachment objects from a JSON object

	@param {Object[]} jsonAttachments - 
	@return {DocumentAttachment[]} return the Array of DocumentAttachment
*/
function createDocumentAttachmentArray(jsonAttachments) {
	var attachments = [];
	if (jsonAttachments != null) {
		for (var i = 0; i &lt; jsonAttachments.length; i++) {
			var attachment = jsonAttachments[i];
			attachments.push(new Packages.ca.uvic.leadlab.cdxconnector.messages.submit.DocumentAttachment(
				attachment[&apos;mediaType&apos;],
				attachment[&apos;content&apos;],
				attachment[&apos;hash&apos;],
				attachment[&apos;hashAlgorithm&apos;],
				attachment[&apos;reference&apos;]));
		}
	}
	return attachments;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>bcd2a30d-111f-4fd3-9724-0e9a2e7dfe50</id>
                <name>Create DatabaseConnection</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650189859</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get the DatabaseConnection object

	@return {DatabaseConnection} return the DatabaseConnection object
*/
function getDBConnection() {
	var dataSource = globalMap.get(&quot;hikari_OBIB_DB&quot;);
	if (dataSource == null) {
		dataSource = new Packages.com.zaxxer.hikari.HikariDataSource();
		dataSource.setDriverClassName(globalMap.get(&quot;obib.db.driver&quot;));
		dataSource.setJdbcUrl(globalMap.get(&quot;obib.db.url&quot;));
		dataSource.setUsername(globalMap.get(&quot;obib.db.username&quot;));
		dataSource.setPassword(globalMap.get(&quot;obib.db.password&quot;));
		dataSource.setConnectionTimeout(0);
		dataSource.setAutoCommit(false);
		dataSource.setMaximumPoolSize(10);
		dataSource.setMinimumIdle(0);
		//dataSource.setReadOnly(readOnly);
		//dataSource.setConnectionTestQuery(&quot;SELECT 1&quot;);
		globalMap.put(&quot;hikari_OBIB_DB&quot;, dataSource);
	}
	if (dataSource != null) {
		return dataSource.getConnection();
	} else {
		throw &quot;Cannot create a new data source (connection pool).&quot;;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>60bfd3ac-552a-4d59-ac1d-48fbe4f430b2</id>
                <name>Create Error Message</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650189966</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Create JSON error message

	@param {String} error - Error message
	@param {Object} obibErrors - Associative Array of errors
	@return {String} return the JSON response
*/
function createErrorMessage(error, obibErrors) {
	// Filter cdxconnector messages
	if (error.includes(&apos;ca.uvic.leadlab.cdxconnector&apos;)) {
		error = error.split(/ca.uvic.leadlab.cdxconnector.*:/).pop();
	}
	
	return JSON.stringify({&apos;obibVersion&apos;: globalMap.get(&quot;obib.version&quot;), &apos;status&apos;: &apos;ERROR&apos;, &apos;message&apos;: error, &apos;obibErrors&apos;: obibErrors})
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>f1de696c-f547-49ae-8225-f7e40ed2c87c</id>
                <name>Create Segment Before</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650190249</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Create a new segment and insert it before the target segment.
	
	@param {String} name - The name of the segment to create.
	@param {String} segment - The existing segment that the new segment will be inserted before.
	@return {String} return The existing segment that the new segment will be inserted after.
*/
function createSegmentBefore(name, segment) {
	var msgObj = segment;
   	while (msgObj.parent() != undefined) { 
		msgObj = msgObj.parent(); 
	}
     msgObj.insertChildBefore(segment[0], new XML(&apos;&lt;&apos; + name + &apos;&gt;&lt;/&apos; + name + &apos;&gt;&apos;));
   	return msgObj.child(segment[0].childIndex() - 1);
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>b332b27e-5312-4517-a4ad-bad60b2642bf</id>
                <name>Evaluate XPath expression</name>
                <revision>29</revision>
                <lastModified>
                  <time>1573764879777</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Evaluates a XPath expression

	@param {Object} xml - xml being evaluated
	@param {String} expression - expression to be evaluated
	@return {String} &apos;true&apos; if the expression evaluates, otherwise &apos;false&apos;
*/
function evaluateXPath(xml, expression) {
	// clean namespace
	var xmlStr = xml.toString().replace(&apos;xmlns=&quot;urn:hl7-org:v3&quot;&apos;, &apos;&apos;);
	
	// evaluate the xpath using Java xml API
	var input = new Packages.org.xml.sax.InputSource(new Packages.java.io.StringReader(xmlStr));
	var xpath = Packages.javax.xml.xpath.XPathFactory.newInstance().newXPath();
	return xpath.evaluate(expression, input, Packages.javax.xml.xpath.XPathConstants.BOOLEAN).toString();
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>df99f17c-1947-469e-be81-78e90d657f4d</id>
                <name>Execute Database Query</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650190510</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a query on the database and returns a CachedRowSet.

	@param {String} query - The query to be executed.
	@return {String} return The result of the query, as a CachedRowSet.
*/
function executeCachedQuery(query) {
	var connection = getDBConnection();
	if (connection != null) {
		var statement = null;
		try {
			statement = connection.createStatement();
            	var result = statement.executeQuery(query);
            	var crs = new MirthCachedRowSet();
            	crs.populate(result);
            	if (result != null) {
            		Packages.org.apache.commons.dbutils.DbUtils.closeQuietly(result);
            	}
            	return crs;
		} catch(err) {
			throw err;
        	} finally {
        		if (statement != null) {
				Packages.org.apache.commons.dbutils.DbUtils.closeQuietly(statement);
        		}
        		if (connection != null) {
        			Packages.org.apache.commons.dbutils.DbUtils.closeQuietly(connection);
        		}
		}
	} else {
		throw &quot;Error: Cannot connect to the database&quot;;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>8512e74b-a53b-4a15-9718-fed25c0481ef</id>
                <name>Execute Database Update</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650190646</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes an INSERT/UPDATE on the database and returns the row count.

	@param {String} query - The statement to be executed.
	@return {Integer} return A count of the number of updated rows.
*/
function executeUpdate(query) {
	var connection = getDBConnection();
	if (connection != null) {
		var statement = null;
		try {
			connection.setAutoCommit(true);
			statement = connection.createStatement();
			if (statement.execute(query)) {
				return -1;
			} else {
				return statement.getUpdateCount();
			}
		} catch (err) {
			throw err;
		} finally {
			if (statement != null) {
				Packages.org.apache.commons.dbutils.DbUtils.closeQuietly(statement);
        		}
        		if (connection != null) {
        			Packages.org.apache.commons.dbutils.DbUtils.closeQuietly(connection);
        		}
		}
	} else {
		throw &quot;Error: Cannot connect to the database&quot;;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>be89bc64-f4bf-4ab3-954b-04088964eda6</id>
                <name>Handle Query Result Status</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650191035</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Handle the result status from a query message.

	@param {Object} queryResult - query result (&apos;tmp&apos; variable)
	@param {Object} queryMessage - query message (&apos;msg&apos; variable)
	@param {String} collection - collection returned by the result
	@return {Object} return The queryResult object with status and message.
*/
function handleQueryResultStatus(queryResult, queryMessage, collection) {
	if (queryResult[&apos;ackDetail&apos;][&apos;status&apos;] === &apos;OK&apos;) {
		queryResult[&apos;status&apos;] = &quot;SUCCESS&quot;;
	} else if (queryResult[&apos;ackDetail&apos;][&apos;status&apos;] === &apos;NF&apos;) {
		queryResult[&apos;status&apos;] = &quot;SUCCESS&quot;;

		queryResult[collection] = []; // ensure the result collection is empty.
	} else {
		queryResult[&apos;status&apos;] = &quot;ERROR&quot;;
		
		if (queryResult[&apos;ackDetail&apos;][&apos;status&apos;] === &apos;QE&apos;) {
			queryResult[&apos;message&apos;] = queryMessage[&apos;acknowledgement&apos;][&apos;acknowledgementDetail&apos;][&apos;text&apos;].toString()				
		} else {
			queryResult[&apos;message&apos;] = &apos;Unespected error. Ack response code: &apos; + queryResult[&apos;ackDetail&apos;][&apos;status&apos;];
		}
		
		logger.error(&apos;MessagId &apos; + queryResult[&apos;ackDetail&apos;][&apos;messageId&apos;] + &apos; returned the error: &apos; + queryResult[&apos;message&apos;] + &quot;&apos;&quot;);
	}
	return tmp;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>e83b8bbf-433a-4c3d-88a2-16f4132b38af</id>
                <name>Handle Return Message</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650191160</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Handle the return message creation.

	@param {Object} responseStatus - 
	@param {Object} responseStatusMessage - 
	@param {Object} responseMessage - 
	@param {Function} createMessage - Callback function responsible for creating and return the result message.
	@return {String} return the stringify json message
*/
function handleResponseMessage(responseStatus, responseStatusMessage, responseMessage, createMessage) {
	if (responseStatus === SENT) { // process only SENT messages
		var responseMessage = createMessage(); // get the result message
		responseMessage[&apos;obibVersion&apos;] = globalMap.get(&quot;obib.version&quot;); // add versioning
		return JSON.stringify(responseMessage); // Convert the json to string and return it
	} else if (responseStatus === ERROR) {
		throw &quot;Error Message: &apos;&quot; + responseStatusMessage.toString() 
			+ &quot;&apos;\n Original Message: &apos;&quot; + msg.toString() + &quot;&apos;&quot;;
	} else {
		throw &quot;Not able to handle the response code: &apos;&quot; + responseStatus 
		+ &quot;&apos; \n Error Message: &apos;&quot; + responseStatusMessage.toString() 
		+ &quot;&apos;\n Original Message: &apos;&quot; + msg.toString() + &quot;&apos;&quot;;
	}
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>dfd86988-26e1-4d97-b81d-fee49e303272</id>
                <name>Store OBIB Error</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650192000</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Store the error as an &apos;associative array&apos; in the channel map.
	To retrieve the array of errors use &apos;channelMap.get(&apos;obibErrors&apos;)&apos;

	@param {String} errorCode - the key of the associative array
	@param {String} errorMessage - the value of the associative array
*/
function storeOBIBError(errorCode, errorMessage) {
	var obibErrors = channelMap.get(&apos;obibErrors&apos;);
	if (obibErrors == null) {
		obibErrors = new Object();
	}
	obibErrors[errorCode] = errorMessage;
	channelMap.put(&apos;obibErrors&apos;, obibErrors);
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
        </codeTemplateLibraries>
        <dependencyIds>
          <string>ce179042-48ce-4cf3-8f9e-2869185ac1b6</string>
          <string>2375f320-7fd5-48cd-b3bb-53c22dab182b</string>
        </dependencyIds>
      </exportData>
    </channel>
    <channel version="3.8.0">
      <id>f3a65b72-9187-42ef-88cd-1d7626887e2e</id>
      <nextMetaDataId>4</nextMetaDataId>
      <name>OSP Support</name>
      <description>- Receive and store (error) messages, and forward them by email.</description>
      <revision>2</revision>
      <sourceConnector version="3.8.0">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.vm.VmReceiverProperties" version="3.8.0">
          <pluginProperties/>
          <sourceConnectorProperties version="3.8.0">
            <responseVariable>Auto-generate (Destinations completed)</responseVariable>
            <respondAfterProcessing>true</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>1</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
        </properties>
        <transformer version="3.8.0">
          <elements/>
          <inboundTemplate encoding="base64"></inboundTemplate>
          <outboundTemplate encoding="base64"></outboundTemplate>
          <inboundDataType>JSON</inboundDataType>
          <outboundDataType>JSON</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.8.0">
            <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.8.0">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </inboundProperties>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.8.0">
            <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.8.0">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="3.8.0">
          <elements/>
        </filter>
        <transportName>Channel Reader</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="3.8.0">
          <metaDataId>1</metaDataId>
          <name>Store Error Message</name>
          <properties class="com.mirth.connect.connectors.jdbc.DatabaseDispatcherProperties" version="3.8.0">
            <pluginProperties/>
            <destinationConnectorProperties version="3.8.0">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <driver>com.mysql.jdbc.Driver</driver>
            <url>jdbc:mysql://localhost:3306/OBIB_DB</url>
            <username></username>
            <password></password>
            <query>logger.debug(&apos;Store Error Message&apos;);

try {
	// escape apostrophe to insert the data into database
	var errorMsg = JSON.parse(connectorMessage.getEncodedData());
	var context = errorMsg[&apos;context&apos;].replace(/\&apos;/g, &quot;&apos;&apos;&quot;);
	var trace = errorMsg[&apos;trace&apos;].replace(/\&apos;/g, &quot;&apos;&apos;&quot;);
	
	// Build the insert script
	var insertString = &quot;INSERT INTO error_message (date, clinic_id, message_id, context, trace, obib_version, connector_version) &quot; 
		+ &quot;VALUES (&apos;&quot; + $(&apos;date&apos;) + &quot;&apos;, &apos;&quot; + $(&apos;clinicId&apos;) + &quot;&apos;, &apos;&quot; + $(&apos;messageId&apos;) + &quot;&apos;, &apos;&quot; + context
		+ &quot;&apos;, &apos;&quot; + trace + &quot;&apos;, &apos;&quot; + $(&apos;obibVersion&apos;) + &quot;&apos;, &apos;&quot; + $(&apos;connectorVersion&apos;) + &quot;&apos;)&quot;;
	
	// Execute the insertion
	executeUpdate(insertString);
} catch(err) {
	logger.error(&apos;Error on &quot;Store Error Message&quot;: &apos; + err);
}</query>
            <useScript>true</useScript>
          </properties>
          <transformer version="3.8.0">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.8.0">
                <name>Get Error Message</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>logger.debug(&apos;Get Error Message&apos;);

try {
	tmp = JSON.parse(msg);

	channelMap.put(&apos;date&apos;, DateUtil.convertDate(&apos;yyyy-MM-dd\&apos;T\&apos;HH:mm:ssZ&apos;, &apos;yyyy-MM-dd hh:mm:ss&apos;, tmp[&apos;date&apos;]))
	channelMap.put(&apos;clinicId&apos;, tmp[&apos;clinicId&apos;]);
	channelMap.put(&apos;messageId&apos;, tmp[&apos;messageId&apos;]);
	channelMap.put(&apos;context&apos;, tmp[&apos;context&apos;]);
	channelMap.put(&apos;trace&apos;, tmp[&apos;trace&apos;]);
	channelMap.put(&apos;obibVersion&apos;, tmp[&apos;obibVersion&apos;]);
	channelMap.put(&apos;connectorVersion&apos;, tmp[&apos;connectorVersion&apos;]);
} catch (e) {
	logger.error(&apos;Error on &quot;Get Error Message&quot; transformer: &apos; + e);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64">ewoJImNsaW5pY0lkIjogIiIsCgkibWVzc2FnZUlkIjogIiIsCgkiZGF0ZSI6ICIiLAoJImNvbnRl
eHQiOiAiIiwKCSJ0cmFjZSI6ICIiCn0=</inboundTemplate>
            <outboundTemplate encoding="base64">ewoJImNsaW5pY0lkIjogIiIsCgkibWVzc2FnZUlkIjogIiIsCgkiZGF0ZSI6ICIiLAoJImNvbnRl
eHQiOiAiIiwKCSJ0cmFjZSI6ICIiCn0=</outboundTemplate>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.8.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.8.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.8.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.8.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.8.0">
            <elements/>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.8.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.8.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.8.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.8.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.8.0">
            <elements/>
          </filter>
          <transportName>Database Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
        <connector version="3.8.0">
          <metaDataId>3</metaDataId>
          <name>Send Notification Email</name>
          <properties class="com.mirth.connect.connectors.smtp.SmtpDispatcherProperties" version="3.8.0">
            <pluginProperties/>
            <destinationConnectorProperties version="3.8.0">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <smtpHost>localhost</smtpHost>
            <smtpPort>2525</smtpPort>
            <overrideLocalBinding>false</overrideLocalBinding>
            <localAddress>0.0.0.0</localAddress>
            <localPort>0</localPort>
            <timeout>5000</timeout>
            <encryption>none</encryption>
            <authentication>false</authentication>
            <username></username>
            <password></password>
            <to>osp@localhost</to>
            <from>obib@localhost</from>
            <cc></cc>
            <bcc></bcc>
            <replyTo></replyTo>
            <headers class="linked-hash-map"/>
            <subject>OBIB Error Notification</subject>
            <charsetEncoding>UTF-8</charsetEncoding>
            <html>false</html>
            <body>OBIB received the following error message:

date: ${date}
clinic_id: ${clinicId}
message_id: ${messageId}
context: ${context}
trace: ${trace}
obib_version: ${obibVersion}
obib_connector_version: ${connectorVersion}
</body>
            <attachments/>
          </properties>
          <transformer version="3.8.0">
            <elements/>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.8.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.8.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.8.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.8.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.8.0">
            <elements/>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.8.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.8.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.8.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.8.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.8.0">
            <elements/>
          </filter>
          <transportName>SMTP Sender</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
      <properties version="3.8.0">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>DEVELOPMENT</messageStorageMode>
        <encryptData>false</encryptData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>true</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TYPE</name>
            <type>STRING</type>
            <mappingName>mirth_type</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="3.8.0">
          <type>None</type>
          <properties/>
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>true</enabled>
          <lastModified>
            <time>1574123186822</time>
            <timezone>America/Vancouver</timezone>
          </lastModified>
          <pruningSettings>
            <archiveEnabled>true</archiveEnabled>
          </pruningSettings>
        </metadata>
        <codeTemplateLibraries>
          <codeTemplateLibrary version="3.8.0">
            <id>a689ef28-f6b5-43bf-95c0-3a7f0cfadaff</id>
            <name>CDA</name>
            <revision>3</revision>
            <lastModified>
              <time>1571944443031</time>
              <timezone>Canada/Pacific</timezone>
            </lastModified>
            <description>Functions to build/format/parse CDA message fragments</description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>e995ffe5-fe5f-4260-a385-98f81c8418fe</string>
              <string>b2f0c503-a881-4126-995e-844c3e7692fd</string>
              <string>f3a65b72-9187-42ef-88cd-1d7626887e2e</string>
              <string>2375f320-7fd5-48cd-b3bb-53c22dab182b</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.8.0">
                <id>9914a610-67bc-42b7-aa87-6a693ed1800c</id>
                <name>Build CDA Address</name>
                <revision>6</revision>
                <lastModified>
                  <time>1571963472067</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Build a XML address tag based on &apos;4.2.1.2. Addresses&apos;

	@param {String} use - 
	@param {String} streetAddress - 
	@param {String} city - 
	@param {String} state - 
	@param {String} postalCode - 
	@param {String} country - 
	@return {Object} return the XML address tag
*/
function buildCDAAddress(use, streetAddress, city, state, postalCode, country) {
	var addr = new XML(&quot;&lt;addr&gt;&quot; + (streetAddress ? streetAddress + &quot;&lt;delimiter/&gt;&quot; : &quot;&quot;) + &quot;&lt;/addr&gt;&quot;); // CONF-BC0039
  	if (streetAddress) {
  		addr[&apos;@use&apos;] = use; // CONF-BC0041
  	}
  	if (city) {
  		addr[&apos;city&apos;] = city;
  	}
  	if (state) {
  		if (state.length == 2) {
  			state = &apos;CA-&apos; + state;
  		}
  		addr[&apos;state&apos;] = state; // CONF-BC0045
  	}
  	if (postalCode) {
  		addr[&apos;postalCode&apos;] = postalCode;
  	}
  	if (country) {
  		addr[&apos;country&apos;] = country; // CONF-BC0044
  	}
  	return addr;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>d56207a8-0d51-40fb-9437-73815405b6a2</id>
                <name>Build CDA ID</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650189148</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Build a XML id tag

	@param {String} root - 
	@param {String} extension - 
	@return {Object} return the XML id tag
*/
function buildCDAId(root, extension) {
	if (extension != null &amp;&amp; (&quot;&quot;+extension).length &gt; 0) {
		var id = new XML(&apos;&lt;id/&gt;&apos;);
	  	id[&apos;@extension&apos;] = extension;
		if (root != null) {
		  	id[&apos;@root&apos;] = root;
		  	// Get the authority name from the GlobalMap (loaded from database)
		  	var authName = globalMap.get(root);
		  	if (authName) {
		  		id[&apos;@assigningAuthorityName&apos;] = authName;
		  	}
		}
	  	return id;
	}
	return new XML(&apos;&lt;id nullFlavor=&quot;NA&quot; /&gt;&apos;);
}

</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>aaee9682-0184-43e5-a80b-32615c89dae0</id>
                <name>Build CDA Name</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650189270</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Build a XML name tag based on &apos;4.2.1.1. Person Names&apos;

	@param {String} use -
	@param {String} family -
	@param {String} given -
	@param {String} prefix -
	@param {String} suffix -
	@return {Object} return the XML name tag
*/
function buildCDAName(use, family, given, prefix, suffix) {
	var name = new XML(&quot;&lt;name/&gt;&quot;);
  	name[&apos;@use&apos;] = use; // CONF-BC0038
  	name[&apos;family&apos;] = family;
  	if (given instanceof Array) { // CONF-BC0031, CONF-BC0034
  		for (var i = 0; i &lt; given.length; i++) {
  			name[&apos;given&apos;][i] = given[i];
  		}
  	} else {
  		name[&apos;given&apos;] = given;
  	}
  	if (prefix) { // CONF-BC0035
  		name[&apos;prefix&apos;] = prefix;
  	}
  	if (suffix) { // CONF-BC0036
  		name[&apos;suffix&apos;] = suffix;
  	}
  	return name;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>39f73e3c-ac8d-46ee-904c-32d6a73d93c0</id>
                <name>Build CDA Telecom</name>
                <revision>2</revision>
                <lastModified>
                  <time>1571955126036</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Build a XML telecom tag

	@param {String} use - &apos;H&apos; = home, &apos;W&apos; = work, &apos;M&apos; = mobile
	@param {String} type - &apos;tel&apos; or &apos;email&apos;
	@param {String} value - number of telefone or email address
	@return {Object} return the XML telecom tag
*/
function buildCDATelecom(use, type, value) {
	var telecom = new XML(&quot;&lt;telecom/&gt;&quot;);
	if (use &amp;&amp; type &amp;&amp; value) {
  		telecom[&apos;@use&apos;] = use;
  		telecom[&apos;@value&apos;] = type + &quot;:&quot; + value;
	}
  	return telecom;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>978d7943-1810-4652-a684-8f7b6bc3bc11</id>
                <name>Build CDA TemplateId</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650189497</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Build a XML templateId tag

	@param {String} code - 
	@return {Object} return the XML template tag
*/
function buildCDATemplateId(code) {
	var templateId = new XML(&apos;&lt;templateId/&gt;&apos;);

	// Get the attributes from the GlobalMap (loaded from database)
  	var loinc_code = globalMap.get(code);
  	
  	templateId[&apos;@root&apos;] = loinc_code[&apos;template_id&apos;];
  	templateId[&apos;@assigningAuthorityName&apos;] = loinc_code[&apos;template_name&apos;];
		  	
  	return templateId;&#xd;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>0b2ecd99-756c-4a93-9bba-230bf83b0c62</id>
                <name>Format CDA Date</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650190912</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Format the date for the CDA format &apos;yyyyMMdd&apos;

	@param {Date/String} date -
	@return {String} return the formated date
*/
function formatCDADate(date) {
	return DateUtil.convertDate(&quot;yyyy-MM-dd&quot;, &quot;yyyyMMdd&quot;, date);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>07a8a226-a4d4-4248-b816-00011d888d0f</id>
                <name>Format CDA Date/Time</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650190779</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Format the date/time for the CDA format &apos;yyyyMMddHHmmZZZ&apos;

	@param {Date/String} dateTime - 
	@return {String} return the formated dateTime
*/
function formatCDADateTime(dateTime) {
	return DateUtil.formatDate(&apos;yyyyMMddHHmmZZZ&apos;, new Date(dateTime));
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>f4743440-d5d2-44f2-acd9-35746c48d9b3</id>
                <name>Parse CDA Address</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650191291</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Parse the CDA Address to JSON Object

	@param {String} cdaAddress - 
	@return {String} return the parsed Address object
*/
function parseCDAAddress(cdaAddress) {
	var addr = {};
	addr[&apos;use&apos;] = cdaAddress[&apos;@use&apos;].toString();
	// Try to get the street address from the body of the tag &lt;addr&gt; (Document format)
	var strtAddr = cdaAddress.toString().match(/&lt;addr.*&gt;(.+?)(?=&lt;delimiter\/&gt;)/); // return array of matchs
	if (strtAddr) {
		addr[&apos;streetAddress&apos;] = strtAddr[1]; //.replace(/(&lt;\/?[^&gt;]+&gt;)/gi, &apos;&apos;); // strip xml tags?
	}
	// Try to append the list of &apos;delimiters&apos; (List clinics/providers format)
	if (getArrayOrXmlLength(cdaAddress[&apos;delimiter&apos;]) &gt; 0) {
		for (var i = 0; i &lt; getArrayOrXmlLength(cdaAddress[&apos;delimiter&apos;]); i++) {
			addr[&apos;streetAddress&apos;] = (addr[&apos;streetAddress&apos;] ? addr[&apos;streetAddress&apos;] + &apos; &apos; : &apos;&apos;) + cdaAddress[&apos;delimiter&apos;][i].toString();
		}
		addr[&apos;streetAddress&apos;] = addr[&apos;streetAddress&apos;].trim(); // trim any whitespace from both side of the address
	}
	if (getArrayOrXmlLength(cdaAddress[&apos;city&apos;]) &gt; 0) {
		addr[&apos;city&apos;] = cdaAddress[&apos;city&apos;].toString();
	}
	if (getArrayOrXmlLength(cdaAddress[&apos;province&apos;]) &gt; 0) {
		addr[&apos;province&apos;] = cdaAddress[&apos;state&apos;].toString();
	}
	if (getArrayOrXmlLength(cdaAddress[&apos;postalCode&apos;]) &gt; 0) {
		addr[&apos;postalCode&apos;] = cdaAddress[&apos;postalCode&apos;].toString();
	}
	if (getArrayOrXmlLength(cdaAddress[&apos;country&apos;]) &gt; 0) {
		addr[&apos;country&apos;] = cdaAddress[&apos;country&apos;].toString();
	}
	return addr;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>41f1daa2-e22b-439a-b0b5-16bc108c007e</id>
                <name>Parse CDA Date/Time</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650191523</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Parse the CDA Date/Time to Date object

	@param {String} cdaDateTime - 
	@return {String} return the Date object
*/
function parseCDADateTime(cdaDateTime) {
	if (!cdaDateTime || cdaDateTime.length == 0) {
		return null;
	}
	if (cdaDateTime.length &lt;= 8) {
		return DateUtil.convertDate(&quot;yyyyMMdd&quot;, &quot;yyyy-MM-dd&quot;, cdaDateTime);
	}
	return DateUtil.convertDate(&quot;yyyyMMddHHmmZZZ&quot;, &quot;yyyy-MM-dd\&apos;T\&apos;HH:mm:ssZ&quot;, cdaDateTime);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>1dc8b8fe-b046-4292-a7c2-218c37bd0d2d</id>
                <name>Parse CDA Date/TIme to DB format</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650191405</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Parse the CDA Date/Time to Date in DB format

	@param {String} cdaDateTime - 
	@return {String} return the Date in DB format
*/
function parseCDADateTimeToDB(cdaDateTime) {
	if (!cdaDateTime || cdaDateTime.length == 0) {
		return null;
	}
	if (cdaDateTime.length &lt;= 8) {
		return DateUtil.convertDate(&quot;yyyyMMdd&quot;, &quot;yyyy-MM-dd&quot;, cdaDateTime);
	}
	return DateUtil.convertDate(&quot;yyyyMMddHHmmZZZ&quot;, &quot;yyyy-MM-dd hh:mm:ss&quot;, cdaDateTime);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>a2f73260-eb70-4dcc-8b8a-9350c3bec9fd</id>
                <name>Parse CDA ID</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650191647</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Parse the CDA Id to JSON object

	@param {String} cdaID - 
	@return {String} return the parsed ID object
*/
function parseCDAId(cdaID) {
	var id = {};
	if (cdaID[&apos;@extension&apos;]) {
		id[&apos;code&apos;] = cdaID[&apos;@extension&apos;].toString();
	}
	if (cdaID[&apos;@root&apos;]) {
		id[&apos;type&apos;] = cdaID[&apos;@root&apos;].toString();
	}
	return id;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>a0354d90-ffa8-47c5-9776-e41927d2f0d0</id>
                <name>Parse CDA Name</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650191787</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Parse the CDA Name to JSON object

	@param {String} cdaName - 
	@return {String} return the parsed Name object
*/
function parseCDAName(cdaName) {
	var name = {};
	name[&apos;use&apos;] = cdaName[&apos;@use&apos;].toString();
	name[&apos;family&apos;] = cdaName[&apos;family&apos;].toString();
	name[&apos;given&apos;] = [];
	for (var i = 0; i &lt; getArrayOrXmlLength(cdaName[&apos;given&apos;]); i++) {
		name[&apos;given&apos;][i] = cdaName[&apos;given&apos;][i].toString();
	}
	if (getArrayOrXmlLength(cdaName[&apos;prefix&apos;]) &gt; 0) {
		name[&apos;prefix&apos;] = cdaName[&apos;prefix&apos;].toString();
	}
	if (getArrayOrXmlLength(cdaName[&apos;suffix&apos;]) &gt; 0) {
		name[&apos;suffix&apos;] = cdaName[&apos;suffix&apos;].toString();
	}
	return name;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>407e6d63-57cf-42f8-b555-5d6c575f4f55</id>
                <name>Parse CDA Telecom</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650191892</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Parse the CDA Telecom to JSON object

	@param {String} telecom - 
	@return {String} return the parsed Telecom object
*/
function parseCDATelecom(cdaTelecom) {
	var telecom = {};
	telecom[&apos;use&apos;] = cdaTelecom[&apos;@use&apos;].toString();
	telecom[&apos;type&apos;] = &quot;tel&quot;; 
	if (getArrayOrXmlLength(cdaTelecom[&apos;@value&apos;]) &gt; 0) {
		var telParts = cdaTelecom[&apos;@value&apos;].split(&apos;:&apos;);
		telecom[&apos;type&apos;] = telParts[0];	
		telecom[&apos;value&apos;] = telParts[1];
	}
	return telecom;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.8.0">
            <id>5d2a129c-da07-49cc-950c-d941a93cd271</id>
            <name>OBIB</name>
            <revision>5</revision>
            <lastModified>
              <time>1572641956778</time>
              <timezone>Canada/Pacific</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>e995ffe5-fe5f-4260-a385-98f81c8418fe</string>
              <string>b2f0c503-a881-4126-995e-844c3e7692fd</string>
              <string>f3a65b72-9187-42ef-88cd-1d7626887e2e</string>
              <string>2375f320-7fd5-48cd-b3bb-53c22dab182b</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.8.0">
                <id>0d5c946b-11fe-4dde-8c69-7d9296ea32a0</id>
                <name>Build Document Storage Message</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650189617</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Build a Document Storage Message.

	@param {String} locationId - Location / Clinic Id
	@param {String} documentId - Document Id
	@param {String} messageType - DOCUMENT, RESPONSE or ATTACHMENT
	@param {String} content - Content of the message / document
	@param {String} connectorVersion - OBBI Connector version
	@return {String} return the Document Storage Message JSON object
*/
function buildDocumentStorageMessage(locationId, documentId, messageType, messageContent, connectorVersion) {
	var storageMsg = {};
	storageMsg[&apos;locationId&apos;] = locationId;
	storageMsg[&apos;documentId&apos;] = documentId;
	storageMsg[&apos;messageType&apos;] = messageType;
	storageMsg[&apos;messageContent&apos;] = messageContent;
	storageMsg[&apos;obibVersion&apos;] = globalMap.get(&quot;obib.version&quot;);
	storageMsg[&apos;connectorVersion&apos;] = connectorVersion;
	return storageMsg;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>738d81a1-d04c-482e-a011-30c61a09b3d3</id>
                <name>Create Array of DocumentAttachment</name>
                <revision>2</revision>
                <lastModified>
                  <time>1570827114602</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Create an Array of DocumentAttachment objects from a JSON object

	@param {Object[]} jsonAttachments - 
	@return {DocumentAttachment[]} return the Array of DocumentAttachment
*/
function createDocumentAttachmentArray(jsonAttachments) {
	var attachments = [];
	if (jsonAttachments != null) {
		for (var i = 0; i &lt; jsonAttachments.length; i++) {
			var attachment = jsonAttachments[i];
			attachments.push(new Packages.ca.uvic.leadlab.cdxconnector.messages.submit.DocumentAttachment(
				attachment[&apos;mediaType&apos;],
				attachment[&apos;content&apos;],
				attachment[&apos;hash&apos;],
				attachment[&apos;hashAlgorithm&apos;],
				attachment[&apos;reference&apos;]));
		}
	}
	return attachments;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>bcd2a30d-111f-4fd3-9724-0e9a2e7dfe50</id>
                <name>Create DatabaseConnection</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650189859</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get the DatabaseConnection object

	@return {DatabaseConnection} return the DatabaseConnection object
*/
function getDBConnection() {
	var dataSource = globalMap.get(&quot;hikari_OBIB_DB&quot;);
	if (dataSource == null) {
		dataSource = new Packages.com.zaxxer.hikari.HikariDataSource();
		dataSource.setDriverClassName(globalMap.get(&quot;obib.db.driver&quot;));
		dataSource.setJdbcUrl(globalMap.get(&quot;obib.db.url&quot;));
		dataSource.setUsername(globalMap.get(&quot;obib.db.username&quot;));
		dataSource.setPassword(globalMap.get(&quot;obib.db.password&quot;));
		dataSource.setConnectionTimeout(0);
		dataSource.setAutoCommit(false);
		dataSource.setMaximumPoolSize(10);
		dataSource.setMinimumIdle(0);
		//dataSource.setReadOnly(readOnly);
		//dataSource.setConnectionTestQuery(&quot;SELECT 1&quot;);
		globalMap.put(&quot;hikari_OBIB_DB&quot;, dataSource);
	}
	if (dataSource != null) {
		return dataSource.getConnection();
	} else {
		throw &quot;Cannot create a new data source (connection pool).&quot;;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>60bfd3ac-552a-4d59-ac1d-48fbe4f430b2</id>
                <name>Create Error Message</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650189966</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Create JSON error message

	@param {String} error - Error message
	@param {Object} obibErrors - Associative Array of errors
	@return {String} return the JSON response
*/
function createErrorMessage(error, obibErrors) {
	// Filter cdxconnector messages
	if (error.includes(&apos;ca.uvic.leadlab.cdxconnector&apos;)) {
		error = error.split(/ca.uvic.leadlab.cdxconnector.*:/).pop();
	}
	
	return JSON.stringify({&apos;obibVersion&apos;: globalMap.get(&quot;obib.version&quot;), &apos;status&apos;: &apos;ERROR&apos;, &apos;message&apos;: error, &apos;obibErrors&apos;: obibErrors})
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>f1de696c-f547-49ae-8225-f7e40ed2c87c</id>
                <name>Create Segment Before</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650190249</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Create a new segment and insert it before the target segment.
	
	@param {String} name - The name of the segment to create.
	@param {String} segment - The existing segment that the new segment will be inserted before.
	@return {String} return The existing segment that the new segment will be inserted after.
*/
function createSegmentBefore(name, segment) {
	var msgObj = segment;
   	while (msgObj.parent() != undefined) { 
		msgObj = msgObj.parent(); 
	}
     msgObj.insertChildBefore(segment[0], new XML(&apos;&lt;&apos; + name + &apos;&gt;&lt;/&apos; + name + &apos;&gt;&apos;));
   	return msgObj.child(segment[0].childIndex() - 1);
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>b332b27e-5312-4517-a4ad-bad60b2642bf</id>
                <name>Evaluate XPath expression</name>
                <revision>29</revision>
                <lastModified>
                  <time>1573764879777</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Evaluates a XPath expression

	@param {Object} xml - xml being evaluated
	@param {String} expression - expression to be evaluated
	@return {String} &apos;true&apos; if the expression evaluates, otherwise &apos;false&apos;
*/
function evaluateXPath(xml, expression) {
	// clean namespace
	var xmlStr = xml.toString().replace(&apos;xmlns=&quot;urn:hl7-org:v3&quot;&apos;, &apos;&apos;);
	
	// evaluate the xpath using Java xml API
	var input = new Packages.org.xml.sax.InputSource(new Packages.java.io.StringReader(xmlStr));
	var xpath = Packages.javax.xml.xpath.XPathFactory.newInstance().newXPath();
	return xpath.evaluate(expression, input, Packages.javax.xml.xpath.XPathConstants.BOOLEAN).toString();
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>df99f17c-1947-469e-be81-78e90d657f4d</id>
                <name>Execute Database Query</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650190510</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a query on the database and returns a CachedRowSet.

	@param {String} query - The query to be executed.
	@return {String} return The result of the query, as a CachedRowSet.
*/
function executeCachedQuery(query) {
	var connection = getDBConnection();
	if (connection != null) {
		var statement = null;
		try {
			statement = connection.createStatement();
            	var result = statement.executeQuery(query);
            	var crs = new MirthCachedRowSet();
            	crs.populate(result);
            	if (result != null) {
            		Packages.org.apache.commons.dbutils.DbUtils.closeQuietly(result);
            	}
            	return crs;
		} catch(err) {
			throw err;
        	} finally {
        		if (statement != null) {
				Packages.org.apache.commons.dbutils.DbUtils.closeQuietly(statement);
        		}
        		if (connection != null) {
        			Packages.org.apache.commons.dbutils.DbUtils.closeQuietly(connection);
        		}
		}
	} else {
		throw &quot;Error: Cannot connect to the database&quot;;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>8512e74b-a53b-4a15-9718-fed25c0481ef</id>
                <name>Execute Database Update</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650190646</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes an INSERT/UPDATE on the database and returns the row count.

	@param {String} query - The statement to be executed.
	@return {Integer} return A count of the number of updated rows.
*/
function executeUpdate(query) {
	var connection = getDBConnection();
	if (connection != null) {
		var statement = null;
		try {
			connection.setAutoCommit(true);
			statement = connection.createStatement();
			if (statement.execute(query)) {
				return -1;
			} else {
				return statement.getUpdateCount();
			}
		} catch (err) {
			throw err;
		} finally {
			if (statement != null) {
				Packages.org.apache.commons.dbutils.DbUtils.closeQuietly(statement);
        		}
        		if (connection != null) {
        			Packages.org.apache.commons.dbutils.DbUtils.closeQuietly(connection);
        		}
		}
	} else {
		throw &quot;Error: Cannot connect to the database&quot;;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>be89bc64-f4bf-4ab3-954b-04088964eda6</id>
                <name>Handle Query Result Status</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650191035</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Handle the result status from a query message.

	@param {Object} queryResult - query result (&apos;tmp&apos; variable)
	@param {Object} queryMessage - query message (&apos;msg&apos; variable)
	@param {String} collection - collection returned by the result
	@return {Object} return The queryResult object with status and message.
*/
function handleQueryResultStatus(queryResult, queryMessage, collection) {
	if (queryResult[&apos;ackDetail&apos;][&apos;status&apos;] === &apos;OK&apos;) {
		queryResult[&apos;status&apos;] = &quot;SUCCESS&quot;;
	} else if (queryResult[&apos;ackDetail&apos;][&apos;status&apos;] === &apos;NF&apos;) {
		queryResult[&apos;status&apos;] = &quot;SUCCESS&quot;;

		queryResult[collection] = []; // ensure the result collection is empty.
	} else {
		queryResult[&apos;status&apos;] = &quot;ERROR&quot;;
		
		if (queryResult[&apos;ackDetail&apos;][&apos;status&apos;] === &apos;QE&apos;) {
			queryResult[&apos;message&apos;] = queryMessage[&apos;acknowledgement&apos;][&apos;acknowledgementDetail&apos;][&apos;text&apos;].toString()				
		} else {
			queryResult[&apos;message&apos;] = &apos;Unespected error. Ack response code: &apos; + queryResult[&apos;ackDetail&apos;][&apos;status&apos;];
		}
		
		logger.error(&apos;MessagId &apos; + queryResult[&apos;ackDetail&apos;][&apos;messageId&apos;] + &apos; returned the error: &apos; + queryResult[&apos;message&apos;] + &quot;&apos;&quot;);
	}
	return tmp;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>e83b8bbf-433a-4c3d-88a2-16f4132b38af</id>
                <name>Handle Return Message</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650191160</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Handle the return message creation.

	@param {Object} responseStatus - 
	@param {Object} responseStatusMessage - 
	@param {Object} responseMessage - 
	@param {Function} createMessage - Callback function responsible for creating and return the result message.
	@return {String} return the stringify json message
*/
function handleResponseMessage(responseStatus, responseStatusMessage, responseMessage, createMessage) {
	if (responseStatus === SENT) { // process only SENT messages
		var responseMessage = createMessage(); // get the result message
		responseMessage[&apos;obibVersion&apos;] = globalMap.get(&quot;obib.version&quot;); // add versioning
		return JSON.stringify(responseMessage); // Convert the json to string and return it
	} else if (responseStatus === ERROR) {
		throw &quot;Error Message: &apos;&quot; + responseStatusMessage.toString() 
			+ &quot;&apos;\n Original Message: &apos;&quot; + msg.toString() + &quot;&apos;&quot;;
	} else {
		throw &quot;Not able to handle the response code: &apos;&quot; + responseStatus 
		+ &quot;&apos; \n Error Message: &apos;&quot; + responseStatusMessage.toString() 
		+ &quot;&apos;\n Original Message: &apos;&quot; + msg.toString() + &quot;&apos;&quot;;
	}
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>dfd86988-26e1-4d97-b81d-fee49e303272</id>
                <name>Store OBIB Error</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650192000</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Store the error as an &apos;associative array&apos; in the channel map.
	To retrieve the array of errors use &apos;channelMap.get(&apos;obibErrors&apos;)&apos;

	@param {String} errorCode - the key of the associative array
	@param {String} errorMessage - the value of the associative array
*/
function storeOBIBError(errorCode, errorMessage) {
	var obibErrors = channelMap.get(&apos;obibErrors&apos;);
	if (obibErrors == null) {
		obibErrors = new Object();
	}
	obibErrors[errorCode] = errorMessage;
	channelMap.put(&apos;obibErrors&apos;, obibErrors);
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
        </codeTemplateLibraries>
      </exportData>
    </channel>
    <channel version="3.8.0">
      <id>2375f320-7fd5-48cd-b3bb-53c22dab182b</id>
      <nextMetaDataId>2</nextMetaDataId>
      <name>CDA Document Parser</name>
      <description>- Convert CDX documents to OBIB Json documents.</description>
      <revision>3</revision>
      <sourceConnector version="3.8.0">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.vm.VmReceiverProperties" version="3.8.0">
          <pluginProperties/>
          <sourceConnectorProperties version="3.8.0">
            <responseVariable>responseMessage</responseVariable>
            <respondAfterProcessing>true</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>1</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
        </properties>
        <transformer version="3.8.0">
          <elements/>
          <inboundTemplate encoding="base64"></inboundTemplate>
          <outboundTemplate encoding="base64"></outboundTemplate>
          <inboundDataType>HL7V3</inboundDataType>
          <outboundDataType>HL7V3</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.8.0">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.8.0">
              <stripNamespaces>false</stripNamespaces>
            </serializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.8.0">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </inboundProperties>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.8.0">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.8.0">
              <stripNamespaces>false</stripNamespaces>
            </serializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.8.0">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="3.8.0">
          <elements/>
        </filter>
        <transportName>Channel Reader</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="3.8.0">
          <metaDataId>1</metaDataId>
          <name>Parse CDA Document</name>
          <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.8.0">
            <pluginProperties/>
            <destinationConnectorProperties version="3.8.0">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <script>logger.debug(&quot;Parse CDA Document&quot;);

//logger.debug(&quot;CDA DOC: &quot; + XmlUtil.prettyPrint(connectorMessage.getRawData()));

responseMap.put(&apos;responseMessage&apos;, connectorMessage.getTransformedData());	</script>
          </properties>
          <transformer version="3.8.0">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.8.0">
                <name>Parse Header Attributes</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>try {
	// Document Header
	tmp[&apos;documentId&apos;] = msg[&apos;id&apos;][&apos;@extension&apos;].toString();
	
	tmp[&apos;template&apos;] = {};
	tmp[&apos;template&apos;][&apos;templateId&apos;] = msg[&apos;templateId&apos;][&apos;@root&apos;].toString();
	tmp[&apos;template&apos;][&apos;templateName&apos;] = msg[&apos;templateId&apos;][&apos;@assigningAuthorityName&apos;].toString();

	tmp[&apos;loinc&apos;] = {};
	tmp[&apos;loinc&apos;][&apos;loincCode&apos;] = msg[&apos;code&apos;][&apos;@code&apos;].toString();
	tmp[&apos;loinc&apos;][&apos;displayName&apos;] = msg[&apos;code&apos;][&apos;@displayName&apos;].toString();
	
	tmp[&apos;effectiveTime&apos;] = parseCDADateTime(msg[&apos;effectiveTime&apos;][&apos;@value&apos;].toString());
	
	tmp[&apos;title&apos;] = msg[&apos;title&apos;].toString();
	
	if (getArrayOrXmlLength(msg[&apos;versionNumber&apos;]) &gt; 0) {
		tmp[&apos;versionNumber&apos;] = msg[&apos;versionNumber&apos;][&apos;@value&apos;].toString();
	}
	
	if (getArrayOrXmlLength(msg[&apos;setId&apos;]) &gt; 0) {
		tmp[&apos;setId&apos;] = parseCDAId(msg[&apos;setId&apos;]);
	}
} catch(e) {
	logger.error(&quot;Error on &apos;Parse Header Attributes&apos;: &quot; + e);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.8.0">
                <name>Parse RecordTarget (Patient)</name>
                <sequenceNumber>1</sequenceNumber>
                <enabled>true</enabled>
                <script>try {
	// RecordTarget (Patient)
	var patientRole = msg[&apos;recordTarget&apos;][&apos;patientRole&apos;];
	
	var patient = {};
	
	patient[&apos;ids&apos;] = [];
	for (var i = 0; i &lt; getArrayOrXmlLength(patientRole[&apos;id&apos;]); i++) {
		patient[&apos;ids&apos;][i] = parseCDAId(patientRole[&apos;id&apos;][i]);
	}

	if (getArrayOrXmlLength(patientRole[&apos;addr&apos;]) &gt; 0) {
		patient[&apos;addresses&apos;] = [];
		for (var i = 0; i &lt; getArrayOrXmlLength(patientRole[&apos;addr&apos;]); i++) {
			patient[&apos;addresses&apos;][i] = parseCDAAddress(patientRole[&apos;addr&apos;][i]);
		}
	}

	if (getArrayOrXmlLength(patientRole[&apos;telecom&apos;]) &gt; 0) {
		patient[&apos;telecoms&apos;] = [];
		for (var i = 0; i &lt; getArrayOrXmlLength(patientRole[&apos;telecom&apos;]); i++) {
			patient[&apos;telecoms&apos;][i] = parseCDATelecom(patientRole[&apos;telecom&apos;][i]);
		}
	}
	
	patient[&apos;names&apos;] = [];
	for (var i = 0; i &lt; getArrayOrXmlLength(patientRole[&apos;patient&apos;][&apos;name&apos;]); i++) {
		patient[&apos;names&apos;][i] = parseCDAName(patientRole[&apos;patient&apos;][&apos;name&apos;][i]);
	}
	
	patient[&apos;genderCode&apos;] = patientRole[&apos;patient&apos;][&apos;administrativeGenderCode&apos;][&apos;@code&apos;].toString();
	
	patient[&apos;birthday&apos;] = parseCDADateTime(patientRole[&apos;patient&apos;][&apos;birthTime&apos;][&apos;@value&apos;].toString());
	
	tmp[&apos;patient&apos;] = patient;
} catch(e) {
	logger.error(&quot;Error on &apos;Parse RecordTarget (Patient)&apos;: &quot; + e);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.8.0">
                <name>Parse Authors</name>
                <sequenceNumber>2</sequenceNumber>
                <enabled>true</enabled>
                <script>try {
	// Authors
	tmp[&apos;authors&apos;] = [];
	for (var i = 0; i &lt; getArrayOrXmlLength(msg[&apos;author&apos;]); i++) {
		var author = {};
		
		author[&apos;time&apos;] = parseCDADateTime(msg[&apos;author&apos;][i][&apos;time&apos;][&apos;@value&apos;].toString());

		var assignedAuthor = msg[&apos;author&apos;][i][&apos;assignedAuthor&apos;];

		author[&apos;ids&apos;] = [];
		for (var j = 0; j &lt; getArrayOrXmlLength(assignedAuthor[&apos;id&apos;]); j++) {
			author[&apos;ids&apos;][j] = parseCDAId(assignedAuthor[&apos;id&apos;][j]);
		}

		if (getArrayOrXmlLength(assignedAuthor[&apos;addr&apos;]) &gt; 0) {
			author[&apos;addresses&apos;] = [];
			for (var j = 0; j &lt; getArrayOrXmlLength(assignedAuthor[&apos;addr&apos;]); j++) {
				author[&apos;addresses&apos;][j] = parseCDAAddress(assignedAuthor[&apos;addr&apos;][j]);
			}
		}
		
		if (getArrayOrXmlLength(assignedAuthor[&apos;telecom&apos;]) &gt; 0) {
			author[&apos;telecoms&apos;] = [];
			for (var j = 0; j &lt; getArrayOrXmlLength(assignedAuthor[&apos;telecom&apos;]); j++) {
				author[&apos;telecoms&apos;][j] = parseCDATelecom(assignedAuthor[&apos;telecom&apos;][j]);
			}
		}

		if (getArrayOrXmlLength(assignedAuthor[&apos;assignedAuthoringDevice&apos;]) &gt; 0) {
			var softwareName = assignedAuthor[&apos;assignedAuthoringDevice&apos;][&apos;softwareName&apos;];
			author[&apos;software&apos;] = {}
			author[&apos;software&apos;][&apos;name&apos;] = softwareName[&apos;@displayName&apos;].toString();
			author[&apos;software&apos;][&apos;code&apos;] = softwareName[&apos;@code&apos;].toString();
		} else {
			author[&apos;name&apos;] = parseCDAName(assignedAuthor[&apos;assignedPerson&apos;][&apos;name&apos;]);
		}
		
		tmp[&apos;authors&apos;][i] = author;
	}
} catch(e) {
	logger.error(&quot;Error on &apos;Parse Authors&apos;: &quot; + e);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.8.0">
                <name>Parse Information Recipients</name>
                <sequenceNumber>3</sequenceNumber>
                <enabled>true</enabled>
                <script>try {
	// Information Recipients
	tmp[&apos;recipients&apos;] = [];
	for (var i = 0; i &lt; getArrayOrXmlLength(msg[&apos;informationRecipient&apos;]); i++) {
		var recipient = {};
		
		recipient[&apos;typeCode&apos;] = msg[&apos;informationRecipient&apos;][i][&apos;@typeCode&apos;].toString()
		
		var intendedRecipient = msg[&apos;informationRecipient&apos;][i][&apos;intendedRecipient&apos;];

		recipient[&apos;ids&apos;] = [];
		for (var j = 0; j &lt; getArrayOrXmlLength(intendedRecipient[&apos;id&apos;]); j++) {
			recipient[&apos;ids&apos;][j] = parseCDAId(intendedRecipient[&apos;id&apos;][j]);
		}

		if (getArrayOrXmlLength(intendedRecipient[&apos;addr&apos;]) &gt; 0) {
			recipient[&apos;addresses&apos;] = [];
			for (var j = 0; j &lt; getArrayOrXmlLength(intendedRecipient[&apos;addr&apos;]); j++) {
				recipient[&apos;addresses&apos;][j] = parseCDAAddress(intendedRecipient[&apos;addr&apos;][j]);
			}
		}

		if (getArrayOrXmlLength(intendedRecipient[&apos;telecom&apos;]) &gt; 0) {
			recipient[&apos;telecoms&apos;] = [];
			for (var j = 0; j &lt; getArrayOrXmlLength(intendedRecipient[&apos;telecom&apos;]); j++) {
				recipient[&apos;telecoms&apos;][j] = parseCDATelecom(intendedRecipient[&apos;telecom&apos;][j]);
			}
		}

		recipient[&apos;name&apos;] = parseCDAName(intendedRecipient[&apos;informationRecipient&apos;][&apos;name&apos;]);
		
		// Received Organization
		if (getArrayOrXmlLength(intendedRecipient[&apos;receivedOrganization&apos;]) &gt; 0) {
			var organization = {};

			var receivedOrganization = intendedRecipient[&apos;receivedOrganization&apos;];
			
			organization[&apos;ids&apos;] = [];
			for (var j = 0; j &lt; getArrayOrXmlLength(receivedOrganization[&apos;id&apos;]); j++) {
				organization[&apos;ids&apos;][j] = parseCDAId(receivedOrganization[&apos;id&apos;][j]);
			}
			
			organization[&apos;name&apos;] = receivedOrganization[&apos;name&apos;].toString();
			
			recipient[&apos;receivedOrganization&apos;] = organization;
		}
		
		tmp[&apos;recipients&apos;][i] = recipient;
	}
} catch(e) {
	logger.error(&quot;Error on &apos;Parse Information Recipients&apos;: &quot; + e);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.8.0">
                <name>Parse Custodian</name>
                <sequenceNumber>4</sequenceNumber>
                <enabled>true</enabled>
                <script>try {
	// Custodian
	var custodian = {};

	var representedCustodian = msg[&apos;custodian&apos;][&apos;assignedCustodian&apos;][&apos;representedCustodianOrganization&apos;];

	custodian[&apos;id&apos;] = parseCDAId(representedCustodian[&apos;id&apos;]);

	custodian[&apos;name&apos;] = representedCustodian[&apos;name&apos;].toString();
	
	tmp[&apos;custodian&apos;] = custodian;
} catch(e) {
	logger.error(&quot;Error on &apos;Parse Custodian&apos;: &quot; + e);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.8.0">
                <name>Parse Data Enterer</name>
                <sequenceNumber>5</sequenceNumber>
                <enabled>true</enabled>
                <script>try {
	// Data Enterer
	if (getArrayOrXmlLength(msg[&apos;dataEnterer&apos;]) &gt; 0) {
		var dataEnterer = {};
		
		dataEnterer[&apos;time&apos;] = parseCDADateTime(msg[&apos;dataEnterer&apos;][&apos;time&apos;][&apos;@value&apos;].toString());

		var assignedEntity = msg[&apos;dataEnterer&apos;][&apos;assignedEntity&apos;];

		if (getArrayOrXmlLength(assignedEntity[&apos;id&apos;]) &gt; 0) {
			dataEnterer[&apos;id&apos;] = parseCDAId(assignedEntity[&apos;id&apos;]);
		}

		if (getArrayOrXmlLength(assignedEntity[&apos;addr&apos;]) &gt; 0) {
			dataEnterer[&apos;addresses&apos;] = [];
			for (var j = 0; j &lt; getArrayOrXmlLength(assignedEntity[&apos;addr&apos;]); j++) {
				dataEnterer[&apos;addresses&apos;][j] = parseCDAAddress(assignedEntity[&apos;addr&apos;][j]);
			}
		}
		
		if (getArrayOrXmlLength(assignedEntity[&apos;telecom&apos;]) &gt; 0) {
			dataEnterer[&apos;telecoms&apos;] = [];
			for (var j = 0; j &lt; getArrayOrXmlLength(assignedEntity[&apos;telecom&apos;]); j++) {
				dataEnterer[&apos;telecoms&apos;][j] = parseCDATelecom(assignedEntity[&apos;telecom&apos;][j]);
			}
		}

		if (getArrayOrXmlLength(assignedEntity[&apos;assignedPerson&apos;]) &gt; 0) {
			dataEnterer[&apos;name&apos;] = parseCDAName(assignedEntity[&apos;assignedPerson&apos;][&apos;name&apos;]);
		}
		
		tmp[&apos;dataEnterer&apos;] = dataEnterer;
	}
} catch(e) {
	logger.error(&quot;Error on &apos;Parse Data Enterer&apos;: &quot; + e);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.8.0">
                <name>Parse Authenticators</name>
                <sequenceNumber>6</sequenceNumber>
                <enabled>true</enabled>
                <script>// TODO Authenticators</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.8.0">
                <name>Parse Participants</name>
                <sequenceNumber>7</sequenceNumber>
                <enabled>true</enabled>
                <script>try {
	// Participants
	tmp[&apos;participants&apos;] = [];
	for (var i = 0; i &lt; getArrayOrXmlLength(msg[&apos;participant&apos;]); i++) {
		var participant = {};

		participant[&apos;typeCode&apos;] = msg[&apos;participant&apos;][i][&apos;@typeCode&apos;].toString();
		participant[&apos;functionCode&apos;] = msg[&apos;participant&apos;][i][&apos;functionCode&apos;][&apos;@code&apos;].toString();
		
		var associatedEntity = msg[&apos;participant&apos;][i][&apos;associatedEntity&apos;];

		participant[&apos;ids&apos;] = [];
		for (var j = 0; j &lt; getArrayOrXmlLength(associatedEntity[&apos;id&apos;]); j++) {
			participant[&apos;ids&apos;][j] = parseCDAId(associatedEntity[&apos;id&apos;][j]);
		}

		if (getArrayOrXmlLength(associatedEntity[&apos;addr&apos;]) &gt; 0) {
			participant[&apos;addresses&apos;] = [];
			for (var j = 0; j &lt; getArrayOrXmlLength(associatedEntity[&apos;addr&apos;]); j++) {
				participant[&apos;addresses&apos;][j] = parseCDAAddress(associatedEntity[&apos;addr&apos;][j]);
			}
		}

		if (getArrayOrXmlLength(associatedEntity[&apos;telecom&apos;]) &gt; 0) {
			participant[&apos;telecoms&apos;] = [];
			for (var j = 0; j &lt; getArrayOrXmlLength(associatedEntity[&apos;telecom&apos;]); j++) {
				participant[&apos;telecoms&apos;][j] = parseCDATelecom(associatedEntity[&apos;telecom&apos;][j]);
			}
		}
		
		participant[&apos;name&apos;] = parseCDAName(associatedEntity[&apos;associatedPerson&apos;][&apos;name&apos;]);

		tmp[&apos;participants&apos;][i] = participant;
	}
} catch(e) {
	logger.error(&quot;Error on &apos;Parse Participants&apos;: &quot; + e);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.8.0">
                <name>Parse Orders (inFulfillmentOf)</name>
                <sequenceNumber>8</sequenceNumber>
                <enabled>true</enabled>
                <script>try {
	// Orders
	tmp[&apos;orders&apos;] = [];
	for (var i = 0; i &lt; getArrayOrXmlLength(msg[&apos;inFulfillmentOf&apos;]); i++) {
		var order = {};

		var inFulfillmentOfOrder = msg[&apos;inFulfillmentOf&apos;][i][&apos;order&apos;];

		order[&apos;ids&apos;] = [];
		for (var j = 0; j &lt; getArrayOrXmlLength(inFulfillmentOfOrder[&apos;id&apos;]); j++) {
			order[&apos;ids&apos;][j] = parseCDAId(inFulfillmentOfOrder[&apos;id&apos;][j]);
		}

		if (getArrayOrXmlLength(inFulfillmentOfOrder[&apos;code&apos;]) &gt; 0) {
			order[&apos;statusCode&apos;] = inFulfillmentOfOrder[&apos;code&apos;][&apos;@code&apos;].toString();
		}

		tmp[&apos;orders&apos;][i] = order;
	}
} catch(e) {
	logger.error(&quot;Error on &apos;Parse Orders&apos;: &quot; + e);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.8.0">
                <name>Parse ServiceEvents (documentationOf)</name>
                <sequenceNumber>9</sequenceNumber>
                <enabled>true</enabled>
                <script>try {
	// ServiceEvents
	tmp[&apos;serviceEvents&apos;] = [];
	for (var i = 0; i &lt; getArrayOrXmlLength(msg[&apos;documentationOf&apos;]); i++) {
		var serviceEvent = {};

		var documentationOfServiceEvent = msg[&apos;documentationOf&apos;][i][&apos;serviceEvent&apos;];

		if (getArrayOrXmlLength(documentationOfServiceEvent.*::[&apos;statusCode&apos;]) &gt; 0) {
			serviceEvent[&apos;statusCode&apos;] = documentationOfServiceEvent.*::[&apos;statusCode&apos;][&apos;@code&apos;].toString();
		}

		if (getArrayOrXmlLength(documentationOfServiceEvent[&apos;effectiveTime&apos;]) &gt; 0) {
			serviceEvent[&apos;effectiveTime&apos;] = parseCDADateTime(documentationOfServiceEvent[&apos;effectiveTime&apos;][&apos;@value&apos;].toString());
		}

		// Performers
		serviceEvent[&apos;performers&apos;] = [];
		for (var j = 0; j &lt; getArrayOrXmlLength(documentationOfServiceEvent[&apos;performer&apos;]); j++) {
			var performer = {};

			performer[&apos;typeCode&apos;] = documentationOfServiceEvent[&apos;performer&apos;][j][&apos;@typeCode&apos;].toString()

			var assignedEntity = documentationOfServiceEvent[&apos;performer&apos;][j][&apos;assignedEntity&apos;];

			performer[&apos;code&apos;] = assignedEntity[&apos;code&apos;].toString();

			performer[&apos;ids&apos;] = [];
			for (var k = 0; k &lt; getArrayOrXmlLength(assignedEntity[&apos;id&apos;]); k++) {
				performer[&apos;ids&apos;][k] = parseCDAId(assignedEntity[&apos;id&apos;][k]);
			}

			if (getArrayOrXmlLength(assignedEntity[&apos;assignedPerson&apos;]) &gt; 0) {
				performer[&apos;name&apos;] = parseCDAName(assignedEntity[&apos;assignedPerson&apos;][&apos;name&apos;]);
			}

			if (getArrayOrXmlLength(assignedEntity[&apos;addr&apos;]) &gt; 0) {
				performer[&apos;addresses&apos;] = [];
				for (var k = 0; k &lt; getArrayOrXmlLength(assignedEntity[&apos;addr&apos;]); k++) {
					performer[&apos;addresses&apos;][k] = parseCDAAddress(assignedEntity[&apos;addr&apos;][k]);
				}
			}
			
			if (getArrayOrXmlLength(assignedEntity[&apos;telecom&apos;]) &gt; 0) {
				performer[&apos;telecoms&apos;] = [];
				for (var k = 0; k &lt; getArrayOrXmlLength(assignedEntity[&apos;telecom&apos;]); k++) {
					performer[&apos;telecoms&apos;][k] = parseCDATelecom(assignedEntity[&apos;telecom&apos;][k]);
				}
			}
			
			serviceEvent[&apos;performers&apos;][j] = performer;
		}
		
		tmp[&apos;serviceEvents&apos;][i] = serviceEvent;
	}
} catch(e) {
	logger.error(&quot;Error on &apos;Parse ServiceEvents&apos;: &quot; + e);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.8.0">
                <name>Parse ParentDocuments (relatedDocument)</name>
                <sequenceNumber>10</sequenceNumber>
                <enabled>true</enabled>
                <script>try {
	// ParentDocument
	tmp[&apos;parentDocuments&apos;] = [];
	for (var i = 0; i &lt; getArrayOrXmlLength(msg[&apos;relatedDocument&apos;]); i++) {
		var parentDocument = {};

		parentDocument[&apos;typeCode&apos;] = msg[&apos;relatedDocument&apos;][i][&apos;@typeCode&apos;].toString();
		
		var relatedParendDocument = msg[&apos;relatedDocument&apos;][i][&apos;parentDocument&apos;];

		parentDocument[&apos;id&apos;] = parseCDAId(relatedParendDocument[&apos;id&apos;]);

		if (getArrayOrXmlLength(relatedParendDocument[&apos;setId&apos;]) &gt; 0) {
			parentDocument[&apos;setId&apos;] = parseCDAId(relatedParendDocument[&apos;setId&apos;]);
		}

		if (getArrayOrXmlLength(relatedParendDocument[&apos;versionNumber&apos;]) &gt; 0) {
			parentDocument[&apos;versionNumber&apos;] = relatedParendDocument[&apos;versionNumber&apos;].toString();
		}

		if (getArrayOrXmlLength(relatedParendDocument[&apos;text&apos;]) &gt; 0) {
			parentDocument[&apos;mediaType&apos;] = relatedParendDocument[&apos;text&apos;][&apos;@mediaType&apos;].toString();
		}
				
		tmp[&apos;parentDocuments&apos;][i] = parentDocument;
	}
} catch(e) {
	logger.error(&quot;Error on &apos;Parse ParentDocuments&apos;: &quot; + e);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.8.0">
                <name>Parse Text</name>
                <sequenceNumber>11</sequenceNumber>
                <enabled>true</enabled>
                <script>try {
	// Text
	var text = msg[&apos;component&apos;][&apos;nonXMLBody&apos;][&apos;text&apos;];

	tmp[&apos;nonXMLBody&apos;] = {};
	tmp[&apos;nonXMLBody&apos;][&apos;mediaType&apos;] = text[&apos;@mediaType&apos;].toString();
	
	if (text[&apos;@representation&apos;] &amp;&amp; text[&apos;@representation&apos;].toString() === &apos;TXT&apos;) { 
		// Plain Text
		tmp[&apos;nonXMLBody&apos;][&apos;content&apos;] = text.toString();
	} else { 
		// Attachment reference
		tmp[&apos;nonXMLBody&apos;][&apos;content&apos;] = text[&apos;reference&apos;][&apos;@value&apos;].toString();
	}
} catch(e) {
	logger.error(&quot;Error on &apos;Parse Text&apos;: &quot; + e);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64">PD94bWwtc3R5bGVzaGVldCB0eXBlPSJ0ZXh0L3hzbCIgaHJlZj0iQ0RBLnhzbCI/PjxDbGluaWNh
bERvY3VtZW50IHhtbG5zPSJ1cm46aGw3LW9yZzp2MyIgeG1sbnM6eHNpPSJodHRwOi8vd3d3Lncz
Lm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeG1sbnM6bnMwPSJodHRwOi8vbWljcm9zb2Z0
LmNvbS9IZWFsdGhDYXJlL0hMNy8yWCIgeG1sbnM6YmNjZGE9InVybjpiY2NkYSIgeG1sbnM6eGFs
YW49Imh0dHA6Ly94bWwuYXBhY2hlLm9yZy94c2x0IiBjbGFzc0NvZGU9IkRPQ0NMSU4iIG1vb2RD
b2RlPSJFVk4iPjwhLS0mIzEzOwoJCQkJKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKiomIzEzOwoJCQkJQ0RBIEhlYWRlciAtIElIQSBMYWIvTWlj
cm8gVHJhbnNmb3JtJiMxMzsKCQkJCSoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqJiMxMzsKCQkJCS0tPjxyZWFsbUNvZGUgY29kZT0iQ0EtQkMi
IC8+PHR5cGVJZCByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xLjMiIGV4dGVuc2lvbj0iUE9DRF9I
RDAwMDA0MCIgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iSEw3IENEQSBSMiIgLz48dGVtcGxhdGVJ
ZCByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuMSIgYXNzaWduaW5nQXV0aG9yaXR5
TmFtZT0iR2VuZXJhbCBMYWIgUmVwb3J0IHRlbXBsYXRlIiAvPjxpZCByb290PSIyLjE2Ljg0MC4x
LjExMzg4My4zLjI3Ny4xMDAuMyIgZXh0ZW5zaW9uPSI0NGVjN2VjNC03NDc1LTRkMGMtODJkNC03
ZjJiYWQwZTJjZTkiIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkNEWCBDbGluaWNhbCBEb2N1bWVu
dCBJRCIgLz48Y29kZSBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42LjEiIGNvZGU9IjEx
NTAyLTIiIGNvZGVTeXN0ZW1OYW1lPSJMT0lOQyBDb2RlIiBkaXNwbGF5TmFtZT0iR2VuZXJhbCBM
YWIgUmVwb3J0IiAvPjx0aXRsZT5HZW5lcmFsIExhYiBSZXBvcnQ8L3RpdGxlPjwhLS1NZXNzYWdl
IERhdGVUaW1lIChNU0guNyktLT48ZWZmZWN0aXZlVGltZSB2YWx1ZT0iMjAxOTAxMjQxMTE0LTA4
MDAiIC8+PGNvbmZpZGVudGlhbGl0eUNvZGUgY29kZT0iTiIgY29kZVN5c3RlbT0iMi4xNi44NDAu
MS4xMTM4ODMuNS4yNSIgY29kZVN5c3RlbU5hbWU9IkNvbmZpZGVudGlhbGl0eSIgLz48bGFuZ3Vh
Z2VDb2RlIGNvZGU9ImVuLUNBIiAvPjwhLS0gPT09PSBQYXRpZW50IEluZm9ybWF0aW9uID09PT0g
LS0+PHJlY29yZFRhcmdldCB0eXBlQ29kZT0iUkNUIiBjb250ZXh0Q29udHJvbENvZGU9Ik9QIj48
cGF0aWVudFJvbGUgY2xhc3NDb2RlPSJQQVQiPjxpZCByb290PSIyLjE2Ljg0MC4xLjExMzg4My40
LjUwIiBleHRlbnNpb249Ijk2OTg2NDk3MjEiIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkJDIFBh
dGllbnQgSGVhbHRoIE51bWJlciIgLz48aWQgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcu
MS43MyIgZXh0ZW5zaW9uPSJBMDIxNzA3NjEiIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IklIQSBQ
YXRpZW50IEVNUiBOdW1iZXIiIC8+PGlkIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEu
NzEiIGV4dGVuc2lvbj0iVkowMDM2NTkzMyIgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iSUhBIFBh
dGllbnQgVW5pdCBOdW1iZXIiIC8+PGFkZHIgdXNlPSJIIj4mIzEzOwoxMjA4IEdvcm1seSBGcm9u
dCBTdDxkZWxpbWl0ZXIgLz48Y2l0eT5EdW5jYW48L2NpdHk+PHN0YXRlPkNBLUJDPC9zdGF0ZT48
cG9zdGFsQ29kZT5WOUwgMUw2PC9wb3N0YWxDb2RlPjwvYWRkcj48dGVsZWNvbSB1c2U9IkgiIHZh
bHVlPSJ0ZWw6MjUwLTgzMi01ODIwIiAvPjxwYXRpZW50IGNsYXNzQ29kZT0iUFNOIiBkZXRlcm1p
bmVyQ29kZT0iSU5TVEFOQ0UiPjxuYW1lIHVzZT0iTCI+PGZhbWlseT5JaGFzaGJhY2hlcjwvZmFt
aWx5PjxnaXZlbj5QbGlzPC9naXZlbj48L25hbWU+PGFkbWluaXN0cmF0aXZlR2VuZGVyQ29kZSBj
b2RlPSJGIiAvPjxiaXJ0aFRpbWUgdmFsdWU9IjE5MTgwNDE3IiAvPjwvcGF0aWVudD48L3BhdGll
bnRSb2xlPjwvcmVjb3JkVGFyZ2V0PjwhLS0gPT09PSBBdXRob3I6IFBlcnNvbiBhbmQvb3Igc29m
dHdhcmUgdGhhdCBjcmVhdGVkIHRoaXMgZG9jdW1lbnQgPT09PSAtLT48YXV0aG9yIHR5cGVDb2Rl
PSJBVVQiIGNvbnRleHRDb250cm9sQ29kZT0iT1AiPjx0aW1lIHZhbHVlPSIyMDE5MDEyNDAyMDAt
MDgwMCIgLz48YXNzaWduZWRBdXRob3IgY2xhc3NDb2RlPSJBU1NJR05FRCI+PGlkIHJvb3Q9IjIu
MTYuODQwLjEuMTEzODgzLjMuMjc3LjEuODEiIGV4dGVuc2lvbj0iODA1NTY2IiBhc3NpZ25pbmdB
dXRob3JpdHlOYW1lPSJJSEEgTWVzc2FnZSBOdW1iZXIiIC8+PGFzc2lnbmVkQXV0aG9yaW5nRGV2
aWNlIGNsYXNzQ29kZT0iREVWIiBkZXRlcm1pbmVyQ29kZT0iSU5TVEFOQ0UiPjxzb2Z0d2FyZU5h
bWUgY29kZT0iTEFCX0lIVkpIIiBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4x
LjEyIiBjb2RlU3lzdGVtTmFtZT0iSUhBIFNvZnR3YXJlIENvZGUiIGRpc3BsYXlOYW1lPSJJbnRl
cmlvciBIZWFsdGggTWVkaXRlY2giIC8+PC9hc3NpZ25lZEF1dGhvcmluZ0RldmljZT48L2Fzc2ln
bmVkQXV0aG9yPjwvYXV0aG9yPjwhLS0gID09PT0gQ3VzdG9kaWFuOiBvcmdhbml6YXRpb24gcmVz
cG9uc2libGUgZm9yIHRoaXMgZG9jdW1lbnQgPT09PSAtLT48Y3VzdG9kaWFuIHR5cGVDb2RlPSJD
U1QiPjxhc3NpZ25lZEN1c3RvZGlhbiBjbGFzc0NvZGU9IkFTU0lHTkVEIj48cmVwcmVzZW50ZWRD
dXN0b2RpYW5Pcmdhbml6YXRpb24gY2xhc3NDb2RlPSJPUkciIGRldGVybWluZXJDb2RlPSJJTlNU
QU5DRSI+PGlkIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEuNjIiIGV4dGVuc2lvbj0i
SUhWSkgiIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IklIQSBNZWRpdGVjaCBMb2NhdGlvbiBJZGVu
dGlmaWVyIiAvPjxuYW1lPkludGVyaW9yIEhlYWx0aCBBdXRob3JpdHk8L25hbWU+PC9yZXByZXNl
bnRlZEN1c3RvZGlhbk9yZ2FuaXphdGlvbj48L2Fzc2lnbmVkQ3VzdG9kaWFuPjwvY3VzdG9kaWFu
PjwhLS0gPT09PSBJbmZvcm1hdGlvbiBSZWNpcGllbnRzOiBQcm92aWRlcnMgd2hvIGhhdmUgcmVx
dWVzdGVkIGEgY29weSBvZiB0aGlzIGRvY3VtZW50ID09PT0gLS0+PGluZm9ybWF0aW9uUmVjaXBp
ZW50IHR5cGVDb2RlPSJQUkNQIj48aW50ZW5kZWRSZWNpcGllbnQgY2xhc3NDb2RlPSJBU1NJR05F
RCI+PGlkIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuNDAuMi4xMSIgZXh0ZW5zaW9uPSI2NzYx
NiIgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQkMgTVNQIFByb3ZpZGVyIExpY2Vuc2UgTnVtYmVy
IiAvPjxpZCByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xLjYxIiBleHRlbnNpb249IkhB
SE0iIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IklIQSBQcm92aWRlciBDb2RlOiBJSEEtTVQgUFZE
LUlEIiAvPjxpbmZvcm1hdGlvblJlY2lwaWVudCBjbGFzc0NvZGU9IlBTTiIgZGV0ZXJtaW5lckNv
ZGU9IklOU1RBTkNFIj48bmFtZSB1c2U9IkwiPjxmYW1pbHk+SGFobjwvZmFtaWx5PjxnaXZlbj5N
ZXJlZGl0aDwvZ2l2ZW4+PGdpdmVuPkU8L2dpdmVuPjwvbmFtZT48L2luZm9ybWF0aW9uUmVjaXBp
ZW50PjwvaW50ZW5kZWRSZWNpcGllbnQ+PC9pbmZvcm1hdGlvblJlY2lwaWVudD48aW5mb3JtYXRp
b25SZWNpcGllbnQgdHlwZUNvZGU9IlRSQyI+PGludGVuZGVkUmVjaXBpZW50IGNsYXNzQ29kZT0i
QVNTSUdORUQiPjxpZCByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjQwLjIuMTEiIGFzc2lnbmlu
Z0F1dGhvcml0eU5hbWU9IkJDIE1TUCBQcm92aWRlciBMaWNlbnNlIE51bWJlciIgbnVsbEZsYXZv
cj0iVU5LIiAvPjxpZCByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xLjYxIiBleHRlbnNp
b249IlBMSVNJSEFBIiBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJJSEEgUHJvdmlkZXIgQ29kZTog
SUhBLU1UIFBWRC1JRCIgLz48aW5mb3JtYXRpb25SZWNpcGllbnQgY2xhc3NDb2RlPSJQU04iIGRl
dGVybWluZXJDb2RlPSJJTlNUQU5DRSI+PG5hbWUgdXNlPSJMIj48cHJlZml4PkRyPC9wcmVmaXg+
PGZhbWlseT5QbGlzaWhkPC9mYW1pbHk+PGdpdmVuPkFhcm9uPC9naXZlbj48L25hbWU+PC9pbmZv
cm1hdGlvblJlY2lwaWVudD48L2ludGVuZGVkUmVjaXBpZW50PjwvaW5mb3JtYXRpb25SZWNpcGll
bnQ+PGluZm9ybWF0aW9uUmVjaXBpZW50IHR5cGVDb2RlPSJUUkMiPjxpbnRlbmRlZFJlY2lwaWVu
dCBjbGFzc0NvZGU9IkFTU0lHTkVEIj48aWQgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy40MC4y
LjExIiBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJCQyBNU1AgUHJvdmlkZXIgTGljZW5zZSBOdW1i
ZXIiIG51bGxGbGF2b3I9IlVOSyIgLz48aWQgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcu
MS42MSIgZXh0ZW5zaW9uPSJQTElTSUhEVSIgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iSUhBIFBy
b3ZpZGVyIENvZGU6IElIQS1NVCBQVkQtSUQiIC8+PGluZm9ybWF0aW9uUmVjaXBpZW50IGNsYXNz
Q29kZT0iUFNOIiBkZXRlcm1pbmVyQ29kZT0iSU5TVEFOQ0UiPjxuYW1lIHVzZT0iTCI+PHByZWZp
eD5EcjwvcHJlZml4PjxmYW1pbHk+UGxpc2loYTwvZmFtaWx5PjxnaXZlbj5EdXN0eTwvZ2l2ZW4+
PC9uYW1lPjwvaW5mb3JtYXRpb25SZWNpcGllbnQ+PC9pbnRlbmRlZFJlY2lwaWVudD48L2luZm9y
bWF0aW9uUmVjaXBpZW50PjxpbmZvcm1hdGlvblJlY2lwaWVudCB0eXBlQ29kZT0iVFJDIj48aW50
ZW5kZWRSZWNpcGllbnQgY2xhc3NDb2RlPSJBU1NJR05FRCI+PGlkIHJvb3Q9IjIuMTYuODQwLjEu
MTEzODgzLjMuNDAuMi4xMSIgZXh0ZW5zaW9uPSIxMTExNiIgYXNzaWduaW5nQXV0aG9yaXR5TmFt
ZT0iQkMgTVNQIFByb3ZpZGVyIExpY2Vuc2UgTnVtYmVyIiAvPjxpZCByb290PSIyLjE2Ljg0MC4x
LjExMzg4My4zLjI3Ny4xLjYxIiBleHRlbnNpb249IktJTlQ1IiBhc3NpZ25pbmdBdXRob3JpdHlO
YW1lPSJJSEEgUHJvdmlkZXIgQ29kZTogSUhBLU1UIFBWRC1JRCIgLz48aW5mb3JtYXRpb25SZWNp
cGllbnQgY2xhc3NDb2RlPSJQU04iIGRldGVybWluZXJDb2RlPSJJTlNUQU5DRSI+PG5hbWUgdXNl
PSJMIj48ZmFtaWx5Pktpbm5lZTwvZmFtaWx5PjxnaXZlbj5Ub2RkPC9naXZlbj48L25hbWU+PC9p
bmZvcm1hdGlvblJlY2lwaWVudD48L2ludGVuZGVkUmVjaXBpZW50PjwvaW5mb3JtYXRpb25SZWNp
cGllbnQ+PCEtLSA9PT09IFByaW1hcnkgcHJvdmlkZXI6IEZhbWlseSBwcm92aWRlciA9PT09IC0t
PjxwYXJ0aWNpcGFudCB0eXBlQ29kZT0iSU5EIiBjb250ZXh0Q29udHJvbENvZGU9Ik9QIj48ZnVu
Y3Rpb25Db2RlIGNvZGU9IlBDUCIgZGlzcGxheU5hbWU9IlByaW1hcnkgQ2FyZSBQaHlzaWNpYW4i
IGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjIuMjAuMy44NyIgY29kZVN5c3RlbU5hbWU9
IkhMN1BhcnRpY2lwYXRpb25GdW5jdGlvbiIgLz48YXNzb2NpYXRlZEVudGl0eSBjbGFzc0NvZGU9
IlBST1YiPjxpZCByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjQwLjIuMTEiIGFzc2lnbmluZ0F1
dGhvcml0eU5hbWU9IkJDIE1TUCBQcm92aWRlciBMaWNlbnNlIE51bWJlciIgbnVsbEZsYXZvcj0i
VU5LIiAvPjxpZCByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xLjYxIiBleHRlbnNpb249
IlBMSVNJSERVIiBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJJSEEgUHJvdmlkZXIgQ29kZTogSUhB
LU1UIFBWRC1JRCIgLz48YXNzb2NpYXRlZFBlcnNvbiBjbGFzc0NvZGU9IlBTTiIgZGV0ZXJtaW5l
ckNvZGU9IklOU1RBTkNFIj48bmFtZSB1c2U9IkwiPjxwcmVmaXg+RHI8L3ByZWZpeD48ZmFtaWx5
PlBsaXNpaGE8L2ZhbWlseT48Z2l2ZW4+RHVzdHk8L2dpdmVuPjwvbmFtZT48L2Fzc29jaWF0ZWRQ
ZXJzb24+PC9hc3NvY2lhdGVkRW50aXR5PjwvcGFydGljaXBhbnQ+PCEtLSA9PT09IE9yZGVyaW5n
IFBoeXNpY2lhbiA9PT09IC0tPjxwYXJ0aWNpcGFudCB0eXBlQ29kZT0iUkVGIiBjb250ZXh0Q29u
dHJvbENvZGU9Ik9QIj48ZnVuY3Rpb25Db2RlIGNvZGU9Ik9SRCIgZGlzcGxheU5hbWU9Ik9yZGVy
aW5nIFByb3ZpZGVyIiAvPjx0aW1lIHZhbHVlPSIyMDE5MDEyNDExMTQtMDgwMCIgLz48YXNzb2Np
YXRlZEVudGl0eSBjbGFzc0NvZGU9IlBST1YiPjxpZCByb290PSIyLjE2Ljg0MC4xLjExMzg4My4z
LjQwLjIuMTEiIGV4dGVuc2lvbj0iNjc2MTYiIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkJDIE1T
UCBQcm92aWRlciBMaWNlbnNlIE51bWJlciIgLz48aWQgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMu
My4yNzcuMS42MSIgZXh0ZW5zaW9uPSJIQUhNIiBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJJSEEg
UHJvdmlkZXIgQ29kZTogSUhBLU1UIFBWRC1JRCIgLz48YXNzb2NpYXRlZFBlcnNvbiBjbGFzc0Nv
ZGU9IlBTTiIgZGV0ZXJtaW5lckNvZGU9IklOU1RBTkNFIj48bmFtZSB1c2U9IkwiPjxmYW1pbHk+
SGFobjwvZmFtaWx5PjxnaXZlbj5NZXJlZGl0aDwvZ2l2ZW4+PGdpdmVuPkU8L2dpdmVuPjwvbmFt
ZT48L2Fzc29jaWF0ZWRQZXJzb24+PC9hc3NvY2lhdGVkRW50aXR5PjwvcGFydGljaXBhbnQ+PCEt
LSA9PT09IE9yZGVyIGluZm9ybWF0aW9uID09PT0gLS0+PGluRnVsZmlsbG1lbnRPZiB0eXBlQ29k
ZT0iRkxGUyI+PG9yZGVyIGNsYXNzQ29kZT0iRU5DIiBtb29kQ29kZT0iUlFPIj48aWQgcm9vdD0i
Mi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMS4yMiIgZXh0ZW5zaW9uPSJJSFZKSC0yMDE5MDEyNC0w
MDAyNzI3OCIgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iSUhBIE1lZGl0ZWNoIFJlcXVpc2l0aW9u
IE51bWJlciIgLz48Y29kZSBjb2RlPSJSRTpDTTpOIiBjb2RlU3lzdGVtTmFtZT0iT3JkZXIgU3Rh
dHVzIChPcmRlciBDb250cm9sWzpPcmRlciBTdGF0dXNdWzpSZXNwb25zZSBGbGFnXSkiIC8+PC9v
cmRlcj48L2luRnVsZmlsbG1lbnRPZj48aW5GdWxmaWxsbWVudE9mIHR5cGVDb2RlPSJGTEZTIj48
dGVtcGxhdGVJZCByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNiIgYXNzaWduaW5n
QXV0aG9yaXR5TmFtZT0iT3JkZXIgQ29tcG9uZW50IFRlbXBsYXRlIiAvPjxvcmRlciBjbGFzc0Nv
ZGU9IkVOQyIgbW9vZENvZGU9IlJRTyI+PCEtLSA9PT09IFVuaXF1ZSBPcmRlciBDb21wb25lbnQg
TnVtYmVyIChSZXF1aXNpdGlvbiMgKyBTcGVjaW1lbiMpIC0gQmVjYXVzZSB0aGVyZSBtYXkgYmUg
bXVsdGlwbGUgZG9jdW1lbnRzIHRoYXQgZWFjaCByZXByZXNlbnQgdGhlIGZ1bGZpbGxtZW50IG9m
IHBhcnQgb2YgYW4gb3JkZXIvcmVxdWlzaXRpb24uJiMxMzsKCQkJCQkJQW55IGluZnVsZmlsbG1l
bnRPZiBlbGVtZW50cyB3aXRoIHRoaXMgdGVtcGxhdGVJZCBtZWFuIHRoYXQgdGhlIGlkZW50aWZp
ZXIgdW5pcXVlbHkgaWRlbnRpZmllcyB0aGUgcGFydCwgbm90IHRoZSB3aG9sZS4gTGFiIHJlcXVp
c2l0aW9ucyBtYXkgY29udGFpbiB0ZXN0cyBmb3IgbXVsdGlwbGUgc3BlY2ltZW5zIGFuZCBlYWNo
IHNwZWNpbWVuIHdpbGwgJiMxMzsKCQkJCQkJY29tZSBhY3Jvc3MgYXMgYSBwYXJ0IG9mIHRoZSB3
aG9sZSBSZXF1aXNpdGlvbi4gPT09PSYjMTM7CgkJCQkJCS0tPjxpZCByb290PSIyLjE2Ljg0MC4x
LjExMzg4My4zLjI3Ny4xLjIyLjEiIGV4dGVuc2lvbj0iSUhWSkgtMjAxOTAxMjQtMDAwMjcyNzhf
X1BUMjQwMTpIMDAwMTNSIiBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJJSEEgT3JkZXIgQ29tcG9u
ZW50IE51bWJlciIgLz48L29yZGVyPjwvaW5GdWxmaWxsbWVudE9mPjwhLS0gPT09PSBTZXJ2aWNl
IEV2ZW50OiBQcm9jZWR1cmUgPT09PSAtLT48ZG9jdW1lbnRhdGlvbk9mIHR5cGVDb2RlPSJET0Mi
PjxzZXJ2aWNlRXZlbnQgY2xhc3NDb2RlPSJBQ1QiIG1vb2RDb2RlPSJFVk4iPjxjb2RlIG51bGxG
bGF2b3I9IlVOSyIgLz48IS0tT2JzZXJ2YXRpb24gRGF0ZSAoT0JSLjcpLS0+PGVmZmVjdGl2ZVRp
bWUgdmFsdWU9IjIwMTkwMTI0MDIwMC0wODAwIiAvPjxwZXJmb3JtZXIgdHlwZUNvZGU9IlBQUkYi
Pjxhc3NpZ25lZEVudGl0eSBjbGFzc0NvZGU9IkFTU0lHTkVEIj48aWQgcm9vdD0iMi4xNi44NDAu
MS4xMTM4ODMuMy40MC4yLjExIiBleHRlbnNpb249IjY3NjE2IiBhc3NpZ25pbmdBdXRob3JpdHlO
YW1lPSJCQyBNU1AgUHJvdmlkZXIgTGljZW5zZSBOdW1iZXIiIC8+PGlkIHJvb3Q9IjIuMTYuODQw
LjEuMTEzODgzLjMuMjc3LjEuNjEiIGV4dGVuc2lvbj0iSEFITSIgYXNzaWduaW5nQXV0aG9yaXR5
TmFtZT0iSUhBIFByb3ZpZGVyIENvZGU6IElIQS1NVCBQVkQtSUQiIC8+PGFzc2lnbmVkUGVyc29u
IGNsYXNzQ29kZT0iUFNOIiBkZXRlcm1pbmVyQ29kZT0iSU5TVEFOQ0UiPjxuYW1lIHVzZT0iTCI+
PGZhbWlseT5IYWhuPC9mYW1pbHk+PGdpdmVuPk1lcmVkaXRoPC9naXZlbj48Z2l2ZW4+RTwvZ2l2
ZW4+PC9uYW1lPjwvYXNzaWduZWRQZXJzb24+PC9hc3NpZ25lZEVudGl0eT48L3BlcmZvcm1lcj48
YmNjZGE6c3RhdHVzQ29kZSBjb2RlPSJjb21wbGV0ZWQiIC8+PC9zZXJ2aWNlRXZlbnQ+PC9kb2N1
bWVudGF0aW9uT2Y+PCEtLSA9PT09IFBhcmVudCBEb2N1bWVudDogSEw3IHYyIG1lc3NhZ2UgZnJv
bSBNZWRpdGVjaCA9PT09IC0tPjxyZWxhdGVkRG9jdW1lbnQgdHlwZUNvZGU9IlhGUk0iPjxwYXJl
bnREb2N1bWVudCBjbGFzc0NvZGU9IkRPQ0NMSU4iIG1vb2RDb2RlPSJFVk4iPjxpZCByb290PSIy
LjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xLjgxIiBleHRlbnNpb249IjgwNTU2NiIgYXNzaWduaW5n
QXV0aG9yaXR5TmFtZT0iSUhBIE1lc3NhZ2UgTnVtYmVyIiAvPjwvcGFyZW50RG9jdW1lbnQ+PC9y
ZWxhdGVkRG9jdW1lbnQ+PCEtLSA9PT09IEVuY29tcGFzc2luZyBFbmNvdW50ZXI6IFBhdGllbnQg
VmlzaXQgPT09PSAtLT48Y29tcG9uZW50T2YgdHlwZUNvZGU9IkNPTVAiPjwhLS1QYXRpZW50IEFj
Y291bnQgTnVtYmVyIChQSURfMTgpLS0+PGVuY29tcGFzc2luZ0VuY291bnRlciBjbGFzc0NvZGU9
IkVOQyIgbW9vZENvZGU9IkVWTiI+PGlkIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEu
NzIiIGV4dGVuc2lvbj0iVkowNTUxNzQ3LzE4IiBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJJSEEg
UGF0aWVudCBBY2NvdW50IE51bWJlciIgLz48IS0tRW5jb3VudGVyIGhhcyBhbiBhZG1pc3Npb24g
ZGF0ZSBvbmx5LS0+PGVmZmVjdGl2ZVRpbWUgdmFsdWU9IjIwMTgwMjE1MTAzNi0wODAwIiAvPjxl
bmNvdW50ZXJQYXJ0aWNpcGFudCB0eXBlQ29kZT0iQVRORCI+PGFzc2lnbmVkRW50aXR5IGNsYXNz
Q29kZT0iQVNTSUdORUQiPjxpZCByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjQwLjIuMTEiIGV4
dGVuc2lvbj0iNjc2MTYiIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkJDIE1TUCBQcm92aWRlciBM
aWNlbnNlIE51bWJlciIgLz48aWQgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMS42MSIg
ZXh0ZW5zaW9uPSJIQUhNIiBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJJSEEgUHJvdmlkZXIgQ29k
ZTogSUhBLU1UIFBWRC1JRCIgLz48YXNzaWduZWRQZXJzb24gY2xhc3NDb2RlPSJQU04iIGRldGVy
bWluZXJDb2RlPSJJTlNUQU5DRSI+PG5hbWUgdXNlPSJMIj48ZmFtaWx5PkhhaG48L2ZhbWlseT48
Z2l2ZW4+TWVyZWRpdGg8L2dpdmVuPjxnaXZlbj5FPC9naXZlbj48L25hbWU+PC9hc3NpZ25lZFBl
cnNvbj48L2Fzc2lnbmVkRW50aXR5PjwvZW5jb3VudGVyUGFydGljaXBhbnQ+PGVuY291bnRlclBh
cnRpY2lwYW50IHR5cGVDb2RlPSJDT04iPjxhc3NpZ25lZEVudGl0eSBjbGFzc0NvZGU9IkFTU0lH
TkVEIj48aWQgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy40MC4yLjExIiBhc3NpZ25pbmdBdXRo
b3JpdHlOYW1lPSJCQyBNU1AgUHJvdmlkZXIgTGljZW5zZSBOdW1iZXIiIG51bGxGbGF2b3I9IlVO
SyIgLz48aWQgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMS42MSIgZXh0ZW5zaW9uPSJQ
TElTSUhBQSIgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iSUhBIFByb3ZpZGVyIENvZGU6IElIQS1N
VCBQVkQtSUQiIC8+PGFzc2lnbmVkUGVyc29uIGNsYXNzQ29kZT0iUFNOIiBkZXRlcm1pbmVyQ29k
ZT0iSU5TVEFOQ0UiPjxuYW1lIHVzZT0iTCI+PHByZWZpeD5EcjwvcHJlZml4PjxmYW1pbHk+UGxp
c2loZDwvZmFtaWx5PjxnaXZlbj5BYXJvbjwvZ2l2ZW4+PC9uYW1lPjwvYXNzaWduZWRQZXJzb24+
PC9hc3NpZ25lZEVudGl0eT48L2VuY291bnRlclBhcnRpY2lwYW50Pjxsb2NhdGlvbj48aGVhbHRo
Q2FyZUZhY2lsaXR5IGNsYXNzQ29kZT0iU0RMT0MiPjxpZCByb290PSIyLjE2Ljg0MC4xLjExMzg4
My4zLjI3Ny4xLjYyIiBleHRlbnNpb249IklIVkpIIiBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJJ
SEEgTWVkaXRlY2ggTG9jYXRpb24gSWRlbnRpZmllciIgLz48IS0tY29kZSByZXByZXNlbnRzIHRo
ZSBwYXRpZW50IGxvY2F0aW9uLCBpbiB0aGUgZm9ybSAiUHQuVHlwZTpVbml0WzpSb29tWzpCZWRd
XSItLT48Y29kZSBjb2RlPSJSRUY6VkVSVkpITEIiIGNvZGVTeXN0ZW1OYW1lPSJQYXRpZW50IFR5
cGU6VW5pdCIgLz48L2hlYWx0aENhcmVGYWNpbGl0eT48L2xvY2F0aW9uPjwvZW5jb21wYXNzaW5n
RW5jb3VudGVyPjwvY29tcG9uZW50T2Y+PCEtLSAmIzEzOwoJCQkJKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiomIzEzOwoJCQkJQ0RBIEJvZHk6
IExldmVsIDMgLSBEaXNjcmV0ZSBMYWIgUmVzdWx0cyAgJiMxMzsKCQkJCSoqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqJiMxMzsKCQkJLS0+PGNv
bXBvbmVudCB0eXBlQ29kZT0iQ09NUCI+PHN0cnVjdHVyZWRCb2R5IGNsYXNzQ29kZT0iRE9DQk9E
WSIgbW9vZENvZGU9IkVWTiI+PGNvbXBvbmVudCB0eXBlQ29kZT0iQ09NUCI+PHNlY3Rpb24gY2xh
c3NDb2RlPSJET0NTRUNUIiBtb29kQ29kZT0iRVZOIj48dGVtcGxhdGVJZCByb290PSIxLjMuNi4x
LjQuMS4xOTM3Ni4xLjMuMy4yLjEiIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkxhYm9yYXRvcnkg
U3BlY2lhbHR5IFNlY3Rpb24iIC8+PGNvZGUgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMu
Ni4xIiBjb2RlU3lzdGVtTmFtZT0iTE9JTkMgQ29kZSIgY29kZT0iMjY0MzYtNiIgZGlzcGxheU5h
bWU9IkxhYm9yYXRvcnkgU3R1ZGllcyIgLz48dGl0bGU+TGFib3JhdG9yeSBTdHVkaWVzPC90aXRs
ZT48Y29tcG9uZW50IHR5cGVDb2RlPSJDT01QIj48c2VjdGlvbiBjbGFzc0NvZGU9IkRPQ1NFQ1Qi
IG1vb2RDb2RlPSJFVk4iPjx0ZW1wbGF0ZUlkIHJvb3Q9IjEuMy42LjEuNC4xLjE5Mzc2LjEuMy4z
LjIuMiIgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iTGFib3JhdG9yeSBSZXBvcnQgSXRlbSBTZWN0
aW9uIiAvPjxjb2RlIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjIuMjAuNS4xIiBjb2Rl
U3lzdGVtTmFtZT0icENMT0NEIiBjb2RlPSJYWFgtMTMzOSIgZGlzcGxheU5hbWU9Ik1hbGFyaWEg
UGFuZWwiIC8+PCEtLSA9PT09IERlcml2ZWQgVGV4dCBSZXByZXNlbnRhdGlvbiBvZiBEaXNjcmV0
ZSBMYWIgUmVzdWx0cyA9PT09IC0tPjx0aXRsZT5NYWxhcmlhIFBhbmVsPC90aXRsZT48dGV4dD48
dGFibGU+PGNhcHRpb24+U3BlY2ltZW4gSW5mb3JtYXRpb248L2NhcHRpb24+PHRib2R5Pjx0cj48
dGg+U3BlY2ltZW4gIzo8L3RoPjx0ZD5QVDI0MDE6SDAwMDEzUjwvdGQ+PC90cj48dHI+PHRoPkNv
bGxlY3RlZDo8L3RoPjx0ZD4yNC9KYW4vMjAxOSAwMjowMCBQU1Q8L3RkPjwvdHI+PHRyPjx0aD5S
ZWNlaXZlZDo8L3RoPjx0ZD4yNC9KYW4vMjAxOSAxMToxMyBQU1Q8L3RkPjwvdHI+PHRyPjx0aD5S
ZXF1aXNpdGlvbiAjOjwvdGg+PHRkPklIVkpILTIwMTkwMTI0LTAwMDI3Mjc4PC90ZD48L3RyPjwv
dGJvZHk+PC90YWJsZT48YnIgLz48dGFibGU+PGNhcHRpb24+WFhYLTEzMzkgTWFsYXJpYSBQYW5l
bDwvY2FwdGlvbj48dGJvZHk+PHRyPjx0aD5UZXN0IElEOjwvdGg+PHRoPlRlc3QgTmFtZTo8L3Ro
Pjx0aD5UZXN0IFJlc3VsdDo8L3RoPjx0aD5SZXN1bHQgRmxhZ3M6PC90aD48dGg+UmVmZXJlbmNl
IFJhbmdlOjwvdGg+PHRoPlJlc3VsdCBVbml0czo8L3RoPjx0aD5UaW1lIFJlc3VsdGVkOjwvdGg+
PHRoPlN0YXR1czo8L3RoPjwvdHI+PCEtLSAxIC0gTWFsYXJpYSBOQVQgLS0+PHRyIElEPSJwMzEy
LjAxMTBfMS0xIj48dGQ+MzEyLjAxMTA8L3RkPjx0ZD5NYWxhcmlhIE5BVDwvdGQ+PHRkPk5lZ2F0
aXZlPC90ZD48dGQgLz48dGQ+TmVnYXRpdmU8L3RkPjx0ZCAvPjx0ZD4yNC9KYW4vMjAxOSAxMTox
NCBQU1Q8L3RkPjx0ZD48Y29udGVudD5jb21wbGV0ZWQ8L2NvbnRlbnQ+PC90ZD48L3RyPjx0cj48
dGQgY29sc3Bhbj0iMiIgLz48dGQgY29sc3Bhbj0iOSI+PGNvbnRlbnQgc3R5bGVDb2RlPSJCb2xk
Ij5PYnNlcnZhdGlvbiBOb3Rlczo8L2NvbnRlbnQ+PGJyIC8+TWFsYXJpYSBpcyBuZWdhdGl2ZSBi
eSBtb2xlY3VsYXIgbWV0aG9kLjxiciAvPk5vIGZ1cnRoZXIgdGVzdGluZyB0byBiZSBwZXJmb3Jt
ZWQuPGJyIC8+PC90ZD48L3RyPjwvdGJvZHk+PC90YWJsZT48YnIgLz48YnIgLz48dGFibGU+PHRi
b2R5Pjx0cj48dGg+UmVzdWx0IEZsYWdzIExlZ2VuZDo8L3RoPjx0ZD48Y29udGVudD5OPC9jb250
ZW50PjxiciAvPjxjb250ZW50IHN0eWxlQ29kZT0iYWxlcnQiPkg8L2NvbnRlbnQ+Lzxjb250ZW50
IHN0eWxlQ29kZT0iYWxlcnQiPkw8L2NvbnRlbnQ+Lzxjb250ZW50IHN0eWxlQ29kZT0iYWxlcnQi
PkE8L2NvbnRlbnQ+PGJyIC8+PGNvbnRlbnQgc3R5bGVDb2RlPSJhbGVydCI+SEg8L2NvbnRlbnQ+
Lzxjb250ZW50IHN0eWxlQ29kZT0iYWxlcnQiPkxMPC9jb250ZW50Pi88Y29udGVudCBzdHlsZUNv
ZGU9ImFsZXJ0Ij5BQTwvY29udGVudD48L3RkPjx0ZD5Ob3JtYWw8YnIgLz5BYm5vcm1hbCBWYWx1
ZTxiciAvPkNyaXRpY2FsIFZhbHVlPC90ZD48L3RyPjx0cj48dGg+UGVyZm9ybWluZyBMYWI6PC90
aD48dGQgY29sc3Bhbj0iMiI+SUhLR0ggLSBLZWxvd25hIEdlbmVyYWwgSG9zcDwvdGQ+PC90cj48
dHI+PHRoPkNvbGxlY3RpbmcgTGFiOjwvdGg+PHRkIGNvbHNwYW49IjIiPklIVkpIIC0gSW50ZXJp
b3IgSGVhbHRoIEF1dGhvcml0eTwvdGQ+PC90cj48dHI+PHRoPlJlcG9ydCBTdGF0dXM6PC90aD48
dGQgY29sc3Bhbj0iMiI+Y29tcGxldGVkPC90ZD48L3RyPjwvdGJvZHk+PC90YWJsZT48Zm9vdG5v
dGU+PGJyIC8+PGJyIC8+PHBhcmFncmFwaD48Y29udGVudCBzdHlsZUNvZGU9IkJvbGQiPklOUVVJ
UklFUyAtIDwvY29udGVudD5QbGVhc2UgZGlyZWN0IGFsbCBpbnF1aXJpZXMgdG8gdGhlIENvbGxl
Y3RpbmcgTGFiLjwvcGFyYWdyYXBoPjxwYXJhZ3JhcGg+PGNvbnRlbnQgc3R5bGVDb2RlPSJCb2xk
Ij5DT05GSURFTlRJQUwgLSA8L2NvbnRlbnQ+VGhpcyBjbGluaWNhbCBkb2N1bWVudCBjb250YWlu
cyBjb25maWRlbnRpYWwgcGVyc29uYWwgaW5mb3JtYXRpb24gYW5kIGlzIGZvciBkaXJlY3QgY2Fy
ZSBwdXJwb3NlcyBvbmx5LiAgUGxlYXNlIHVzZSwgY29weSBhbmQgc2hhcmUgd2l0aCBhdXRob3Jp
emVkIGluZGl2aWR1YWxzIG9ubHkuPC9wYXJhZ3JhcGg+PHBhcmFncmFwaD48Y29udGVudCBzdHls
ZUNvZGU9IkNlbnRlciI+KioqIElmIHJlY2VpdmVkIGluIGVycm9yIGNhbGwgSUggSW5mb3JtYXRp
b24gUHJpdmFjeSAmYW1wO2FtcDsgU2VjdXJpdHkgdG9sbCBmcmVlIGF0IDEtODU1LTk4MC01MDIw
ICoqKjwvY29udGVudD48L3BhcmFncmFwaD48cGFyYWdyYXBoPjxjb250ZW50IHN0eWxlQ29kZT0i
Qm9sZCI+RU5EIE9GIFJFUE9SVDwvY29udGVudD48L3BhcmFncmFwaD48L2Zvb3Rub3RlPjwvdGV4
dD48IS0tID09PT0gTWFjaGluZSBSZWFkYWJsZSBITDcgVjMgUmVwcmVzZW50YXRpb24gb2YgRGlz
Y3JldGUgTGFiIFJlc3VsdHMgPT09PSAtLT48ZW50cnkgdHlwZUNvZGU9IkRSSVYiPjx0ZW1wbGF0
ZUlkIHJvb3Q9IjEuMy42LjEuNC4xLjE5Mzc2LjEuMy4xIiBhc3NpZ25pbmdBdXRob3JpdHlOYW1l
PSJMYWJvcmF0b3J5IFJlcG9ydCBEYXRhIFByb2Nlc3NpbmcgRW50cnkiIC8+PGFjdCBjbGFzc0Nv
ZGU9IkFDVCIgbW9vZENvZGU9IkVWTiI+PGNvZGUgbnVsbEZsYXZvcj0iTkEiIC8+PHN0YXR1c0Nv
ZGUgY29kZT0iY29tcGxldGVkIiAvPjwhLS1TcGVjaW1lbiBDb2xsZWN0aW9uOiBQVDI0MDE6SDAw
MDEzUi0tPjxlbnRyeVJlbGF0aW9uc2hpcCB0eXBlQ29kZT0iQ09NUCI+PHByb2NlZHVyZSBjbGFz
c0NvZGU9IlBST0MiIG1vb2RDb2RlPSJFVk4iPjx0ZW1wbGF0ZUlkIHJvb3Q9IjEuMy42LjEuNC4x
LjE5Mzc2LjEuMy4xLjIiIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IlNwZWNpbWVuIENvbGxlY3Rp
b24iIC8+PGNvZGUgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi4xIiBjb2RlU3lzdGVt
TmFtZT0iTE9JTkMgQ29kZSIgY29kZT0iMzM4ODItMiIgZGlzcGxheU5hbWU9IlNwZWNpbWVuIENv
bGxlY3Rpb24iIC8+PCEtLVNwZWNpbWVuIENvbGxlY3RlZCBEYXRlVGltZSAoT0JSLjcpLS0+PGVm
ZmVjdGl2ZVRpbWUgdmFsdWU9IjIwMTkwMTI0MDIwMC0wODAwIiAvPjwhLS1UYXJnZXQgU2l0ZSBm
cm9tIE9CUi4xNS0tPjwhLS1TcGVjaW1lbiBOdW1iZXIgKE9CUi4zKS0tPjxwYXJ0aWNpcGFudCB0
eXBlQ29kZT0iUFJEIj48cGFydGljaXBhbnRSb2xlIGNsYXNzQ29kZT0iU1BFQyI+PGlkIHJvb3Q9
IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEuMTEiIGV4dGVuc2lvbj0iUFQyNDAxOkgwMDAxM1Ii
IGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IklIQSBNZWRpdGVjaCBTcGVjaW1lbiBOdW1iZXIiIC8+
PHBsYXlpbmdFbnRpdHk+PGNvZGUgbnVsbEZsYXZvcj0iVU5LIiAvPjwvcGxheWluZ0VudGl0eT48
L3BhcnRpY2lwYW50Um9sZT48L3BhcnRpY2lwYW50PjwhLS1TcGVjaW1lbiBSZWNlaXZlZCBEYXRl
VGltZSAoT0JSLjE0KS0tPjxlbnRyeVJlbGF0aW9uc2hpcCB0eXBlQ29kZT0iQ09NUCI+PGFjdCBj
bGFzc0NvZGU9IkFDVCIgbW9vZENvZGU9IkVWTiI+PHRlbXBsYXRlSWQgcm9vdD0iMS4zLjYuMS40
LjEuMTkzNzYuMS4zLjEuMyIgLz48Y29kZSBjb2RlPSJTUFJFQ0VJVkUiIGNvZGVTeXN0ZW09IjEu
My41LjEuNC4xLjE5Mzc2LjEuNS4zLjIiIGNvZGVTeXN0ZW1OYW1lPSJJSEVBY3RDb2RlIiAvPjwh
LS1PQlIuMTQgU3BlY2ltZW4gRGF0ZSBSZWNlaXZlZC0tPjxlZmZlY3RpdmVUaW1lIHZhbHVlPSIy
MDE5MDEyNDExMTMtMDgwMCIgLz48L2FjdD48L2VudHJ5UmVsYXRpb25zaGlwPjwvcHJvY2VkdXJl
PjwvZW50cnlSZWxhdGlvbnNoaXA+PCEtLSBCYXR0ZXJ5OiBNYWxhcmlhIFBhbmVsIC0tPjxlbnRy
eVJlbGF0aW9uc2hpcCB0eXBlQ29kZT0iQ09NUCI+PG9yZ2FuaXplciBjbGFzc0NvZGU9IkJBVFRF
UlkiIG1vb2RDb2RlPSJFVk4iPjx0ZW1wbGF0ZUlkIHJvb3Q9IjEuMy42LjEuNC4xLjE5Mzc2LjEu
My4xLjQiIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkxhYm9yYXRvcnkgQmF0dGVyeSBPcmdhbml6
ZXIiIC8+PGlkIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEuMTEiIGV4dGVuc2lvbj0i
UFQyNDAxOkgwMDAxM1IiIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IklIQSBNZWRpdGVjaCBTcGVj
aW1lbiBOdW1iZXIiIC8+PGNvZGUgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuMi4yMC41
LjEiIGNvZGVTeXN0ZW1OYW1lPSJwQ0xPQ0QiIGNvZGU9IlhYWC0xMzM5IiBkaXNwbGF5TmFtZT0i
TWFsYXJpYSBQYW5lbCIgLz48c3RhdHVzQ29kZSBjb2RlPSJjb21wbGV0ZWQiIC8+PCEtLVJlc3Vs
dHMgQ29tcG9zZWQgRGF0ZVRpbWUgKE9CUi4yMiktLT48ZWZmZWN0aXZlVGltZSB2YWx1ZT0iMjAx
OTAxMjQxMTE0LTA4MDAiIC8+PCEtLSAxIC0gTWFsYXJpYSBOQVQgLS0+PGNvbXBvbmVudCB0eXBl
Q29kZT0iQ09NUCI+PG9ic2VydmF0aW9uIGNsYXNzQ29kZT0iT0JTIiBtb29kQ29kZT0iRVZOIj48
dGVtcGxhdGVJZCByb290PSIxLjMuNi4xLjQuMS4xOTM3Ni4xLjMuMS42IiBhc3NpZ25pbmdBdXRo
b3JpdHlOYW1lPSJMYWJvcmF0b3J5IE9ic2VydmF0aW9uIiAvPjxjb2RlIGNvZGVTeXN0ZW09IjIu
MTYuODQwLjEuMTEzODgzLjIuMjAuNS4xIiBjb2RlU3lzdGVtTmFtZT0icENMT0NEIiBjb2RlPSIz
MTIuMDExMCIgZGlzcGxheU5hbWU9Ik1hbGFyaWEgTkFUIiAvPjxzdGF0dXNDb2RlIGNvZGU9ImNv
bXBsZXRlZCIgLz48IS0tUmVzdWx0ZWQgRGF0ZVRpbWUgKE9CWC4xNCktLT48ZWZmZWN0aXZlVGlt
ZSB2YWx1ZT0iMjAxOTAxMjQxMTE0LTA4MDAiIC8+PHZhbHVlIG1lZGlhVHlwZT0idGV4dC9wbGFp
biIgcmVwcmVzZW50YXRpb249IlRYVCIgeHNpOnR5cGU9IlNUIj5OZWdhdGl2ZTwvdmFsdWU+PHBl
cmZvcm1lciB0eXBlQ29kZT0iUFJGIj48YXNzaWduZWRFbnRpdHkgY2xhc3NDb2RlPSJBU1NJR05F
RCI+PGlkIG51bGxGbGF2b3I9Ik5JIiAvPjxyZXByZXNlbnRlZE9yZ2FuaXphdGlvbiBjbGFzc0Nv
ZGU9Ik9SRyIgZGV0ZXJtaW5lckNvZGU9IklOU1RBTkNFIj48aWQgcm9vdD0iMi4xNi44NDAuMS4x
MTM4ODMuMy4yNzcuMS42MiIgZXh0ZW5zaW9uPSJJSEtHSCIgYXNzaWduaW5nQXV0aG9yaXR5TmFt
ZT0iSUhBIExhYiBQcm92aWRlciIgLz48bmFtZT5LZWxvd25hIEdlbmVyYWwgSG9zcDwvbmFtZT48
L3JlcHJlc2VudGVkT3JnYW5pemF0aW9uPjwvYXNzaWduZWRFbnRpdHk+PC9wZXJmb3JtZXI+PGVu
dHJ5UmVsYXRpb25zaGlwIHR5cGVDb2RlPSJDT01QIj48YWN0IGNsYXNzQ29kZT0iQUNUIiBtb29k
Q29kZT0iRVZOIj48dGVtcGxhdGVJZCByb290PSIxLjMuNi4xLjQuMS4xOTM3Ni4xLjUuMy4xLjQu
MiIgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQW5ub3RhdGlvbiBDb21tZW50IiAvPjxjb2RlIGNv
ZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuMSIgY29kZVN5c3RlbU5hbWU9IkxPSU5DIENv
ZGUiIGNvZGU9IjQ4NzY3LTgiIGRpc3BsYXlOYW1lPSJBbm5vdGF0aW9uIENvbW1lbnQiIC8+PHRl
eHQ+TWFsYXJpYSBpcyBuZWdhdGl2ZSBieSBtb2xlY3VsYXIgbWV0aG9kLiYjMTM7CgkJCU5vIGZ1
cnRoZXIgdGVzdGluZyB0byBiZSBwZXJmb3JtZWQuPC90ZXh0PjxzdGF0dXNDb2RlIGNvZGU9ImNv
bXBsZXRlZCIgLz48L2FjdD48L2VudHJ5UmVsYXRpb25zaGlwPjxyZWZlcmVuY2VSYW5nZT48b2Jz
ZXJ2YXRpb25SYW5nZT48dmFsdWUgbWVkaWFUeXBlPSJ0ZXh0L3BsYWluIiByZXByZXNlbnRhdGlv
bj0iVFhUIiB4c2k6dHlwZT0iU1QiPk5lZ2F0aXZlPC92YWx1ZT48L29ic2VydmF0aW9uUmFuZ2U+
PC9yZWZlcmVuY2VSYW5nZT48L29ic2VydmF0aW9uPjwvY29tcG9uZW50Pjwvb3JnYW5pemVyPjwv
ZW50cnlSZWxhdGlvbnNoaXA+PC9hY3Q+PC9lbnRyeT48L3NlY3Rpb24+PC9jb21wb25lbnQ+PC9z
ZWN0aW9uPjwvY29tcG9uZW50Pjxjb21wb25lbnQgdHlwZUNvZGU9IkNPTVAiPjxzZWN0aW9uIGNs
YXNzQ29kZT0iRE9DU0VDVCIgbW9vZENvZGU9IkVWTiI+PHRlbXBsYXRlSWQgcm9vdD0iMi4xNi44
NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwIiBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJJbnN0cnVj
dGlvbmFsIENvbnRlbnQgQ29tcG9uZW50IiAvPjx0ZXh0PiYjMTM7CiYjMTM7CkNvbGxlY3Rpbmcg
TGFiOiBJSFZKSCAtIEludGVyaW9yIEhlYWx0aCBBdXRob3JpdHkmIzEzOwpQZXJmb3JtaW5nIExh
YjogSUhLR0ggLSBLZWxvd25hIEdlbmVyYWwgSG9zcCYjMTM7CklOUVVJUklFUyAtIFBsZWFzZSBk
aXJlY3QgYWxsIGlucXVpcmllcyB0byB0aGUgQ29sbGVjdGluZyBMYWIuJiMxMzsKQ09ORklERU5U
SUFMIC0gVGhpcyBjbGluaWNhbCBkb2N1bWVudCBjb250YWlucyBjb25maWRlbnRpYWwgcGVyc29u
YWwgaW5mb3JtYXRpb24gYW5kIGlzIGZvciBkaXJlY3QgY2FyZSBwdXJwb3NlcyBvbmx5LiBQbGVh
c2UgdXNlLCBjb3B5IGFuZCBzaGFyZSB3aXRoIGF1dGhvcml6ZWQgaW5kaXZpZHVhbHMgb25seS4m
IzEzOwogICAgICAgICAgICAgICAgJiMxMzsKJiMxMzsKICAgICoqKiBJZiByZWNlaXZlZCBpbiBl
cnJvciBjYWxsIElIIEluZm9ybWF0aW9uIFByaXZhY3kgJmFtcDthbXA7IFNlY3VyaXR5IHRvbGwg
ZnJlZSBhdCAxLTg1NS05ODAtNTAyMCAqKiogICYjMTM7CiAgICAgICAgICAgICAgICAmIzEzOwo8
L3RleHQ+PC9zZWN0aW9uPjwvY29tcG9uZW50Pjwvc3RydWN0dXJlZEJvZHk+PC9jb21wb25lbnQ+
PC9DbGluaWNhbERvY3VtZW50Pg==</inboundTemplate>
            <outboundTemplate encoding="base64">e30=</outboundTemplate>
            <inboundDataType>HL7V3</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.8.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.8.0">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.8.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.8.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.8.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.8.0">
            <elements/>
            <inboundTemplate encoding="base64">ewogICJ0ZW1wbGF0ZUlkIjogIiIsCiAgImVmZmVjdGl2ZVRpbWUiOiAiIiwNCiAgInBhdGllbnQi
OiB7CiAgICAiaWQiOiAiIiwKICAgICJhZGRyZXNzIjogW3sKICAgICAgInVzZSI6ICJIIiwNCiAg
ICAgICJzdHJlZXRBZGRyZXNzIjogIiIsDQogICAgICAiY2l0eSI6ICIiLA0KICAgICAgInByb3Zp
bmNlIjogIiIsDQogICAgICAicG9zdGFsQ29kZSI6ICIiLA0KICAgICAgImNvdW50cnkiOiAiIg0K
ICAgIH1dLA0KICAgICJ0ZWxlY29tIjogW3sKICAgICAgICAidXNlIjogIiIsCiAgICAgICAgInR5
cGUiOiAiIiwKICAgICAgICAidmFsdWUiOiAiIgogICAgICB9LHsKICAgICAgICAidXNlIjogIiIs
CiAgICAgICAgInR5cGUiOiAiIiwKICAgICAgICAidmFsdWUiOiAiIgogICAgfV0sCiAgICAibmFt
ZSI6IFt7CiAgICAgICJ1c2UiOiAiIiwNCiAgICAgICJnaXZlbiI6IFsiIl0sDQogICAgICAiZmFt
aWx5IjogIiIsCiAgICAgICJwcmVmaXgiOiAiIiwKICAgICAgInN1ZmZpeCI6ICIiDQogICAgfV0s
DQogICAgImdlbmRlciI6ICIiLA0KICAgICJkb2IiOiAiIg0KICB9LA0KICAiYXV0aG9yIjogW3sK
ICAgICJ0aW1lIjogIiIsDQogICAgImlkIjogIiIsCiAgICAiYWRkcmVzcyI6IFt7CiAgICAgICJ1
c2UiOiAiIiwNCiAgICAgICJzdHJlZXRBZGRyZXNzIjogIiIsDQogICAgICAiY2l0eSI6ICIiLA0K
ICAgICAgInByb3ZpbmNlIjogIiIsDQogICAgICAicG9zdGFsQ29kZSI6ICIiLA0KICAgICAgImNv
dW50cnkiOiAiIg0KICAgIH1dLA0KICAgICJ0ZWxlY29tIjogW3sKICAgICAgICAidXNlIjogIiIs
CiAgICAgICAgInR5cGUiOiAiIiwKICAgICAgICAidmFsdWUiOiAiIgogICAgfV0sCiAgICAibmFt
ZSI6IHsKICAgICAgInVzZSI6ICIiLA0KICAgICAgImdpdmVuIjogWyIiXSwNCiAgICAgICJmYW1p
bHkiOiAiIiwKICAgICAgInByZWZpeCI6ICIiLAogICAgICAic3VmZml4IjogIiINCiAgICB9DQog
IH1dLAogICJyZWNpcGllbnQiOiBbewogICAgImlkIjogIiIsCiAgICAiYWRkcmVzcyI6IFt7CiAg
ICAgICJ1c2UiOiAiIiwNCiAgICAgICJzdHJlZXRBZGRyZXNzIjogIiIsDQogICAgICAiY2l0eSI6
ICIiLA0KICAgICAgInByb3ZpbmNlIjogIiIsDQogICAgICAicG9zdGFsQ29kZSI6ICIiLA0KICAg
ICAgImNvdW50cnkiOiAiIg0KICAgIH1dLA0KICAgICJ0ZWxlY29tIjogW3sKICAgICAgICAidXNl
IjogIiIsCiAgICAgICAgInR5cGUiOiAiIiwKICAgICAgICAidmFsdWUiOiAiIgogICAgfV0sCiAg
ICAibmFtZSI6IHsKICAgICAgInVzZSI6ICIiLA0KICAgICAgImdpdmVuIjogWyIiXSwNCiAgICAg
ICJmYW1pbHkiOiAiIiwKICAgICAgInByZWZpeCI6ICIiLAogICAgICAic3VmZml4IjogIiINCiAg
ICB9LAogICAgInJlY2VpdmVkT3JnYW5pemF0aW9uIjp7CiAgICAgICJpZCI6ICIiLAogICAgICAi
bmFtZSI6ICIiCiAgICB9IA0KICB9XSwKICAiY3VzdG9kaWFuIjogew0KICAgICJpZCI6IFt7CiAg
ICAgICJ0eXBlIjoiIiwKICAgICAgImlkIjoiIgogICAgfV0sCiAgICAibmFtZSI6ICIiCiAgfSwK
ICAiZGF0YUVudGVyZXIiOiB7CiAgICAidGltZSI6ICIiLAogICAgImlkIjoiIiwNCiAgICAiYWRk
cmVzcyI6IFt7CiAgICAgICJ1c2UiOiAiIiwNCiAgICAgICJzdHJlZXRBZGRyZXNzIjogIiIsDQog
ICAgICAiY2l0eSI6ICIiLA0KICAgICAgInByb3ZpbmNlIjogIiIsDQogICAgICAicG9zdGFsQ29k
ZSI6ICIiLA0KICAgICAgImNvdW50cnkiOiAiIg0KICAgIH1dLA0KICAgICJ0ZWxlY29tIjogW3sK
ICAgICAgICAidXNlIjogIiIsCiAgICAgICAgInR5cGUiOiAiIiwKICAgICAgICAidmFsdWUiOiAi
IgogICAgfV0sCiAgICAibmFtZSI6IHsKICAgICAgInVzZSI6ICIiLA0KICAgICAgImdpdmVuIjog
WyIiXSwNCiAgICAgICJmYW1pbHkiOiAiIiwKICAgICAgInByZWZpeCI6ICIiLAogICAgICAic3Vm
Zml4IjogIiINCiAgICB9DQogIH0sDQogICJhdXRoZW50aWNhdG9yIjogW3sKICAgICJpZCI6IiIs
DQogICAgImFkZHJlc3MiOiBbewogICAgICAidXNlIjogIiIsDQogICAgICAic3RyZWV0QWRkcmVz
cyI6ICIiLA0KICAgICAgImNpdHkiOiAiIiwNCiAgICAgICJwcm92aW5jZSI6ICIiLA0KICAgICAg
InBvc3RhbENvZGUiOiAiIiwNCiAgICAgICJjb3VudHJ5IjogIiINCiAgICB9XSwNCiAgICAidGVs
ZWNvbSI6IFt7CiAgICAgICAgInVzZSI6ICIiLAogICAgICAgICJ0eXBlIjogIiIsCiAgICAgICAg
InZhbHVlIjogIiIKICAgIH1dLAogICAgIm5hbWUiOiB7CiAgICAgICJ1c2UiOiAiIiwNCiAgICAg
ICJnaXZlbiI6IFsiIl0sDQogICAgICAiZmFtaWx5IjogIiIsCiAgICAgICJwcmVmaXgiOiAiIiwK
ICAgICAgInN1ZmZpeCI6ICIiDQogICAgfQ0KICB9XSwKICAicGFydGljaXBhbnQiOiBbewogICAg
ImlkIjoiIiwNCiAgICAiYWRkcmVzcyI6IFt7CiAgICAgICJ1c2UiOiAiIiwNCiAgICAgICJzdHJl
ZXRBZGRyZXNzIjogIiIsDQogICAgICAiY2l0eSI6ICIiLA0KICAgICAgInByb3ZpbmNlIjogIiIs
DQogICAgICAicG9zdGFsQ29kZSI6ICIiLA0KICAgICAgImNvdW50cnkiOiAiIg0KICAgIH1dLA0K
ICAgICJ0ZWxlY29tIjogW3sKICAgICAgICAidXNlIjogIiIsCiAgICAgICAgInR5cGUiOiAiIiwK
ICAgICAgICAidmFsdWUiOiAiIgogICAgfV0sCiAgICAibmFtZSI6IHsKICAgICAgInVzZSI6ICIi
LA0KICAgICAgImdpdmVuIjogWyIiXSwNCiAgICAgICJmYW1pbHkiOiAiIiwKICAgICAgInByZWZp
eCI6ICIiLAogICAgICAic3VmZml4IjogIiINCiAgICB9DQogIH1dLA0KICAibm9uWE1MQm9keSI6
IHsKICAgICJtZWRpYVR5cGUiOiAidGV4dC9wbGFpbiIsCiAgICAiY29udGVudCI6ICIiCiAgfQ0K
fQ0=</inboundTemplate>
            <outboundTemplate encoding="base64">e30=</outboundTemplate>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.8.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.8.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.8.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.8.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.8.0">
            <elements/>
          </filter>
          <transportName>JavaScript Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
      <properties version="3.8.0">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>DEVELOPMENT</messageStorageMode>
        <encryptData>false</encryptData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>true</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TYPE</name>
            <type>STRING</type>
            <mappingName>mirth_type</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="3.8.0">
          <type>None</type>
          <properties/>
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>true</enabled>
          <lastModified>
            <time>1574122952981</time>
            <timezone>America/Vancouver</timezone>
          </lastModified>
          <pruningSettings>
            <archiveEnabled>true</archiveEnabled>
          </pruningSettings>
        </metadata>
        <codeTemplateLibraries>
          <codeTemplateLibrary version="3.8.0">
            <id>a689ef28-f6b5-43bf-95c0-3a7f0cfadaff</id>
            <name>CDA</name>
            <revision>3</revision>
            <lastModified>
              <time>1571944443031</time>
              <timezone>Canada/Pacific</timezone>
            </lastModified>
            <description>Functions to build/format/parse CDA message fragments</description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>e995ffe5-fe5f-4260-a385-98f81c8418fe</string>
              <string>b2f0c503-a881-4126-995e-844c3e7692fd</string>
              <string>f3a65b72-9187-42ef-88cd-1d7626887e2e</string>
              <string>2375f320-7fd5-48cd-b3bb-53c22dab182b</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.8.0">
                <id>9914a610-67bc-42b7-aa87-6a693ed1800c</id>
                <name>Build CDA Address</name>
                <revision>6</revision>
                <lastModified>
                  <time>1571963472067</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Build a XML address tag based on &apos;4.2.1.2. Addresses&apos;

	@param {String} use - 
	@param {String} streetAddress - 
	@param {String} city - 
	@param {String} state - 
	@param {String} postalCode - 
	@param {String} country - 
	@return {Object} return the XML address tag
*/
function buildCDAAddress(use, streetAddress, city, state, postalCode, country) {
	var addr = new XML(&quot;&lt;addr&gt;&quot; + (streetAddress ? streetAddress + &quot;&lt;delimiter/&gt;&quot; : &quot;&quot;) + &quot;&lt;/addr&gt;&quot;); // CONF-BC0039
  	if (streetAddress) {
  		addr[&apos;@use&apos;] = use; // CONF-BC0041
  	}
  	if (city) {
  		addr[&apos;city&apos;] = city;
  	}
  	if (state) {
  		if (state.length == 2) {
  			state = &apos;CA-&apos; + state;
  		}
  		addr[&apos;state&apos;] = state; // CONF-BC0045
  	}
  	if (postalCode) {
  		addr[&apos;postalCode&apos;] = postalCode;
  	}
  	if (country) {
  		addr[&apos;country&apos;] = country; // CONF-BC0044
  	}
  	return addr;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>d56207a8-0d51-40fb-9437-73815405b6a2</id>
                <name>Build CDA ID</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650189148</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Build a XML id tag

	@param {String} root - 
	@param {String} extension - 
	@return {Object} return the XML id tag
*/
function buildCDAId(root, extension) {
	if (extension != null &amp;&amp; (&quot;&quot;+extension).length &gt; 0) {
		var id = new XML(&apos;&lt;id/&gt;&apos;);
	  	id[&apos;@extension&apos;] = extension;
		if (root != null) {
		  	id[&apos;@root&apos;] = root;
		  	// Get the authority name from the GlobalMap (loaded from database)
		  	var authName = globalMap.get(root);
		  	if (authName) {
		  		id[&apos;@assigningAuthorityName&apos;] = authName;
		  	}
		}
	  	return id;
	}
	return new XML(&apos;&lt;id nullFlavor=&quot;NA&quot; /&gt;&apos;);
}

</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>aaee9682-0184-43e5-a80b-32615c89dae0</id>
                <name>Build CDA Name</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650189270</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Build a XML name tag based on &apos;4.2.1.1. Person Names&apos;

	@param {String} use -
	@param {String} family -
	@param {String} given -
	@param {String} prefix -
	@param {String} suffix -
	@return {Object} return the XML name tag
*/
function buildCDAName(use, family, given, prefix, suffix) {
	var name = new XML(&quot;&lt;name/&gt;&quot;);
  	name[&apos;@use&apos;] = use; // CONF-BC0038
  	name[&apos;family&apos;] = family;
  	if (given instanceof Array) { // CONF-BC0031, CONF-BC0034
  		for (var i = 0; i &lt; given.length; i++) {
  			name[&apos;given&apos;][i] = given[i];
  		}
  	} else {
  		name[&apos;given&apos;] = given;
  	}
  	if (prefix) { // CONF-BC0035
  		name[&apos;prefix&apos;] = prefix;
  	}
  	if (suffix) { // CONF-BC0036
  		name[&apos;suffix&apos;] = suffix;
  	}
  	return name;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>39f73e3c-ac8d-46ee-904c-32d6a73d93c0</id>
                <name>Build CDA Telecom</name>
                <revision>2</revision>
                <lastModified>
                  <time>1571955126036</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Build a XML telecom tag

	@param {String} use - &apos;H&apos; = home, &apos;W&apos; = work, &apos;M&apos; = mobile
	@param {String} type - &apos;tel&apos; or &apos;email&apos;
	@param {String} value - number of telefone or email address
	@return {Object} return the XML telecom tag
*/
function buildCDATelecom(use, type, value) {
	var telecom = new XML(&quot;&lt;telecom/&gt;&quot;);
	if (use &amp;&amp; type &amp;&amp; value) {
  		telecom[&apos;@use&apos;] = use;
  		telecom[&apos;@value&apos;] = type + &quot;:&quot; + value;
	}
  	return telecom;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>978d7943-1810-4652-a684-8f7b6bc3bc11</id>
                <name>Build CDA TemplateId</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650189497</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Build a XML templateId tag

	@param {String} code - 
	@return {Object} return the XML template tag
*/
function buildCDATemplateId(code) {
	var templateId = new XML(&apos;&lt;templateId/&gt;&apos;);

	// Get the attributes from the GlobalMap (loaded from database)
  	var loinc_code = globalMap.get(code);
  	
  	templateId[&apos;@root&apos;] = loinc_code[&apos;template_id&apos;];
  	templateId[&apos;@assigningAuthorityName&apos;] = loinc_code[&apos;template_name&apos;];
		  	
  	return templateId;&#xd;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>0b2ecd99-756c-4a93-9bba-230bf83b0c62</id>
                <name>Format CDA Date</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650190912</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Format the date for the CDA format &apos;yyyyMMdd&apos;

	@param {Date/String} date -
	@return {String} return the formated date
*/
function formatCDADate(date) {
	return DateUtil.convertDate(&quot;yyyy-MM-dd&quot;, &quot;yyyyMMdd&quot;, date);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>07a8a226-a4d4-4248-b816-00011d888d0f</id>
                <name>Format CDA Date/Time</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650190779</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Format the date/time for the CDA format &apos;yyyyMMddHHmmZZZ&apos;

	@param {Date/String} dateTime - 
	@return {String} return the formated dateTime
*/
function formatCDADateTime(dateTime) {
	return DateUtil.formatDate(&apos;yyyyMMddHHmmZZZ&apos;, new Date(dateTime));
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>f4743440-d5d2-44f2-acd9-35746c48d9b3</id>
                <name>Parse CDA Address</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650191291</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Parse the CDA Address to JSON Object

	@param {String} cdaAddress - 
	@return {String} return the parsed Address object
*/
function parseCDAAddress(cdaAddress) {
	var addr = {};
	addr[&apos;use&apos;] = cdaAddress[&apos;@use&apos;].toString();
	// Try to get the street address from the body of the tag &lt;addr&gt; (Document format)
	var strtAddr = cdaAddress.toString().match(/&lt;addr.*&gt;(.+?)(?=&lt;delimiter\/&gt;)/); // return array of matchs
	if (strtAddr) {
		addr[&apos;streetAddress&apos;] = strtAddr[1]; //.replace(/(&lt;\/?[^&gt;]+&gt;)/gi, &apos;&apos;); // strip xml tags?
	}
	// Try to append the list of &apos;delimiters&apos; (List clinics/providers format)
	if (getArrayOrXmlLength(cdaAddress[&apos;delimiter&apos;]) &gt; 0) {
		for (var i = 0; i &lt; getArrayOrXmlLength(cdaAddress[&apos;delimiter&apos;]); i++) {
			addr[&apos;streetAddress&apos;] = (addr[&apos;streetAddress&apos;] ? addr[&apos;streetAddress&apos;] + &apos; &apos; : &apos;&apos;) + cdaAddress[&apos;delimiter&apos;][i].toString();
		}
		addr[&apos;streetAddress&apos;] = addr[&apos;streetAddress&apos;].trim(); // trim any whitespace from both side of the address
	}
	if (getArrayOrXmlLength(cdaAddress[&apos;city&apos;]) &gt; 0) {
		addr[&apos;city&apos;] = cdaAddress[&apos;city&apos;].toString();
	}
	if (getArrayOrXmlLength(cdaAddress[&apos;province&apos;]) &gt; 0) {
		addr[&apos;province&apos;] = cdaAddress[&apos;state&apos;].toString();
	}
	if (getArrayOrXmlLength(cdaAddress[&apos;postalCode&apos;]) &gt; 0) {
		addr[&apos;postalCode&apos;] = cdaAddress[&apos;postalCode&apos;].toString();
	}
	if (getArrayOrXmlLength(cdaAddress[&apos;country&apos;]) &gt; 0) {
		addr[&apos;country&apos;] = cdaAddress[&apos;country&apos;].toString();
	}
	return addr;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>41f1daa2-e22b-439a-b0b5-16bc108c007e</id>
                <name>Parse CDA Date/Time</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650191523</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Parse the CDA Date/Time to Date object

	@param {String} cdaDateTime - 
	@return {String} return the Date object
*/
function parseCDADateTime(cdaDateTime) {
	if (!cdaDateTime || cdaDateTime.length == 0) {
		return null;
	}
	if (cdaDateTime.length &lt;= 8) {
		return DateUtil.convertDate(&quot;yyyyMMdd&quot;, &quot;yyyy-MM-dd&quot;, cdaDateTime);
	}
	return DateUtil.convertDate(&quot;yyyyMMddHHmmZZZ&quot;, &quot;yyyy-MM-dd\&apos;T\&apos;HH:mm:ssZ&quot;, cdaDateTime);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>1dc8b8fe-b046-4292-a7c2-218c37bd0d2d</id>
                <name>Parse CDA Date/TIme to DB format</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650191405</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Parse the CDA Date/Time to Date in DB format

	@param {String} cdaDateTime - 
	@return {String} return the Date in DB format
*/
function parseCDADateTimeToDB(cdaDateTime) {
	if (!cdaDateTime || cdaDateTime.length == 0) {
		return null;
	}
	if (cdaDateTime.length &lt;= 8) {
		return DateUtil.convertDate(&quot;yyyyMMdd&quot;, &quot;yyyy-MM-dd&quot;, cdaDateTime);
	}
	return DateUtil.convertDate(&quot;yyyyMMddHHmmZZZ&quot;, &quot;yyyy-MM-dd hh:mm:ss&quot;, cdaDateTime);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>a2f73260-eb70-4dcc-8b8a-9350c3bec9fd</id>
                <name>Parse CDA ID</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650191647</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Parse the CDA Id to JSON object

	@param {String} cdaID - 
	@return {String} return the parsed ID object
*/
function parseCDAId(cdaID) {
	var id = {};
	if (cdaID[&apos;@extension&apos;]) {
		id[&apos;code&apos;] = cdaID[&apos;@extension&apos;].toString();
	}
	if (cdaID[&apos;@root&apos;]) {
		id[&apos;type&apos;] = cdaID[&apos;@root&apos;].toString();
	}
	return id;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>a0354d90-ffa8-47c5-9776-e41927d2f0d0</id>
                <name>Parse CDA Name</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650191787</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Parse the CDA Name to JSON object

	@param {String} cdaName - 
	@return {String} return the parsed Name object
*/
function parseCDAName(cdaName) {
	var name = {};
	name[&apos;use&apos;] = cdaName[&apos;@use&apos;].toString();
	name[&apos;family&apos;] = cdaName[&apos;family&apos;].toString();
	name[&apos;given&apos;] = [];
	for (var i = 0; i &lt; getArrayOrXmlLength(cdaName[&apos;given&apos;]); i++) {
		name[&apos;given&apos;][i] = cdaName[&apos;given&apos;][i].toString();
	}
	if (getArrayOrXmlLength(cdaName[&apos;prefix&apos;]) &gt; 0) {
		name[&apos;prefix&apos;] = cdaName[&apos;prefix&apos;].toString();
	}
	if (getArrayOrXmlLength(cdaName[&apos;suffix&apos;]) &gt; 0) {
		name[&apos;suffix&apos;] = cdaName[&apos;suffix&apos;].toString();
	}
	return name;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>407e6d63-57cf-42f8-b555-5d6c575f4f55</id>
                <name>Parse CDA Telecom</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650191892</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Parse the CDA Telecom to JSON object

	@param {String} telecom - 
	@return {String} return the parsed Telecom object
*/
function parseCDATelecom(cdaTelecom) {
	var telecom = {};
	telecom[&apos;use&apos;] = cdaTelecom[&apos;@use&apos;].toString();
	telecom[&apos;type&apos;] = &quot;tel&quot;; 
	if (getArrayOrXmlLength(cdaTelecom[&apos;@value&apos;]) &gt; 0) {
		var telParts = cdaTelecom[&apos;@value&apos;].split(&apos;:&apos;);
		telecom[&apos;type&apos;] = telParts[0];	
		telecom[&apos;value&apos;] = telParts[1];
	}
	return telecom;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.8.0">
            <id>5d2a129c-da07-49cc-950c-d941a93cd271</id>
            <name>OBIB</name>
            <revision>5</revision>
            <lastModified>
              <time>1572641956778</time>
              <timezone>Canada/Pacific</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>e995ffe5-fe5f-4260-a385-98f81c8418fe</string>
              <string>b2f0c503-a881-4126-995e-844c3e7692fd</string>
              <string>f3a65b72-9187-42ef-88cd-1d7626887e2e</string>
              <string>2375f320-7fd5-48cd-b3bb-53c22dab182b</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.8.0">
                <id>0d5c946b-11fe-4dde-8c69-7d9296ea32a0</id>
                <name>Build Document Storage Message</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650189617</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Build a Document Storage Message.

	@param {String} locationId - Location / Clinic Id
	@param {String} documentId - Document Id
	@param {String} messageType - DOCUMENT, RESPONSE or ATTACHMENT
	@param {String} content - Content of the message / document
	@param {String} connectorVersion - OBBI Connector version
	@return {String} return the Document Storage Message JSON object
*/
function buildDocumentStorageMessage(locationId, documentId, messageType, messageContent, connectorVersion) {
	var storageMsg = {};
	storageMsg[&apos;locationId&apos;] = locationId;
	storageMsg[&apos;documentId&apos;] = documentId;
	storageMsg[&apos;messageType&apos;] = messageType;
	storageMsg[&apos;messageContent&apos;] = messageContent;
	storageMsg[&apos;obibVersion&apos;] = globalMap.get(&quot;obib.version&quot;);
	storageMsg[&apos;connectorVersion&apos;] = connectorVersion;
	return storageMsg;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>738d81a1-d04c-482e-a011-30c61a09b3d3</id>
                <name>Create Array of DocumentAttachment</name>
                <revision>2</revision>
                <lastModified>
                  <time>1570827114602</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Create an Array of DocumentAttachment objects from a JSON object

	@param {Object[]} jsonAttachments - 
	@return {DocumentAttachment[]} return the Array of DocumentAttachment
*/
function createDocumentAttachmentArray(jsonAttachments) {
	var attachments = [];
	if (jsonAttachments != null) {
		for (var i = 0; i &lt; jsonAttachments.length; i++) {
			var attachment = jsonAttachments[i];
			attachments.push(new Packages.ca.uvic.leadlab.cdxconnector.messages.submit.DocumentAttachment(
				attachment[&apos;mediaType&apos;],
				attachment[&apos;content&apos;],
				attachment[&apos;hash&apos;],
				attachment[&apos;hashAlgorithm&apos;],
				attachment[&apos;reference&apos;]));
		}
	}
	return attachments;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>bcd2a30d-111f-4fd3-9724-0e9a2e7dfe50</id>
                <name>Create DatabaseConnection</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650189859</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get the DatabaseConnection object

	@return {DatabaseConnection} return the DatabaseConnection object
*/
function getDBConnection() {
	var dataSource = globalMap.get(&quot;hikari_OBIB_DB&quot;);
	if (dataSource == null) {
		dataSource = new Packages.com.zaxxer.hikari.HikariDataSource();
		dataSource.setDriverClassName(globalMap.get(&quot;obib.db.driver&quot;));
		dataSource.setJdbcUrl(globalMap.get(&quot;obib.db.url&quot;));
		dataSource.setUsername(globalMap.get(&quot;obib.db.username&quot;));
		dataSource.setPassword(globalMap.get(&quot;obib.db.password&quot;));
		dataSource.setConnectionTimeout(0);
		dataSource.setAutoCommit(false);
		dataSource.setMaximumPoolSize(10);
		dataSource.setMinimumIdle(0);
		//dataSource.setReadOnly(readOnly);
		//dataSource.setConnectionTestQuery(&quot;SELECT 1&quot;);
		globalMap.put(&quot;hikari_OBIB_DB&quot;, dataSource);
	}
	if (dataSource != null) {
		return dataSource.getConnection();
	} else {
		throw &quot;Cannot create a new data source (connection pool).&quot;;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>60bfd3ac-552a-4d59-ac1d-48fbe4f430b2</id>
                <name>Create Error Message</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650189966</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Create JSON error message

	@param {String} error - Error message
	@param {Object} obibErrors - Associative Array of errors
	@return {String} return the JSON response
*/
function createErrorMessage(error, obibErrors) {
	// Filter cdxconnector messages
	if (error.includes(&apos;ca.uvic.leadlab.cdxconnector&apos;)) {
		error = error.split(/ca.uvic.leadlab.cdxconnector.*:/).pop();
	}
	
	return JSON.stringify({&apos;obibVersion&apos;: globalMap.get(&quot;obib.version&quot;), &apos;status&apos;: &apos;ERROR&apos;, &apos;message&apos;: error, &apos;obibErrors&apos;: obibErrors})
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>f1de696c-f547-49ae-8225-f7e40ed2c87c</id>
                <name>Create Segment Before</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650190249</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Create a new segment and insert it before the target segment.
	
	@param {String} name - The name of the segment to create.
	@param {String} segment - The existing segment that the new segment will be inserted before.
	@return {String} return The existing segment that the new segment will be inserted after.
*/
function createSegmentBefore(name, segment) {
	var msgObj = segment;
   	while (msgObj.parent() != undefined) { 
		msgObj = msgObj.parent(); 
	}
     msgObj.insertChildBefore(segment[0], new XML(&apos;&lt;&apos; + name + &apos;&gt;&lt;/&apos; + name + &apos;&gt;&apos;));
   	return msgObj.child(segment[0].childIndex() - 1);
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>b332b27e-5312-4517-a4ad-bad60b2642bf</id>
                <name>Evaluate XPath expression</name>
                <revision>29</revision>
                <lastModified>
                  <time>1573764879777</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Evaluates a XPath expression

	@param {Object} xml - xml being evaluated
	@param {String} expression - expression to be evaluated
	@return {String} &apos;true&apos; if the expression evaluates, otherwise &apos;false&apos;
*/
function evaluateXPath(xml, expression) {
	// clean namespace
	var xmlStr = xml.toString().replace(&apos;xmlns=&quot;urn:hl7-org:v3&quot;&apos;, &apos;&apos;);
	
	// evaluate the xpath using Java xml API
	var input = new Packages.org.xml.sax.InputSource(new Packages.java.io.StringReader(xmlStr));
	var xpath = Packages.javax.xml.xpath.XPathFactory.newInstance().newXPath();
	return xpath.evaluate(expression, input, Packages.javax.xml.xpath.XPathConstants.BOOLEAN).toString();
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>df99f17c-1947-469e-be81-78e90d657f4d</id>
                <name>Execute Database Query</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650190510</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a query on the database and returns a CachedRowSet.

	@param {String} query - The query to be executed.
	@return {String} return The result of the query, as a CachedRowSet.
*/
function executeCachedQuery(query) {
	var connection = getDBConnection();
	if (connection != null) {
		var statement = null;
		try {
			statement = connection.createStatement();
            	var result = statement.executeQuery(query);
            	var crs = new MirthCachedRowSet();
            	crs.populate(result);
            	if (result != null) {
            		Packages.org.apache.commons.dbutils.DbUtils.closeQuietly(result);
            	}
            	return crs;
		} catch(err) {
			throw err;
        	} finally {
        		if (statement != null) {
				Packages.org.apache.commons.dbutils.DbUtils.closeQuietly(statement);
        		}
        		if (connection != null) {
        			Packages.org.apache.commons.dbutils.DbUtils.closeQuietly(connection);
        		}
		}
	} else {
		throw &quot;Error: Cannot connect to the database&quot;;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>8512e74b-a53b-4a15-9718-fed25c0481ef</id>
                <name>Execute Database Update</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650190646</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes an INSERT/UPDATE on the database and returns the row count.

	@param {String} query - The statement to be executed.
	@return {Integer} return A count of the number of updated rows.
*/
function executeUpdate(query) {
	var connection = getDBConnection();
	if (connection != null) {
		var statement = null;
		try {
			connection.setAutoCommit(true);
			statement = connection.createStatement();
			if (statement.execute(query)) {
				return -1;
			} else {
				return statement.getUpdateCount();
			}
		} catch (err) {
			throw err;
		} finally {
			if (statement != null) {
				Packages.org.apache.commons.dbutils.DbUtils.closeQuietly(statement);
        		}
        		if (connection != null) {
        			Packages.org.apache.commons.dbutils.DbUtils.closeQuietly(connection);
        		}
		}
	} else {
		throw &quot;Error: Cannot connect to the database&quot;;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>be89bc64-f4bf-4ab3-954b-04088964eda6</id>
                <name>Handle Query Result Status</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650191035</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Handle the result status from a query message.

	@param {Object} queryResult - query result (&apos;tmp&apos; variable)
	@param {Object} queryMessage - query message (&apos;msg&apos; variable)
	@param {String} collection - collection returned by the result
	@return {Object} return The queryResult object with status and message.
*/
function handleQueryResultStatus(queryResult, queryMessage, collection) {
	if (queryResult[&apos;ackDetail&apos;][&apos;status&apos;] === &apos;OK&apos;) {
		queryResult[&apos;status&apos;] = &quot;SUCCESS&quot;;
	} else if (queryResult[&apos;ackDetail&apos;][&apos;status&apos;] === &apos;NF&apos;) {
		queryResult[&apos;status&apos;] = &quot;SUCCESS&quot;;

		queryResult[collection] = []; // ensure the result collection is empty.
	} else {
		queryResult[&apos;status&apos;] = &quot;ERROR&quot;;
		
		if (queryResult[&apos;ackDetail&apos;][&apos;status&apos;] === &apos;QE&apos;) {
			queryResult[&apos;message&apos;] = queryMessage[&apos;acknowledgement&apos;][&apos;acknowledgementDetail&apos;][&apos;text&apos;].toString()				
		} else {
			queryResult[&apos;message&apos;] = &apos;Unespected error. Ack response code: &apos; + queryResult[&apos;ackDetail&apos;][&apos;status&apos;];
		}
		
		logger.error(&apos;MessagId &apos; + queryResult[&apos;ackDetail&apos;][&apos;messageId&apos;] + &apos; returned the error: &apos; + queryResult[&apos;message&apos;] + &quot;&apos;&quot;);
	}
	return tmp;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>e83b8bbf-433a-4c3d-88a2-16f4132b38af</id>
                <name>Handle Return Message</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650191160</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Handle the return message creation.

	@param {Object} responseStatus - 
	@param {Object} responseStatusMessage - 
	@param {Object} responseMessage - 
	@param {Function} createMessage - Callback function responsible for creating and return the result message.
	@return {String} return the stringify json message
*/
function handleResponseMessage(responseStatus, responseStatusMessage, responseMessage, createMessage) {
	if (responseStatus === SENT) { // process only SENT messages
		var responseMessage = createMessage(); // get the result message
		responseMessage[&apos;obibVersion&apos;] = globalMap.get(&quot;obib.version&quot;); // add versioning
		return JSON.stringify(responseMessage); // Convert the json to string and return it
	} else if (responseStatus === ERROR) {
		throw &quot;Error Message: &apos;&quot; + responseStatusMessage.toString() 
			+ &quot;&apos;\n Original Message: &apos;&quot; + msg.toString() + &quot;&apos;&quot;;
	} else {
		throw &quot;Not able to handle the response code: &apos;&quot; + responseStatus 
		+ &quot;&apos; \n Error Message: &apos;&quot; + responseStatusMessage.toString() 
		+ &quot;&apos;\n Original Message: &apos;&quot; + msg.toString() + &quot;&apos;&quot;;
	}
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>dfd86988-26e1-4d97-b81d-fee49e303272</id>
                <name>Store OBIB Error</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650192000</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Store the error as an &apos;associative array&apos; in the channel map.
	To retrieve the array of errors use &apos;channelMap.get(&apos;obibErrors&apos;)&apos;

	@param {String} errorCode - the key of the associative array
	@param {String} errorMessage - the value of the associative array
*/
function storeOBIBError(errorCode, errorMessage) {
	var obibErrors = channelMap.get(&apos;obibErrors&apos;);
	if (obibErrors == null) {
		obibErrors = new Object();
	}
	obibErrors[errorCode] = errorMessage;
	channelMap.put(&apos;obibErrors&apos;, obibErrors);
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
        </codeTemplateLibraries>
        <dependentIds>
          <string>b2f0c503-a881-4126-995e-844c3e7692fd</string>
        </dependentIds>
      </exportData>
    </channel>
    <channel version="3.8.0">
      <id>ce179042-48ce-4cf3-8f9e-2869185ac1b6</id>
      <nextMetaDataId>4</nextMetaDataId>
      <name>CDA Registry Parser</name>
      <description>- Convert the CDX XML registry messages (clinics and providers) into OBIB Json messages.</description>
      <revision>61</revision>
      <sourceConnector version="3.8.0">
        <metaDataId>0</metaDataId>
        <name>sourceConnector</name>
        <properties class="com.mirth.connect.connectors.vm.VmReceiverProperties" version="3.8.0">
          <pluginProperties/>
          <sourceConnectorProperties version="3.8.0">
            <responseVariable>responseMessage</responseVariable>
            <respondAfterProcessing>true</respondAfterProcessing>
            <processBatch>false</processBatch>
            <firstResponse>false</firstResponse>
            <processingThreads>1</processingThreads>
            <resourceIds class="linked-hash-map">
              <entry>
                <string>Default Resource</string>
                <string>[Default Resource]</string>
              </entry>
            </resourceIds>
            <queueBufferSize>1000</queueBufferSize>
          </sourceConnectorProperties>
        </properties>
        <transformer version="3.8.0">
          <elements>
            <com.mirth.connect.plugins.destinationsetfilter.DestinationSetFilterStep version="3.8.0">
              <name>Filter destination(s) if &quot;msg[&apos;subject1&apos;][&apos;assignedEntity&apos;][&apos;code&apos;][&apos;@code&apos;].toString()&quot; equals &apos;Clinic&apos;</name>
              <sequenceNumber>0</sequenceNumber>
              <enabled>true</enabled>
              <behavior>REMOVE_ALL_EXCEPT</behavior>
              <metaDataIds>
                <int>1</int>
              </metaDataIds>
              <field>msg[&apos;subject1&apos;][&apos;assignedEntity&apos;][&apos;code&apos;][&apos;@code&apos;].toString()</field>
              <condition>EQUALS</condition>
              <values>
                <string>&apos;Clinic&apos;</string>
              </values>
            </com.mirth.connect.plugins.destinationsetfilter.DestinationSetFilterStep>
            <com.mirth.connect.plugins.destinationsetfilter.DestinationSetFilterStep version="3.8.0">
              <name>Filter destination(s) if &quot;msg[&apos;subject1&apos;][&apos;assignedEntity&apos;][&apos;code&apos;][&apos;@code&apos;].toString()&quot; equals &apos;Provider&apos;</name>
              <sequenceNumber>1</sequenceNumber>
              <enabled>true</enabled>
              <behavior>REMOVE_ALL_EXCEPT</behavior>
              <metaDataIds>
                <int>3</int>
              </metaDataIds>
              <field>msg[&apos;subject1&apos;][&apos;assignedEntity&apos;][&apos;code&apos;][&apos;@code&apos;].toString()</field>
              <condition>EQUALS</condition>
              <values>
                <string>&apos;Provider&apos;</string>
              </values>
            </com.mirth.connect.plugins.destinationsetfilter.DestinationSetFilterStep>
          </elements>
          <inboundTemplate encoding="base64">PHJlZ2lzdHJhdGlvbkV2ZW50IHhtbG5zPSJ1cm46aGw3LW9yZzp2MyIgY2xhc3NDb2RlPSJSRUci
IG1vb2RDb2RlPSJFVk4iPgogICAgPHN0YXR1c0NvZGUgY29kZT0iYWN0aXZlIi8+CiAgICA8c3Vi
amVjdDEgdHlwZUNvZGU9IlNCSiI+CiAgICAgICAgPGFzc2lnbmVkRW50aXR5IGNsYXNzQ29kZT0i
QVNTSUdORUQiPgogICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQ0RYIENs
aW5pYyBSZWdpc3RyeSBJRCIgZXh0ZW5zaW9uPSJDRFhUZXN0MDAxNyIgcm9vdD0iMi4xNi44NDAu
MS4xMTM4ODMuMy4yNzcuMTAwLjIiLz4KICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0
eU5hbWU9IlRlbHVzIFRIWCBNZWREaWFsb2cgT3JnIElkIiBleHRlbnNpb249IjE5MDAwMDEwMiIg
cm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4zNjguNTAxIi8+CiAgICAgICAgICAgIDxjb2RlIGNv
ZGU9IkNsaW5pYyIvPgogICAgICAgICAgICA8bmFtZSB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMu
b3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6dHlwZT0iT04iPk1FREFDQ0VTU09SRzc8
L25hbWU+CiAgICAgICAgICAgIDxhZGRyPgogICAgICAgICAgICAgICAgPGRlbGltaXRlcj4xNTIg
TWEgRXJ4IEF2ZW51ZTwvZGVsaW1pdGVyPgogICAgICAgICAgICAgICAgPGNpdHk+S2Vsb3duYTwv
Y2l0eT4KICAgICAgICAgICAgICAgIDxzdGF0ZT5Ccml0aXNoIENvbHVtYmlhPC9zdGF0ZT4KICAg
ICAgICAgICAgICAgIDxjb3VudHJ5PkNhbmFkYTwvY291bnRyeT4KICAgICAgICAgICAgICAgIDxw
b3N0YWxDb2RlPlY0QiBFNFg8L3Bvc3RhbENvZGU+CiAgICAgICAgICAgIDwvYWRkcj4KICAgICAg
ICAgICAgPHJlbGF0ZWRUbyB0eXBlQ29kZT0iUEFSVCI+CiAgICAgICAgICAgICAgICA8YXNzaWdu
ZWRFbnRpdHkgY2xhc3NDb2RlPSJBU1NJR05FRCI+CiAgICAgICAgICAgICAgICAgICAgPGlkIGFz
c2lnbmluZ0F1dGhvcml0eU5hbWU9IlRlbHVzIFRIWCBNZWREaWFsb2cgUHJhY3RpdGlvbmVyIElE
IiBleHRlbnNpb249IjE5MDAwMDIwNyIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4zNjguNTAy
Ii8+CiAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkJDIFBo
eXNpY2lhbiBMaWNlbnNlIE51bWJlciIgZXh0ZW5zaW9uPSJMTjUwMDAwNyIgcm9vdD0iMi4xNi44
NDAuMS4xMTM4ODMuNC43NTYiLz4KICAgICAgICAgICAgICAgICAgICA8Y29kZSBjb2RlPSJQcm92
aWRlciIvPgogICAgICAgICAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgICAgICAgICAg
ICA8cHJlZml4PkRyLjwvcHJlZml4PgogICAgICAgICAgICAgICAgICAgICAgICA8ZmFtaWx5Pkxp
dHRsZTwvZmFtaWx5PgogICAgICAgICAgICAgICAgICAgICAgICA8Z2l2ZW4+SmF3YTwvZ2l2ZW4+
CiAgICAgICAgICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICAgICAgPC9hc3NpZ25lZEVu
dGl0eT4KICAgICAgICAgICAgICAgIDxxdWFsaWZpZWRFbnRpdHkgeG1sbnM6eHNpPSJodHRwOi8v
d3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOm5pbD0idHJ1ZSIvPgogICAg
ICAgICAgICA8L3JlbGF0ZWRUbz4KICAgICAgICAgICAgPHJlbGF0ZWRUbyB0eXBlQ29kZT0iUEFS
VCI+CiAgICAgICAgICAgICAgICA8YXNzaWduZWRFbnRpdHkgY2xhc3NDb2RlPSJBU1NJR05FRCI+
CiAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkJDIE1pbmlz
dHJ5IFByYWN0aXRpb25lciBJRCIgZXh0ZW5zaW9uPSIwMDIwOCIgcm9vdD0iMi4xNi44NDAuMS4x
MTM4ODMuMy40MC4yLjExIi8+CiAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhv
cml0eU5hbWU9IlRlbHVzIFRIWCBNZWREaWFsb2cgUHJhY3RpdGlvbmVyIElEIiBleHRlbnNpb249
IjE5MDAwMDIwOCIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4zNjguNTAyIi8+CiAgICAgICAg
ICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkJDIFBoeXNpY2lhbiBMaWNl
bnNlIE51bWJlciIgZXh0ZW5zaW9uPSJMTjUwMDAwOCIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMu
NC43NTYiLz4KICAgICAgICAgICAgICAgICAgICA8Y29kZSBjb2RlPSJQcm92aWRlciIvPgogICAg
ICAgICAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgICAgICAgICAgICA8cHJlZml4PkRy
LjwvcHJlZml4PgogICAgICAgICAgICAgICAgICAgICAgICA8ZmFtaWx5PkZ1enp5PC9mYW1pbHk+
CiAgICAgICAgICAgICAgICAgICAgICAgIDxnaXZlbj5Fd29rPC9naXZlbj4KICAgICAgICAgICAg
ICAgICAgICA8L25hbWU+CiAgICAgICAgICAgICAgICA8L2Fzc2lnbmVkRW50aXR5PgogICAgICAg
ICAgICAgICAgPHF1YWxpZmllZEVudGl0eSB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIw
MDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6bmlsPSJ0cnVlIi8+CiAgICAgICAgICAgIDwvcmVs
YXRlZFRvPgogICAgICAgIDwvYXNzaWduZWRFbnRpdHk+CiAgICAgICAgPHF1YWxpZmllZEVudGl0
eSB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4
c2k6bmlsPSJ0cnVlIi8+CiAgICA8L3N1YmplY3QxPgogICAgPGN1c3RvZGlhbiB0eXBlQ29kZT0i
Q1NUIj4KICAgICAgICA8YXNzaWduZWRFbnRpdHkgY2xhc3NDb2RlPSJBU1NJR05FRCI+CiAgICAg
ICAgICAgIDxpZCBudWxsRmxhdm9yPSJOQSIvPgogICAgICAgICAgICA8YXNzaWduZWREZXZpY2Ug
eG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNp
Om5pbD0idHJ1ZSIvPgogICAgICAgICAgICA8YXNzaWduZWRPcmdhbml6YXRpb24geG1sbnM6eHNp
PSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOm5pbD0idHJ1
ZSIvPgogICAgICAgICAgICA8YXNzaWduZWRQZXJzb24geG1sbnM6eHNpPSJodHRwOi8vd3d3Lncz
Lm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOm5pbD0idHJ1ZSIvPgogICAgICAgIDwv
YXNzaWduZWRFbnRpdHk+CiAgICA8L2N1c3RvZGlhbj4KICAgIDxkZWZpbml0aW9uIHR5cGVDb2Rl
PSJJTlNUIj4KICAgICAgICA8dGVtcGxhdGVJZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJEb2N1
bWVudCBUZW1wbGF0ZSBPSUQiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MCIv
PgogICAgICAgIDxhY3REZWZpbml0aW9uIGNsYXNzQ29kZT0iSU5GTyIgbW9vZENvZGU9IkRFRiI+
CiAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJBZG1pdCBOb3RpZmljYXRp
b24gVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjciIHJv
b3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgIDxpZCBh
c3NpZ25pbmdBdXRob3JpdHlOYW1lPSJBbmF0b21pYyBQYXRob2xvZ3kgUmVwb3J0IFRlbXBsYXRl
IiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi4yIiByb290PSIyLjE2Ljg0
MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0
aG9yaXR5TmFtZT0iQ29uc3VsdGF0aW9uIE5vdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4
ODMuMTAuMjAuNCIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAg
ICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkRpYWdub3N0aWMgSW1hZ2luZyBS
ZXBvcnQgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjUi
IHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgIDxp
ZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJEaXNjaGFyZ2UgTm90aWZpY2F0aW9uIFRlbXBsYXRl
IiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi42IiByb290PSIyLjE2Ljg0
MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0
aG9yaXR5TmFtZT0iRGlzY2hhcmdlIFN1bW1hcnkgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44
NDAuMS4xMTM4ODMuMy41MS42MC4yLjQiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEw
MC40MC4xIi8+CiAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJlMmUgR2Vu
ZXJpYyBFcGlzb2RpYyBEb2N1bWVudCIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjE4
MTguMTAuMS4yIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAg
ICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iZTJlIEdlbmVyaWMgVW5zdHJ1Y3R1
cmVkIFJlZmVycmFsIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuMTgxOC4xMC4xLjUi
IHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgIDxp
ZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJlMmUgVW5zdHJ1Y3R1cmVkIERvY3VtZW50IiBleHRl
bnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuMTgxOC4xMC4xLjQiIHJvb3Q9IjIuMTYuODQwLjEu
MTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3Jp
dHlOYW1lPSJIaXN0b3J5IGFuZCBQaHlzaWNhbCBOb3RlIiBleHRlbnNpb249IjIuMTYuODQwLjEu
MTEzODgzLjEwLjIwLjIiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+
CiAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJMYWIgUmVwb3J0IFRlbXBs
YXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi4xIiByb290PSIyLjE2
Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICA8aWQgYXNzaWduaW5n
QXV0aG9yaXR5TmFtZT0iT3BlcmF0aXZlIE5vdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4
ODMuMTAuMjAuNyIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAg
ICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IlByb2NlZHVyZSBOb3RlIFRlbXBs
YXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi4zIiByb290PSIyLjE2
Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICA8aWQgYXNzaWduaW5n
QXV0aG9yaXR5TmFtZT0iUHJvZ3Jlc3MgTm90ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4
My4xMC4yMC4yMSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAg
ICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IlVuc3RydWN0dXJlZCBSZXBvcnQg
VGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMTkiIHJvb3Q9IjIu
MTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgIDxjb2RlIG51bGxG
bGF2b3I9IlVOSyIvPgogICAgICAgIDwvYWN0RGVmaW5pdGlvbj4KICAgIDwvZGVmaW5pdGlvbj4K
PC9yZWdpc3RyYXRpb25FdmVudD4K</inboundTemplate>
          <outboundTemplate encoding="base64"></outboundTemplate>
          <inboundDataType>HL7V3</inboundDataType>
          <outboundDataType>HL7V3</outboundDataType>
          <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.8.0">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.8.0">
              <stripNamespaces>false</stripNamespaces>
            </serializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.8.0">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </inboundProperties>
          <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.8.0">
            <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.8.0">
              <stripNamespaces>false</stripNamespaces>
            </serializationProperties>
            <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.8.0">
              <splitType>JavaScript</splitType>
              <batchScript></batchScript>
            </batchProperties>
          </outboundProperties>
        </transformer>
        <filter version="3.8.0">
          <elements/>
        </filter>
        <transportName>Channel Reader</transportName>
        <mode>SOURCE</mode>
        <enabled>true</enabled>
        <waitForPrevious>true</waitForPrevious>
      </sourceConnector>
      <destinationConnectors>
        <connector version="3.8.0">
          <metaDataId>1</metaDataId>
          <name>Parse Clinic Registry</name>
          <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.8.0">
            <pluginProperties/>
            <destinationConnectorProperties version="3.8.0">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <script>logger.debug(&quot;Parse Clinic Registry&quot;);

//logger.debug(&quot;CDA DOC: &quot; + XmlUtil.prettyPrint(connectorMessage.getRawData()));

responseMap.put(&apos;responseMessage&apos;, connectorMessage.getTransformedData());	
</script>
          </properties>
          <transformer version="3.8.0">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.8.0">
                <name>Parse Clinic</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>try {
	// Clinic, CONF-CDXPR072
	var clinic = {};
	
	var entity = msg[&apos;subject1&apos;][&apos;assignedEntity&apos;];
	
	clinic[&apos;status&apos;] = msg[&apos;statusCode&apos;][&apos;@code&apos;].toString(); // CONF-CDXPR074
	clinic[&apos;name&apos;] = entity[&apos;name&apos;].toString(); // CONF-CDXPR080 
	
	// Clinic IDs, CONF-CDXPR077, CONF-CDXPR078
	clinic[&apos;ids&apos;] = [];
	for (var j = 0; j &lt; getArrayOrXmlLength(entity[&apos;id&apos;]); j++) {
		clinic[&apos;ids&apos;].push(parseCDAId(entity[&apos;id&apos;][j]));
	}
	
	// Clinic address, CONF-CDXPR081, CONF-CDXPR082
	clinic[&apos;address&apos;] = parseCDAAddress(entity[&apos;addr&apos;]);
	
	tmp = clinic;
} catch(e) {
	logger.error(&quot;Error on &apos;Parse Clinic&apos;: &quot; + e);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.8.0">
                <name>Parse Providers</name>
                <sequenceNumber>1</sequenceNumber>
                <enabled>true</enabled>
                <script>try {
	var assignedEntity = msg[&apos;subject1&apos;][&apos;assignedEntity&apos;];
	
	tmp[&apos;providers&apos;] = [];
	// Related Providers, CONF-CDXPR083
	for (var j = 0; j &lt; getArrayOrXmlLength(assignedEntity[&apos;relatedTo&apos;]); j++) {
		var provider = {};

		var entity = assignedEntity[&apos;relatedTo&apos;][j][&apos;assignedEntity&apos;];

		//if (entity[&apos;code&apos;][&apos;@code&apos;].toString() !== &apos;Provider&apos;) { // CONF-CDXPR084b
		//	continue; // TODO Provider Groups?
		//}
		
		// Provider ids, CONF-CDXPR085, CONF-CDXPR086
		provider[&apos;ids&apos;] = [];
		for (var k = 0; k &lt; getArrayOrXmlLength(entity[&apos;id&apos;]); k++) {
			provider[&apos;ids&apos;].push(parseCDAId(entity[&apos;id&apos;][k]));
		}
	
		// Provider name, CONF-CDXPR088
		provider[&apos;name&apos;] = parseCDAName(entity[&apos;name&apos;]);

		tmp[&apos;providers&apos;].push(provider);
	}
} catch(e) {
	logger.error(&quot;Error on &apos;Parse Providers&apos;: &quot; + e);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.8.0">
                <name>Parse Templates</name>
                <sequenceNumber>2</sequenceNumber>
                <enabled>true</enabled>
                <script>try {
	if (getArrayOrXmlLength(msg[&apos;definition&apos;]) &gt; 0) { // CONF-CDXPR092
		var definition = msg[&apos;definition&apos;][&apos;actDefinition&apos;];
		
		// Consumable document templates, CONF-CDXPR094, CONF-CDXPR094b
		tmp[&apos;templates&apos;] = [];
		for (var j = 0; j &lt; getArrayOrXmlLength(definition[&apos;id&apos;]); j++) {
			var template = {};
			template[&apos;templateId&apos;] = definition[&apos;id&apos;][j][&apos;@extension&apos;].toString();
			template[&apos;templateName&apos;] = definition[&apos;id&apos;][j][&apos;@assigningAuthorityName&apos;].toString();

			tmp[&apos;templates&apos;].push(template);
		}
	}
} catch(e) {
	logger.error(&quot;Error on &apos;Parse Templates&apos;: &quot; + e);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64">PHJlZ2lzdHJhdGlvbkV2ZW50IHhtbG5zPSJ1cm46aGw3LW9yZzp2MyIgY2xhc3NDb2RlPSJSRUci
IG1vb2RDb2RlPSJFVk4iPgogICAgPHN0YXR1c0NvZGUgY29kZT0iYWN0aXZlIi8+CiAgICA8c3Vi
amVjdDEgdHlwZUNvZGU9IlNCSiI+CiAgICAgICAgPGFzc2lnbmVkRW50aXR5IGNsYXNzQ29kZT0i
QVNTSUdORUQiPgogICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQ0RYIENs
aW5pYyBSZWdpc3RyeSBJRCIgZXh0ZW5zaW9uPSJjZHhwb3N0cHJvZC1vdGNhIiByb290PSIyLjE2
Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuMiIvPgogICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0
aG9yaXR5TmFtZT0iUE9JIENsaW5pYyBJRCIgZXh0ZW5zaW9uPSJjZHhwb3N0cHJvZC1vdGNhIiBy
b290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuMi4xIi8+CiAgICAgICAgICAgIDxjb2Rl
IGNvZGU9IkNsaW5pYyIvPgogICAgICAgICAgICA8bmFtZSB4bWxuczp4c2k9Imh0dHA6Ly93d3cu
dzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6dHlwZT0iT04iPk9zY2FyIFRlc3Qg
Q2xpbmljIEE8L25hbWU+CiAgICAgICAgICAgIDxhZGRyPgogICAgICAgICAgICAgICAgPGRlbGlt
aXRlcj4xODE4IFRlc3QgQXZlPC9kZWxpbWl0ZXI+CiAgICAgICAgICAgICAgICA8Y2l0eT5LZWxv
d25hPC9jaXR5PgogICAgICAgICAgICAgICAgPHN0YXRlPkJyaXRpc2ggQ29sdW1iaWE8L3N0YXRl
PgogICAgICAgICAgICAgICAgPGNvdW50cnk+Q2FuYWRhPC9jb3VudHJ5PgogICAgICAgICAgICAg
ICAgPHBvc3RhbENvZGU+VjFWMVYxPC9wb3N0YWxDb2RlPgogICAgICAgICAgICA8L2FkZHI+CiAg
ICAgICAgICAgIDxyZWxhdGVkVG8gdHlwZUNvZGU9IlBBUlQiPgogICAgICAgICAgICAgICAgPGFz
c2lnbmVkRW50aXR5IGNsYXNzQ29kZT0iQVNTSUdORUQiPgogICAgICAgICAgICAgICAgICAgIDxp
ZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJDRFggUmVjaXBpZW50IElEIiBleHRlbnNpb249IjEx
MTE2IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNjEiLz4KICAgICAgICAgICAg
ICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQkMgTWluaXN0cnkgUHJhY3RpdGlv
bmVyIElEIiBleHRlbnNpb249IjExMTE2IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjQwLjIu
MTEiLz4KICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQkMg
UGh5c2ljaWFuIExpY2Vuc2UgTnVtYmVyIiBleHRlbnNpb249IjExMTE2IiByb290PSIyLjE2Ljg0
MC4xLjExMzg4My40Ljc1NiIvPgogICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRo
b3JpdHlOYW1lPSJJSEEgTWVkaXRlY2ggSUQiIGV4dGVuc2lvbj0iS0lOVDUiIHJvb3Q9IjIuMTYu
ODQwLjEuMTEzODgzLjMuMjc3LjEuNjEiLz4KICAgICAgICAgICAgICAgICAgICA8Y29kZSBjb2Rl
PSJQcm92aWRlciIvPgogICAgICAgICAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgICAg
ICAgICAgICA8cHJlZml4PkRyLjwvcHJlZml4PgogICAgICAgICAgICAgICAgICAgICAgICA8ZmFt
aWx5Pktpbm5lZTwvZmFtaWx5PgogICAgICAgICAgICAgICAgICAgICAgICA8Z2l2ZW4+VG9kZDwv
Z2l2ZW4+CiAgICAgICAgICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICAgICAgPC9hc3Np
Z25lZEVudGl0eT4KICAgICAgICAgICAgICAgIDxxdWFsaWZpZWRFbnRpdHkgeG1sbnM6eHNpPSJo
dHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOm5pbD0idHJ1ZSIv
PgogICAgICAgICAgICA8L3JlbGF0ZWRUbz4KICAgICAgICAgICAgPHJlbGF0ZWRUbyB0eXBlQ29k
ZT0iUEFSVCI+CiAgICAgICAgICAgICAgICA8YXNzaWduZWRFbnRpdHkgY2xhc3NDb2RlPSJBU1NJ
R05FRCI+CiAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkJD
IE1pbmlzdHJ5IFByYWN0aXRpb25lciBJRCIgZXh0ZW5zaW9uPSI5MzE4OCIgcm9vdD0iMi4xNi44
NDAuMS4xMTM4ODMuMy40MC4yLjExIi8+CiAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmlu
Z0F1dGhvcml0eU5hbWU9IklIQSBNZWRpdGVjaCBJRCIgZXh0ZW5zaW9uPSJQTElTSUhMVSIgcm9v
dD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMS42MSIvPgogICAgICAgICAgICAgICAgICAgIDxj
b2RlIGNvZGU9IlByb3ZpZGVyIi8+CiAgICAgICAgICAgICAgICAgICAgPG5hbWU+CiAgICAgICAg
ICAgICAgICAgICAgICAgIDxwcmVmaXg+RHIuPC9wcmVmaXg+CiAgICAgICAgICAgICAgICAgICAg
ICAgIDxmYW1pbHk+UGxpc2loYjwvZmFtaWx5PgogICAgICAgICAgICAgICAgICAgICAgICA8Z2l2
ZW4+THVjaXVzPC9naXZlbj4KICAgICAgICAgICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICAg
ICAgICA8L2Fzc2lnbmVkRW50aXR5PgogICAgICAgICAgICAgICAgPHF1YWxpZmllZEVudGl0eSB4
bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6
bmlsPSJ0cnVlIi8+CiAgICAgICAgICAgIDwvcmVsYXRlZFRvPgogICAgICAgICAgICA8cmVsYXRl
ZFRvIHR5cGVDb2RlPSJQQVJUIj4KICAgICAgICAgICAgICAgIDxhc3NpZ25lZEVudGl0eSBjbGFz
c0NvZGU9IkFTU0lHTkVEIj4KICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9y
aXR5TmFtZT0iQkMgTWluaXN0cnkgUHJhY3RpdGlvbmVyIElEIiBleHRlbnNpb249IjkzMTkwIiBy
b290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjQwLjIuMTEiLz4KICAgICAgICAgICAgICAgICAgICA8
aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iSUhBIE1lZGl0ZWNoIElEIiBleHRlbnNpb249IlBM
SVNJSEFBIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xLjYxIi8+CiAgICAgICAgICAg
ICAgICAgICAgPGNvZGUgY29kZT0iUHJvdmlkZXIiLz4KICAgICAgICAgICAgICAgICAgICA8bmFt
ZT4KICAgICAgICAgICAgICAgICAgICAgICAgPHByZWZpeD5Eci48L3ByZWZpeD4KICAgICAgICAg
ICAgICAgICAgICAgICAgPGZhbWlseT5QbGlzaWhkPC9mYW1pbHk+CiAgICAgICAgICAgICAgICAg
ICAgICAgIDxnaXZlbj5BYXJvbjwvZ2l2ZW4+CiAgICAgICAgICAgICAgICAgICAgPC9uYW1lPgog
ICAgICAgICAgICAgICAgPC9hc3NpZ25lZEVudGl0eT4KICAgICAgICAgICAgICAgIDxxdWFsaWZp
ZWRFbnRpdHkgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0
YW5jZSIgeHNpOm5pbD0idHJ1ZSIvPgogICAgICAgICAgICA8L3JlbGF0ZWRUbz4KICAgICAgICAg
ICAgPHJlbGF0ZWRUbyB0eXBlQ29kZT0iUEFSVCI+CiAgICAgICAgICAgICAgICA8YXNzaWduZWRF
bnRpdHkgY2xhc3NDb2RlPSJBU1NJR05FRCI+CiAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2ln
bmluZ0F1dGhvcml0eU5hbWU9IkJDIE1pbmlzdHJ5IFByYWN0aXRpb25lciBJRCIgZXh0ZW5zaW9u
PSI5MzE5MyIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy40MC4yLjExIi8+CiAgICAgICAgICAg
ICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IklIQSBNZWRpdGVjaCBJRCIgZXh0
ZW5zaW9uPSJQTElTSUhNSSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMS42MSIvPgog
ICAgICAgICAgICAgICAgICAgIDxjb2RlIGNvZGU9IlByb3ZpZGVyIi8+CiAgICAgICAgICAgICAg
ICAgICAgPG5hbWU+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwcmVmaXg+RHIuPC9wcmVmaXg+
CiAgICAgICAgICAgICAgICAgICAgICAgIDxmYW1pbHk+UGxpc2loZjwvZmFtaWx5PgogICAgICAg
ICAgICAgICAgICAgICAgICA8Z2l2ZW4+TWlrZWw8L2dpdmVuPgogICAgICAgICAgICAgICAgICAg
IDwvbmFtZT4KICAgICAgICAgICAgICAgIDwvYXNzaWduZWRFbnRpdHk+CiAgICAgICAgICAgICAg
ICA8cXVhbGlmaWVkRW50aXR5IHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxT
Y2hlbWEtaW5zdGFuY2UiIHhzaTpuaWw9InRydWUiLz4KICAgICAgICAgICAgPC9yZWxhdGVkVG8+
CiAgICAgICAgICAgIDxyZWxhdGVkVG8gdHlwZUNvZGU9IlBBUlQiPgogICAgICAgICAgICAgICAg
PGFzc2lnbmVkRW50aXR5IGNsYXNzQ29kZT0iQVNTSUdORUQiPgogICAgICAgICAgICAgICAgICAg
IDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJCQyBNaW5pc3RyeSBQcmFjdGl0aW9uZXIgSUQi
IGV4dGVuc2lvbj0iOTMxOTQiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuNDAuMi4xMSIvPgog
ICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJJSEEgTWVkaXRl
Y2ggSUQiIGV4dGVuc2lvbj0iUExJU0lITk8iIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3
LjEuNjEiLz4KICAgICAgICAgICAgICAgICAgICA8Y29kZSBjb2RlPSJQcm92aWRlciIvPgogICAg
ICAgICAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgICAgICAgICAgICA8cHJlZml4PkRy
LjwvcHJlZml4PgogICAgICAgICAgICAgICAgICAgICAgICA8ZmFtaWx5PlBsaXNpaGc8L2ZhbWls
eT4KICAgICAgICAgICAgICAgICAgICAgICAgPGdpdmVuPk5vZWw8L2dpdmVuPgogICAgICAgICAg
ICAgICAgICAgIDwvbmFtZT4KICAgICAgICAgICAgICAgIDwvYXNzaWduZWRFbnRpdHk+CiAgICAg
ICAgICAgICAgICA8cXVhbGlmaWVkRW50aXR5IHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcv
MjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTpuaWw9InRydWUiLz4KICAgICAgICAgICAgPC9y
ZWxhdGVkVG8+CiAgICAgICAgICAgIDxyZWxhdGVkVG8gdHlwZUNvZGU9IlBBUlQiPgogICAgICAg
ICAgICAgICAgPGFzc2lnbmVkRW50aXR5IGNsYXNzQ29kZT0iQVNTSUdORUQiPgogICAgICAgICAg
ICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJCQyBNaW5pc3RyeSBQcmFjdGl0
aW9uZXIgSUQiIGV4dGVuc2lvbj0iOTMxOTUiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuNDAu
Mi4xMSIvPgogICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJJ
SEEgTWVkaXRlY2ggSUQiIGV4dGVuc2lvbj0iUExJU0lISE8iIHJvb3Q9IjIuMTYuODQwLjEuMTEz
ODgzLjMuMjc3LjEuNjEiLz4KICAgICAgICAgICAgICAgICAgICA8Y29kZSBjb2RlPSJQcm92aWRl
ciIvPgogICAgICAgICAgICAgICAgICAgIDxuYW1lPgogICAgICAgICAgICAgICAgICAgICAgICA8
cHJlZml4PkRyLjwvcHJlZml4PgogICAgICAgICAgICAgICAgICAgICAgICA8ZmFtaWx5PlBsaXNp
aGg8L2ZhbWlseT4KICAgICAgICAgICAgICAgICAgICAgICAgPGdpdmVuPkhvbWVyPC9naXZlbj4K
ICAgICAgICAgICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICAgICAgICA8L2Fzc2lnbmVkRW50
aXR5PgogICAgICAgICAgICAgICAgPHF1YWxpZmllZEVudGl0eSB4bWxuczp4c2k9Imh0dHA6Ly93
d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6bmlsPSJ0cnVlIi8+CiAgICAg
ICAgICAgIDwvcmVsYXRlZFRvPgogICAgICAgICAgICA8cmVsYXRlZFRvIHR5cGVDb2RlPSJQQVJU
Ij4KICAgICAgICAgICAgICAgIDxhc3NpZ25lZEVudGl0eSBjbGFzc0NvZGU9IkFTU0lHTkVEIj4K
ICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQkMgTWluaXN0
cnkgUHJhY3RpdGlvbmVyIElEIiBleHRlbnNpb249Ijk0NzIyIiByb290PSIyLjE2Ljg0MC4xLjEx
Mzg4My4zLjQwLjIuMTEiLz4KICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9y
aXR5TmFtZT0iSUhBIE1lZGl0ZWNoIElEIiBleHRlbnNpb249IlBMSVNJSEdSIiByb290PSIyLjE2
Ljg0MC4xLjExMzg4My4zLjI3Ny4xLjYxIi8+CiAgICAgICAgICAgICAgICAgICAgPGNvZGUgY29k
ZT0iUHJvdmlkZXIiLz4KICAgICAgICAgICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICAg
ICAgICAgICAgPHByZWZpeD5Eci48L3ByZWZpeD4KICAgICAgICAgICAgICAgICAgICAgICAgPGZh
bWlseT5QbGlzaWhxPC9mYW1pbHk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxnaXZlbj5HcmFu
dDwvZ2l2ZW4+CiAgICAgICAgICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICAgICAgPC9h
c3NpZ25lZEVudGl0eT4KICAgICAgICAgICAgICAgIDxxdWFsaWZpZWRFbnRpdHkgeG1sbnM6eHNp
PSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOm5pbD0idHJ1
ZSIvPgogICAgICAgICAgICA8L3JlbGF0ZWRUbz4KICAgICAgICAgICAgPHJlbGF0ZWRUbyB0eXBl
Q29kZT0iUEFSVCI+CiAgICAgICAgICAgICAgICA8YXNzaWduZWRFbnRpdHkgY2xhc3NDb2RlPSJB
U1NJR05FRCI+CiAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9
IklIQSBNZWRpdGVjaCBJRCIgZXh0ZW5zaW9uPSJQTElGIiByb290PSIyLjE2Ljg0MC4xLjExMzg4
My4zLjI3Ny4xLjYxIi8+CiAgICAgICAgICAgICAgICAgICAgPGNvZGUgY29kZT0iUHJvdmlkZXIi
Lz4KICAgICAgICAgICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICAgICAgICAgICAgPHBy
ZWZpeD5EcjwvcHJlZml4PgogICAgICAgICAgICAgICAgICAgICAgICA8ZmFtaWx5PlBsaXM8L2Zh
bWlseT4KICAgICAgICAgICAgICAgICAgICAgICAgPGdpdmVuPkZhbWlseTwvZ2l2ZW4+CiAgICAg
ICAgICAgICAgICAgICAgPC9uYW1lPgogICAgICAgICAgICAgICAgPC9hc3NpZ25lZEVudGl0eT4K
ICAgICAgICAgICAgICAgIDxxdWFsaWZpZWRFbnRpdHkgeG1sbnM6eHNpPSJodHRwOi8vd3d3Lncz
Lm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeHNpOm5pbD0idHJ1ZSIvPgogICAgICAgICAg
ICA8L3JlbGF0ZWRUbz4KICAgICAgICA8L2Fzc2lnbmVkRW50aXR5PgogICAgICAgIDxxdWFsaWZp
ZWRFbnRpdHkgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0
YW5jZSIgeHNpOm5pbD0idHJ1ZSIvPgogICAgPC9zdWJqZWN0MT4KICAgIDxjdXN0b2RpYW4gdHlw
ZUNvZGU9IkNTVCI+CiAgICAgICAgPGFzc2lnbmVkRW50aXR5IGNsYXNzQ29kZT0iQVNTSUdORUQi
PgogICAgICAgICAgICA8aWQgbnVsbEZsYXZvcj0iTkEiLz4KICAgICAgICAgICAgPGFzc2lnbmVk
RGV2aWNlIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFu
Y2UiIHhzaTpuaWw9InRydWUiLz4KICAgICAgICAgICAgPGFzc2lnbmVkT3JnYW5pemF0aW9uIHht
bG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTpu
aWw9InRydWUiLz4KICAgICAgICAgICAgPGFzc2lnbmVkUGVyc29uIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTpuaWw9InRydWUiLz4KICAg
ICAgICA8L2Fzc2lnbmVkRW50aXR5PgogICAgPC9jdXN0b2RpYW4+CiAgICA8ZGVmaW5pdGlvbiB0
eXBlQ29kZT0iSU5TVCI+CiAgICAgICAgPHRlbXBsYXRlSWQgYXNzaWduaW5nQXV0aG9yaXR5TmFt
ZT0iRG9jdW1lbnQgVGVtcGxhdGUgT0lEIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4x
MDAuNDAiLz4KICAgICAgICA8YWN0RGVmaW5pdGlvbiBjbGFzc0NvZGU9IklORk8iIG1vb2RDb2Rl
PSJERUYiPgogICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQWRtaXQgTm90
aWZpY2F0aW9uIFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAu
Mi43IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAg
ICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQW5hdG9taWMgUGF0aG9sb2d5IFJlcG9ydCBU
ZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuMiIgcm9vdD0i
Mi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgPGlkIGFzc2ln
bmluZ0F1dGhvcml0eU5hbWU9IkNvbnN1bHRhdGlvbiBOb3RlIiBleHRlbnNpb249IjIuMTYuODQw
LjEuMTEzODgzLjEwLjIwLjQiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4x
Ii8+CiAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJEaWFnbm9zdGljIElt
YWdpbmcgUmVwb3J0IFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuNTEu
NjAuMi41IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAg
ICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iRGlzY2hhcmdlIE5vdGlmaWNhdGlvbiBU
ZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuNiIgcm9vdD0i
Mi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgPGlkIGFzc2ln
bmluZ0F1dGhvcml0eU5hbWU9IkRpc2NoYXJnZSBTdW1tYXJ5IFRlbXBsYXRlIiBleHRlbnNpb249
IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi40IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4z
LjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0i
ZTJlIEdlbmVyaWMgRXBpc29kaWMgRG9jdW1lbnQiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4
ODMuMy4xODE4LjEwLjEuMiIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEi
Lz4KICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9ImUyZSBHZW5lcmljIFVu
c3RydWN0dXJlZCBSZWZlcnJhbCIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjE4MTgu
MTAuMS41IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAg
ICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iZTJlIFVuc3RydWN0dXJlZCBEb2N1bWVu
dCIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjE4MTguMTAuMS40IiByb290PSIyLjE2
Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICA8aWQgYXNzaWduaW5n
QXV0aG9yaXR5TmFtZT0iSGlzdG9yeSBhbmQgUGh5c2ljYWwgTm90ZSIgZXh0ZW5zaW9uPSIyLjE2
Ljg0MC4xLjExMzg4My4xMC4yMC4yIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAu
NDAuMSIvPgogICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iTGFiIFJlcG9y
dCBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuMSIgcm9v
dD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgPGlkIGFz
c2lnbmluZ0F1dGhvcml0eU5hbWU9Ik9wZXJhdGl2ZSBOb3RlIiBleHRlbnNpb249IjIuMTYuODQw
LjEuMTEzODgzLjEwLjIwLjciIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4x
Ii8+CiAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJQcm9jZWR1cmUgTm90
ZSBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuMyIgcm9v
dD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgPGlkIGFz
c2lnbmluZ0F1dGhvcml0eU5hbWU9IlByb2dyZXNzIE5vdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAu
MS4xMTM4ODMuMTAuMjAuMjEiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4x
Ii8+CiAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJVbnN0cnVjdHVyZWQg
UmVwb3J0IFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjE5IiBy
b290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICA8Y29k
ZSBudWxsRmxhdm9yPSJVTksiLz4KICAgICAgICA8L2FjdERlZmluaXRpb24+CiAgICA8L2RlZmlu
aXRpb24+CjwvcmVnaXN0cmF0aW9uRXZlbnQ+Cg==</inboundTemplate>
            <outboundTemplate encoding="base64">e30=</outboundTemplate>
            <inboundDataType>HL7V3</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.8.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.8.0">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.8.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.8.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.8.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.8.0">
            <elements/>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.8.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.8.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.8.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.8.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.8.0">
            <elements>
              <com.mirth.connect.model.IteratorRule version="3.8.0">
                <name>Accept message if at least one of the iterations returns true for each msg[&apos;definition&apos;][&apos;actDefinition&apos;][&apos;id&apos;]</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <properties>
                  <target>msg[&apos;definition&apos;][&apos;actDefinition&apos;][&apos;id&apos;]</target>
                  <indexVariable>i</indexVariable>
                  <prefixSubstitutions/>
                  <children>
                    <com.mirth.connect.plugins.rulebuilder.RuleBuilderRule version="3.8.0">
                      <name>Accept message if &quot;msg[&apos;definition&apos;][&apos;actDefinition&apos;][&apos;id&apos;][i][&apos;@extension&apos;].toString()&quot; equals &apos;2.16.840.1.113883.3.1818.10.1.5&apos;</name>
                      <sequenceNumber>0-0</sequenceNumber>
                      <enabled>true</enabled>
                      <field>msg[&apos;definition&apos;][&apos;actDefinition&apos;][&apos;id&apos;][i][&apos;@extension&apos;].toString()</field>
                      <condition>EQUALS</condition>
                      <values>
                        <string>&apos;2.16.840.1.113883.3.1818.10.1.5&apos;</string>
                      </values>
                    </com.mirth.connect.plugins.rulebuilder.RuleBuilderRule>
                  </children>
                  <intersectIterations>false</intersectIterations>
                  <breakEarly>true</breakEarly>
                </properties>
              </com.mirth.connect.model.IteratorRule>
            </elements>
          </filter>
          <transportName>JavaScript Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>true</waitForPrevious>
        </connector>
        <connector version="3.8.0">
          <metaDataId>3</metaDataId>
          <name>Parse Provider Registry</name>
          <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.8.0">
            <pluginProperties/>
            <destinationConnectorProperties version="3.8.0">
              <queueEnabled>false</queueEnabled>
              <sendFirst>false</sendFirst>
              <retryIntervalMillis>10000</retryIntervalMillis>
              <regenerateTemplate>false</regenerateTemplate>
              <retryCount>0</retryCount>
              <rotate>false</rotate>
              <includeFilterTransformer>false</includeFilterTransformer>
              <threadCount>1</threadCount>
              <threadAssignmentVariable></threadAssignmentVariable>
              <validateResponse>false</validateResponse>
              <resourceIds class="linked-hash-map">
                <entry>
                  <string>Default Resource</string>
                  <string>[Default Resource]</string>
                </entry>
              </resourceIds>
              <queueBufferSize>1000</queueBufferSize>
              <reattachAttachments>true</reattachAttachments>
            </destinationConnectorProperties>
            <script>logger.debug(&quot;Parse Provider Registry&quot;);

//logger.debug(&quot;CDA DOC: &quot; + XmlUtil.prettyPrint(connectorMessage.getRawData()));

responseMap.put(&apos;responseMessage&apos;, connectorMessage.getTransformedData());	
</script>
          </properties>
          <transformer version="3.8.0">
            <elements>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.8.0">
                <name>Parse Providers</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <script>try {
	// Provider, CONF-CDXPR023
	var provider = {};
	
	var entity = msg[&apos;subject1&apos;][&apos;assignedEntity&apos;];
	
	//if (entity[&apos;code&apos;][&apos;@code&apos;].toString() !== &apos;Provider&apos;) { // CONF-CDXPR084b
	//	continue; // TODO Provider Groups?
	//}
	
	// Provider ids, CONF-CDXPR085, CONF-CDXPR086
	provider[&apos;ids&apos;] = [];
	for (var k = 0; k &lt; getArrayOrXmlLength(entity[&apos;id&apos;]); k++) {
		provider[&apos;ids&apos;].push(parseCDAId(entity[&apos;id&apos;][k]));
	}

	// Provider name, CONF-CDXPR088
	provider[&apos;name&apos;] = parseCDAName(entity[&apos;name&apos;]);

	tmp = provider;
} catch(e) {
	logger.error(&quot;Error on &apos;Parse Providers&apos;: &quot; + e);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
              <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.8.0">
                <name>Parse Clinic</name>
                <sequenceNumber>1</sequenceNumber>
                <enabled>true</enabled>
                <script>try {
	var assignedEntity = msg[&apos;subject1&apos;][&apos;assignedEntity&apos;];

	tmp[&apos;clinics&apos;] = [];
	
	// Clinics list, CONF-CDXPR034, CONF-CDXPR035
	for (var j = 0; j &lt; getArrayOrXmlLength(assignedEntity[&apos;performance&apos;][&apos;actDefinitionOrEvent&apos;][&apos;location&apos;]); j++) {
		var clinic = {};

		var location = assignedEntity[&apos;performance&apos;][&apos;actDefinitionOrEvent&apos;][&apos;location&apos;][j];
		
		// filter clinics by document type
		var docType = &apos;2.16.840.1.113883.3.1818.10.1.5&apos;; // TODO support different types
		if (evaluateXPath(location, &quot;*//actDefinition/id/@extension=&apos;&quot; + docType + &quot;&apos;&quot;) == &apos;false&apos;) {
			logger.debug(&quot;Clinic not selected: &quot; + location[&apos;serviceDeliveryLocation&apos;][&apos;location&apos;][&apos;name&apos;].toString());
			continue;
		}

		var entity = location[&apos;serviceDeliveryLocation&apos;];

		// Clinic IDs, CONF-CDXPR036, CONF-CDXPR037
		clinic[&apos;ids&apos;] = [];
		for (var k = 0; k &lt; getArrayOrXmlLength(entity[&apos;id&apos;]); k++) {
			clinic[&apos;ids&apos;].push(parseCDAId(entity[&apos;id&apos;][k]));
		}
		
		// Clinic address, CONF-CDXPR039, CDXPR040
		clinic[&apos;address&apos;] = parseCDAAddress(entity[&apos;addr&apos;]);

		clinic[&apos;name&apos;] = entity[&apos;location&apos;][&apos;name&apos;].toString(); // CONF-CDXPR042

		var definition = location.*::[&apos;definition&apos;][&apos;actDefinition&apos;];

		// Consumable document templates, CONF-CDXPR094, CONF-CDXPR094b
		clinic[&apos;templates&apos;] = [];
		for (var k = 0; k &lt; getArrayOrXmlLength(definition[&apos;id&apos;]); k++) {
			var template = {};
			template[&apos;templateId&apos;] = definition[&apos;id&apos;][k][&apos;@extension&apos;].toString();
			template[&apos;templateName&apos;] = definition[&apos;id&apos;][k][&apos;@assigningAuthorityName&apos;].toString();

			clinic[&apos;templates&apos;].push(template);
		}

		tmp[&apos;clinics&apos;].push(clinic);
	}
} catch(e) {
	logger.error(&quot;Error on &apos;Parse Clinic&apos;: &quot; + e);
}</script>
              </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
            </elements>
            <inboundTemplate encoding="base64">PHJlZ2lzdHJhdGlvbkV2ZW50IHhtbG5zPSJ1cm46aGw3LW9yZzp2MyIgY2xhc3NDb2RlPSJSRUci
IG1vb2RDb2RlPSJFVk4iPgogICAgPHN0YXR1c0NvZGUgY29kZT0iYWN0aXZlIi8+CiAgICA8c3Vi
amVjdDEgdHlwZUNvZGU9IlNCSiI+CiAgICAgICAgPGFzc2lnbmVkRW50aXR5IGNsYXNzQ29kZT0i
QVNTSUdORUQiPgogICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQkMgTWlu
aXN0cnkgUHJhY3RpdGlvbmVyIElEIiBleHRlbnNpb249IjkzMTg4IiByb290PSIyLjE2Ljg0MC4x
LjExMzg4My4zLjQwLjIuMTEiLz4KICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5h
bWU9IklIQSBNZWRpdGVjaCBJRCIgZXh0ZW5zaW9uPSJQTElTSUhMVSIgcm9vdD0iMi4xNi44NDAu
MS4xMTM4ODMuMy4yNzcuMS42MSIvPgogICAgICAgICAgICA8Y29kZSBjb2RlPSJQcm92aWRlciIv
PgogICAgICAgICAgICA8bmFtZT4KICAgICAgICAgICAgICAgIDxwcmVmaXg+RHIuPC9wcmVmaXg+
CiAgICAgICAgICAgICAgICA8ZmFtaWx5PlBsaXNpaGI8L2ZhbWlseT4KICAgICAgICAgICAgICAg
IDxnaXZlbj5MdWNpdXM8L2dpdmVuPgogICAgICAgICAgICA8L25hbWU+CiAgICAgICAgICAgIDxw
ZXJmb3JtYW5jZSB0eXBlQ29kZT0iUFBSRiI+CiAgICAgICAgICAgICAgICA8YWN0RGVmaW5pdGlv
bk9yRXZlbnQgY2xhc3NDb2RlPSJDQUNUIiBtb29kQ29kZT0iREVGIj4KICAgICAgICAgICAgICAg
ICAgICA8bG9jYXRpb24gdHlwZUNvZGU9IkxPQyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxz
ZXF1ZW5jZU51bWJlciB2YWx1ZT0iMSIvPgogICAgICAgICAgICAgICAgICAgICAgICA8c2Vydmlj
ZURlbGl2ZXJ5TG9jYXRpb24gY2xhc3NDb2RlPSJTRExPQyI+CiAgICAgICAgICAgICAgICAgICAg
ICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQ0RYIENsaW5pYyBSZWdpc3RyeSBJ
RCIgZXh0ZW5zaW9uPSJDRFhDUjAwMDIxIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4x
MDAuMiIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvZGUgY29kZT0iQ2xpbmljIi8+
CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YWRkcj4KICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICA8ZGVsaW1pdGVyPjE1MCBLaW5nIFN0LiBXLiBTdGUgMTMwMDwvZGVsaW1pdGVy
PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjaXR5PlRvcm9udG88L2NpdHk+CiAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0YXRlPkJyaXRpc2ggQ29sdW1iaWE8L3N0
YXRlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb3VudHJ5PkNhbmFkYTwvY291
bnRyeT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cG9zdGFsQ29kZT5NNUggMUo5
PC9wb3N0YWxDb2RlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hZGRyPgogICAgICAg
ICAgICAgICAgICAgICAgICAgICAgPGxvY2F0aW9uIGNsYXNzQ29kZT0iUExDIiBkZXRlcm1pbmVy
Q29kZT0iSU5TVEFOQ0UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPkNh
bmFkYSBIZWFsdGggSW5mb3dheSBUZXN0IENsaW5pYzwvbmFtZT4KICAgICAgICAgICAgICAgICAg
ICAgICAgICAgIDwvbG9jYXRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VydmljZURl
bGl2ZXJ5TG9jYXRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgIDxuczI6ZGVmaW5pdGlvbiB4
bWxuczpuczI9InVybjpiY2NkeCIgdHlwZUNvZGU9IklOU1QiPgogICAgICAgICAgICAgICAgICAg
ICAgICAgICAgPHRlbXBsYXRlSWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iRG9jdW1lbnQgVGVt
cGxhdGUgT0lEIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAiLz4KICAgICAg
ICAgICAgICAgICAgICAgICAgICAgIDxhY3REZWZpbml0aW9uIGNsYXNzQ29kZT0iSU5GTyIgbW9v
ZENvZGU9IkRFRiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmlu
Z0F1dGhvcml0eU5hbWU9IkFuYXRvbWljIFBhdGhvbG9neSBSZXBvcnQgVGVtcGxhdGUiIGV4dGVu
c2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjIiIHJvb3Q9IjIuMTYuODQwLjEuMTEz
ODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlk
IGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkNvbnN1bHRhdGlvbiBOb3RlIiBleHRlbnNpb249IjIu
MTYuODQwLjEuMTEzODgzLjEwLjIwLjQiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEw
MC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1
dGhvcml0eU5hbWU9IkRpYWdub3N0aWMgSW1hZ2luZyBSZXBvcnQgVGVtcGxhdGUiIGV4dGVuc2lv
bj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjUiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgz
LjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkIGFz
c2lnbmluZ0F1dGhvcml0eU5hbWU9IkRpc2NoYXJnZSBTdW1tYXJ5IFRlbXBsYXRlIiBleHRlbnNp
b249IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi40IiByb290PSIyLjE2Ljg0MC4xLjExMzg4
My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZCBh
c3NpZ25pbmdBdXRob3JpdHlOYW1lPSJlMmUgR2VuZXJpYyBFcGlzb2RpYyBEb2N1bWVudCIgZXh0
ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjE4MTguMTAuMS4yIiByb290PSIyLjE2Ljg0MC4x
LjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
IDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJlMmUgR2VuZXJpYyBVbnN0cnVjdHVyZWQgUmVm
ZXJyYWwiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy4xODE4LjEwLjEuNSIgcm9vdD0i
Mi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iZTJlIFVuc3RydWN0dXJlZCBE
b2N1bWVudCIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjE4MTguMTAuMS40IiByb290
PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJIaXN0b3J5IGFuZCBQaHlz
aWNhbCBOb3RlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIiIHJvb3Q9IjIu
MTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkxhYiBSZXBvcnQgVGVtcGxhdGUi
IGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjEiIHJvb3Q9IjIuMTYuODQw
LjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9Ik9wZXJhdGl2ZSBOb3RlIiBleHRlbnNpb249
IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjciIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3
LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmlu
Z0F1dGhvcml0eU5hbWU9IlByb2NlZHVyZSBOb3RlIFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYu
ODQwLjEuMTEzODgzLjMuNTEuNjAuMi4zIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4x
MDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdB
dXRob3JpdHlOYW1lPSJQcm9ncmVzcyBOb3RlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgz
LjEwLjIwLjIxIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJV
bnN0cnVjdHVyZWQgUmVwb3J0IFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgz
LjEwLjIwLjE5IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb2RlIG51bGxGbGF2b3I9IlVOSyIvPgogICAg
ICAgICAgICAgICAgICAgICAgICAgICAgPC9hY3REZWZpbml0aW9uPgogICAgICAgICAgICAgICAg
ICAgICAgICA8L25zMjpkZWZpbml0aW9uPgogICAgICAgICAgICAgICAgICAgIDwvbG9jYXRpb24+
CiAgICAgICAgICAgICAgICAgICAgPGxvY2F0aW9uIHR5cGVDb2RlPSJMT0MiPgogICAgICAgICAg
ICAgICAgICAgICAgICA8c2VxdWVuY2VOdW1iZXIgdmFsdWU9IjIiLz4KICAgICAgICAgICAgICAg
ICAgICAgICAgPHNlcnZpY2VEZWxpdmVyeUxvY2F0aW9uIGNsYXNzQ29kZT0iU0RMT0MiPgogICAg
ICAgICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkNEWCBD
bGluaWMgUmVnaXN0cnkgSUQiIGV4dGVuc2lvbj0iY2R4dGVzdC1jaHMiIHJvb3Q9IjIuMTYuODQw
LjEuMTEzODgzLjMuMjc3LjEwMC4yIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29k
ZSBjb2RlPSJDbGluaWMiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhZGRyPgogICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdGF0ZT5Ccml0aXNoIENvbHVtYmlhPC9zdGF0
ZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y291bnRyeT5DYW5hZGE8L2NvdW50
cnk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2FkZHI+CiAgICAgICAgICAgICAgICAg
ICAgICAgICAgICA8bG9jYXRpb24gY2xhc3NDb2RlPSJQTEMiIGRldGVybWluZXJDb2RlPSJJTlNU
QU5DRSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+Q2FuZGlhbiBIZWFs
dGggU3lzdGVtczwvbmFtZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbG9jYXRpb24+
CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VydmljZURlbGl2ZXJ5TG9jYXRpb24+CiAgICAg
ICAgICAgICAgICAgICAgICAgIDxuczI6ZGVmaW5pdGlvbiB4bWxuczpuczI9InVybjpiY2NkeCIg
dHlwZUNvZGU9IklOU1QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlSWQg
YXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iRG9jdW1lbnQgVGVtcGxhdGUgT0lEIiByb290PSIyLjE2
Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAg
IDxhY3REZWZpbml0aW9uIGNsYXNzQ29kZT0iSU5GTyIgbW9vZENvZGU9IkRFRiI+CiAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkFkbWl0
IE5vdGlmaWNhdGlvbiBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUx
LjYwLjIuNyIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQW5h
dG9taWMgUGF0aG9sb2d5IFJlcG9ydCBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjEx
Mzg4My4zLjUxLjYwLjIuMiIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEi
Lz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5
TmFtZT0iQ29uc3VsdGF0aW9uIE5vdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMTAu
MjAuNCIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iRGlhZ25v
c3RpYyBJbWFnaW5nIFJlcG9ydCBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4
My4zLjUxLjYwLjIuNSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4K
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFt
ZT0iRGlzY2hhcmdlIE5vdGlmaWNhdGlvbiBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4x
LjExMzg4My4zLjUxLjYwLjIuNiIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQw
LjEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9y
aXR5TmFtZT0iRGlzY2hhcmdlIFN1bW1hcnkgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAu
MS4xMTM4ODMuMy41MS42MC4yLjQiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40
MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhv
cml0eU5hbWU9ImUyZSBHZW5lcmljIEVwaXNvZGljIERvY3VtZW50IiBleHRlbnNpb249IjIuMTYu
ODQwLjEuMTEzODgzLjMuMTgxOC4xMC4xLjIiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3
LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmlu
Z0F1dGhvcml0eU5hbWU9ImUyZSBHZW5lcmljIFVuc3RydWN0dXJlZCBSZWZlcnJhbCIgZXh0ZW5z
aW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjE4MTguMTAuMS41IiByb290PSIyLjE2Ljg0MC4xLjEx
Mzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxp
ZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJlMmUgVW5zdHJ1Y3R1cmVkIERvY3VtZW50IiBleHRl
bnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuMTgxOC4xMC4xLjQiIHJvb3Q9IjIuMTYuODQwLjEu
MTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
PGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9Ikhpc3RvcnkgYW5kIFBoeXNpY2FsIE5vdGUiIGV4
dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMiIgcm9vdD0iMi4xNi44NDAuMS4xMTM4
ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQg
YXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iTGFiIFJlcG9ydCBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIy
LjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuMSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4y
NzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWdu
aW5nQXV0aG9yaXR5TmFtZT0iT3BlcmF0aXZlIE5vdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4x
MTM4ODMuMTAuMjAuNyIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4K
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFt
ZT0iUHJvY2VkdXJlIE5vdGUgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMu
My41MS42MC4yLjMiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9
IlByb2dyZXNzIE5vdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjEiIHJv
b3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IlVuc3RydWN0dXJlZCBS
ZXBvcnQgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMTkiIHJv
b3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgPGNvZGUgbnVsbEZsYXZvcj0iVU5LIi8+CiAgICAgICAgICAgICAgICAg
ICAgICAgICAgICA8L2FjdERlZmluaXRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbnMy
OmRlZmluaXRpb24+CiAgICAgICAgICAgICAgICAgICAgPC9sb2NhdGlvbj4KICAgICAgICAgICAg
ICAgICAgICA8bG9jYXRpb24gdHlwZUNvZGU9IkxPQyI+CiAgICAgICAgICAgICAgICAgICAgICAg
IDxzZXF1ZW5jZU51bWJlciB2YWx1ZT0iMyIvPgogICAgICAgICAgICAgICAgICAgICAgICA8c2Vy
dmljZURlbGl2ZXJ5TG9jYXRpb24gY2xhc3NDb2RlPSJTRExPQyI+CiAgICAgICAgICAgICAgICAg
ICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQ0RYIENsaW5pYyBSZWdpc3Ry
eSBJRCIgZXh0ZW5zaW9uPSJjZHhBIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAu
MiIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvZGUgY29kZT0iQ2xpbmljIi8+CiAg
ICAgICAgICAgICAgICAgICAgICAgICAgICA8YWRkcj4KICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICA8ZGVsaW1pdGVyPkV4dGVybmFsIFBvc3QgUHJvZDwvZGVsaW1pdGVyPgogICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgIDxzdGF0ZT5Ccml0aXNoIENvbHVtYmlhPC9zdGF0ZT4K
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y291bnRyeT5DYW5hZGE8L2NvdW50cnk+
CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2FkZHI+CiAgICAgICAgICAgICAgICAgICAg
ICAgICAgICA8bG9jYXRpb24gY2xhc3NDb2RlPSJQTEMiIGRldGVybWluZXJDb2RlPSJJTlNUQU5D
RSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+Q2xpbmljIEE8L25hbWU+
CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xvY2F0aW9uPgogICAgICAgICAgICAgICAg
ICAgICAgICA8L3NlcnZpY2VEZWxpdmVyeUxvY2F0aW9uPgogICAgICAgICAgICAgICAgICAgICAg
ICA8bnMyOmRlZmluaXRpb24geG1sbnM6bnMyPSJ1cm46YmNjZHgiIHR5cGVDb2RlPSJJTlNUIj4K
ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkIGFzc2lnbmluZ0F1dGhvcml0
eU5hbWU9IkRvY3VtZW50IFRlbXBsYXRlIE9JRCIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4y
NzcuMTAwLjQwIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YWN0RGVmaW5pdGlvbiBj
bGFzc0NvZGU9IklORk8iIG1vb2RDb2RlPSJERUYiPgogICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJBZG1pdCBOb3RpZmljYXRpb24gVGVt
cGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjciIHJvb3Q9IjIu
MTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkFuYXRvbWljIFBhdGhvbG9neSBS
ZXBvcnQgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjIi
IHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkNvbnN1bHRhdGlv
biBOb3RlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjQiIHJvb3Q9IjIuMTYu
ODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkRpYWdub3N0aWMgSW1hZ2luZyBSZXBv
cnQgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjUiIHJv
b3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkRpc2NoYXJnZSBOb3Rp
ZmljYXRpb24gVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4y
LjYiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkRpc2NoYXJn
ZSBTdW1tYXJ5IFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAu
Mi40IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJlMmUgR2Vu
ZXJpYyBFcGlzb2RpYyBEb2N1bWVudCIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjE4
MTguMTAuMS4yIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJl
MmUgR2VuZXJpYyBVbnN0cnVjdHVyZWQgUmVmZXJyYWwiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4x
MTM4ODMuMy4xODE4LjEwLjEuNSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQw
LjEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9y
aXR5TmFtZT0iZTJlIFVuc3RydWN0dXJlZCBEb2N1bWVudCIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4x
LjExMzg4My4zLjE4MTguMTAuMS40IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAu
NDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRo
b3JpdHlOYW1lPSJIaXN0b3J5IGFuZCBQaHlzaWNhbCBOb3RlIiBleHRlbnNpb249IjIuMTYuODQw
LjEuMTEzODgzLjEwLjIwLjIiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4x
Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0
eU5hbWU9IkxhYiBSZXBvcnQgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMu
My41MS42MC4yLjEiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9
Ik9wZXJhdGl2ZSBOb3RlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjciIHJv
b3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IlByb2NlZHVyZSBOb3Rl
IFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi4zIiByb290
PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJQcm9ncmVzcyBOb3RlIiBl
eHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIxIiByb290PSIyLjE2Ljg0MC4xLjEx
Mzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxp
ZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJVbnN0cnVjdHVyZWQgUmVwb3J0IFRlbXBsYXRlIiBl
eHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjE5IiByb290PSIyLjE2Ljg0MC4xLjEx
Mzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxj
b2RlIG51bGxGbGF2b3I9IlVOSyIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hY3RE
ZWZpbml0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICA8L25zMjpkZWZpbml0aW9uPgogICAg
ICAgICAgICAgICAgICAgIDwvbG9jYXRpb24+CiAgICAgICAgICAgICAgICAgICAgPGxvY2F0aW9u
IHR5cGVDb2RlPSJMT0MiPgogICAgICAgICAgICAgICAgICAgICAgICA8c2VxdWVuY2VOdW1iZXIg
dmFsdWU9IjQiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPHNlcnZpY2VEZWxpdmVyeUxvY2F0
aW9uIGNsYXNzQ29kZT0iU0RMT0MiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkIGFz
c2lnbmluZ0F1dGhvcml0eU5hbWU9IkNEWCBDbGluaWMgUmVnaXN0cnkgSUQiIGV4dGVuc2lvbj0i
Q0RYQ1IwMDA1NSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjIiLz4KICAgICAg
ICAgICAgICAgICAgICAgICAgICAgIDxjb2RlIGNvZGU9IkNsaW5pYyIvPgogICAgICAgICAgICAg
ICAgICAgICAgICAgICAgPGFkZHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0
YXRlPkJyaXRpc2ggQ29sdW1iaWE8L3N0YXRlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgIDxjb3VudHJ5PkNhbmFkYTwvY291bnRyeT4KICAgICAgICAgICAgICAgICAgICAgICAgICAg
IDwvYWRkcj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsb2NhdGlvbiBjbGFzc0NvZGU9
IlBMQyIgZGV0ZXJtaW5lckNvZGU9IklOU1RBTkNFIj4KICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICA8bmFtZT5Db25zdGFibGUgQ29uc3VsdGluZzwvbmFtZT4KICAgICAgICAgICAgICAg
ICAgICAgICAgICAgIDwvbG9jYXRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2Vydmlj
ZURlbGl2ZXJ5TG9jYXRpb24+CiAgICAgICAgICAgICAgICAgICAgPC9sb2NhdGlvbj4KICAgICAg
ICAgICAgICAgICAgICA8bG9jYXRpb24gdHlwZUNvZGU9IkxPQyI+CiAgICAgICAgICAgICAgICAg
ICAgICAgIDxzZXF1ZW5jZU51bWJlciB2YWx1ZT0iNSIvPgogICAgICAgICAgICAgICAgICAgICAg
ICA8c2VydmljZURlbGl2ZXJ5TG9jYXRpb24gY2xhc3NDb2RlPSJTRExPQyI+CiAgICAgICAgICAg
ICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQ0RYIENsaW5pYyBS
ZWdpc3RyeSBJRCIgZXh0ZW5zaW9uPSJDRFgwMDAwMiIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMu
My4yNzcuMTAwLjIiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb2RlIGNvZGU9IkNs
aW5pYyIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFkZHI+CiAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgPGRlbGltaXRlcj5TdWl0ZSAzOTAsIDg4OSBIYXJib3Vyc2lkZSBE
cml2ZTwvZGVsaW1pdGVyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjaXR5Pk5v
cnRoIFZhbmNvdXZlcjwvY2l0eT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Rh
dGU+QnJpdGlzaCBDb2x1bWJpYTwvc3RhdGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgPGNvdW50cnk+Q2FuYWRhPC9jb3VudHJ5PgogICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgIDxwb3N0YWxDb2RlPlY3UCAzUzE8L3Bvc3RhbENvZGU+CiAgICAgICAgICAgICAgICAgICAg
ICAgICAgICA8L2FkZHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bG9jYXRpb24gY2xh
c3NDb2RlPSJQTEMiIGRldGVybWluZXJDb2RlPSJJTlNUQU5DRSI+CiAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgPG5hbWU+RXh0ZXJuYWwgSW50cmFoZWFsdGggVGVzdCBDbGluaWM8L25h
bWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xvY2F0aW9uPgogICAgICAgICAgICAg
ICAgICAgICAgICA8L3NlcnZpY2VEZWxpdmVyeUxvY2F0aW9uPgogICAgICAgICAgICAgICAgICAg
ICAgICA8bnMyOmRlZmluaXRpb24geG1sbnM6bnMyPSJ1cm46YmNjZHgiIHR5cGVDb2RlPSJJTlNU
Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkIGFzc2lnbmluZ0F1dGhv
cml0eU5hbWU9IkRvY3VtZW50IFRlbXBsYXRlIE9JRCIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMu
My4yNzcuMTAwLjQwIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YWN0RGVmaW5pdGlv
biBjbGFzc0NvZGU9IklORk8iIG1vb2RDb2RlPSJERUYiPgogICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJBZG1pdCBOb3RpZmljYXRpb24g
VGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjciIHJvb3Q9
IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkFuYXRvbWljIFBhdGhvbG9n
eSBSZXBvcnQgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4y
LjIiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkNvbnN1bHRh
dGlvbiBOb3RlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjQiIHJvb3Q9IjIu
MTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkRpYWdub3N0aWMgSW1hZ2luZyBS
ZXBvcnQgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjUi
IHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkRpc2NoYXJnZSBO
b3RpZmljYXRpb24gVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42
MC4yLjYiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkRpc2No
YXJnZSBTdW1tYXJ5IFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuNTEu
NjAuMi40IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJlMmUg
R2VuZXJpYyBFcGlzb2RpYyBEb2N1bWVudCIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4z
LjE4MTguMTAuMS4yIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgog
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1l
PSJlMmUgR2VuZXJpYyBVbnN0cnVjdHVyZWQgUmVmZXJyYWwiIGV4dGVuc2lvbj0iMi4xNi44NDAu
MS4xMTM4ODMuMy4xODE4LjEwLjEuNSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAw
LjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0
aG9yaXR5TmFtZT0iZTJlIFVuc3RydWN0dXJlZCBEb2N1bWVudCIgZXh0ZW5zaW9uPSIyLjE2Ljg0
MC4xLjExMzg4My4zLjE4MTguMTAuMS40IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4x
MDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdB
dXRob3JpdHlOYW1lPSJIaXN0b3J5IGFuZCBQaHlzaWNhbCBOb3RlIiBleHRlbnNpb249IjIuMTYu
ODQwLjEuMTEzODgzLjEwLjIwLjIiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40
MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhv
cml0eU5hbWU9IkxhYiBSZXBvcnQgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4
ODMuMy41MS42MC4yLjEiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+
CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5h
bWU9Ik9wZXJhdGl2ZSBOb3RlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjci
IHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IlByb2NlZHVyZSBO
b3RlIFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi4zIiBy
b290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJQcm9ncmVzcyBOb3Rl
IiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIxIiByb290PSIyLjE2Ljg0MC4x
LjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
IDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJVbnN0cnVjdHVyZWQgUmVwb3J0IFRlbXBsYXRl
IiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjE5IiByb290PSIyLjE2Ljg0MC4x
LjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
IDxjb2RlIG51bGxGbGF2b3I9IlVOSyIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9h
Y3REZWZpbml0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICA8L25zMjpkZWZpbml0aW9uPgog
ICAgICAgICAgICAgICAgICAgIDwvbG9jYXRpb24+CiAgICAgICAgICAgICAgICAgICAgPGxvY2F0
aW9uIHR5cGVDb2RlPSJMT0MiPgogICAgICAgICAgICAgICAgICAgICAgICA8c2VxdWVuY2VOdW1i
ZXIgdmFsdWU9IjYiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPHNlcnZpY2VEZWxpdmVyeUxv
Y2F0aW9uIGNsYXNzQ29kZT0iU0RMT0MiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlk
IGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkNEWCBDbGluaWMgUmVnaXN0cnkgSUQiIGV4dGVuc2lv
bj0iQ0RYMDAwMDMiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC4yIi8+CiAgICAg
ICAgICAgICAgICAgICAgICAgICAgICA8Y29kZSBjb2RlPSJDbGluaWMiLz4KICAgICAgICAgICAg
ICAgICAgICAgICAgICAgIDxhZGRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxk
ZWxpbWl0ZXI+U3VpdGUgMzkwLCA4ODkgSGFyYm91cnNpZGUgRHJpdmU8L2RlbGltaXRlcj4KICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y2l0eT5Ob3J0aCBWYW5jb3V2ZXI8L2NpdHk+
CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0YXRlPkJyaXRpc2ggQ29sdW1iaWE8
L3N0YXRlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb3VudHJ5PkNhbmFkYTwv
Y291bnRyeT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cG9zdGFsQ29kZT5WN1Ag
M1MxPC9wb3N0YWxDb2RlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hZGRyPgogICAg
ICAgICAgICAgICAgICAgICAgICAgICAgPGxvY2F0aW9uIGNsYXNzQ29kZT0iUExDIiBkZXRlcm1p
bmVyQ29kZT0iSU5TVEFOQ0UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1l
PkV4dGVybmFsIEludHJhaGVhbHRoIFRlc3RpbmcgQ2xpbmljIDI8L25hbWU+CiAgICAgICAgICAg
ICAgICAgICAgICAgICAgICA8L2xvY2F0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICA8L3Nl
cnZpY2VEZWxpdmVyeUxvY2F0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICA8bnMyOmRlZmlu
aXRpb24geG1sbnM6bnMyPSJ1cm46YmNjZHgiIHR5cGVDb2RlPSJJTlNUIj4KICAgICAgICAgICAg
ICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkRvY3Vt
ZW50IFRlbXBsYXRlIE9JRCIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwIi8+
CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YWN0RGVmaW5pdGlvbiBjbGFzc0NvZGU9IklO
Rk8iIG1vb2RDb2RlPSJERUYiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZCBh
c3NpZ25pbmdBdXRob3JpdHlOYW1lPSJBbmF0b21pYyBQYXRob2xvZ3kgUmVwb3J0IFRlbXBsYXRl
IiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi4yIiByb290PSIyLjE2Ljg0
MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJDb25zdWx0YXRpb24gTm90ZSIgZXh0ZW5z
aW9uPSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC40IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4z
LjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3Np
Z25pbmdBdXRob3JpdHlOYW1lPSJEaWFnbm9zdGljIEltYWdpbmcgUmVwb3J0IFRlbXBsYXRlIiBl
eHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi41IiByb290PSIyLjE2Ljg0MC4x
LjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
IDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJEaXNjaGFyZ2UgU3VtbWFyeSBUZW1wbGF0ZSIg
ZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuNCIgcm9vdD0iMi4xNi44NDAu
MS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iZTJlIEdlbmVyaWMgRXBpc29kaWMgRG9jdW1l
bnQiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy4xODE4LjEwLjEuMiIgcm9vdD0iMi4x
Ni44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iZTJlIEdlbmVyaWMgVW5zdHJ1Y3R1
cmVkIFJlZmVycmFsIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuMTgxOC4xMC4xLjUi
IHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9ImUyZSBVbnN0cnVj
dHVyZWQgRG9jdW1lbnQiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy4xODE4LjEwLjEu
NCIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iSGlzdG9yeSBh
bmQgUGh5c2ljYWwgTm90ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yIiBy
b290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJMYWIgUmVwb3J0IFRl
bXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi4xIiByb290PSIy
LjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJPcGVyYXRpdmUgTm90ZSIgZXh0
ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC43IiByb290PSIyLjE2Ljg0MC4xLjExMzg4
My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZCBh
c3NpZ25pbmdBdXRob3JpdHlOYW1lPSJQcm9jZWR1cmUgTm90ZSBUZW1wbGF0ZSIgZXh0ZW5zaW9u
PSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuMyIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMu
My4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNz
aWduaW5nQXV0aG9yaXR5TmFtZT0iUHJvZ3Jlc3MgTm90ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4x
LjExMzg4My4xMC4yMC4yMSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEi
Lz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5
TmFtZT0iVW5zdHJ1Y3R1cmVkIFJlcG9ydCBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4x
LjExMzg4My4xMC4yMC4xOSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEi
Lz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29kZSBudWxsRmxhdm9yPSJVTksi
Lz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYWN0RGVmaW5pdGlvbj4KICAgICAgICAg
ICAgICAgICAgICAgICAgPC9uczI6ZGVmaW5pdGlvbj4KICAgICAgICAgICAgICAgICAgICA8L2xv
Y2F0aW9uPgogICAgICAgICAgICAgICAgICAgIDxsb2NhdGlvbiB0eXBlQ29kZT0iTE9DIj4KICAg
ICAgICAgICAgICAgICAgICAgICAgPHNlcXVlbmNlTnVtYmVyIHZhbHVlPSI3Ii8+CiAgICAgICAg
ICAgICAgICAgICAgICAgIDxzZXJ2aWNlRGVsaXZlcnlMb2NhdGlvbiBjbGFzc0NvZGU9IlNETE9D
Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1l
PSJDRFggQ2xpbmljIFJlZ2lzdHJ5IElEIiBleHRlbnNpb249IkNEWENSMDAwMDciIHJvb3Q9IjIu
MTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC4yIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAg
ICA8Y29kZSBjb2RlPSJDbGluaWMiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhZGRy
PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkZWxpbWl0ZXI+MTIzIEFJSFMgUm9h
ZDwvZGVsaW1pdGVyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjaXR5PlByaW5j
ZSBHZW9yZ2U8L2NpdHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0YXRlPkJy
aXRpc2ggQ29sdW1iaWE8L3N0YXRlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxj
b3VudHJ5PkNhbmFkYTwvY291bnRyeT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8
cG9zdGFsQ29kZT5WMVggOUU0PC9wb3N0YWxDb2RlPgogICAgICAgICAgICAgICAgICAgICAgICAg
ICAgPC9hZGRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxvY2F0aW9uIGNsYXNzQ29k
ZT0iUExDIiBkZXRlcm1pbmVyQ29kZT0iSU5TVEFOQ0UiPgogICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgIDxuYW1lPk1PSVMgQ0RYLUFJSFM8L25hbWU+CiAgICAgICAgICAgICAgICAgICAg
ICAgICAgICA8L2xvY2F0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICA8L3NlcnZpY2VEZWxp
dmVyeUxvY2F0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICA8bnMyOmRlZmluaXRpb24geG1s
bnM6bnMyPSJ1cm46YmNjZHgiIHR5cGVDb2RlPSJJTlNUIj4KICAgICAgICAgICAgICAgICAgICAg
ICAgICAgIDx0ZW1wbGF0ZUlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkRvY3VtZW50IFRlbXBs
YXRlIE9JRCIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwIi8+CiAgICAgICAg
ICAgICAgICAgICAgICAgICAgICA8YWN0RGVmaW5pdGlvbiBjbGFzc0NvZGU9IklORk8iIG1vb2RD
b2RlPSJERUYiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdB
dXRob3JpdHlOYW1lPSJBZG1pdCBOb3RpZmljYXRpb24gVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4x
Ni44NDAuMS4xMTM4ODMuMy41MS42MC4yLjciIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3
LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmlu
Z0F1dGhvcml0eU5hbWU9IkFuYXRvbWljIFBhdGhvbG9neSBSZXBvcnQgVGVtcGxhdGUiIGV4dGVu
c2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjIiIHJvb3Q9IjIuMTYuODQwLjEuMTEz
ODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlk
IGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkNvbnN1bHRhdGlvbiBOb3RlIiBleHRlbnNpb249IjIu
MTYuODQwLjEuMTEzODgzLjEwLjIwLjQiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEw
MC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1
dGhvcml0eU5hbWU9IkRpYWdub3N0aWMgSW1hZ2luZyBSZXBvcnQgVGVtcGxhdGUiIGV4dGVuc2lv
bj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjUiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgz
LjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkIGFz
c2lnbmluZ0F1dGhvcml0eU5hbWU9IkRpc2NoYXJnZSBOb3RpZmljYXRpb24gVGVtcGxhdGUiIGV4
dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjYiIHJvb3Q9IjIuMTYuODQwLjEu
MTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
PGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkRpc2NoYXJnZSBTdW1tYXJ5IFRlbXBsYXRlIiBl
eHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi40IiByb290PSIyLjE2Ljg0MC4x
LjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
IDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJlMmUgR2VuZXJpYyBFcGlzb2RpYyBEb2N1bWVu
dCIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjE4MTguMTAuMS4yIiByb290PSIyLjE2
Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJlMmUgR2VuZXJpYyBVbnN0cnVjdHVy
ZWQgUmVmZXJyYWwiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy4xODE4LjEwLjEuNSIg
cm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iZTJlIFVuc3RydWN0
dXJlZCBEb2N1bWVudCIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjE4MTguMTAuMS40
IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJIaXN0b3J5IGFu
ZCBQaHlzaWNhbCBOb3RlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIiIHJv
b3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkxhYiBSZXBvcnQgVGVt
cGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjEiIHJvb3Q9IjIu
MTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9Ik9wZXJhdGl2ZSBOb3RlIiBleHRl
bnNpb249IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjciIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgz
LjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkIGFz
c2lnbmluZ0F1dGhvcml0eU5hbWU9IlByb2NlZHVyZSBOb3RlIFRlbXBsYXRlIiBleHRlbnNpb249
IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi4zIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4z
LjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3Np
Z25pbmdBdXRob3JpdHlOYW1lPSJQcm9ncmVzcyBOb3RlIiBleHRlbnNpb249IjIuMTYuODQwLjEu
MTEzODgzLjEwLjIwLjIxIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIv
PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlO
YW1lPSJVbnN0cnVjdHVyZWQgUmVwb3J0IFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEu
MTEzODgzLjEwLjIwLjE5IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIv
PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb2RlIG51bGxGbGF2b3I9IlVOSyIv
PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hY3REZWZpbml0aW9uPgogICAgICAgICAg
ICAgICAgICAgICAgICA8L25zMjpkZWZpbml0aW9uPgogICAgICAgICAgICAgICAgICAgIDwvbG9j
YXRpb24+CiAgICAgICAgICAgICAgICAgICAgPGxvY2F0aW9uIHR5cGVDb2RlPSJMT0MiPgogICAg
ICAgICAgICAgICAgICAgICAgICA8c2VxdWVuY2VOdW1iZXIgdmFsdWU9IjgiLz4KICAgICAgICAg
ICAgICAgICAgICAgICAgPHNlcnZpY2VEZWxpdmVyeUxvY2F0aW9uIGNsYXNzQ29kZT0iU0RMT0Mi
PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkIG51bGxGbGF2b3I9Ik5BIi8+CiAgICAg
ICAgICAgICAgICAgICAgICAgICAgICA8Y29kZSBjb2RlPSJDbGluaWMiLz4KICAgICAgICAgICAg
ICAgICAgICAgICAgICAgIDxhZGRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxk
ZWxpbWl0ZXI+MTIxMiBUd2VsZnRoIFN0LjwvZGVsaW1pdGVyPgogICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgIDxjaXR5PlRlc3Rpbmd0b248L2NpdHk+CiAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgPHN0YXRlPkJyaXRpc2ggQ29sdW1iaWE8L3N0YXRlPgogICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgIDxjb3VudHJ5PkNhbmFkYTwvY291bnRyeT4KICAgICAgICAgICAg
ICAgICAgICAgICAgICAgIDwvYWRkcj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsb2Nh
dGlvbiBjbGFzc0NvZGU9IlBMQyIgZGV0ZXJtaW5lckNvZGU9IklOU1RBTkNFIj4KICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT5NT0lTIENEWC1BSUhTIFRlc3QyPC9uYW1lPgog
ICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9sb2NhdGlvbj4KICAgICAgICAgICAgICAgICAg
ICAgICAgPC9zZXJ2aWNlRGVsaXZlcnlMb2NhdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAg
PG5zMjpkZWZpbml0aW9uIHhtbG5zOm5zMj0idXJuOmJjY2R4IiB0eXBlQ29kZT0iSU5TVCI+CiAg
ICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGVJZCBhc3NpZ25pbmdBdXRob3JpdHlO
YW1lPSJEb2N1bWVudCBUZW1wbGF0ZSBPSUQiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3
LjEwMC40MCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFjdERlZmluaXRpb24gY2xh
c3NDb2RlPSJJTkZPIiBtb29kQ29kZT0iREVGIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQW5hdG9taWMgUGF0aG9sb2d5IFJlcG9y
dCBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuMiIgcm9v
dD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQ29uc3VsdGF0aW9uIE5v
dGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuNCIgcm9vdD0iMi4xNi44NDAu
MS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iRGlhZ25vc3RpYyBJbWFnaW5nIFJlcG9ydCBU
ZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuNSIgcm9vdD0i
Mi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iRGlzY2hhcmdlIFN1bW1hcnkg
VGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjQiIHJvb3Q9
IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9ImUyZSBHZW5lcmljIEVwaXNv
ZGljIERvY3VtZW50IiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuMTgxOC4xMC4xLjIi
IHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9ImUyZSBHZW5lcmlj
IFVuc3RydWN0dXJlZCBSZWZlcnJhbCIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjE4
MTguMTAuMS41IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJl
MmUgVW5zdHJ1Y3R1cmVkIERvY3VtZW50IiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMu
MTgxOC4xMC4xLjQiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9
Ikhpc3RvcnkgYW5kIFBoeXNpY2FsIE5vdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMu
MTAuMjAuMiIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iTGFi
IFJlcG9ydCBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIu
MSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iT3BlcmF0aXZl
IE5vdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuNyIgcm9vdD0iMi4xNi44
NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iUHJvY2VkdXJlIE5vdGUgVGVtcGxhdGUi
IGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjMiIHJvb3Q9IjIuMTYuODQw
LjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IlByb2dyZXNzIE5vdGUiIGV4dGVuc2lvbj0i
Mi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjEiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3
LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmlu
Z0F1dGhvcml0eU5hbWU9IlVuc3RydWN0dXJlZCBSZXBvcnQgVGVtcGxhdGUiIGV4dGVuc2lvbj0i
Mi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMTkiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3
LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvZGUgbnVsbEZs
YXZvcj0iVU5LIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2FjdERlZmluaXRpb24+
CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbnMyOmRlZmluaXRpb24+CiAgICAgICAgICAgICAg
ICAgICAgPC9sb2NhdGlvbj4KICAgICAgICAgICAgICAgICAgICA8bG9jYXRpb24gdHlwZUNvZGU9
IkxPQyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzZXF1ZW5jZU51bWJlciB2YWx1ZT0iOSIv
PgogICAgICAgICAgICAgICAgICAgICAgICA8c2VydmljZURlbGl2ZXJ5TG9jYXRpb24gY2xhc3ND
b2RlPSJTRExPQyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0
aG9yaXR5TmFtZT0iQ0RYIENsaW5pYyBSZWdpc3RyeSBJRCIgZXh0ZW5zaW9uPSJDRFhDUjAwMDE4
IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuMiIvPgogICAgICAgICAgICAgICAg
ICAgICAgICAgICAgPGNvZGUgY29kZT0iQ2xpbmljIi8+CiAgICAgICAgICAgICAgICAgICAgICAg
ICAgICA8YWRkcj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGVsaW1pdGVyPjIw
MCAtIDExMTAgNnRoIEF2ZTwvZGVsaW1pdGVyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgIDxjaXR5PlByaW5jZSBHZW9yZ2U8L2NpdHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgPHN0YXRlPkJyaXRpc2ggQ29sdW1iaWE8L3N0YXRlPgogICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgIDxjb3VudHJ5PkNhbmFkYTwvY291bnRyeT4KICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICA8cG9zdGFsQ29kZT5WMkwgM002PC9wb3N0YWxDb2RlPgogICAgICAgICAg
ICAgICAgICAgICAgICAgICAgPC9hZGRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxv
Y2F0aW9uIGNsYXNzQ29kZT0iUExDIiBkZXRlcm1pbmVyQ29kZT0iSU5TVEFOQ0UiPgogICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgIDxuYW1lPk1PSVMgQ29uZm9ybWFuY2UgT25lPC9uYW1l
PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9sb2NhdGlvbj4KICAgICAgICAgICAgICAg
ICAgICAgICAgPC9zZXJ2aWNlRGVsaXZlcnlMb2NhdGlvbj4KICAgICAgICAgICAgICAgICAgICAg
ICAgPG5zMjpkZWZpbml0aW9uIHhtbG5zOm5zMj0idXJuOmJjY2R4IiB0eXBlQ29kZT0iSU5TVCI+
CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGVJZCBhc3NpZ25pbmdBdXRob3Jp
dHlOYW1lPSJEb2N1bWVudCBUZW1wbGF0ZSBPSUQiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMu
Mjc3LjEwMC40MCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFjdERlZmluaXRpb24g
Y2xhc3NDb2RlPSJJTkZPIiBtb29kQ29kZT0iREVGIj4KICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQW5hdG9taWMgUGF0aG9sb2d5IFJl
cG9ydCBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuMiIg
cm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQ29uc3VsdGF0aW9u
IE5vdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuNCIgcm9vdD0iMi4xNi44
NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iRGlhZ25vc3RpYyBJbWFnaW5nIFJlcG9y
dCBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuNSIgcm9v
dD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iRGlzY2hhcmdlIFN1bW1h
cnkgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjQiIHJv
b3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9ImUyZSBHZW5lcmljIEVw
aXNvZGljIERvY3VtZW50IiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuMTgxOC4xMC4x
LjIiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9ImUyZSBHZW5l
cmljIFVuc3RydWN0dXJlZCBSZWZlcnJhbCIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4z
LjE4MTguMTAuMS41IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgog
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1l
PSJlMmUgVW5zdHJ1Y3R1cmVkIERvY3VtZW50IiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgz
LjMuMTgxOC4xMC4xLjQiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+
CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5h
bWU9Ikhpc3RvcnkgYW5kIFBoeXNpY2FsIE5vdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4
ODMuMTAuMjAuMiIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0i
TGFiIFJlcG9ydCBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYw
LjIuMSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iT3BlcmF0
aXZlIE5vdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuNyIgcm9vdD0iMi4x
Ni44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iUHJvY2VkdXJlIE5vdGUgVGVtcGxh
dGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjMiIHJvb3Q9IjIuMTYu
ODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IlByb2dyZXNzIE5vdGUiIGV4dGVuc2lv
bj0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjEiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMu
Mjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2ln
bmluZ0F1dGhvcml0eU5hbWU9IlVuc3RydWN0dXJlZCBSZXBvcnQgVGVtcGxhdGUiIGV4dGVuc2lv
bj0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMTkiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMu
Mjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvZGUgbnVs
bEZsYXZvcj0iVU5LIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2FjdERlZmluaXRp
b24+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbnMyOmRlZmluaXRpb24+CiAgICAgICAgICAg
ICAgICAgICAgPC9sb2NhdGlvbj4KICAgICAgICAgICAgICAgICAgICA8bG9jYXRpb24gdHlwZUNv
ZGU9IkxPQyI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzZXF1ZW5jZU51bWJlciB2YWx1ZT0i
MTAiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPHNlcnZpY2VEZWxpdmVyeUxvY2F0aW9uIGNs
YXNzQ29kZT0iU0RMT0MiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmlu
Z0F1dGhvcml0eU5hbWU9IkNEWCBDbGluaWMgUmVnaXN0cnkgSUQiIGV4dGVuc2lvbj0iQ0RYQ1Iw
MDAxMiIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjIiLz4KICAgICAgICAgICAg
ICAgICAgICAgICAgICAgIDxjb2RlIGNvZGU9IkNsaW5pYyIvPgogICAgICAgICAgICAgICAgICAg
ICAgICAgICAgPGFkZHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRlbGltaXRl
cj4xMjMgQUlIUyBTdHJlZXQ8L2RlbGltaXRlcj4KICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICA8Y2l0eT5QRzwvY2l0eT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Rh
dGU+QnJpdGlzaCBDb2x1bWJpYTwvc3RhdGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgPGNvdW50cnk+Q2FuYWRhPC9jb3VudHJ5PgogICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgIDxwb3N0YWxDb2RlPkgwSCAwSDA8L3Bvc3RhbENvZGU+CiAgICAgICAgICAgICAgICAgICAg
ICAgICAgICA8L2FkZHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8bG9jYXRpb24gY2xh
c3NDb2RlPSJQTEMiIGRldGVybWluZXJDb2RlPSJJTlNUQU5DRSI+CiAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgPG5hbWU+TU9JUyBEZXYgQWNjb3VudDE8L25hbWU+CiAgICAgICAgICAg
ICAgICAgICAgICAgICAgICA8L2xvY2F0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICA8L3Nl
cnZpY2VEZWxpdmVyeUxvY2F0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICA8bnMyOmRlZmlu
aXRpb24geG1sbnM6bnMyPSJ1cm46YmNjZHgiIHR5cGVDb2RlPSJJTlNUIj4KICAgICAgICAgICAg
ICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkRvY3Vt
ZW50IFRlbXBsYXRlIE9JRCIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwIi8+
CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YWN0RGVmaW5pdGlvbiBjbGFzc0NvZGU9IklO
Rk8iIG1vb2RDb2RlPSJERUYiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZCBh
c3NpZ25pbmdBdXRob3JpdHlOYW1lPSJBbmF0b21pYyBQYXRob2xvZ3kgUmVwb3J0IFRlbXBsYXRl
IiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi4yIiByb290PSIyLjE2Ljg0
MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJDb25zdWx0YXRpb24gTm90ZSIgZXh0ZW5z
aW9uPSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC40IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4z
LjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3Np
Z25pbmdBdXRob3JpdHlOYW1lPSJEaWFnbm9zdGljIEltYWdpbmcgUmVwb3J0IFRlbXBsYXRlIiBl
eHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi41IiByb290PSIyLjE2Ljg0MC4x
LjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
IDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJEaXNjaGFyZ2UgU3VtbWFyeSBUZW1wbGF0ZSIg
ZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuNCIgcm9vdD0iMi4xNi44NDAu
MS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iZTJlIEdlbmVyaWMgRXBpc29kaWMgRG9jdW1l
bnQiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy4xODE4LjEwLjEuMiIgcm9vdD0iMi4x
Ni44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iZTJlIEdlbmVyaWMgVW5zdHJ1Y3R1
cmVkIFJlZmVycmFsIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuMTgxOC4xMC4xLjUi
IHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9ImUyZSBVbnN0cnVj
dHVyZWQgRG9jdW1lbnQiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy4xODE4LjEwLjEu
NCIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iSGlzdG9yeSBh
bmQgUGh5c2ljYWwgTm90ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yIiBy
b290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJMYWIgUmVwb3J0IFRl
bXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi4xIiByb290PSIy
LjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJPcGVyYXRpdmUgTm90ZSIgZXh0
ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC43IiByb290PSIyLjE2Ljg0MC4xLjExMzg4
My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZCBh
c3NpZ25pbmdBdXRob3JpdHlOYW1lPSJQcm9jZWR1cmUgTm90ZSBUZW1wbGF0ZSIgZXh0ZW5zaW9u
PSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuMyIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMu
My4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNz
aWduaW5nQXV0aG9yaXR5TmFtZT0iUHJvZ3Jlc3MgTm90ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4x
LjExMzg4My4xMC4yMC4yMSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEi
Lz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5
TmFtZT0iVW5zdHJ1Y3R1cmVkIFJlcG9ydCBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4x
LjExMzg4My4xMC4yMC4xOSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEi
Lz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29kZSBudWxsRmxhdm9yPSJVTksi
Lz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYWN0RGVmaW5pdGlvbj4KICAgICAgICAg
ICAgICAgICAgICAgICAgPC9uczI6ZGVmaW5pdGlvbj4KICAgICAgICAgICAgICAgICAgICA8L2xv
Y2F0aW9uPgogICAgICAgICAgICAgICAgICAgIDxsb2NhdGlvbiB0eXBlQ29kZT0iTE9DIj4KICAg
ICAgICAgICAgICAgICAgICAgICAgPHNlcXVlbmNlTnVtYmVyIHZhbHVlPSIxMSIvPgogICAgICAg
ICAgICAgICAgICAgICAgICA8c2VydmljZURlbGl2ZXJ5TG9jYXRpb24gY2xhc3NDb2RlPSJTRExP
QyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFt
ZT0iQ0RYIENsaW5pYyBSZWdpc3RyeSBJRCIgZXh0ZW5zaW9uPSJDRFhDUjAwMDEzIiByb290PSIy
LjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuMiIvPgogICAgICAgICAgICAgICAgICAgICAgICAg
ICAgPGNvZGUgY29kZT0iQ2xpbmljIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YWRk
cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGVsaW1pdGVyPlVOQkMgU3RyZWV0
PC9kZWxpbWl0ZXI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNpdHk+UEc8L2Np
dHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0YXRlPkJyaXRpc2ggQ29sdW1i
aWE8L3N0YXRlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb3VudHJ5PkNhbmFk
YTwvY291bnRyeT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cG9zdGFsQ29kZT5I
MEggMEgwPC9wb3N0YWxDb2RlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hZGRyPgog
ICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxvY2F0aW9uIGNsYXNzQ29kZT0iUExDIiBkZXRl
cm1pbmVyQ29kZT0iSU5TVEFOQ0UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxu
YW1lPk1PSVMgRGV2IEFjY291bnQyIFVOQkM8L25hbWU+CiAgICAgICAgICAgICAgICAgICAgICAg
ICAgICA8L2xvY2F0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICA8L3NlcnZpY2VEZWxpdmVy
eUxvY2F0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICA8bnMyOmRlZmluaXRpb24geG1sbnM6
bnMyPSJ1cm46YmNjZHgiIHR5cGVDb2RlPSJJTlNUIj4KICAgICAgICAgICAgICAgICAgICAgICAg
ICAgIDx0ZW1wbGF0ZUlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkRvY3VtZW50IFRlbXBsYXRl
IE9JRCIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwIi8+CiAgICAgICAgICAg
ICAgICAgICAgICAgICAgICA8YWN0RGVmaW5pdGlvbiBjbGFzc0NvZGU9IklORk8iIG1vb2RDb2Rl
PSJERUYiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRo
b3JpdHlOYW1lPSJBbmF0b21pYyBQYXRob2xvZ3kgUmVwb3J0IFRlbXBsYXRlIiBleHRlbnNpb249
IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi4yIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4z
LjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3Np
Z25pbmdBdXRob3JpdHlOYW1lPSJDb25zdWx0YXRpb24gTm90ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0
MC4xLjExMzg4My4xMC4yMC40IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAu
MSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3Jp
dHlOYW1lPSJEaWFnbm9zdGljIEltYWdpbmcgUmVwb3J0IFRlbXBsYXRlIiBleHRlbnNpb249IjIu
MTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi41IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3
Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25p
bmdBdXRob3JpdHlOYW1lPSJEaXNjaGFyZ2UgU3VtbWFyeSBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIy
LjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuNCIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4y
NzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWdu
aW5nQXV0aG9yaXR5TmFtZT0iZTJlIEdlbmVyaWMgRXBpc29kaWMgRG9jdW1lbnQiIGV4dGVuc2lv
bj0iMi4xNi44NDAuMS4xMTM4ODMuMy4xODE4LjEwLjEuMiIgcm9vdD0iMi4xNi44NDAuMS4xMTM4
ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQg
YXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iZTJlIEdlbmVyaWMgVW5zdHJ1Y3R1cmVkIFJlZmVycmFs
IiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuMTgxOC4xMC4xLjUiIHJvb3Q9IjIuMTYu
ODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9ImUyZSBVbnN0cnVjdHVyZWQgRG9jdW1l
bnQiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy4xODE4LjEwLjEuNCIgcm9vdD0iMi4x
Ni44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iSGlzdG9yeSBhbmQgUGh5c2ljYWwg
Tm90ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yIiByb290PSIyLjE2Ljg0
MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJMYWIgUmVwb3J0IFRlbXBsYXRlIiBleHRl
bnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi4xIiByb290PSIyLjE2Ljg0MC4xLjEx
Mzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxp
ZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJPcGVyYXRpdmUgTm90ZSIgZXh0ZW5zaW9uPSIyLjE2
Ljg0MC4xLjExMzg4My4xMC4yMC43IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAu
NDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRo
b3JpdHlOYW1lPSJQcm9jZWR1cmUgTm90ZSBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4x
LjExMzg4My4zLjUxLjYwLjIuMyIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQw
LjEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9y
aXR5TmFtZT0iUHJvZ3Jlc3MgTm90ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4xMC4y
MC4yMSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iVW5zdHJ1
Y3R1cmVkIFJlcG9ydCBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4xMC4y
MC4xOSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICA8Y29kZSBudWxsRmxhdm9yPSJVTksiLz4KICAgICAgICAg
ICAgICAgICAgICAgICAgICAgIDwvYWN0RGVmaW5pdGlvbj4KICAgICAgICAgICAgICAgICAgICAg
ICAgPC9uczI6ZGVmaW5pdGlvbj4KICAgICAgICAgICAgICAgICAgICA8L2xvY2F0aW9uPgogICAg
ICAgICAgICAgICAgICAgIDxsb2NhdGlvbiB0eXBlQ29kZT0iTE9DIj4KICAgICAgICAgICAgICAg
ICAgICAgICAgPHNlcXVlbmNlTnVtYmVyIHZhbHVlPSIxMiIvPgogICAgICAgICAgICAgICAgICAg
ICAgICA8c2VydmljZURlbGl2ZXJ5TG9jYXRpb24gY2xhc3NDb2RlPSJTRExPQyI+CiAgICAgICAg
ICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQ0RYIENsaW5p
YyBSZWdpc3RyeSBJRCIgZXh0ZW5zaW9uPSJjZHh0ZXN0LW5oOCIgcm9vdD0iMi4xNi44NDAuMS4x
MTM4ODMuMy4yNzcuMTAwLjIiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb2RlIGNv
ZGU9IkNsaW5pYyIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFkZHI+CiAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgPGNpdHk+VmFuY291dmVyPC9jaXR5PgogICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgIDxzdGF0ZT5Ccml0aXNoIENvbHVtYmlhPC9zdGF0ZT4KICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y291bnRyeT5DYW5hZGE8L2NvdW50cnk+CiAg
ICAgICAgICAgICAgICAgICAgICAgICAgICA8L2FkZHI+CiAgICAgICAgICAgICAgICAgICAgICAg
ICAgICA8bG9jYXRpb24gY2xhc3NDb2RlPSJQTEMiIGRldGVybWluZXJDb2RlPSJJTlNUQU5DRSI+
CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+TmV3IEhpcHBvIEhlYWx0aCBD
bGluaWM8L25hbWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xvY2F0aW9uPgogICAg
ICAgICAgICAgICAgICAgICAgICA8L3NlcnZpY2VEZWxpdmVyeUxvY2F0aW9uPgogICAgICAgICAg
ICAgICAgICAgICAgICA8bnMyOmRlZmluaXRpb24geG1sbnM6bnMyPSJ1cm46YmNjZHgiIHR5cGVD
b2RlPSJJTlNUIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkIGFzc2ln
bmluZ0F1dGhvcml0eU5hbWU9IkRvY3VtZW50IFRlbXBsYXRlIE9JRCIgcm9vdD0iMi4xNi44NDAu
MS4xMTM4ODMuMy4yNzcuMTAwLjQwIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YWN0
RGVmaW5pdGlvbiBjbGFzc0NvZGU9IklORk8iIG1vb2RDb2RlPSJERUYiPgogICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJBZG1pdCBOb3Rp
ZmljYXRpb24gVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4y
LjciIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkFuYXRvbWlj
IFBhdGhvbG9neSBSZXBvcnQgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMu
My41MS42MC4yLjIiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9
IkNvbnN1bHRhdGlvbiBOb3RlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjQi
IHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkRpYWdub3N0aWMg
SW1hZ2luZyBSZXBvcnQgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41
MS42MC4yLjUiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkRp
c2NoYXJnZSBOb3RpZmljYXRpb24gVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4
ODMuMy41MS42MC4yLjYiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+
CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5h
bWU9IkRpc2NoYXJnZSBTdW1tYXJ5IFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEz
ODgzLjMuNTEuNjAuMi40IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIv
PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlO
YW1lPSJlMmUgR2VuZXJpYyBFcGlzb2RpYyBEb2N1bWVudCIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4x
LjExMzg4My4zLjE4MTguMTAuMS4yIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAu
NDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRo
b3JpdHlOYW1lPSJlMmUgR2VuZXJpYyBVbnN0cnVjdHVyZWQgUmVmZXJyYWwiIGV4dGVuc2lvbj0i
Mi4xNi44NDAuMS4xMTM4ODMuMy4xODE4LjEwLjEuNSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMu
My4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNz
aWduaW5nQXV0aG9yaXR5TmFtZT0iZTJlIFVuc3RydWN0dXJlZCBEb2N1bWVudCIgZXh0ZW5zaW9u
PSIyLjE2Ljg0MC4xLjExMzg4My4zLjE4MTguMTAuMS40IiByb290PSIyLjE2Ljg0MC4xLjExMzg4
My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZCBh
c3NpZ25pbmdBdXRob3JpdHlOYW1lPSJIaXN0b3J5IGFuZCBQaHlzaWNhbCBOb3RlIiBleHRlbnNp
b249IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMu
Mjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2ln
bmluZ0F1dGhvcml0eU5hbWU9IkxhYiBSZXBvcnQgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44
NDAuMS4xMTM4ODMuMy41MS42MC4yLjEiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEw
MC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1
dGhvcml0eU5hbWU9Ik9wZXJhdGl2ZSBOb3RlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgz
LjEwLjIwLjciIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IlBy
b2NlZHVyZSBOb3RlIFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuNTEu
NjAuMi4zIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJQcm9n
cmVzcyBOb3RlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIxIiByb290PSIy
LjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJVbnN0cnVjdHVyZWQgUmVwb3J0
IFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjE5IiByb290PSIy
LjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgIDxjb2RlIG51bGxGbGF2b3I9IlVOSyIvPgogICAgICAgICAgICAgICAgICAgICAg
ICAgICAgPC9hY3REZWZpbml0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICA8L25zMjpkZWZp
bml0aW9uPgogICAgICAgICAgICAgICAgICAgIDwvbG9jYXRpb24+CiAgICAgICAgICAgICAgICAg
ICAgPGxvY2F0aW9uIHR5cGVDb2RlPSJMT0MiPgogICAgICAgICAgICAgICAgICAgICAgICA8c2Vx
dWVuY2VOdW1iZXIgdmFsdWU9IjEzIi8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzZXJ2aWNl
RGVsaXZlcnlMb2NhdGlvbiBjbGFzc0NvZGU9IlNETE9DIj4KICAgICAgICAgICAgICAgICAgICAg
ICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJDRFggQ2xpbmljIFJlZ2lzdHJ5IElE
IiBleHRlbnNpb249IjEwMDEwMDQiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC4y
Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFt
ZT0iQ0lYIENsaW5pYyBJRCIgZXh0ZW5zaW9uPSJjZHh0ZXN0LXRhIiByb290PSIyLjE2Ljg0MC4x
LjExMzg4My4zLjI3Ny4xMDAuMi4yIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29k
ZSBjb2RlPSJDbGluaWMiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhZGRyPgogICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdGF0ZT5Ccml0aXNoIENvbHVtYmlhPC9zdGF0
ZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y291bnRyeT5DYW5hZGE8L2NvdW50
cnk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2FkZHI+CiAgICAgICAgICAgICAgICAg
ICAgICAgICAgICA8bG9jYXRpb24gY2xhc3NDb2RlPSJQTEMiIGRldGVybWluZXJDb2RlPSJJTlNU
QU5DRSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+TkhBIFRlc3QgQ2xp
bmljIC0gQUlIUzwvbmFtZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvbG9jYXRpb24+
CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VydmljZURlbGl2ZXJ5TG9jYXRpb24+CiAgICAg
ICAgICAgICAgICAgICAgICAgIDxuczI6ZGVmaW5pdGlvbiB4bWxuczpuczI9InVybjpiY2NkeCIg
dHlwZUNvZGU9IklOU1QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRlbXBsYXRlSWQg
YXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iRG9jdW1lbnQgVGVtcGxhdGUgT0lEIiByb290PSIyLjE2
Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAg
IDxhY3REZWZpbml0aW9uIGNsYXNzQ29kZT0iSU5GTyIgbW9vZENvZGU9IkRFRiI+CiAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkFkbWl0
IE5vdGlmaWNhdGlvbiBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUx
LjYwLjIuNyIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQW5h
dG9taWMgUGF0aG9sb2d5IFJlcG9ydCBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjEx
Mzg4My4zLjUxLjYwLjIuMiIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEi
Lz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5
TmFtZT0iQ29uc3VsdGF0aW9uIE5vdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMTAu
MjAuNCIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iRGlhZ25v
c3RpYyBJbWFnaW5nIFJlcG9ydCBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4
My4zLjUxLjYwLjIuNSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4K
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFt
ZT0iRGlzY2hhcmdlIE5vdGlmaWNhdGlvbiBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4x
LjExMzg4My4zLjUxLjYwLjIuNiIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQw
LjEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9y
aXR5TmFtZT0iRGlzY2hhcmdlIFN1bW1hcnkgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAu
MS4xMTM4ODMuMy41MS42MC4yLjQiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40
MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhv
cml0eU5hbWU9ImUyZSBHZW5lcmljIEVwaXNvZGljIERvY3VtZW50IiBleHRlbnNpb249IjIuMTYu
ODQwLjEuMTEzODgzLjMuMTgxOC4xMC4xLjIiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3
LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmlu
Z0F1dGhvcml0eU5hbWU9ImUyZSBHZW5lcmljIFVuc3RydWN0dXJlZCBSZWZlcnJhbCIgZXh0ZW5z
aW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjE4MTguMTAuMS41IiByb290PSIyLjE2Ljg0MC4xLjEx
Mzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxp
ZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJlMmUgVW5zdHJ1Y3R1cmVkIERvY3VtZW50IiBleHRl
bnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuMTgxOC4xMC4xLjQiIHJvb3Q9IjIuMTYuODQwLjEu
MTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
PGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9Ikhpc3RvcnkgYW5kIFBoeXNpY2FsIE5vdGUiIGV4
dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMiIgcm9vdD0iMi4xNi44NDAuMS4xMTM4
ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQg
YXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iTGFiIFJlcG9ydCBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIy
LjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuMSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4y
NzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWdu
aW5nQXV0aG9yaXR5TmFtZT0iT3BlcmF0aXZlIE5vdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4x
MTM4ODMuMTAuMjAuNyIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4K
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFt
ZT0iUHJvY2VkdXJlIE5vdGUgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMu
My41MS42MC4yLjMiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9
IlByb2dyZXNzIE5vdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMjEiIHJv
b3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IlVuc3RydWN0dXJlZCBS
ZXBvcnQgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMTkiIHJv
b3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgPGNvZGUgbnVsbEZsYXZvcj0iVU5LIi8+CiAgICAgICAgICAgICAgICAg
ICAgICAgICAgICA8L2FjdERlZmluaXRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbnMy
OmRlZmluaXRpb24+CiAgICAgICAgICAgICAgICAgICAgPC9sb2NhdGlvbj4KICAgICAgICAgICAg
ICAgICAgICA8bG9jYXRpb24gdHlwZUNvZGU9IkxPQyI+CiAgICAgICAgICAgICAgICAgICAgICAg
IDxzZXF1ZW5jZU51bWJlciB2YWx1ZT0iMTQiLz4KICAgICAgICAgICAgICAgICAgICAgICAgPHNl
cnZpY2VEZWxpdmVyeUxvY2F0aW9uIGNsYXNzQ29kZT0iU0RMT0MiPgogICAgICAgICAgICAgICAg
ICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkNEWCBDbGluaWMgUmVnaXN0
cnkgSUQiIGV4dGVuc2lvbj0iMTAwMTAwMiIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcu
MTAwLjIiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb2RlIGNvZGU9IkNsaW5pYyIv
PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFkZHI+CiAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgPHN0YXRlPkJyaXRpc2ggQ29sdW1iaWE8L3N0YXRlPgogICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgIDxjb3VudHJ5PkNhbmFkYTwvY291bnRyeT4KICAgICAgICAgICAg
ICAgICAgICAgICAgICAgIDwvYWRkcj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsb2Nh
dGlvbiBjbGFzc0NvZGU9IlBMQyIgZGV0ZXJtaW5lckNvZGU9IklOU1RBTkNFIj4KICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICA8bmFtZT5OSEEgVGVzdCBDbGluaWMgLSBpQ2xpbmljPC9u
YW1lPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9sb2NhdGlvbj4KICAgICAgICAgICAg
ICAgICAgICAgICAgPC9zZXJ2aWNlRGVsaXZlcnlMb2NhdGlvbj4KICAgICAgICAgICAgICAgICAg
ICAgICAgPG5zMjpkZWZpbml0aW9uIHhtbG5zOm5zMj0idXJuOmJjY2R4IiB0eXBlQ29kZT0iSU5T
VCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGVJZCBhc3NpZ25pbmdBdXRo
b3JpdHlOYW1lPSJEb2N1bWVudCBUZW1wbGF0ZSBPSUQiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgz
LjMuMjc3LjEwMC40MCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFjdERlZmluaXRp
b24gY2xhc3NDb2RlPSJJTkZPIiBtb29kQ29kZT0iREVGIj4KICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQWRtaXQgTm90aWZpY2F0aW9u
IFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi43IiByb290
PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJBbmF0b21pYyBQYXRob2xv
Z3kgUmVwb3J0IFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAu
Mi4yIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJDb25zdWx0
YXRpb24gTm90ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC40IiByb290PSIy
LjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJEaWFnbm9zdGljIEltYWdpbmcg
UmVwb3J0IFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi41
IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJEaXNjaGFyZ2Ug
Tm90aWZpY2F0aW9uIFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuNTEu
NjAuMi42IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJEaXNj
aGFyZ2UgU3VtbWFyeSBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUx
LjYwLjIuNCIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iZTJl
IEdlbmVyaWMgRXBpc29kaWMgRG9jdW1lbnQiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMu
My4xODE4LjEwLjEuMiIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4K
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFt
ZT0iZTJlIEdlbmVyaWMgVW5zdHJ1Y3R1cmVkIFJlZmVycmFsIiBleHRlbnNpb249IjIuMTYuODQw
LjEuMTEzODgzLjMuMTgxOC4xMC4xLjUiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEw
MC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1
dGhvcml0eU5hbWU9ImUyZSBVbnN0cnVjdHVyZWQgRG9jdW1lbnQiIGV4dGVuc2lvbj0iMi4xNi44
NDAuMS4xMTM4ODMuMy4xODE4LjEwLjEuNCIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcu
MTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5n
QXV0aG9yaXR5TmFtZT0iSGlzdG9yeSBhbmQgUGh5c2ljYWwgTm90ZSIgZXh0ZW5zaW9uPSIyLjE2
Ljg0MC4xLjExMzg4My4xMC4yMC4yIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAu
NDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRo
b3JpdHlOYW1lPSJMYWIgUmVwb3J0IFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEz
ODgzLjMuNTEuNjAuMi4xIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIv
PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlO
YW1lPSJPcGVyYXRpdmUgTm90ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC43
IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJQcm9jZWR1cmUg
Tm90ZSBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuMyIg
cm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iUHJvZ3Jlc3MgTm90
ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMSIgcm9vdD0iMi4xNi44NDAu
MS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iVW5zdHJ1Y3R1cmVkIFJlcG9ydCBUZW1wbGF0
ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4xOSIgcm9vdD0iMi4xNi44NDAu
MS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICA8Y29kZSBudWxsRmxhdm9yPSJVTksiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwv
YWN0RGVmaW5pdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9uczI6ZGVmaW5pdGlvbj4K
ICAgICAgICAgICAgICAgICAgICA8L2xvY2F0aW9uPgogICAgICAgICAgICAgICAgICAgIDxsb2Nh
dGlvbiB0eXBlQ29kZT0iTE9DIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNlcXVlbmNlTnVt
YmVyIHZhbHVlPSIxNSIvPgogICAgICAgICAgICAgICAgICAgICAgICA8c2VydmljZURlbGl2ZXJ5
TG9jYXRpb24gY2xhc3NDb2RlPSJTRExPQyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8
aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQ0RYIENsaW5pYyBSZWdpc3RyeSBJRCIgZXh0ZW5z
aW9uPSIxMDAxMDAxIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuMiIvPgogICAg
ICAgICAgICAgICAgICAgICAgICAgICAgPGNvZGUgY29kZT0iQ2xpbmljIi8+CiAgICAgICAgICAg
ICAgICAgICAgICAgICAgICA8YWRkcj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8
c3RhdGU+QnJpdGlzaCBDb2x1bWJpYTwvc3RhdGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgPGNvdW50cnk+Q2FuYWRhPC9jb3VudHJ5PgogICAgICAgICAgICAgICAgICAgICAgICAg
ICAgPC9hZGRyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxvY2F0aW9uIGNsYXNzQ29k
ZT0iUExDIiBkZXRlcm1pbmVyQ29kZT0iSU5TVEFOQ0UiPgogICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgIDxuYW1lPk5IQSBUZXN0IENsaW5pYyAtIEludHJhaGVhbHRoPC9uYW1lPgogICAg
ICAgICAgICAgICAgICAgICAgICAgICAgPC9sb2NhdGlvbj4KICAgICAgICAgICAgICAgICAgICAg
ICAgPC9zZXJ2aWNlRGVsaXZlcnlMb2NhdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPG5z
MjpkZWZpbml0aW9uIHhtbG5zOm5zMj0idXJuOmJjY2R4IiB0eXBlQ29kZT0iSU5TVCI+CiAgICAg
ICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGVJZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1l
PSJEb2N1bWVudCBUZW1wbGF0ZSBPSUQiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEw
MC40MCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFjdERlZmluaXRpb24gY2xhc3ND
b2RlPSJJTkZPIiBtb29kQ29kZT0iREVGIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQWRtaXQgTm90aWZpY2F0aW9uIFRlbXBsYXRl
IiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi43IiByb290PSIyLjE2Ljg0
MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJBbmF0b21pYyBQYXRob2xvZ3kgUmVwb3J0
IFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi4yIiByb290
PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJDb25zdWx0YXRpb24gTm90
ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC40IiByb290PSIyLjE2Ljg0MC4x
LjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
IDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJEaWFnbm9zdGljIEltYWdpbmcgUmVwb3J0IFRl
bXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi41IiByb290PSIy
LjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJEaXNjaGFyZ2UgTm90aWZpY2F0
aW9uIFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi42IiBy
b290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJEaXNjaGFyZ2UgU3Vt
bWFyeSBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuNCIg
cm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iZTJlIEdlbmVyaWMg
RXBpc29kaWMgRG9jdW1lbnQiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy4xODE4LjEw
LjEuMiIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iZTJlIEdl
bmVyaWMgVW5zdHJ1Y3R1cmVkIFJlZmVycmFsIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgz
LjMuMTgxOC4xMC4xLjUiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+
CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5h
bWU9ImUyZSBVbnN0cnVjdHVyZWQgRG9jdW1lbnQiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4
ODMuMy4xODE4LjEwLjEuNCIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEi
Lz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5
TmFtZT0iSGlzdG9yeSBhbmQgUGh5c2ljYWwgTm90ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjEx
Mzg4My4xMC4yMC4yIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgog
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1l
PSJMYWIgUmVwb3J0IFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuNTEu
NjAuMi4xIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJPcGVy
YXRpdmUgTm90ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC43IiByb290PSIy
LjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJQcm9jZWR1cmUgTm90ZSBUZW1w
bGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuMyIgcm9vdD0iMi4x
Ni44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iUHJvZ3Jlc3MgTm90ZSIgZXh0ZW5z
aW9uPSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMu
My4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNz
aWduaW5nQXV0aG9yaXR5TmFtZT0iVW5zdHJ1Y3R1cmVkIFJlcG9ydCBUZW1wbGF0ZSIgZXh0ZW5z
aW9uPSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4xOSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMu
My4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29kZSBu
dWxsRmxhdm9yPSJVTksiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYWN0RGVmaW5p
dGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9uczI6ZGVmaW5pdGlvbj4KICAgICAgICAg
ICAgICAgICAgICA8L2xvY2F0aW9uPgogICAgICAgICAgICAgICAgICAgIDxsb2NhdGlvbiB0eXBl
Q29kZT0iTE9DIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHNlcXVlbmNlTnVtYmVyIHZhbHVl
PSIxNiIvPgogICAgICAgICAgICAgICAgICAgICAgICA8c2VydmljZURlbGl2ZXJ5TG9jYXRpb24g
Y2xhc3NDb2RlPSJTRExPQyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWdu
aW5nQXV0aG9yaXR5TmFtZT0iQ0RYIENsaW5pYyBSZWdpc3RyeSBJRCIgZXh0ZW5zaW9uPSIxMDAx
MDAzIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuMiIvPgogICAgICAgICAgICAg
ICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkNJWCBDbGluaWMgSUQi
IGV4dGVuc2lvbj0iNDE1MzQ4NTIiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC4y
LjIiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb2RlIGNvZGU9IkNsaW5pYyIvPgog
ICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFkZHI+CiAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgPHN0YXRlPkJyaXRpc2ggQ29sdW1iaWE8L3N0YXRlPgogICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgIDxjb3VudHJ5PkNhbmFkYTwvY291bnRyeT4KICAgICAgICAgICAgICAg
ICAgICAgICAgICAgIDwvYWRkcj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsb2NhdGlv
biBjbGFzc0NvZGU9IlBMQyIgZGV0ZXJtaW5lckNvZGU9IklOU1RBTkNFIj4KICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICA8bmFtZT5OSEEgVGVzdCBDbGluaWMgLSBRSFI8L25hbWU+CiAg
ICAgICAgICAgICAgICAgICAgICAgICAgICA8L2xvY2F0aW9uPgogICAgICAgICAgICAgICAgICAg
ICAgICA8L3NlcnZpY2VEZWxpdmVyeUxvY2F0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICA8
bnMyOmRlZmluaXRpb24geG1sbnM6bnMyPSJ1cm46YmNjZHgiIHR5cGVDb2RlPSJJTlNUIj4KICAg
ICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkIGFzc2lnbmluZ0F1dGhvcml0eU5h
bWU9IkRvY3VtZW50IFRlbXBsYXRlIE9JRCIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcu
MTAwLjQwIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YWN0RGVmaW5pdGlvbiBjbGFz
c0NvZGU9IklORk8iIG1vb2RDb2RlPSJERUYiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJBZG1pdCBOb3RpZmljYXRpb24gVGVtcGxh
dGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjciIHJvb3Q9IjIuMTYu
ODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkFuYXRvbWljIFBhdGhvbG9neSBSZXBv
cnQgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjIiIHJv
b3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkNvbnN1bHRhdGlvbiBO
b3RlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjQiIHJvb3Q9IjIuMTYuODQw
LjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkRpYWdub3N0aWMgSW1hZ2luZyBSZXBvcnQg
VGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjUiIHJvb3Q9
IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkRpc2NoYXJnZSBOb3RpZmlj
YXRpb24gVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjYi
IHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkRpc2NoYXJnZSBT
dW1tYXJ5IFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi40
IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJlMmUgR2VuZXJp
YyBFcGlzb2RpYyBEb2N1bWVudCIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjE4MTgu
MTAuMS4yIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJlMmUg
R2VuZXJpYyBVbnN0cnVjdHVyZWQgUmVmZXJyYWwiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4
ODMuMy4xODE4LjEwLjEuNSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEi
Lz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5
TmFtZT0iZTJlIFVuc3RydWN0dXJlZCBEb2N1bWVudCIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjEx
Mzg4My4zLjE4MTguMTAuMS40IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAu
MSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3Jp
dHlOYW1lPSJIaXN0b3J5IGFuZCBQaHlzaWNhbCBOb3RlIiBleHRlbnNpb249IjIuMTYuODQwLjEu
MTEzODgzLjEwLjIwLjIiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+
CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5h
bWU9IkxhYiBSZXBvcnQgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41
MS42MC4yLjEiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9Ik9w
ZXJhdGl2ZSBOb3RlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjciIHJvb3Q9
IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IlByb2NlZHVyZSBOb3RlIFRl
bXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi4zIiByb290PSIy
LjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJQcm9ncmVzcyBOb3RlIiBleHRl
bnNpb249IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIxIiByb290PSIyLjE2Ljg0MC4xLjExMzg4
My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZCBh
c3NpZ25pbmdBdXRob3JpdHlOYW1lPSJVbnN0cnVjdHVyZWQgUmVwb3J0IFRlbXBsYXRlIiBleHRl
bnNpb249IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjE5IiByb290PSIyLjE2Ljg0MC4xLjExMzg4
My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb2Rl
IG51bGxGbGF2b3I9IlVOSyIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hY3REZWZp
bml0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICA8L25zMjpkZWZpbml0aW9uPgogICAgICAg
ICAgICAgICAgICAgIDwvbG9jYXRpb24+CiAgICAgICAgICAgICAgICAgICAgPGxvY2F0aW9uIHR5
cGVDb2RlPSJMT0MiPgogICAgICAgICAgICAgICAgICAgICAgICA8c2VxdWVuY2VOdW1iZXIgdmFs
dWU9IjE3Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzZXJ2aWNlRGVsaXZlcnlMb2NhdGlv
biBjbGFzc0NvZGU9IlNETE9DIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3Np
Z25pbmdBdXRob3JpdHlOYW1lPSJDRFggQ2xpbmljIFJlZ2lzdHJ5IElEIiBleHRlbnNpb249ImNk
eHBvc3Rwcm9kLW90Y2EiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC4yIi8+CiAg
ICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iUE9J
IENsaW5pYyBJRCIgZXh0ZW5zaW9uPSJjZHhwb3N0cHJvZC1vdGNhIiByb290PSIyLjE2Ljg0MC4x
LjExMzg4My4zLjI3Ny4xMDAuMi4xIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y29k
ZSBjb2RlPSJDbGluaWMiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhZGRyPgogICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkZWxpbWl0ZXI+MTgxOCBUZXN0IEF2ZTwvZGVs
aW1pdGVyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjaXR5PktlbG93bmE8L2Np
dHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0YXRlPkJyaXRpc2ggQ29sdW1i
aWE8L3N0YXRlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb3VudHJ5PkNhbmFk
YTwvY291bnRyeT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cG9zdGFsQ29kZT5W
MVYxVjE8L3Bvc3RhbENvZGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2FkZHI+CiAg
ICAgICAgICAgICAgICAgICAgICAgICAgICA8bG9jYXRpb24gY2xhc3NDb2RlPSJQTEMiIGRldGVy
bWluZXJDb2RlPSJJTlNUQU5DRSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5h
bWU+T3NjYXIgVGVzdCBDbGluaWMgQTwvbmFtZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAg
IDwvbG9jYXRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VydmljZURlbGl2ZXJ5TG9j
YXRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgIDxuczI6ZGVmaW5pdGlvbiB4bWxuczpuczI9
InVybjpiY2NkeCIgdHlwZUNvZGU9IklOU1QiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAg
PHRlbXBsYXRlSWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iRG9jdW1lbnQgVGVtcGxhdGUgT0lE
IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAiLz4KICAgICAgICAgICAgICAg
ICAgICAgICAgICAgIDxhY3REZWZpbml0aW9uIGNsYXNzQ29kZT0iSU5GTyIgbW9vZENvZGU9IkRF
RiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0
eU5hbWU9IkFkbWl0IE5vdGlmaWNhdGlvbiBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4x
LjExMzg4My4zLjUxLjYwLjIuNyIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQw
LjEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9y
aXR5TmFtZT0iQW5hdG9taWMgUGF0aG9sb2d5IFJlcG9ydCBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIy
LjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuMiIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4y
NzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWdu
aW5nQXV0aG9yaXR5TmFtZT0iQ29uc3VsdGF0aW9uIE5vdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAu
MS4xMTM4ODMuMTAuMjAuNCIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEi
Lz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5
TmFtZT0iRGlhZ25vc3RpYyBJbWFnaW5nIFJlcG9ydCBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2
Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuNSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcu
MTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5n
QXV0aG9yaXR5TmFtZT0iRGlzY2hhcmdlIE5vdGlmaWNhdGlvbiBUZW1wbGF0ZSIgZXh0ZW5zaW9u
PSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuNiIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMu
My4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNz
aWduaW5nQXV0aG9yaXR5TmFtZT0iRGlzY2hhcmdlIFN1bW1hcnkgVGVtcGxhdGUiIGV4dGVuc2lv
bj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjQiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgz
LjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkIGFz
c2lnbmluZ0F1dGhvcml0eU5hbWU9ImUyZSBHZW5lcmljIEVwaXNvZGljIERvY3VtZW50IiBleHRl
bnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuMTgxOC4xMC4xLjIiIHJvb3Q9IjIuMTYuODQwLjEu
MTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
PGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9ImUyZSBHZW5lcmljIFVuc3RydWN0dXJlZCBSZWZl
cnJhbCIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjE4MTguMTAuMS41IiByb290PSIy
LjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJlMmUgVW5zdHJ1Y3R1cmVkIERv
Y3VtZW50IiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuMTgxOC4xMC4xLjQiIHJvb3Q9
IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9Ikhpc3RvcnkgYW5kIFBoeXNp
Y2FsIE5vdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMiIgcm9vdD0iMi4x
Ni44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iTGFiIFJlcG9ydCBUZW1wbGF0ZSIg
ZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuMSIgcm9vdD0iMi4xNi44NDAu
MS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iT3BlcmF0aXZlIE5vdGUiIGV4dGVuc2lvbj0i
Mi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuNyIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcu
MTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5n
QXV0aG9yaXR5TmFtZT0iUHJvY2VkdXJlIE5vdGUgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44
NDAuMS4xMTM4ODMuMy41MS42MC4yLjMiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEw
MC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1
dGhvcml0eU5hbWU9IlByb2dyZXNzIE5vdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMu
MTAuMjAuMjEiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IlVu
c3RydWN0dXJlZCBSZXBvcnQgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMu
MTAuMjAuMTkiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvZGUgbnVsbEZsYXZvcj0iVU5LIi8+CiAgICAg
ICAgICAgICAgICAgICAgICAgICAgICA8L2FjdERlZmluaXRpb24+CiAgICAgICAgICAgICAgICAg
ICAgICAgIDwvbnMyOmRlZmluaXRpb24+CiAgICAgICAgICAgICAgICAgICAgPC9sb2NhdGlvbj4K
ICAgICAgICAgICAgICAgICAgICA8bG9jYXRpb24gdHlwZUNvZGU9IkxPQyI+CiAgICAgICAgICAg
ICAgICAgICAgICAgIDxzZXF1ZW5jZU51bWJlciB2YWx1ZT0iMTgiLz4KICAgICAgICAgICAgICAg
ICAgICAgICAgPHNlcnZpY2VEZWxpdmVyeUxvY2F0aW9uIGNsYXNzQ29kZT0iU0RMT0MiPgogICAg
ICAgICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkNEWCBD
bGluaWMgUmVnaXN0cnkgSUQiIGV4dGVuc2lvbj0iQ0RYQ1IwMDAyMCIgcm9vdD0iMi4xNi44NDAu
MS4xMTM4ODMuMy4yNzcuMTAwLjIiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb2Rl
IGNvZGU9IkNsaW5pYyIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFkZHI+CiAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRlbGltaXRlcj4zMDEsIDMyMTAtMjV0aCBBdmU8
L2RlbGltaXRlcj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y2l0eT5WZXJub248
L2NpdHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHN0YXRlPkJyaXRpc2ggQ29s
dW1iaWE8L3N0YXRlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb3VudHJ5PkNh
bmFkYTwvY291bnRyeT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cG9zdGFsQ29k
ZT5WMVQgMVAxPC9wb3N0YWxDb2RlPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hZGRy
PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxvY2F0aW9uIGNsYXNzQ29kZT0iUExDIiBk
ZXRlcm1pbmVyQ29kZT0iSU5TVEFOQ0UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
IDxuYW1lPlBvdWxpbiBUZXN0IENsaW5pYzwvbmFtZT4KICAgICAgICAgICAgICAgICAgICAgICAg
ICAgIDwvbG9jYXRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvc2VydmljZURlbGl2ZXJ5
TG9jYXRpb24+CiAgICAgICAgICAgICAgICAgICAgICAgIDxuczI6ZGVmaW5pdGlvbiB4bWxuczpu
czI9InVybjpiY2NkeCIgdHlwZUNvZGU9IklOU1QiPgogICAgICAgICAgICAgICAgICAgICAgICAg
ICAgPHRlbXBsYXRlSWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iRG9jdW1lbnQgVGVtcGxhdGUg
T0lEIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAiLz4KICAgICAgICAgICAg
ICAgICAgICAgICAgICAgIDxhY3REZWZpbml0aW9uIGNsYXNzQ29kZT0iSU5GTyIgbW9vZENvZGU9
IkRFRiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhv
cml0eU5hbWU9IkFuYXRvbWljIFBhdGhvbG9neSBSZXBvcnQgVGVtcGxhdGUiIGV4dGVuc2lvbj0i
Mi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjIiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMu
Mjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2ln
bmluZ0F1dGhvcml0eU5hbWU9IkNvbnN1bHRhdGlvbiBOb3RlIiBleHRlbnNpb249IjIuMTYuODQw
LjEuMTEzODgzLjEwLjIwLjQiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4x
Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0
eU5hbWU9IkRpYWdub3N0aWMgSW1hZ2luZyBSZXBvcnQgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4x
Ni44NDAuMS4xMTM4ODMuMy41MS42MC4yLjUiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3
LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmlu
Z0F1dGhvcml0eU5hbWU9IkRpc2NoYXJnZSBTdW1tYXJ5IFRlbXBsYXRlIiBleHRlbnNpb249IjIu
MTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi40IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3
Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25p
bmdBdXRob3JpdHlOYW1lPSJlMmUgR2VuZXJpYyBFcGlzb2RpYyBEb2N1bWVudCIgZXh0ZW5zaW9u
PSIyLjE2Ljg0MC4xLjExMzg4My4zLjE4MTguMTAuMS4yIiByb290PSIyLjE2Ljg0MC4xLjExMzg4
My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZCBh
c3NpZ25pbmdBdXRob3JpdHlOYW1lPSJlMmUgR2VuZXJpYyBVbnN0cnVjdHVyZWQgUmVmZXJyYWwi
IGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy4xODE4LjEwLjEuNSIgcm9vdD0iMi4xNi44
NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iZTJlIFVuc3RydWN0dXJlZCBEb2N1bWVu
dCIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjE4MTguMTAuMS40IiByb290PSIyLjE2
Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJIaXN0b3J5IGFuZCBQaHlzaWNhbCBO
b3RlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIiIHJvb3Q9IjIuMTYuODQw
LjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkxhYiBSZXBvcnQgVGVtcGxhdGUiIGV4dGVu
c2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjEiIHJvb3Q9IjIuMTYuODQwLjEuMTEz
ODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlk
IGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9Ik9wZXJhdGl2ZSBOb3RlIiBleHRlbnNpb249IjIuMTYu
ODQwLjEuMTEzODgzLjEwLjIwLjciIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40
MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhv
cml0eU5hbWU9IlByb2NlZHVyZSBOb3RlIFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEu
MTEzODgzLjMuNTEuNjAuMi4zIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAu
MSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3Jp
dHlOYW1lPSJQcm9ncmVzcyBOb3RlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjEwLjIw
LjIxIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJVbnN0cnVj
dHVyZWQgUmVwb3J0IFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjEwLjIw
LjE5IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgIDxjb2RlIG51bGxGbGF2b3I9IlVOSyIvPgogICAgICAgICAg
ICAgICAgICAgICAgICAgICAgPC9hY3REZWZpbml0aW9uPgogICAgICAgICAgICAgICAgICAgICAg
ICA8L25zMjpkZWZpbml0aW9uPgogICAgICAgICAgICAgICAgICAgIDwvbG9jYXRpb24+CiAgICAg
ICAgICAgICAgICAgICAgPGxvY2F0aW9uIHR5cGVDb2RlPSJMT0MiPgogICAgICAgICAgICAgICAg
ICAgICAgICA8c2VxdWVuY2VOdW1iZXIgdmFsdWU9IjE5Ii8+CiAgICAgICAgICAgICAgICAgICAg
ICAgIDxzZXJ2aWNlRGVsaXZlcnlMb2NhdGlvbiBjbGFzc0NvZGU9IlNETE9DIj4KICAgICAgICAg
ICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJDRFggQ2xpbmlj
IFJlZ2lzdHJ5IElEIiBleHRlbnNpb249IkNEWENSMDAwMjMiIHJvb3Q9IjIuMTYuODQwLjEuMTEz
ODgzLjMuMjc3LjEwMC4yIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWdu
aW5nQXV0aG9yaXR5TmFtZT0iQ0lYIENsaW5pYyBJRCIgZXh0ZW5zaW9uPSJjZHh0ZXN0LXF0YyIg
cm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjIuMiIvPgogICAgICAgICAgICAgICAg
ICAgICAgICAgICAgPGNvZGUgY29kZT0iQ2xpbmljIi8+CiAgICAgICAgICAgICAgICAgICAgICAg
ICAgICA8YWRkcj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGVsaW1pdGVyPjE2
MjAgRGlja3NvbiBBdmVudWU8L2RlbGltaXRlcj4KICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICA8Y2l0eT5LZWxvd25hPC9jaXR5PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
IDxzdGF0ZT5Ccml0aXNoIENvbHVtYmlhPC9zdGF0ZT4KICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICA8Y291bnRyeT5DYW5hZGE8L2NvdW50cnk+CiAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgPHBvc3RhbENvZGU+VjFZIDlZMjwvcG9zdGFsQ29kZT4KICAgICAgICAgICAgICAg
ICAgICAgICAgICAgIDwvYWRkcj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxsb2NhdGlv
biBjbGFzc0NvZGU9IlBMQyIgZGV0ZXJtaW5lckNvZGU9IklOU1RBTkNFIj4KICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICA8bmFtZT5RSFIgVGVzdCBDbGluaWM8L25hbWU+CiAgICAgICAg
ICAgICAgICAgICAgICAgICAgICA8L2xvY2F0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICA8
L3NlcnZpY2VEZWxpdmVyeUxvY2F0aW9uPgogICAgICAgICAgICAgICAgICAgICAgICA8bnMyOmRl
ZmluaXRpb24geG1sbnM6bnMyPSJ1cm46YmNjZHgiIHR5cGVDb2RlPSJJTlNUIj4KICAgICAgICAg
ICAgICAgICAgICAgICAgICAgIDx0ZW1wbGF0ZUlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkRv
Y3VtZW50IFRlbXBsYXRlIE9JRCIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQw
Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YWN0RGVmaW5pdGlvbiBjbGFzc0NvZGU9
IklORk8iIG1vb2RDb2RlPSJERUYiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxp
ZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJBZG1pdCBOb3RpZmljYXRpb24gVGVtcGxhdGUiIGV4
dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjciIHJvb3Q9IjIuMTYuODQwLjEu
MTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
PGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkFuYXRvbWljIFBhdGhvbG9neSBSZXBvcnQgVGVt
cGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjIiIHJvb3Q9IjIu
MTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkNvbnN1bHRhdGlvbiBOb3RlIiBl
eHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjQiIHJvb3Q9IjIuMTYuODQwLjEuMTEz
ODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlk
IGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkRpYWdub3N0aWMgSW1hZ2luZyBSZXBvcnQgVGVtcGxh
dGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjUiIHJvb3Q9IjIuMTYu
ODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkRpc2NoYXJnZSBOb3RpZmljYXRpb24g
VGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjYiIHJvb3Q9
IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkRpc2NoYXJnZSBTdW1tYXJ5
IFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi40IiByb290
PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJlMmUgR2VuZXJpYyBFcGlz
b2RpYyBEb2N1bWVudCIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjE4MTguMTAuMS4y
IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJlMmUgR2VuZXJp
YyBVbnN0cnVjdHVyZWQgUmVmZXJyYWwiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy4x
ODE4LjEwLjEuNSIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0i
ZTJlIFVuc3RydWN0dXJlZCBEb2N1bWVudCIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4z
LjE4MTguMTAuMS40IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgog
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1l
PSJIaXN0b3J5IGFuZCBQaHlzaWNhbCBOb3RlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgz
LjEwLjIwLjIiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9Ikxh
YiBSZXBvcnQgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4y
LjEiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9Ik9wZXJhdGl2
ZSBOb3RlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjciIHJvb3Q9IjIuMTYu
ODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IlByb2NlZHVyZSBOb3RlIFRlbXBsYXRl
IiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi4zIiByb290PSIyLjE2Ljg0
MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJQcm9ncmVzcyBOb3RlIiBleHRlbnNpb249
IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjIxIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3
Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25p
bmdBdXRob3JpdHlOYW1lPSJVbnN0cnVjdHVyZWQgUmVwb3J0IFRlbXBsYXRlIiBleHRlbnNpb249
IjIuMTYuODQwLjEuMTEzODgzLjEwLjIwLjE5IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3
Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjb2RlIG51bGxG
bGF2b3I9IlVOSyIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hY3REZWZpbml0aW9u
PgogICAgICAgICAgICAgICAgICAgICAgICA8L25zMjpkZWZpbml0aW9uPgogICAgICAgICAgICAg
ICAgICAgIDwvbG9jYXRpb24+CiAgICAgICAgICAgICAgICAgICAgPGxvY2F0aW9uIHR5cGVDb2Rl
PSJMT0MiPgogICAgICAgICAgICAgICAgICAgICAgICA8c2VxdWVuY2VOdW1iZXIgdmFsdWU9IjIw
Ii8+CiAgICAgICAgICAgICAgICAgICAgICAgIDxzZXJ2aWNlRGVsaXZlcnlMb2NhdGlvbiBjbGFz
c0NvZGU9IlNETE9DIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdB
dXRob3JpdHlOYW1lPSJDRFggQ2xpbmljIFJlZ2lzdHJ5IElEIiBleHRlbnNpb249IkNEWFRFU1Qw
MDAwNCIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjIiLz4KICAgICAgICAgICAg
ICAgICAgICAgICAgICAgIDxjb2RlIGNvZGU9IkNsaW5pYyIvPgogICAgICAgICAgICAgICAgICAg
ICAgICAgICAgPGFkZHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRlbGltaXRl
cj4yMDAtMTA4MCBNYWlubGFuZCBTdC48L2RlbGltaXRlcj4KICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICA8Y2l0eT5WYW5jb3V2ZXI8L2NpdHk+CiAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgPHN0YXRlPkJyaXRpc2ggQ29sdW1iaWE8L3N0YXRlPgogICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgIDxjb3VudHJ5PkNhbmFkYTwvY291bnRyeT4KICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICA8cG9zdGFsQ29kZT5WNkIyVDQ8L3Bvc3RhbENvZGU+CiAgICAgICAg
ICAgICAgICAgICAgICAgICAgICA8L2FkZHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8
bG9jYXRpb24gY2xhc3NDb2RlPSJQTEMiIGRldGVybWluZXJDb2RlPSJJTlNUQU5DRSI+CiAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgPG5hbWU+VEVTVCAtIGlDbGluaWMgU3lzdGVtcyBJ
bmMuPC9uYW1lPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9sb2NhdGlvbj4KICAgICAg
ICAgICAgICAgICAgICAgICAgPC9zZXJ2aWNlRGVsaXZlcnlMb2NhdGlvbj4KICAgICAgICAgICAg
ICAgICAgICAgICAgPG5zMjpkZWZpbml0aW9uIHhtbG5zOm5zMj0idXJuOmJjY2R4IiB0eXBlQ29k
ZT0iSU5TVCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGVtcGxhdGVJZCBhc3NpZ25p
bmdBdXRob3JpdHlOYW1lPSJEb2N1bWVudCBUZW1wbGF0ZSBPSUQiIHJvb3Q9IjIuMTYuODQwLjEu
MTEzODgzLjMuMjc3LjEwMC40MCIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFjdERl
ZmluaXRpb24gY2xhc3NDb2RlPSJJTkZPIiBtb29kQ29kZT0iREVGIj4KICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQWRtaXQgTm90aWZp
Y2F0aW9uIFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuNTEuNjAuMi43
IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJBbmF0b21pYyBQ
YXRob2xvZ3kgUmVwb3J0IFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMu
NTEuNjAuMi4yIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJD
b25zdWx0YXRpb24gTm90ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC40IiBy
b290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJEaWFnbm9zdGljIElt
YWdpbmcgUmVwb3J0IFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuNTEu
NjAuMi41IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJEaXNj
aGFyZ2UgTm90aWZpY2F0aW9uIFRlbXBsYXRlIiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgz
LjMuNTEuNjAuMi42IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgog
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1l
PSJEaXNjaGFyZ2UgU3VtbWFyeSBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4
My4zLjUxLjYwLjIuNCIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4K
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFt
ZT0iZTJlIEdlbmVyaWMgRXBpc29kaWMgRG9jdW1lbnQiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4x
MTM4ODMuMy4xODE4LjEwLjEuMiIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQw
LjEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9y
aXR5TmFtZT0iZTJlIEdlbmVyaWMgVW5zdHJ1Y3R1cmVkIFJlZmVycmFsIiBleHRlbnNpb249IjIu
MTYuODQwLjEuMTEzODgzLjMuMTgxOC4xMC4xLjUiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMu
Mjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2ln
bmluZ0F1dGhvcml0eU5hbWU9ImUyZSBVbnN0cnVjdHVyZWQgRG9jdW1lbnQiIGV4dGVuc2lvbj0i
Mi4xNi44NDAuMS4xMTM4ODMuMy4xODE4LjEwLjEuNCIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMu
My4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNz
aWduaW5nQXV0aG9yaXR5TmFtZT0iSGlzdG9yeSBhbmQgUGh5c2ljYWwgTm90ZSIgZXh0ZW5zaW9u
PSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yIiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3
Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25p
bmdBdXRob3JpdHlOYW1lPSJPcGVyYXRpdmUgTm90ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjEx
Mzg4My4xMC4yMC43IiByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgog
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1l
PSJQcm9jZWR1cmUgTm90ZSBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4z
LjUxLjYwLjIuMyIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0i
UHJvZ3Jlc3MgTm90ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4yMSIgcm9v
dD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iVW5zdHJ1Y3R1cmVkIFJl
cG9ydCBUZW1wbGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4xMC4yMC4xOSIgcm9v
dD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICA8Y29kZSBudWxsRmxhdm9yPSJVTksiLz4KICAgICAgICAgICAgICAgICAg
ICAgICAgICAgIDwvYWN0RGVmaW5pdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9uczI6
ZGVmaW5pdGlvbj4KICAgICAgICAgICAgICAgICAgICA8L2xvY2F0aW9uPgogICAgICAgICAgICAg
ICAgICAgIDxsb2NhdGlvbiB0eXBlQ29kZT0iTE9DIj4KICAgICAgICAgICAgICAgICAgICAgICAg
PHNlcXVlbmNlTnVtYmVyIHZhbHVlPSIyMSIvPgogICAgICAgICAgICAgICAgICAgICAgICA8c2Vy
dmljZURlbGl2ZXJ5TG9jYXRpb24gY2xhc3NDb2RlPSJTRExPQyI+CiAgICAgICAgICAgICAgICAg
ICAgICAgICAgICA8aWQgbnVsbEZsYXZvcj0iTkEiLz4KICAgICAgICAgICAgICAgICAgICAgICAg
ICAgIDxjb2RlIGNvZGU9IkNsaW5pYyIvPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFk
ZHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRlbGltaXRlcj4yMjIyIHVsdHJh
IEF2ZS48L2RlbGltaXRlcj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Y2l0eT5N
ZWdhdG93bjwvY2l0eT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3RhdGU+QnJp
dGlzaCBDb2x1bWJpYTwvc3RhdGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNv
dW50cnk+Q2FuYWRhPC9jb3VudHJ5PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9hZGRy
PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPGxvY2F0aW9uIGNsYXNzQ29kZT0iUExDIiBk
ZXRlcm1pbmVyQ29kZT0iSU5TVEFOQ0UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
IDxuYW1lPlRFU1QgQ2xpbmljIFVsdHJhIG1lZ2EgQ2xpbmljPC9uYW1lPgogICAgICAgICAgICAg
ICAgICAgICAgICAgICAgPC9sb2NhdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9zZXJ2
aWNlRGVsaXZlcnlMb2NhdGlvbj4KICAgICAgICAgICAgICAgICAgICAgICAgPG5zMjpkZWZpbml0
aW9uIHhtbG5zOm5zMj0idXJuOmJjY2R4IiB0eXBlQ29kZT0iSU5TVCI+CiAgICAgICAgICAgICAg
ICAgICAgICAgICAgICA8dGVtcGxhdGVJZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJEb2N1bWVu
dCBUZW1wbGF0ZSBPSUQiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MCIvPgog
ICAgICAgICAgICAgICAgICAgICAgICAgICAgPGFjdERlZmluaXRpb24gY2xhc3NDb2RlPSJJTkZP
IiBtb29kQ29kZT0iREVGIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNz
aWduaW5nQXV0aG9yaXR5TmFtZT0iQW5hdG9taWMgUGF0aG9sb2d5IFJlcG9ydCBUZW1wbGF0ZSIg
ZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuMiIgcm9vdD0iMi4xNi44NDAu
MS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQ29uc3VsdGF0aW9uIE5vdGUiIGV4dGVuc2lv
bj0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuNCIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4y
NzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNzaWdu
aW5nQXV0aG9yaXR5TmFtZT0iRGlhZ25vc3RpYyBJbWFnaW5nIFJlcG9ydCBUZW1wbGF0ZSIgZXh0
ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuNSIgcm9vdD0iMi4xNi44NDAuMS4x
MTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8
aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iRGlzY2hhcmdlIFN1bW1hcnkgVGVtcGxhdGUiIGV4
dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjQiIHJvb3Q9IjIuMTYuODQwLjEu
MTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
PGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9ImUyZSBHZW5lcmljIEVwaXNvZGljIERvY3VtZW50
IiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuMTgxOC4xMC4xLjIiIHJvb3Q9IjIuMTYu
ODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9ImUyZSBHZW5lcmljIFVuc3RydWN0dXJl
ZCBSZWZlcnJhbCIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjE4MTguMTAuMS41IiBy
b290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNDAuMSIvPgogICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgIDxpZCBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJlMmUgVW5zdHJ1Y3R1
cmVkIERvY3VtZW50IiBleHRlbnNpb249IjIuMTYuODQwLjEuMTEzODgzLjMuMTgxOC4xMC4xLjQi
IHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9Ikhpc3RvcnkgYW5k
IFBoeXNpY2FsIE5vdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuMiIgcm9v
dD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iTGFiIFJlcG9ydCBUZW1w
bGF0ZSIgZXh0ZW5zaW9uPSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuMSIgcm9vdD0iMi4x
Ni44NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICA8aWQgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iT3BlcmF0aXZlIE5vdGUiIGV4dGVu
c2lvbj0iMi4xNi44NDAuMS4xMTM4ODMuMTAuMjAuNyIgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMu
My4yNzcuMTAwLjQwLjEiLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aWQgYXNz
aWduaW5nQXV0aG9yaXR5TmFtZT0iUHJvY2VkdXJlIE5vdGUgVGVtcGxhdGUiIGV4dGVuc2lvbj0i
Mi4xNi44NDAuMS4xMTM4ODMuMy41MS42MC4yLjMiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMu
Mjc3LjEwMC40MC4xIi8+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2ln
bmluZ0F1dGhvcml0eU5hbWU9IlByb2dyZXNzIE5vdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4x
MTM4ODMuMTAuMjAuMjEiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+
CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5h
bWU9IlVuc3RydWN0dXJlZCBSZXBvcnQgVGVtcGxhdGUiIGV4dGVuc2lvbj0iMi4xNi44NDAuMS4x
MTM4ODMuMTAuMjAuMTkiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEwMC40MC4xIi8+
CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGNvZGUgbnVsbEZsYXZvcj0iVU5LIi8+
CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2FjdERlZmluaXRpb24+CiAgICAgICAgICAg
ICAgICAgICAgICAgIDwvbnMyOmRlZmluaXRpb24+CiAgICAgICAgICAgICAgICAgICAgPC9sb2Nh
dGlvbj4KICAgICAgICAgICAgICAgIDwvYWN0RGVmaW5pdGlvbk9yRXZlbnQ+CiAgICAgICAgICAg
IDwvcGVyZm9ybWFuY2U+CiAgICAgICAgPC9hc3NpZ25lZEVudGl0eT4KICAgICAgICA8aGVhbHRo
Q2FyZVByb3ZpZGVyIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEt
aW5zdGFuY2UiIHhzaTpuaWw9InRydWUiLz4KICAgICAgICA8cXVhbGlmaWVkRW50aXR5IHhtbG5z
OnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTpuaWw9
InRydWUiLz4KICAgIDwvc3ViamVjdDE+CiAgICA8Y3VzdG9kaWFuIHR5cGVDb2RlPSJDU1QiPgog
ICAgICAgIDxhc3NpZ25lZEVudGl0eSBjbGFzc0NvZGU9IkFTU0lHTkVEIj4KICAgICAgICAgICAg
PGlkIG51bGxGbGF2b3I9Ik5BIi8+CiAgICAgICAgICAgIDxhc3NpZ25lZERldmljZSB4bWxuczp4
c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6bmlsPSJ0
cnVlIi8+CiAgICAgICAgICAgIDxhc3NpZ25lZE9yZ2FuaXphdGlvbiB4bWxuczp4c2k9Imh0dHA6
Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6bmlsPSJ0cnVlIi8+CiAg
ICAgICAgICAgIDxhc3NpZ25lZFBlcnNvbiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIw
MDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6bmlsPSJ0cnVlIi8+CiAgICAgICAgPC9hc3NpZ25l
ZEVudGl0eT4KICAgIDwvY3VzdG9kaWFuPgo8L3JlZ2lzdHJhdGlvbkV2ZW50Pgo=</inboundTemplate>
            <outboundTemplate encoding="base64">e30=</outboundTemplate>
            <inboundDataType>HL7V3</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.8.0">
              <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.8.0">
                <stripNamespaces>false</stripNamespaces>
              </serializationProperties>
              <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.8.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.8.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.8.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </transformer>
          <responseTransformer version="3.8.0">
            <elements/>
            <inboundTemplate encoding="base64"></inboundTemplate>
            <outboundTemplate encoding="base64"></outboundTemplate>
            <inboundDataType>JSON</inboundDataType>
            <outboundDataType>JSON</outboundDataType>
            <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.8.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.8.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </inboundProperties>
            <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.8.0">
              <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.8.0">
                <splitType>JavaScript</splitType>
                <batchScript></batchScript>
              </batchProperties>
            </outboundProperties>
          </responseTransformer>
          <filter version="3.8.0">
            <elements>
              <com.mirth.connect.model.IteratorRule version="3.8.0">
                <name>Accept message if at least one of the iterations returns true for each msg[&apos;subject1&apos;][&apos;assignedEntity&apos;][&apos;performance&apos;][&apos;actDefinitionOrEvent&apos;][&apos;location&apos;]</name>
                <sequenceNumber>0</sequenceNumber>
                <enabled>true</enabled>
                <properties>
                  <target>msg[&apos;subject1&apos;][&apos;assignedEntity&apos;][&apos;performance&apos;][&apos;actDefinitionOrEvent&apos;][&apos;location&apos;]</target>
                  <indexVariable>i</indexVariable>
                  <prefixSubstitutions/>
                  <children>
                    <com.mirth.connect.model.IteratorRule version="3.8.0">
                      <name>Accept message if at least one of the iterations returns true for each msg[&apos;subject1&apos;][&apos;assignedEntity&apos;][&apos;performance&apos;][&apos;actDefinitionOrEvent&apos;][&apos;location&apos;][i].*::[&apos;definition&apos;][&apos;actDefinition&apos;][&apos;id&apos;]</name>
                      <sequenceNumber>0-0</sequenceNumber>
                      <enabled>true</enabled>
                      <properties>
                        <target>msg[&apos;subject1&apos;][&apos;assignedEntity&apos;][&apos;performance&apos;][&apos;actDefinitionOrEvent&apos;][&apos;location&apos;][i].*::[&apos;definition&apos;][&apos;actDefinition&apos;][&apos;id&apos;]</target>
                        <indexVariable>j</indexVariable>
                        <prefixSubstitutions/>
                        <children>
                          <com.mirth.connect.plugins.rulebuilder.RuleBuilderRule version="3.8.0">
                            <name>Accept message if &quot;msg[&apos;subject1&apos;][&apos;assignedEntity&apos;][&apos;performance&apos;][&apos;actDefinitionOrEvent&apos;][&apos;location&apos;][i].*::[&apos;definition&apos;][&apos;actDefinition&apos;][&apos;id&apos;][j][&apos;@extension&apos;].toString()&quot; equals &apos;2.16.840.1.113883.3.1818.10.1.5&apos;</name>
                            <sequenceNumber>0-0-0</sequenceNumber>
                            <enabled>true</enabled>
                            <field>msg[&apos;subject1&apos;][&apos;assignedEntity&apos;][&apos;performance&apos;][&apos;actDefinitionOrEvent&apos;][&apos;location&apos;][i].*::[&apos;definition&apos;][&apos;actDefinition&apos;][&apos;id&apos;][j][&apos;@extension&apos;].toString()</field>
                            <condition>EQUALS</condition>
                            <values>
                              <string>&apos;2.16.840.1.113883.3.1818.10.1.5&apos;</string>
                            </values>
                          </com.mirth.connect.plugins.rulebuilder.RuleBuilderRule>
                        </children>
                        <intersectIterations>false</intersectIterations>
                        <breakEarly>true</breakEarly>
                      </properties>
                    </com.mirth.connect.model.IteratorRule>
                  </children>
                  <intersectIterations>false</intersectIterations>
                  <breakEarly>true</breakEarly>
                </properties>
              </com.mirth.connect.model.IteratorRule>
            </elements>
          </filter>
          <transportName>JavaScript Writer</transportName>
          <mode>DESTINATION</mode>
          <enabled>true</enabled>
          <waitForPrevious>false</waitForPrevious>
        </connector>
      </destinationConnectors>
      <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
      <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
      <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
      <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
      <properties version="3.8.0">
        <clearGlobalChannelMap>true</clearGlobalChannelMap>
        <messageStorageMode>DEVELOPMENT</messageStorageMode>
        <encryptData>false</encryptData>
        <removeContentOnCompletion>false</removeContentOnCompletion>
        <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
        <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
        <initialState>STARTED</initialState>
        <storeAttachments>true</storeAttachments>
        <metaDataColumns>
          <metaDataColumn>
            <name>SOURCE</name>
            <type>STRING</type>
            <mappingName>mirth_source</mappingName>
          </metaDataColumn>
          <metaDataColumn>
            <name>TYPE</name>
            <type>STRING</type>
            <mappingName>mirth_type</mappingName>
          </metaDataColumn>
        </metaDataColumns>
        <attachmentProperties version="3.8.0">
          <type>None</type>
          <properties/>
        </attachmentProperties>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
      </properties>
      <exportData>
        <metadata>
          <enabled>true</enabled>
          <lastModified>
            <time>1574123042895</time>
            <timezone>America/Vancouver</timezone>
          </lastModified>
          <pruningSettings>
            <archiveEnabled>true</archiveEnabled>
          </pruningSettings>
        </metadata>
        <codeTemplateLibraries>
          <codeTemplateLibrary version="3.8.0">
            <id>a689ef28-f6b5-43bf-95c0-3a7f0cfadaff</id>
            <name>CDA</name>
            <revision>3</revision>
            <lastModified>
              <time>1571944443031</time>
              <timezone>Canada/Pacific</timezone>
            </lastModified>
            <description>Functions to build/format/parse CDA message fragments</description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>e995ffe5-fe5f-4260-a385-98f81c8418fe</string>
              <string>b2f0c503-a881-4126-995e-844c3e7692fd</string>
              <string>f3a65b72-9187-42ef-88cd-1d7626887e2e</string>
              <string>2375f320-7fd5-48cd-b3bb-53c22dab182b</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.8.0">
                <id>9914a610-67bc-42b7-aa87-6a693ed1800c</id>
                <name>Build CDA Address</name>
                <revision>6</revision>
                <lastModified>
                  <time>1571963472067</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Build a XML address tag based on &apos;4.2.1.2. Addresses&apos;

	@param {String} use - 
	@param {String} streetAddress - 
	@param {String} city - 
	@param {String} state - 
	@param {String} postalCode - 
	@param {String} country - 
	@return {Object} return the XML address tag
*/
function buildCDAAddress(use, streetAddress, city, state, postalCode, country) {
	var addr = new XML(&quot;&lt;addr&gt;&quot; + (streetAddress ? streetAddress + &quot;&lt;delimiter/&gt;&quot; : &quot;&quot;) + &quot;&lt;/addr&gt;&quot;); // CONF-BC0039
  	if (streetAddress) {
  		addr[&apos;@use&apos;] = use; // CONF-BC0041
  	}
  	if (city) {
  		addr[&apos;city&apos;] = city;
  	}
  	if (state) {
  		if (state.length == 2) {
  			state = &apos;CA-&apos; + state;
  		}
  		addr[&apos;state&apos;] = state; // CONF-BC0045
  	}
  	if (postalCode) {
  		addr[&apos;postalCode&apos;] = postalCode;
  	}
  	if (country) {
  		addr[&apos;country&apos;] = country; // CONF-BC0044
  	}
  	return addr;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>d56207a8-0d51-40fb-9437-73815405b6a2</id>
                <name>Build CDA ID</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650189148</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Build a XML id tag

	@param {String} root - 
	@param {String} extension - 
	@return {Object} return the XML id tag
*/
function buildCDAId(root, extension) {
	if (extension != null &amp;&amp; (&quot;&quot;+extension).length &gt; 0) {
		var id = new XML(&apos;&lt;id/&gt;&apos;);
	  	id[&apos;@extension&apos;] = extension;
		if (root != null) {
		  	id[&apos;@root&apos;] = root;
		  	// Get the authority name from the GlobalMap (loaded from database)
		  	var authName = globalMap.get(root);
		  	if (authName) {
		  		id[&apos;@assigningAuthorityName&apos;] = authName;
		  	}
		}
	  	return id;
	}
	return new XML(&apos;&lt;id nullFlavor=&quot;NA&quot; /&gt;&apos;);
}

</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>aaee9682-0184-43e5-a80b-32615c89dae0</id>
                <name>Build CDA Name</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650189270</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Build a XML name tag based on &apos;4.2.1.1. Person Names&apos;

	@param {String} use -
	@param {String} family -
	@param {String} given -
	@param {String} prefix -
	@param {String} suffix -
	@return {Object} return the XML name tag
*/
function buildCDAName(use, family, given, prefix, suffix) {
	var name = new XML(&quot;&lt;name/&gt;&quot;);
  	name[&apos;@use&apos;] = use; // CONF-BC0038
  	name[&apos;family&apos;] = family;
  	if (given instanceof Array) { // CONF-BC0031, CONF-BC0034
  		for (var i = 0; i &lt; given.length; i++) {
  			name[&apos;given&apos;][i] = given[i];
  		}
  	} else {
  		name[&apos;given&apos;] = given;
  	}
  	if (prefix) { // CONF-BC0035
  		name[&apos;prefix&apos;] = prefix;
  	}
  	if (suffix) { // CONF-BC0036
  		name[&apos;suffix&apos;] = suffix;
  	}
  	return name;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>39f73e3c-ac8d-46ee-904c-32d6a73d93c0</id>
                <name>Build CDA Telecom</name>
                <revision>2</revision>
                <lastModified>
                  <time>1571955126036</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Build a XML telecom tag

	@param {String} use - &apos;H&apos; = home, &apos;W&apos; = work, &apos;M&apos; = mobile
	@param {String} type - &apos;tel&apos; or &apos;email&apos;
	@param {String} value - number of telefone or email address
	@return {Object} return the XML telecom tag
*/
function buildCDATelecom(use, type, value) {
	var telecom = new XML(&quot;&lt;telecom/&gt;&quot;);
	if (use &amp;&amp; type &amp;&amp; value) {
  		telecom[&apos;@use&apos;] = use;
  		telecom[&apos;@value&apos;] = type + &quot;:&quot; + value;
	}
  	return telecom;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>978d7943-1810-4652-a684-8f7b6bc3bc11</id>
                <name>Build CDA TemplateId</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650189497</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Build a XML templateId tag

	@param {String} code - 
	@return {Object} return the XML template tag
*/
function buildCDATemplateId(code) {
	var templateId = new XML(&apos;&lt;templateId/&gt;&apos;);

	// Get the attributes from the GlobalMap (loaded from database)
  	var loinc_code = globalMap.get(code);
  	
  	templateId[&apos;@root&apos;] = loinc_code[&apos;template_id&apos;];
  	templateId[&apos;@assigningAuthorityName&apos;] = loinc_code[&apos;template_name&apos;];
		  	
  	return templateId;&#xd;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>0b2ecd99-756c-4a93-9bba-230bf83b0c62</id>
                <name>Format CDA Date</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650190912</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Format the date for the CDA format &apos;yyyyMMdd&apos;

	@param {Date/String} date -
	@return {String} return the formated date
*/
function formatCDADate(date) {
	return DateUtil.convertDate(&quot;yyyy-MM-dd&quot;, &quot;yyyyMMdd&quot;, date);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>07a8a226-a4d4-4248-b816-00011d888d0f</id>
                <name>Format CDA Date/Time</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650190779</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Format the date/time for the CDA format &apos;yyyyMMddHHmmZZZ&apos;

	@param {Date/String} dateTime - 
	@return {String} return the formated dateTime
*/
function formatCDADateTime(dateTime) {
	return DateUtil.formatDate(&apos;yyyyMMddHHmmZZZ&apos;, new Date(dateTime));
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>f4743440-d5d2-44f2-acd9-35746c48d9b3</id>
                <name>Parse CDA Address</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650191291</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Parse the CDA Address to JSON Object

	@param {String} cdaAddress - 
	@return {String} return the parsed Address object
*/
function parseCDAAddress(cdaAddress) {
	var addr = {};
	addr[&apos;use&apos;] = cdaAddress[&apos;@use&apos;].toString();
	// Try to get the street address from the body of the tag &lt;addr&gt; (Document format)
	var strtAddr = cdaAddress.toString().match(/&lt;addr.*&gt;(.+?)(?=&lt;delimiter\/&gt;)/); // return array of matchs
	if (strtAddr) {
		addr[&apos;streetAddress&apos;] = strtAddr[1]; //.replace(/(&lt;\/?[^&gt;]+&gt;)/gi, &apos;&apos;); // strip xml tags?
	}
	// Try to append the list of &apos;delimiters&apos; (List clinics/providers format)
	if (getArrayOrXmlLength(cdaAddress[&apos;delimiter&apos;]) &gt; 0) {
		for (var i = 0; i &lt; getArrayOrXmlLength(cdaAddress[&apos;delimiter&apos;]); i++) {
			addr[&apos;streetAddress&apos;] = (addr[&apos;streetAddress&apos;] ? addr[&apos;streetAddress&apos;] + &apos; &apos; : &apos;&apos;) + cdaAddress[&apos;delimiter&apos;][i].toString();
		}
		addr[&apos;streetAddress&apos;] = addr[&apos;streetAddress&apos;].trim(); // trim any whitespace from both side of the address
	}
	if (getArrayOrXmlLength(cdaAddress[&apos;city&apos;]) &gt; 0) {
		addr[&apos;city&apos;] = cdaAddress[&apos;city&apos;].toString();
	}
	if (getArrayOrXmlLength(cdaAddress[&apos;province&apos;]) &gt; 0) {
		addr[&apos;province&apos;] = cdaAddress[&apos;state&apos;].toString();
	}
	if (getArrayOrXmlLength(cdaAddress[&apos;postalCode&apos;]) &gt; 0) {
		addr[&apos;postalCode&apos;] = cdaAddress[&apos;postalCode&apos;].toString();
	}
	if (getArrayOrXmlLength(cdaAddress[&apos;country&apos;]) &gt; 0) {
		addr[&apos;country&apos;] = cdaAddress[&apos;country&apos;].toString();
	}
	return addr;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>41f1daa2-e22b-439a-b0b5-16bc108c007e</id>
                <name>Parse CDA Date/Time</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650191523</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Parse the CDA Date/Time to Date object

	@param {String} cdaDateTime - 
	@return {String} return the Date object
*/
function parseCDADateTime(cdaDateTime) {
	if (!cdaDateTime || cdaDateTime.length == 0) {
		return null;
	}
	if (cdaDateTime.length &lt;= 8) {
		return DateUtil.convertDate(&quot;yyyyMMdd&quot;, &quot;yyyy-MM-dd&quot;, cdaDateTime);
	}
	return DateUtil.convertDate(&quot;yyyyMMddHHmmZZZ&quot;, &quot;yyyy-MM-dd\&apos;T\&apos;HH:mm:ssZ&quot;, cdaDateTime);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>1dc8b8fe-b046-4292-a7c2-218c37bd0d2d</id>
                <name>Parse CDA Date/TIme to DB format</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650191405</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Parse the CDA Date/Time to Date in DB format

	@param {String} cdaDateTime - 
	@return {String} return the Date in DB format
*/
function parseCDADateTimeToDB(cdaDateTime) {
	if (!cdaDateTime || cdaDateTime.length == 0) {
		return null;
	}
	if (cdaDateTime.length &lt;= 8) {
		return DateUtil.convertDate(&quot;yyyyMMdd&quot;, &quot;yyyy-MM-dd&quot;, cdaDateTime);
	}
	return DateUtil.convertDate(&quot;yyyyMMddHHmmZZZ&quot;, &quot;yyyy-MM-dd hh:mm:ss&quot;, cdaDateTime);
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>a2f73260-eb70-4dcc-8b8a-9350c3bec9fd</id>
                <name>Parse CDA ID</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650191647</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Parse the CDA Id to JSON object

	@param {String} cdaID - 
	@return {String} return the parsed ID object
*/
function parseCDAId(cdaID) {
	var id = {};
	if (cdaID[&apos;@extension&apos;]) {
		id[&apos;code&apos;] = cdaID[&apos;@extension&apos;].toString();
	}
	if (cdaID[&apos;@root&apos;]) {
		id[&apos;type&apos;] = cdaID[&apos;@root&apos;].toString();
	}
	return id;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>a0354d90-ffa8-47c5-9776-e41927d2f0d0</id>
                <name>Parse CDA Name</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650191787</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Parse the CDA Name to JSON object

	@param {String} cdaName - 
	@return {String} return the parsed Name object
*/
function parseCDAName(cdaName) {
	var name = {};
	name[&apos;use&apos;] = cdaName[&apos;@use&apos;].toString();
	name[&apos;family&apos;] = cdaName[&apos;family&apos;].toString();
	name[&apos;given&apos;] = [];
	for (var i = 0; i &lt; getArrayOrXmlLength(cdaName[&apos;given&apos;]); i++) {
		name[&apos;given&apos;][i] = cdaName[&apos;given&apos;][i].toString();
	}
	if (getArrayOrXmlLength(cdaName[&apos;prefix&apos;]) &gt; 0) {
		name[&apos;prefix&apos;] = cdaName[&apos;prefix&apos;].toString();
	}
	if (getArrayOrXmlLength(cdaName[&apos;suffix&apos;]) &gt; 0) {
		name[&apos;suffix&apos;] = cdaName[&apos;suffix&apos;].toString();
	}
	return name;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>407e6d63-57cf-42f8-b555-5d6c575f4f55</id>
                <name>Parse CDA Telecom</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650191892</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Parse the CDA Telecom to JSON object

	@param {String} telecom - 
	@return {String} return the parsed Telecom object
*/
function parseCDATelecom(cdaTelecom) {
	var telecom = {};
	telecom[&apos;use&apos;] = cdaTelecom[&apos;@use&apos;].toString();
	telecom[&apos;type&apos;] = &quot;tel&quot;; 
	if (getArrayOrXmlLength(cdaTelecom[&apos;@value&apos;]) &gt; 0) {
		var telParts = cdaTelecom[&apos;@value&apos;].split(&apos;:&apos;);
		telecom[&apos;type&apos;] = telParts[0];	
		telecom[&apos;value&apos;] = telParts[1];
	}
	return telecom;
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
          <codeTemplateLibrary version="3.8.0">
            <id>5d2a129c-da07-49cc-950c-d941a93cd271</id>
            <name>OBIB</name>
            <revision>5</revision>
            <lastModified>
              <time>1572641956778</time>
              <timezone>Canada/Pacific</timezone>
            </lastModified>
            <description></description>
            <includeNewChannels>true</includeNewChannels>
            <enabledChannelIds>
              <string>e995ffe5-fe5f-4260-a385-98f81c8418fe</string>
              <string>b2f0c503-a881-4126-995e-844c3e7692fd</string>
              <string>f3a65b72-9187-42ef-88cd-1d7626887e2e</string>
              <string>2375f320-7fd5-48cd-b3bb-53c22dab182b</string>
            </enabledChannelIds>
            <disabledChannelIds/>
            <codeTemplates>
              <codeTemplate version="3.8.0">
                <id>0d5c946b-11fe-4dde-8c69-7d9296ea32a0</id>
                <name>Build Document Storage Message</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650189617</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Build a Document Storage Message.

	@param {String} locationId - Location / Clinic Id
	@param {String} documentId - Document Id
	@param {String} messageType - DOCUMENT, RESPONSE or ATTACHMENT
	@param {String} content - Content of the message / document
	@param {String} connectorVersion - OBBI Connector version
	@return {String} return the Document Storage Message JSON object
*/
function buildDocumentStorageMessage(locationId, documentId, messageType, messageContent, connectorVersion) {
	var storageMsg = {};
	storageMsg[&apos;locationId&apos;] = locationId;
	storageMsg[&apos;documentId&apos;] = documentId;
	storageMsg[&apos;messageType&apos;] = messageType;
	storageMsg[&apos;messageContent&apos;] = messageContent;
	storageMsg[&apos;obibVersion&apos;] = globalMap.get(&quot;obib.version&quot;);
	storageMsg[&apos;connectorVersion&apos;] = connectorVersion;
	return storageMsg;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>738d81a1-d04c-482e-a011-30c61a09b3d3</id>
                <name>Create Array of DocumentAttachment</name>
                <revision>2</revision>
                <lastModified>
                  <time>1570827114602</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Create an Array of DocumentAttachment objects from a JSON object

	@param {Object[]} jsonAttachments - 
	@return {DocumentAttachment[]} return the Array of DocumentAttachment
*/
function createDocumentAttachmentArray(jsonAttachments) {
	var attachments = [];
	if (jsonAttachments != null) {
		for (var i = 0; i &lt; jsonAttachments.length; i++) {
			var attachment = jsonAttachments[i];
			attachments.push(new Packages.ca.uvic.leadlab.cdxconnector.messages.submit.DocumentAttachment(
				attachment[&apos;mediaType&apos;],
				attachment[&apos;content&apos;],
				attachment[&apos;hash&apos;],
				attachment[&apos;hashAlgorithm&apos;],
				attachment[&apos;reference&apos;]));
		}
	}
	return attachments;
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>bcd2a30d-111f-4fd3-9724-0e9a2e7dfe50</id>
                <name>Create DatabaseConnection</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650189859</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Get the DatabaseConnection object

	@return {DatabaseConnection} return the DatabaseConnection object
*/
function getDBConnection() {
	var dataSource = globalMap.get(&quot;hikari_OBIB_DB&quot;);
	if (dataSource == null) {
		dataSource = new Packages.com.zaxxer.hikari.HikariDataSource();
		dataSource.setDriverClassName(globalMap.get(&quot;obib.db.driver&quot;));
		dataSource.setJdbcUrl(globalMap.get(&quot;obib.db.url&quot;));
		dataSource.setUsername(globalMap.get(&quot;obib.db.username&quot;));
		dataSource.setPassword(globalMap.get(&quot;obib.db.password&quot;));
		dataSource.setConnectionTimeout(0);
		dataSource.setAutoCommit(false);
		dataSource.setMaximumPoolSize(10);
		dataSource.setMinimumIdle(0);
		//dataSource.setReadOnly(readOnly);
		//dataSource.setConnectionTestQuery(&quot;SELECT 1&quot;);
		globalMap.put(&quot;hikari_OBIB_DB&quot;, dataSource);
	}
	if (dataSource != null) {
		return dataSource.getConnection();
	} else {
		throw &quot;Cannot create a new data source (connection pool).&quot;;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>60bfd3ac-552a-4d59-ac1d-48fbe4f430b2</id>
                <name>Create Error Message</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650189966</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Create JSON error message

	@param {String} error - Error message
	@param {Object} obibErrors - Associative Array of errors
	@return {String} return the JSON response
*/
function createErrorMessage(error, obibErrors) {
	// Filter cdxconnector messages
	if (error.includes(&apos;ca.uvic.leadlab.cdxconnector&apos;)) {
		error = error.split(/ca.uvic.leadlab.cdxconnector.*:/).pop();
	}
	
	return JSON.stringify({&apos;obibVersion&apos;: globalMap.get(&quot;obib.version&quot;), &apos;status&apos;: &apos;ERROR&apos;, &apos;message&apos;: error, &apos;obibErrors&apos;: obibErrors})
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>f1de696c-f547-49ae-8225-f7e40ed2c87c</id>
                <name>Create Segment Before</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650190249</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Create a new segment and insert it before the target segment.
	
	@param {String} name - The name of the segment to create.
	@param {String} segment - The existing segment that the new segment will be inserted before.
	@return {String} return The existing segment that the new segment will be inserted after.
*/
function createSegmentBefore(name, segment) {
	var msgObj = segment;
   	while (msgObj.parent() != undefined) { 
		msgObj = msgObj.parent(); 
	}
     msgObj.insertChildBefore(segment[0], new XML(&apos;&lt;&apos; + name + &apos;&gt;&lt;/&apos; + name + &apos;&gt;&apos;));
   	return msgObj.child(segment[0].childIndex() - 1);
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>b332b27e-5312-4517-a4ad-bad60b2642bf</id>
                <name>Evaluate XPath expression</name>
                <revision>29</revision>
                <lastModified>
                  <time>1573764879777</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Evaluates a XPath expression

	@param {Object} xml - xml being evaluated
	@param {String} expression - expression to be evaluated
	@return {String} &apos;true&apos; if the expression evaluates, otherwise &apos;false&apos;
*/
function evaluateXPath(xml, expression) {
	// clean namespace
	var xmlStr = xml.toString().replace(&apos;xmlns=&quot;urn:hl7-org:v3&quot;&apos;, &apos;&apos;);
	
	// evaluate the xpath using Java xml API
	var input = new Packages.org.xml.sax.InputSource(new Packages.java.io.StringReader(xmlStr));
	var xpath = Packages.javax.xml.xpath.XPathFactory.newInstance().newXPath();
	return xpath.evaluate(expression, input, Packages.javax.xml.xpath.XPathConstants.BOOLEAN).toString();
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>df99f17c-1947-469e-be81-78e90d657f4d</id>
                <name>Execute Database Query</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650190510</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes a query on the database and returns a CachedRowSet.

	@param {String} query - The query to be executed.
	@return {String} return The result of the query, as a CachedRowSet.
*/
function executeCachedQuery(query) {
	var connection = getDBConnection();
	if (connection != null) {
		var statement = null;
		try {
			statement = connection.createStatement();
            	var result = statement.executeQuery(query);
            	var crs = new MirthCachedRowSet();
            	crs.populate(result);
            	if (result != null) {
            		Packages.org.apache.commons.dbutils.DbUtils.closeQuietly(result);
            	}
            	return crs;
		} catch(err) {
			throw err;
        	} finally {
        		if (statement != null) {
				Packages.org.apache.commons.dbutils.DbUtils.closeQuietly(statement);
        		}
        		if (connection != null) {
        			Packages.org.apache.commons.dbutils.DbUtils.closeQuietly(connection);
        		}
		}
	} else {
		throw &quot;Error: Cannot connect to the database&quot;;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>8512e74b-a53b-4a15-9718-fed25c0481ef</id>
                <name>Execute Database Update</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650190646</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Executes an INSERT/UPDATE on the database and returns the row count.

	@param {String} query - The statement to be executed.
	@return {Integer} return A count of the number of updated rows.
*/
function executeUpdate(query) {
	var connection = getDBConnection();
	if (connection != null) {
		var statement = null;
		try {
			connection.setAutoCommit(true);
			statement = connection.createStatement();
			if (statement.execute(query)) {
				return -1;
			} else {
				return statement.getUpdateCount();
			}
		} catch (err) {
			throw err;
		} finally {
			if (statement != null) {
				Packages.org.apache.commons.dbutils.DbUtils.closeQuietly(statement);
        		}
        		if (connection != null) {
        			Packages.org.apache.commons.dbutils.DbUtils.closeQuietly(connection);
        		}
		}
	} else {
		throw &quot;Error: Cannot connect to the database&quot;;
	}
}</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>be89bc64-f4bf-4ab3-954b-04088964eda6</id>
                <name>Handle Query Result Status</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650191035</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Handle the result status from a query message.

	@param {Object} queryResult - query result (&apos;tmp&apos; variable)
	@param {Object} queryMessage - query message (&apos;msg&apos; variable)
	@param {String} collection - collection returned by the result
	@return {Object} return The queryResult object with status and message.
*/
function handleQueryResultStatus(queryResult, queryMessage, collection) {
	if (queryResult[&apos;ackDetail&apos;][&apos;status&apos;] === &apos;OK&apos;) {
		queryResult[&apos;status&apos;] = &quot;SUCCESS&quot;;
	} else if (queryResult[&apos;ackDetail&apos;][&apos;status&apos;] === &apos;NF&apos;) {
		queryResult[&apos;status&apos;] = &quot;SUCCESS&quot;;

		queryResult[collection] = []; // ensure the result collection is empty.
	} else {
		queryResult[&apos;status&apos;] = &quot;ERROR&quot;;
		
		if (queryResult[&apos;ackDetail&apos;][&apos;status&apos;] === &apos;QE&apos;) {
			queryResult[&apos;message&apos;] = queryMessage[&apos;acknowledgement&apos;][&apos;acknowledgementDetail&apos;][&apos;text&apos;].toString()				
		} else {
			queryResult[&apos;message&apos;] = &apos;Unespected error. Ack response code: &apos; + queryResult[&apos;ackDetail&apos;][&apos;status&apos;];
		}
		
		logger.error(&apos;MessagId &apos; + queryResult[&apos;ackDetail&apos;][&apos;messageId&apos;] + &apos; returned the error: &apos; + queryResult[&apos;message&apos;] + &quot;&apos;&quot;);
	}
	return tmp;
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>e83b8bbf-433a-4c3d-88a2-16f4132b38af</id>
                <name>Handle Return Message</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650191160</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Handle the return message creation.

	@param {Object} responseStatus - 
	@param {Object} responseStatusMessage - 
	@param {Object} responseMessage - 
	@param {Function} createMessage - Callback function responsible for creating and return the result message.
	@return {String} return the stringify json message
*/
function handleResponseMessage(responseStatus, responseStatusMessage, responseMessage, createMessage) {
	if (responseStatus === SENT) { // process only SENT messages
		var responseMessage = createMessage(); // get the result message
		responseMessage[&apos;obibVersion&apos;] = globalMap.get(&quot;obib.version&quot;); // add versioning
		return JSON.stringify(responseMessage); // Convert the json to string and return it
	} else if (responseStatus === ERROR) {
		throw &quot;Error Message: &apos;&quot; + responseStatusMessage.toString() 
			+ &quot;&apos;\n Original Message: &apos;&quot; + msg.toString() + &quot;&apos;&quot;;
	} else {
		throw &quot;Not able to handle the response code: &apos;&quot; + responseStatus 
		+ &quot;&apos; \n Error Message: &apos;&quot; + responseStatusMessage.toString() 
		+ &quot;&apos;\n Original Message: &apos;&quot; + msg.toString() + &quot;&apos;&quot;;
	}
}
</code>
                </properties>
              </codeTemplate>
              <codeTemplate version="3.8.0">
                <id>dfd86988-26e1-4d97-b81d-fee49e303272</id>
                <name>Store OBIB Error</name>
                <revision>1</revision>
                <lastModified>
                  <time>1570650192000</time>
                  <timezone>Canada/Pacific</timezone>
                </lastModified>
                <contextSet>
                  <delegate>
                    <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                    <contextType>CHANNEL_UNDEPLOY</contextType>
                    <contextType>CHANNEL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_DEPLOY</contextType>
                    <contextType>DESTINATION_DISPATCHER</contextType>
                    <contextType>CHANNEL_ATTACHMENT</contextType>
                    <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                    <contextType>GLOBAL_DEPLOY</contextType>
                    <contextType>SOURCE_RECEIVER</contextType>
                    <contextType>GLOBAL_PREPROCESSOR</contextType>
                    <contextType>CHANNEL_BATCH</contextType>
                    <contextType>CHANNEL_POSTPROCESSOR</contextType>
                    <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                    <contextType>GLOBAL_UNDEPLOY</contextType>
                    <contextType>GLOBAL_POSTPROCESSOR</contextType>
                  </delegate>
                </contextSet>
                <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
                  <type>FUNCTION</type>
                  <code>/**
	Store the error as an &apos;associative array&apos; in the channel map.
	To retrieve the array of errors use &apos;channelMap.get(&apos;obibErrors&apos;)&apos;

	@param {String} errorCode - the key of the associative array
	@param {String} errorMessage - the value of the associative array
*/
function storeOBIBError(errorCode, errorMessage) {
	var obibErrors = channelMap.get(&apos;obibErrors&apos;);
	if (obibErrors == null) {
		obibErrors = new Object();
	}
	obibErrors[errorCode] = errorMessage;
	channelMap.put(&apos;obibErrors&apos;, obibErrors);
}</code>
                </properties>
              </codeTemplate>
            </codeTemplates>
          </codeTemplateLibrary>
        </codeTemplateLibraries>
        <dependentIds>
          <string>b2f0c503-a881-4126-995e-844c3e7692fd</string>
        </dependentIds>
      </exportData>
    </channel>
  </channels>
</channelGroup>