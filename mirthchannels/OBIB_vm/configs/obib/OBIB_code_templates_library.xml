<list>
  <codeTemplateLibrary version="3.8.0">
    <id>a689ef28-f6b5-43bf-95c0-3a7f0cfadaff</id>
    <name>CDA</name>
    <revision>1</revision>
    <lastModified>
      <time>1563237351323</time>
      <timezone>Canada/Pacific</timezone>
    </lastModified>
    <description>Functions to build/format/parse CDA message fragments</description>
    <includeNewChannels>true</includeNewChannels>
    <enabledChannelIds>
      <string>e995ffe5-fe5f-4260-a385-98f81c8418fe</string>
      <string>b2f0c503-a881-4126-995e-844c3e7692fd</string>
      <string>f3a65b72-9187-42ef-88cd-1d7626887e2e</string>
      <string>2375f320-7fd5-48cd-b3bb-53c22dab182b</string>
    </enabledChannelIds>
    <disabledChannelIds/>
    <codeTemplates>
      <codeTemplate version="3.8.0">
        <id>9914a610-67bc-42b7-aa87-6a693ed1800c</id>
        <name>Build CDA Address</name>
        <revision>1</revision>
        <lastModified>
          <time>1563237352148</time>
          <timezone>Canada/Pacific</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Build a XML address tag based on &apos;4.2.1.2. Addresses&apos;

	@param {String} use - 
	@param {String} streetAddress - 
	@param {String} city - 
	@param {String} state - 
	@param {String} postalCode - 
	@param {String} country - 
	@return {Object} return the XML address tag
*/
function buildCDAAddress(use, streetAddress, city, state, postalCode, country) {
	var addr = new XML(&quot;&lt;addr&gt;&quot; + streetAddress + &quot;&lt;delimiter/&gt;&lt;/addr&gt;&quot;); // CONF-BC0039
  	addr[&apos;@use&apos;] = use; // CONF-BC0041
  	addr[&apos;city&apos;] = city 
  	addr[&apos;state&apos;] = state; // CONF-BC0045
  	addr[&apos;postalCode&apos;] = postalCode;
  	if (country) {
  		addr[&apos;country&apos;] = country; // CONF-BC0044
  	}
  	return addr;
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="3.8.0">
        <id>d56207a8-0d51-40fb-9437-73815405b6a2</id>
        <name>Build CDA ID</name>
        <revision>1</revision>
        <lastModified>
          <time>1563237352298</time>
          <timezone>Canada/Pacific</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Build a XML id tag

	@param {String} root - 
	@param {String} extension - 
	@return {Object} return the XML id tag
*/
function buildCDAId(root, extension) {
	if (extension != null) {
		var id = new XML(&apos;&lt;id/&gt;&apos;);
	  	id[&apos;@extension&apos;] = extension;
		if (root != null) {
		  	id[&apos;@root&apos;] = root;
		  	// Get the authority name from the GlobalMap (loaded from database)
		  	var authName = globalMap.get(root);
		  	if (authName) {
		  		id[&apos;@assigningAuthorityName&apos;] = authName;
		  	}
		}
	  	return id;
	}
	return new XML(&apos;&lt;id nullFlavor=&quot;NA&quot; /&gt;&apos;);
}

</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="3.8.0">
        <id>aaee9682-0184-43e5-a80b-32615c89dae0</id>
        <name>Build CDA Name</name>
        <revision>1</revision>
        <lastModified>
          <time>1563237352452</time>
          <timezone>Canada/Pacific</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Build a XML name tag based on &apos;4.2.1.1. Person Names&apos;

	@param {String} use -
	@param {String} family -
	@param {String} given -
	@param {String} prefix -
	@param {String} suffix -
	@return {Object} return the XML name tag
*/
function buildCDAName(use, family, given, prefix, suffix) {
	var name = new XML(&quot;&lt;name/&gt;&quot;);
  	name[&apos;@use&apos;] = use; // CONF-BC0038
  	name[&apos;family&apos;] = family;
  	if (given instanceof Array) { // CONF-BC0031, CONF-BC0034
  		for (var i = 0; i &lt; given.length; i++) {
  			name[&apos;given&apos;][i] = given[i];
  		}
  	} else {
  		name[&apos;given&apos;] = given;
  	}
  	if (prefix) { // CONF-BC0035
  		name[&apos;prefix&apos;] = prefix;
  	}
  	if (suffix) { // CONF-BC0036
  		name[&apos;suffix&apos;] = suffix;
  	}
  	return name;
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="3.8.0">
        <id>39f73e3c-ac8d-46ee-904c-32d6a73d93c0</id>
        <name>Build CDA Telecom</name>
        <revision>1</revision>
        <lastModified>
          <time>1563237352619</time>
          <timezone>Canada/Pacific</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Build a XML telecom tag

	@param {String} use - &apos;H&apos; = home, &apos;W&apos; = work, &apos;M&apos; = mobile
	@param {String} type - &apos;tel&apos; or &apos;email&apos;
	@param {String} value - number of telefone or email address
	@return {Object} return the XML telecom tag
*/
function buildCDATelecom(use, type, value) {
	var telecom = new XML(&quot;&lt;telecom/&gt;&quot;);
  	telecom[&apos;@use&apos;] = use;
  	telecom[&apos;@value&apos;] = type + &quot;:&quot; + value;
  	return telecom;
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="3.8.0">
        <id>978d7943-1810-4652-a684-8f7b6bc3bc11</id>
        <name>Build CDA TemplateId</name>
        <revision>1</revision>
        <lastModified>
          <time>1563237352743</time>
          <timezone>Canada/Pacific</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Build a XML templateId tag

	@param {String} code - 
	@return {Object} return the XML template tag
*/
function buildCDATemplateId(code) {
	var templateId = new XML(&apos;&lt;templateId/&gt;&apos;);

	// Get the attributes from the GlobalMap (loaded from database)
  	var loinc_code = globalMap.get(code);
  	
  	templateId[&apos;@root&apos;] = loinc_code[&apos;template_id&apos;];
  	templateId[&apos;@assigningAuthorityName&apos;] = loinc_code[&apos;template_name&apos;];
		  	
  	return templateId;&#xd;
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="3.8.0">
        <id>0b2ecd99-756c-4a93-9bba-230bf83b0c62</id>
        <name>Format CDA Date</name>
        <revision>1</revision>
        <lastModified>
          <time>1563237354715</time>
          <timezone>Canada/Pacific</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Format the date for the CDA format &apos;yyyyMMdd&apos;

	@param {Date/String} date -
	@return {String} return the formated date
*/
function formatCDADate(date) {
	return DateUtil.convertDate(&quot;yyyy-MM-dd&quot;, &quot;yyyyMMdd&quot;, date);
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="3.8.0">
        <id>07a8a226-a4d4-4248-b816-00011d888d0f</id>
        <name>Format CDA Date/Time</name>
        <revision>1</revision>
        <lastModified>
          <time>1563237354578</time>
          <timezone>Canada/Pacific</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Format the date/time for the CDA format &apos;yyyyMMddHHmmZZZ&apos;

	@param {Date/String} dateTime - 
	@return {String} return the formated dateTime
*/
function formatCDADateTime(dateTime) {
	return DateUtil.formatDate(&apos;yyyyMMddHHmmZZZ&apos;, new Date(dateTime));
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="3.8.0">
        <id>f4743440-d5d2-44f2-acd9-35746c48d9b3</id>
        <name>Parse CDA Address</name>
        <revision>1</revision>
        <lastModified>
          <time>1563237354977</time>
          <timezone>Canada/Pacific</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Parse the CDA Address to JSON Object

	@param {String} cdaAddress - 
	@return {String} return the parsed Address object
*/
function parseCDAAddress(cdaAddress) {
	var addr = {};
	addr[&apos;use&apos;] = cdaAddress[&apos;@use&apos;].toString();
	// Try to get the street address from the body of the tag &lt;addr&gt; (Document format)
	var strtAddr = cdaAddress.toString().match(/&lt;addr.*&gt;(.+?)(?=&lt;delimiter\/&gt;)/); // return array of matchs
	if (strtAddr) {
		addr[&apos;streetAddress&apos;] = strtAddr[1]; //.replace(/(&lt;\/?[^&gt;]+&gt;)/gi, &apos;&apos;); // strip xml tags?
	}
	// Try to append the list of &apos;delimiters&apos; (List clinics/providers format)
	if (getArrayOrXmlLength(cdaAddress[&apos;delimiter&apos;]) &gt; 0) {
		for (var i = 0; i &lt; getArrayOrXmlLength(cdaAddress[&apos;delimiter&apos;]); i++) {
			addr[&apos;streetAddress&apos;] = (addr[&apos;streetAddress&apos;] ? addr[&apos;streetAddress&apos;] + &apos; &apos; : &apos;&apos;) + cdaAddress[&apos;delimiter&apos;][i].toString();
		}
		addr[&apos;streetAddress&apos;] = addr[&apos;streetAddress&apos;].trim(); // trim any whitespace from both side of the address
	}
	if (getArrayOrXmlLength(cdaAddress[&apos;city&apos;]) &gt; 0) {
		addr[&apos;city&apos;] = cdaAddress[&apos;city&apos;].toString();
	}
	if (getArrayOrXmlLength(cdaAddress[&apos;province&apos;]) &gt; 0) {
		addr[&apos;province&apos;] = cdaAddress[&apos;state&apos;].toString();
	}
	if (getArrayOrXmlLength(cdaAddress[&apos;postalCode&apos;]) &gt; 0) {
		addr[&apos;postalCode&apos;] = cdaAddress[&apos;postalCode&apos;].toString();
	}
	if (getArrayOrXmlLength(cdaAddress[&apos;country&apos;]) &gt; 0) {
		addr[&apos;country&apos;] = cdaAddress[&apos;country&apos;].toString();
	}
	return addr;
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="3.8.0">
        <id>41f1daa2-e22b-439a-b0b5-16bc108c007e</id>
        <name>Parse CDA Date/Time</name>
        <revision>1</revision>
        <lastModified>
          <time>1563237355238</time>
          <timezone>Canada/Pacific</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Parse the CDA Date/Time to Date object

	@param {String} cdaDateTime - 
	@return {String} return the Date object
*/
function parseCDADateTime(cdaDateTime) {
	if (!cdaDateTime || cdaDateTime.length == 0) {
		return null;
	}
	if (cdaDateTime.length &lt;= 8) {
		return DateUtil.convertDate(&quot;yyyyMMdd&quot;, &quot;yyyy-MM-dd&quot;, cdaDateTime);
	}
	return DateUtil.convertDate(&quot;yyyyMMddHHmmZZZ&quot;, &quot;yyyy-MM-dd\&apos;T\&apos;HH:mm:ssZ&quot;, cdaDateTime);
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="3.8.0">
        <id>1dc8b8fe-b046-4292-a7c2-218c37bd0d2d</id>
        <name>Parse CDA Date/TIme to DB format</name>
        <revision>1</revision>
        <lastModified>
          <time>1563237355112</time>
          <timezone>Canada/Pacific</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Parse the CDA Date/Time to Date in DB format

	@param {String} cdaDateTime - 
	@return {String} return the Date in DB format
*/
function parseCDADateTimeToDB(cdaDateTime) {
	if (!cdaDateTime || cdaDateTime.length == 0) {
		return null;
	}
	if (cdaDateTime.length &lt;= 8) {
		return DateUtil.convertDate(&quot;yyyyMMdd&quot;, &quot;yyyy-MM-dd&quot;, cdaDateTime);
	}
	return DateUtil.convertDate(&quot;yyyyMMddHHmmZZZ&quot;, &quot;yyyy-MM-dd hh:mm:ss&quot;, cdaDateTime);
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="3.8.0">
        <id>a2f73260-eb70-4dcc-8b8a-9350c3bec9fd</id>
        <name>Parse CDA ID</name>
        <revision>1</revision>
        <lastModified>
          <time>1563237355366</time>
          <timezone>Canada/Pacific</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Parse the CDA Id to JSON object

	@param {String} cdaID - 
	@return {String} return the parsed ID object
*/
function parseCDAId(cdaID) {
	var id = {};
	if (cdaID[&apos;@extension&apos;]) {
		id[&apos;code&apos;] = cdaID[&apos;@extension&apos;].toString();
	}
	if (cdaID[&apos;@root&apos;]) {
		id[&apos;type&apos;] = cdaID[&apos;@root&apos;].toString();
	}
	return id;
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="3.8.0">
        <id>a0354d90-ffa8-47c5-9776-e41927d2f0d0</id>
        <name>Parse CDA Name</name>
        <revision>1</revision>
        <lastModified>
          <time>1563237355501</time>
          <timezone>Canada/Pacific</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Parse the CDA Name to JSON object

	@param {String} cdaName - 
	@return {String} return the parsed Name object
*/
function parseCDAName(cdaName) {
	var name = {};
	name[&apos;use&apos;] = cdaName[&apos;@use&apos;].toString();
	name[&apos;family&apos;] = cdaName[&apos;family&apos;].toString();
	name[&apos;given&apos;] = [];
	for (var i = 0; i &lt; getArrayOrXmlLength(cdaName[&apos;given&apos;]); i++) {
		name[&apos;given&apos;][i] = cdaName[&apos;given&apos;][i].toString();
	}
	if (getArrayOrXmlLength(cdaName[&apos;prefix&apos;]) &gt; 0) {
		name[&apos;prefix&apos;] = cdaName[&apos;prefix&apos;].toString();
	}
	if (getArrayOrXmlLength(cdaName[&apos;suffix&apos;]) &gt; 0) {
		name[&apos;suffix&apos;] = cdaName[&apos;suffix&apos;].toString();
	}
	return name;
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="3.8.0">
        <id>407e6d63-57cf-42f8-b555-5d6c575f4f55</id>
        <name>Parse CDA Telecom</name>
        <revision>1</revision>
        <lastModified>
          <time>1563237355626</time>
          <timezone>Canada/Pacific</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Parse the CDA Telecom to JSON object

	@param {String} telecom - 
	@return {String} return the parsed Telecom object
*/
function parseCDATelecom(cdaTelecom) {
	var telecom = {};
	telecom[&apos;use&apos;] = cdaTelecom[&apos;@use&apos;].toString();
	var telParts = cdaTelecom[&apos;@value&apos;].split(&apos;:&apos;);
	telecom[&apos;type&apos;] = telParts[0];	
	telecom[&apos;value&apos;] = telParts[1];
	return telecom;
}</code>
        </properties>
      </codeTemplate>
    </codeTemplates>
  </codeTemplateLibrary>
  <codeTemplateLibrary version="3.8.0">
    <id>5d2a129c-da07-49cc-950c-d941a93cd271</id>
    <name>OBIB</name>
    <revision>1</revision>
    <lastModified>
      <time>1563237351329</time>
      <timezone>Canada/Pacific</timezone>
    </lastModified>
    <description></description>
    <includeNewChannels>true</includeNewChannels>
    <enabledChannelIds>
      <string>e995ffe5-fe5f-4260-a385-98f81c8418fe</string>
      <string>b2f0c503-a881-4126-995e-844c3e7692fd</string>
      <string>f3a65b72-9187-42ef-88cd-1d7626887e2e</string>
      <string>2375f320-7fd5-48cd-b3bb-53c22dab182b</string>
    </enabledChannelIds>
    <disabledChannelIds/>
    <codeTemplates>
      <codeTemplate version="3.8.0">
        <id>0d5c946b-11fe-4dde-8c69-7d9296ea32a0</id>
        <name>Build Document Storage Message</name>
        <revision>1</revision>
        <lastModified>
          <time>1563237352879</time>
          <timezone>Canada/Pacific</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>GLOBAL_PREPROCESSOR</contextType>
            <contextType>CHANNEL_DEPLOY</contextType>
            <contextType>GLOBAL_POSTPROCESSOR</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>GLOBAL_DEPLOY</contextType>
            <contextType>CHANNEL_BATCH</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>CHANNEL_ATTACHMENT</contextType>
            <contextType>CHANNEL_PREPROCESSOR</contextType>
            <contextType>CHANNEL_UNDEPLOY</contextType>
            <contextType>CHANNEL_POSTPROCESSOR</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>GLOBAL_UNDEPLOY</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Build a Document Storage Message.

	@param {String} locationId - 
	@param {String} receiverId - 
	@param {String} documentId - 
	@param {String} messageType - DOCUMENT, RESPONSE or ATTACHMENT
	@param {String} content - 
	@return {String} return the Document Storage Message JSON object
*/
function buildDocumentStorageMessage(locationId, receiverId, documentId, messageType, messageContent) {
	var storageMsg = {};
	storageMsg[&apos;locationId&apos;] = locationId;
	storageMsg[&apos;receiverId&apos;] = receiverId;
	storageMsg[&apos;documentId&apos;] = documentId;
	storageMsg[&apos;messageType&apos;] = messageType;
	storageMsg[&apos;messageContent&apos;] = messageContent;
	return storageMsg;
}
</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="3.8.0">
        <id>738d81a1-d04c-482e-a011-30c61a09b3d3</id>
        <name>Create Array of DocumentAttachment</name>
        <revision>1</revision>
        <lastModified>
          <time>1563237353749</time>
          <timezone>Canada/Pacific</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>GLOBAL_PREPROCESSOR</contextType>
            <contextType>CHANNEL_DEPLOY</contextType>
            <contextType>GLOBAL_POSTPROCESSOR</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>GLOBAL_DEPLOY</contextType>
            <contextType>CHANNEL_BATCH</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>CHANNEL_ATTACHMENT</contextType>
            <contextType>CHANNEL_PREPROCESSOR</contextType>
            <contextType>CHANNEL_UNDEPLOY</contextType>
            <contextType>CHANNEL_POSTPROCESSOR</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>GLOBAL_UNDEPLOY</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Create an Array of DocumentAttachment objects from a JSON object

	@param {Object[]} jsonAttachments - 
	@return {DocumentAttachment[]} return the Array of DocumentAttachment
*/
function createDocumentAttachmentArray(jsonAttachments) {
	var attachments = [];
	if (jsonAttachments != null) {
		for (var i = 0; i &lt; jsonAttachments.length; i++) {
			var attachment = jsonAttachments[i];
			attachments.push(new Packages.ca.uvic.leadlab.cdxconnector.messages.submit.DocumentAttachment(
				attachment[&apos;mediaType&apos;],
				attachment[&apos;content&apos;],
				attachment[&apos;hash&apos;],
				attachment[&apos;reference&apos;]));
		}
	}
	return attachments;
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="3.8.0">
        <id>bcd2a30d-111f-4fd3-9724-0e9a2e7dfe50</id>
        <name>Create DatabaseConnection</name>
        <revision>1</revision>
        <lastModified>
          <time>1563237353875</time>
          <timezone>Canada/Pacific</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>GLOBAL_PREPROCESSOR</contextType>
            <contextType>CHANNEL_DEPLOY</contextType>
            <contextType>GLOBAL_POSTPROCESSOR</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>GLOBAL_DEPLOY</contextType>
            <contextType>CHANNEL_BATCH</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>CHANNEL_ATTACHMENT</contextType>
            <contextType>CHANNEL_PREPROCESSOR</contextType>
            <contextType>CHANNEL_UNDEPLOY</contextType>
            <contextType>CHANNEL_POSTPROCESSOR</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>GLOBAL_UNDEPLOY</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Get the DatabaseConnection object

	@return {DatabaseConnection} return the DatabaseConnection object
*/
function getDBConnection() {
	var dataSource = globalMap.get(&quot;hikari_OBIB_DB&quot;);
	if (dataSource == null) {
		dataSource = new Packages.com.zaxxer.hikari.HikariDataSource();
		dataSource.setDriverClassName(globalMap.get(&quot;obib.db.driver&quot;));
		dataSource.setJdbcUrl(globalMap.get(&quot;obib.db.url&quot;));
		dataSource.setUsername(globalMap.get(&quot;obib.db.username&quot;));
		dataSource.setPassword(globalMap.get(&quot;obib.db.password&quot;));
		dataSource.setConnectionTimeout(0);
		dataSource.setAutoCommit(false);
		dataSource.setMaximumPoolSize(10);
		dataSource.setMinimumIdle(0);
		//dataSource.setReadOnly(readOnly);
		//dataSource.setConnectionTestQuery(&quot;SELECT 1&quot;);
		globalMap.put(&quot;hikari_OBIB_DB&quot;, dataSource);
	}
	if (dataSource != null) {
		return dataSource.getConnection();
	} else {
		throw &quot;Cannot create a new data source (connection pool).&quot;;
	}
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="3.8.0">
        <id>60bfd3ac-552a-4d59-ac1d-48fbe4f430b2</id>
        <name>Create Error Message</name>
        <revision>1</revision>
        <lastModified>
          <time>1563237354016</time>
          <timezone>Canada/Pacific</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>GLOBAL_PREPROCESSOR</contextType>
            <contextType>CHANNEL_DEPLOY</contextType>
            <contextType>GLOBAL_POSTPROCESSOR</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>GLOBAL_DEPLOY</contextType>
            <contextType>CHANNEL_BATCH</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>CHANNEL_ATTACHMENT</contextType>
            <contextType>CHANNEL_PREPROCESSOR</contextType>
            <contextType>CHANNEL_UNDEPLOY</contextType>
            <contextType>CHANNEL_POSTPROCESSOR</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>GLOBAL_UNDEPLOY</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Create JSON error message

	@param {String} error - Error message
	@param {Object} obibErrors - Associative Array of errors
	@return {String} return the JSON response
*/
function createErrorMessage(error, obibErrors) {
	return JSON.stringify({&apos;status&apos;: &apos;ERROR&apos;, &apos;message&apos;: error, &apos;obibErrors&apos;: obibErrors})
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="3.8.0">
        <id>f1de696c-f547-49ae-8225-f7e40ed2c87c</id>
        <name>Create Segment Before</name>
        <revision>1</revision>
        <lastModified>
          <time>1563237354145</time>
          <timezone>Canada/Pacific</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>GLOBAL_PREPROCESSOR</contextType>
            <contextType>CHANNEL_DEPLOY</contextType>
            <contextType>GLOBAL_POSTPROCESSOR</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>GLOBAL_DEPLOY</contextType>
            <contextType>CHANNEL_BATCH</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>CHANNEL_ATTACHMENT</contextType>
            <contextType>CHANNEL_PREPROCESSOR</contextType>
            <contextType>CHANNEL_UNDEPLOY</contextType>
            <contextType>CHANNEL_POSTPROCESSOR</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>GLOBAL_UNDEPLOY</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Create a new segment and insert it before the target segment.
	
	@param {String} name - The name of the segment to create.
	@param {String} segment - The existing segment that the new segment will be inserted before.
	@return {String} return The existing segment that the new segment will be inserted after.
*/
function createSegmentBefore(name, segment) {
	var msgObj = segment;
   	while (msgObj.parent() != undefined) { 
		msgObj = msgObj.parent(); 
	}
     msgObj.insertChildBefore(segment[0], new XML(&apos;&lt;&apos; + name + &apos;&gt;&lt;/&apos; + name + &apos;&gt;&apos;));
   	return msgObj.child(segment[0].childIndex() - 1);
}
</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="3.8.0">
        <id>df99f17c-1947-469e-be81-78e90d657f4d</id>
        <name>Execute Database Query</name>
        <revision>2</revision>
        <lastModified>
          <time>1563292934616</time>
          <timezone>Canada/Pacific</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>GLOBAL_PREPROCESSOR</contextType>
            <contextType>CHANNEL_DEPLOY</contextType>
            <contextType>GLOBAL_POSTPROCESSOR</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>GLOBAL_DEPLOY</contextType>
            <contextType>CHANNEL_BATCH</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>CHANNEL_ATTACHMENT</contextType>
            <contextType>CHANNEL_PREPROCESSOR</contextType>
            <contextType>CHANNEL_UNDEPLOY</contextType>
            <contextType>CHANNEL_POSTPROCESSOR</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>GLOBAL_UNDEPLOY</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Executes a query on the database and returns a CachedRowSet.

	@param {String} query - The query to be executed.
	@return {String} return The result of the query, as a CachedRowSet.
*/
function executeCachedQuery(query) {
	var connection = getDBConnection();
	if (connection != null) {
		var statement = null;
		try {
			statement = connection.createStatement();
            	var result = statement.executeQuery(query);
            	var crs = new MirthCachedRowSet();
            	crs.populate(result);
            	if (result != null) {
            		Packages.org.apache.commons.dbutils.DbUtils.closeQuietly(result);
            	}
            	return crs;
		} catch(err) {
			throw err;
        	} finally {
        		if (statement != null) {
				Packages.org.apache.commons.dbutils.DbUtils.closeQuietly(statement);
        		}
        		if (connection != null) {
        			Packages.org.apache.commons.dbutils.DbUtils.closeQuietly(connection);
        		}
		}
	} else {
		throw &quot;Error: Cannot connect to the database&quot;;
	}
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="3.8.0">
        <id>8512e74b-a53b-4a15-9718-fed25c0481ef</id>
        <name>Execute Database Update</name>
        <revision>7</revision>
        <lastModified>
          <time>1563295258150</time>
          <timezone>Canada/Pacific</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>GLOBAL_PREPROCESSOR</contextType>
            <contextType>CHANNEL_DEPLOY</contextType>
            <contextType>GLOBAL_POSTPROCESSOR</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>GLOBAL_DEPLOY</contextType>
            <contextType>CHANNEL_BATCH</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>CHANNEL_ATTACHMENT</contextType>
            <contextType>CHANNEL_PREPROCESSOR</contextType>
            <contextType>CHANNEL_UNDEPLOY</contextType>
            <contextType>CHANNEL_POSTPROCESSOR</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>GLOBAL_UNDEPLOY</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Executes an INSERT/UPDATE on the database and returns the row count.

	@param {String} query - The statement to be executed.
	@return {Integer} return A count of the number of updated rows.
*/
function executeUpdate(query) {
	var connection = getDBConnection();
	if (connection != null) {
		var statement = null;
		try {
			connection.setAutoCommit(true);
			statement = connection.createStatement();
			if (statement.execute(query)) {
				return -1;
			} else {
				return statement.getUpdateCount();
			}
		} catch (err) {
			throw err;
		} finally {
			if (statement != null) {
				Packages.org.apache.commons.dbutils.DbUtils.closeQuietly(statement);
        		}
        		if (connection != null) {
        			Packages.org.apache.commons.dbutils.DbUtils.closeQuietly(connection);
        		}
		}
	} else {
		throw &quot;Error: Cannot connect to the database&quot;;
	}
}</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="3.8.0">
        <id>e83b8bbf-433a-4c3d-88a2-16f4132b38af</id>
        <name>Handle Return Message</name>
        <revision>1</revision>
        <lastModified>
          <time>1563237354831</time>
          <timezone>Canada/Pacific</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>GLOBAL_PREPROCESSOR</contextType>
            <contextType>CHANNEL_DEPLOY</contextType>
            <contextType>GLOBAL_POSTPROCESSOR</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>GLOBAL_DEPLOY</contextType>
            <contextType>CHANNEL_BATCH</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>CHANNEL_ATTACHMENT</contextType>
            <contextType>CHANNEL_PREPROCESSOR</contextType>
            <contextType>CHANNEL_UNDEPLOY</contextType>
            <contextType>CHANNEL_POSTPROCESSOR</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>GLOBAL_UNDEPLOY</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Handle the return message creation.

	@param {Object} responseStatus - 
	@param {Object} responseStatusMessage - 
	@param {Object} responseMessage - 
	@param {Function} createMessage - Callback function responsible for creating and return the result message.
	@return {String} return the stringify json message
*/
function handleResponseMessage(responseStatus, responseStatusMessage, responseMessage, createMessage) {
	if (responseStatus === SENT) { // process only SENT messages
		return JSON.stringify(createMessage()); // Convert the json to string and return it
	} else if (responseStatus === ERROR) {
		throw &quot;Error Message: &apos;&quot; + responseStatusMessage.toString() 
			+ &quot;&apos;\n Original Message: &apos;&quot; + msg.toString() + &quot;&apos;&quot;;
	} else {
		throw &quot;Not able to handle the response code: &apos;&quot; + responseStatus 
		+ &quot;&apos; \n Error Message: &apos;&quot; + responseStatusMessage.toString() 
		+ &quot;&apos;\n Original Message: &apos;&quot; + msg.toString() + &quot;&apos;&quot;;
	}
}
</code>
        </properties>
      </codeTemplate>
      <codeTemplate version="3.8.0">
        <id>dfd86988-26e1-4d97-b81d-fee49e303272</id>
        <name>Store OBIB Error</name>
        <revision>1</revision>
        <lastModified>
          <time>1563237355765</time>
          <timezone>Canada/Pacific</timezone>
        </lastModified>
        <contextSet>
          <delegate>
            <contextType>GLOBAL_PREPROCESSOR</contextType>
            <contextType>CHANNEL_DEPLOY</contextType>
            <contextType>GLOBAL_POSTPROCESSOR</contextType>
            <contextType>DESTINATION_DISPATCHER</contextType>
            <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
            <contextType>GLOBAL_DEPLOY</contextType>
            <contextType>CHANNEL_BATCH</contextType>
            <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
            <contextType>CHANNEL_ATTACHMENT</contextType>
            <contextType>CHANNEL_PREPROCESSOR</contextType>
            <contextType>CHANNEL_UNDEPLOY</contextType>
            <contextType>CHANNEL_POSTPROCESSOR</contextType>
            <contextType>SOURCE_RECEIVER</contextType>
            <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
            <contextType>GLOBAL_UNDEPLOY</contextType>
          </delegate>
        </contextSet>
        <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
          <type>FUNCTION</type>
          <code>/**
	Store the error as an &apos;associative array&apos; in the channel map.
	To retrieve the array of errors use &apos;channelMap.get(&apos;obibErrors&apos;)&apos;

	@param {String} errorCode - the key of the associative array
	@param {String} errorMessage - the value of the associative array
*/
function storeOBIBError(errorCode, errorMessage) {
	var obibErrors = channelMap.get(&apos;obibErrors&apos;);
	if (obibErrors == null) {
		obibErrors = new Object();
	}
	obibErrors[errorCode] = errorMessage;
	channelMap.put(&apos;obibErrors&apos;, obibErrors);
}</code>
        </properties>
      </codeTemplate>
    </codeTemplates>
  </codeTemplateLibrary>
</list>