<map>
  <entry>
    <string>Undeploy</string>
    <string>// This script executes once for each deploy, undeploy, or redeploy task
// if at least one channel was undeployed
// You only have access to the globalMap here to persist data
return;</string>
  </entry>
  <entry>
    <string>Postprocessor</string>
    <string>// This script executes once after a message has been processed
// This script applies across all channels
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
// You have access to &quot;response&quot;, if returned from the channel postprocessor
return;</string>
  </entry>
  <entry>
    <string>Deploy</string>
    <string>// This script executes once for each deploy or redeploy task
// You only have access to the globalMap here to persist data
logger.debug(&quot;Global Scripts: Deploy&quot;);

/*********** Verify global variables ***********/
if (!new Packages.java.io.File($(&apos;custom-lib&apos;)).exists()) {
	logger.error(&apos;Global Scripts: &quot;custom-lib&quot; is not properly configurated on &quot;Configuration Map&quot;.&apos;);
}

globalMap.put(&apos;CDASchema&apos;, &apos;CDA.xsd&apos;);
if (!new Packages.java.io.File($(&apos;custom-lib&apos;) + &apos;CDA_with_BcCdaExtensions/&apos; + globalMap.get(&apos;CDASchema&apos;)).exists()) {
	logger.error(&apos;Global Scripts: &quot;CDA.xsd&quot; schema cannot be found, channels will not work correctly.&apos;);
}

globalMap.put(&apos;OBIBProperties&apos;, &apos;obib.properties&apos;);
if (!new Packages.java.io.File($(&apos;custom-lib&apos;) + globalMap.get(&apos;OBIBProperties&apos;)).exists()) {
	logger.error(&apos;Global Scripts: &quot;obib.properties&quot; cannot be found, channels will not work correctly.&apos;);
}


/*********** Load OBIB properties ***********/
var properties = new Packages.java.util.Properties();
var fileProp = new Packages.java.io.FileInputStream(new Packages.java.io.File($(&apos;custom-lib&apos;) + globalMap.get(&apos;OBIBProperties&apos;)));

properties.load(fileProp);
globalMap.putAll(properties);
fileProp.close();
logger.debug(&quot;Global Scripts: Loaded &apos;&quot; + properties.size() + &quot;&apos; OBIB properties.&quot;);


/*********** Load CDX IDs from database ***********/
try {
	var count = 0;
	var result = executeCachedQuery(&apos;SELECT * FROM cdx_id;&apos;);
	while (result &amp;&amp; result.next()) {
		globalMap.put(result.getString(&apos;code&apos;), result.getString(&apos;name&apos;));
		count++;
	}
	if (result != null) {
		Packages.org.apache.commons.dbutils.DbUtils.closeQuietly(result);
	}
	logger.debug(&quot;Global Scripts: Loaded &apos;&quot; + count + &quot;&apos; CDX Ids.&quot;);
} catch(err) {
	logger.error(&apos;Global Scripts: Erro loading CDX Ids from database. &apos; + err);
}

/*********** Load CDX LOINC codes from database ***********/
try {
	var count = 0;
	var result = executeCachedQuery(&apos;SELECT * FROM cdx_loinc_code;&apos;);
	while (result &amp;&amp; result.next()) {
		var loinc_code = {
			&apos;loinc_code&apos;: result.getString(&apos;loinc_code&apos;),
			&apos;loinc_name&apos;: result.getString(&apos;loinc_name&apos;),
			&apos;template_id&apos;: result.getString(&apos;template_id&apos;),
			&apos;template_name&apos;: result.getString(&apos;template_name&apos;),
		}
		globalMap.put(result.getString(&apos;loinc_code&apos;), loinc_code);
		count++;
	}
	if (result != null) {
		Packages.org.apache.commons.dbutils.DbUtils.closeQuietly(result);
	}
	logger.debug(&quot;Global Scripts: Loaded &apos;&quot; + count + &quot;&apos; CDX LOINC Codes.&quot;);
} catch(err) {
	logger.error(&apos;Global Scripts: Erro loading CDX LOINC Codes from database. &apos; + err);
}

return;</string>
  </entry>
  <entry>
    <string>Preprocessor</string>
    <string>// Modify the message variable below to pre process data
// This script applies across all channels
return message;</string>
  </entry>
</map>