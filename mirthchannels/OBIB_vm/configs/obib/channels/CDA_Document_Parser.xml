<channel version="3.7.1">
  <id>2375f320-7fd5-48cd-b3bb-53c22dab182b</id>
  <nextMetaDataId>2</nextMetaDataId>
  <name>CDA Document Parser</name>
  <description></description>
  <revision>1</revision>
  <sourceConnector version="3.7.1">
    <metaDataId>0</metaDataId>
    <name>sourceConnector</name>
    <properties class="com.mirth.connect.connectors.vm.VmReceiverProperties" version="3.7.1">
      <pluginProperties/>
      <sourceConnectorProperties version="3.7.1">
        <responseVariable>responseMessage</responseVariable>
        <respondAfterProcessing>true</respondAfterProcessing>
        <processBatch>false</processBatch>
        <firstResponse>false</firstResponse>
        <processingThreads>1</processingThreads>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
        <queueBufferSize>1000</queueBufferSize>
      </sourceConnectorProperties>
    </properties>
    <transformer version="3.7.1">
      <elements/>
      <inboundTemplate encoding="base64"></inboundTemplate>
      <outboundTemplate encoding="base64"></outboundTemplate>
      <inboundDataType>HL7V3</inboundDataType>
      <outboundDataType>HL7V3</outboundDataType>
      <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.7.1">
        <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.7.1">
          <stripNamespaces>false</stripNamespaces>
        </serializationProperties>
        <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.7.1">
          <splitType>JavaScript</splitType>
          <batchScript></batchScript>
        </batchProperties>
      </inboundProperties>
      <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.7.1">
        <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.7.1">
          <stripNamespaces>false</stripNamespaces>
        </serializationProperties>
        <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.7.1">
          <splitType>JavaScript</splitType>
          <batchScript></batchScript>
        </batchProperties>
      </outboundProperties>
    </transformer>
    <filter version="3.7.1">
      <elements/>
    </filter>
    <transportName>Channel Reader</transportName>
    <mode>SOURCE</mode>
    <enabled>true</enabled>
    <waitForPrevious>true</waitForPrevious>
  </sourceConnector>
  <destinationConnectors>
    <connector version="3.7.1">
      <metaDataId>1</metaDataId>
      <name>Parse CDA Document</name>
      <properties class="com.mirth.connect.connectors.js.JavaScriptDispatcherProperties" version="3.7.1">
        <pluginProperties/>
        <destinationConnectorProperties version="3.7.1">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
          <reattachAttachments>true</reattachAttachments>
        </destinationConnectorProperties>
        <script>logger.debug(&quot;Parse CDA Document&quot;);

//logger.debug(&quot;CDA DOC: &quot; + XmlUtil.prettyPrint(connectorMessage.getRawData()));

responseMap.put(&apos;responseMessage&apos;, connectorMessage.getTransformedData());	</script>
      </properties>
      <transformer version="3.7.1">
        <elements>
          <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.7.1">
            <name>Parse Header Attributes</name>
            <sequenceNumber>0</sequenceNumber>
            <enabled>true</enabled>
            <script>try {
	// Document Header
	tmp[&apos;documentId&apos;] = msg[&apos;id&apos;][&apos;@extension&apos;].toString();
	
	tmp[&apos;template&apos;] = {};
	tmp[&apos;template&apos;][&apos;templateId&apos;] = msg[&apos;templateId&apos;][&apos;@root&apos;].toString();
	tmp[&apos;template&apos;][&apos;templateName&apos;] = msg[&apos;templateId&apos;][&apos;@assigningAuthorityName&apos;].toString();

	tmp[&apos;loinc&apos;] = {};
	tmp[&apos;loinc&apos;][&apos;loincCode&apos;] = msg[&apos;code&apos;][&apos;@code&apos;].toString();
	tmp[&apos;loinc&apos;][&apos;displayName&apos;] = msg[&apos;code&apos;][&apos;@displayName&apos;].toString();
	
	tmp[&apos;effectiveTime&apos;] = parseCDADateTime(msg[&apos;effectiveTime&apos;][&apos;@value&apos;].toString());
	
	tmp[&apos;title&apos;] = msg[&apos;title&apos;].toString();
	
	if (getArrayOrXmlLength(msg[&apos;versionNumber&apos;]) &gt; 0) {
		tmp[&apos;versionNumber&apos;] = msg[&apos;versionNumber&apos;].toString();
	}
	
	if (getArrayOrXmlLength(msg[&apos;setId&apos;]) &gt; 0) {
		tmp[&apos;setId&apos;] = parseCDAId(msg[&apos;setId&apos;]);
	}
} catch(e) {
	logger.error(&quot;Error on &apos;Parse Header Attributes&apos;: &quot; + e);
}</script>
          </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.7.1">
            <name>Parse RecordTarget (Patient)</name>
            <sequenceNumber>1</sequenceNumber>
            <enabled>true</enabled>
            <script>try {
	// RecordTarget (Patient)
	var patientRole = msg[&apos;recordTarget&apos;][&apos;patientRole&apos;];
	
	var patient = {};
	
	patient[&apos;ids&apos;] = [];
	for (var i = 0; i &lt; getArrayOrXmlLength(patientRole[&apos;id&apos;]); i++) {
		patient[&apos;ids&apos;][i] = parseCDAId(patientRole[&apos;id&apos;][i]);
	}

	if (getArrayOrXmlLength(patientRole[&apos;addr&apos;]) &gt; 0) {
		patient[&apos;addresses&apos;] = [];
		for (var i = 0; i &lt; getArrayOrXmlLength(patientRole[&apos;addr&apos;]); i++) {
			patient[&apos;addresses&apos;][i] = parseCDAAddress(patientRole[&apos;addr&apos;][i]);
		}
	}

	if (getArrayOrXmlLength(patientRole[&apos;telecom&apos;]) &gt; 0) {
		patient[&apos;telecoms&apos;] = [];
		for (var i = 0; i &lt; getArrayOrXmlLength(patientRole[&apos;telecom&apos;]); i++) {
			patient[&apos;telecoms&apos;][i] = parseCDATelecom(patientRole[&apos;telecom&apos;][i]);
		}
	}
	
	patient[&apos;names&apos;] = [];
	for (var i = 0; i &lt; getArrayOrXmlLength(patientRole[&apos;patient&apos;][&apos;name&apos;]); i++) {
		patient[&apos;names&apos;][i] = parseCDAName(patientRole[&apos;patient&apos;][&apos;name&apos;][i]);
	}
	
	patient[&apos;genderCode&apos;] = patientRole[&apos;patient&apos;][&apos;administrativeGenderCode&apos;][&apos;@code&apos;].toString();
	
	patient[&apos;birthday&apos;] = parseCDADateTime(patientRole[&apos;patient&apos;][&apos;birthTime&apos;][&apos;@value&apos;].toString());
	
	tmp[&apos;patient&apos;] = patient;
} catch(e) {
	logger.error(&quot;Error on &apos;Parse RecordTarget (Patient)&apos;: &quot; + e);
}</script>
          </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.7.1">
            <name>Parse Authors</name>
            <sequenceNumber>2</sequenceNumber>
            <enabled>true</enabled>
            <script>try {
	// Authors
	tmp[&apos;authors&apos;] = [];
	for (var i = 0; i &lt; getArrayOrXmlLength(msg[&apos;author&apos;]); i++) {
		var author = {};
		
		author[&apos;time&apos;] = parseCDADateTime(msg[&apos;author&apos;][i][&apos;time&apos;][&apos;@value&apos;].toString());

		var assignedAuthor = msg[&apos;author&apos;][i][&apos;assignedAuthor&apos;];

		author[&apos;ids&apos;] = [];
		for (var j = 0; j &lt; getArrayOrXmlLength(assignedAuthor[&apos;id&apos;]); j++) {
			author[&apos;ids&apos;][j] = parseCDAId(assignedAuthor[&apos;id&apos;][j]);
		}

		if (getArrayOrXmlLength(assignedAuthor[&apos;addr&apos;]) &gt; 0) {
			author[&apos;addresses&apos;] = [];
			for (var j = 0; j &lt; getArrayOrXmlLength(assignedAuthor[&apos;addr&apos;]); j++) {
				author[&apos;addresses&apos;][j] = parseCDAAddress(assignedAuthor[&apos;addr&apos;][j]);
			}
		}
		
		if (getArrayOrXmlLength(assignedAuthor[&apos;telecom&apos;]) &gt; 0) {
			author[&apos;telecoms&apos;] = [];
			for (var j = 0; j &lt; getArrayOrXmlLength(assignedAuthor[&apos;telecom&apos;]); j++) {
				author[&apos;telecoms&apos;][j] = parseCDATelecom(assignedAuthor[&apos;telecom&apos;][j]);
			}
		}

		if (getArrayOrXmlLength(assignedAuthor[&apos;assignedAuthoringDevice&apos;]) &gt; 0) {
			var softwareName = assignedAuthor[&apos;assignedAuthoringDevice&apos;][&apos;softwareName&apos;];
			author[&apos;software&apos;] = {}
			author[&apos;software&apos;][&apos;name&apos;] = softwareName[&apos;@displayName&apos;].toString();
			author[&apos;software&apos;][&apos;code&apos;] = softwareName[&apos;@code&apos;].toString();
		} else {
			author[&apos;name&apos;] = parseCDAName(assignedAuthor[&apos;assignedPerson&apos;][&apos;name&apos;]);
		}
		
		tmp[&apos;authors&apos;][i] = author;
	}
} catch(e) {
	logger.error(&quot;Error on &apos;Parse Authors&apos;: &quot; + e);
}</script>
          </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.7.1">
            <name>Parse Information Recipients</name>
            <sequenceNumber>3</sequenceNumber>
            <enabled>true</enabled>
            <script>try {
	// Information Recipients
	tmp[&apos;recipients&apos;] = [];
	for (var i = 0; i &lt; getArrayOrXmlLength(msg[&apos;informationRecipient&apos;]); i++) {
		var recipient = {};
		
		recipient[&apos;typeCode&apos;] = msg[&apos;informationRecipient&apos;][i][&apos;@typeCode&apos;].toString()
		
		var intendedRecipient = msg[&apos;informationRecipient&apos;][i][&apos;intendedRecipient&apos;];

		recipient[&apos;ids&apos;] = [];
		for (var j = 0; j &lt; getArrayOrXmlLength(intendedRecipient[&apos;id&apos;]); j++) {
			recipient[&apos;ids&apos;][j] = parseCDAId(intendedRecipient[&apos;id&apos;][j]);
		}

		if (getArrayOrXmlLength(intendedRecipient[&apos;addr&apos;]) &gt; 0) {
			recipient[&apos;addresses&apos;] = [];
			for (var j = 0; j &lt; getArrayOrXmlLength(intendedRecipient[&apos;addr&apos;]); j++) {
				recipient[&apos;addresses&apos;][j] = parseCDAAddress(intendedRecipient[&apos;addr&apos;][j]);
			}
		}

		if (getArrayOrXmlLength(intendedRecipient[&apos;telecom&apos;]) &gt; 0) {
			recipient[&apos;telecoms&apos;] = [];
			for (var j = 0; j &lt; getArrayOrXmlLength(intendedRecipient[&apos;telecom&apos;]); j++) {
				recipient[&apos;telecoms&apos;][j] = parseCDATelecom(intendedRecipient[&apos;telecom&apos;][j]);
			}
		}

		recipient[&apos;name&apos;] = parseCDAName(intendedRecipient[&apos;informationRecipient&apos;][&apos;name&apos;]);
		
		// Received Organization
		if (getArrayOrXmlLength(intendedRecipient[&apos;receivedOrganization&apos;]) &gt; 0) {
			var organization = {};

			var receivedOrganization = intendedRecipient[&apos;receivedOrganization&apos;];
			
			organization[&apos;ids&apos;] = [];
			for (var j = 0; j &lt; getArrayOrXmlLength(receivedOrganization[&apos;id&apos;]); j++) {
				organization[&apos;ids&apos;][j] = parseCDAId(receivedOrganization[&apos;id&apos;][j]);
			}
			
			organization[&apos;name&apos;] = receivedOrganization[&apos;name&apos;].toString();
			
			recipient[&apos;receivedOrganization&apos;] = organization;
		}
		
		tmp[&apos;recipients&apos;][i] = recipient;
	}
} catch(e) {
	logger.error(&quot;Error on &apos;Parse Information Recipients&apos;: &quot; + e);
}</script>
          </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.7.1">
            <name>Parse Custodian</name>
            <sequenceNumber>4</sequenceNumber>
            <enabled>true</enabled>
            <script>try {
	// Custodian
	var custodian = {};

	var representedCustodian = msg[&apos;custodian&apos;][&apos;assignedCustodian&apos;][&apos;representedCustodianOrganization&apos;];

	custodian[&apos;id&apos;] = parseCDAId(representedCustodian[&apos;id&apos;]);

	custodian[&apos;name&apos;] = representedCustodian[&apos;name&apos;].toString();
	
	tmp[&apos;custodian&apos;] = custodian;
} catch(e) {
	logger.error(&quot;Error on &apos;Parse Custodian&apos;: &quot; + e);
}</script>
          </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.7.1">
            <name>Parse Data Enterer</name>
            <sequenceNumber>5</sequenceNumber>
            <enabled>true</enabled>
            <script>try {
	// Data Enterer
	if (getArrayOrXmlLength(msg[&apos;dataEnterer&apos;]) &gt; 0) {
		var dataEnterer = {};
		
		dataEnterer[&apos;time&apos;] = parseCDADateTime(msg[&apos;dataEnterer&apos;][&apos;time&apos;][&apos;@value&apos;].toString());

		var assignedEntity = msg[&apos;dataEnterer&apos;][&apos;assignedEntity&apos;];

		if (getArrayOrXmlLength(assignedEntity[&apos;id&apos;]) &gt; 0) {
			dataEnterer[&apos;id&apos;] = parseCDAId(assignedEntity[&apos;id&apos;]);
		}

		if (getArrayOrXmlLength(assignedEntity[&apos;addr&apos;]) &gt; 0) {
			dataEnterer[&apos;addresses&apos;] = [];
			for (var j = 0; j &lt; getArrayOrXmlLength(assignedEntity[&apos;addr&apos;]); j++) {
				dataEnterer[&apos;addresses&apos;][j] = parseCDAAddress(assignedEntity[&apos;addr&apos;][j]);
			}
		}
		
		if (getArrayOrXmlLength(assignedEntity[&apos;telecom&apos;]) &gt; 0) {
			dataEnterer[&apos;telecoms&apos;] = [];
			for (var j = 0; j &lt; getArrayOrXmlLength(assignedEntity[&apos;telecom&apos;]); j++) {
				dataEnterer[&apos;telecoms&apos;][j] = parseCDATelecom(assignedEntity[&apos;telecom&apos;][j]);
			}
		}

		if (getArrayOrXmlLength(assignedEntity[&apos;assignedPerson&apos;]) &gt; 0) {
			dataEnterer[&apos;name&apos;] = parseCDAName(assignedEntity[&apos;assignedPerson&apos;][&apos;name&apos;]);
		}
		
		tmp[&apos;dataEnterer&apos;] = dataEnterer;
	}
} catch(e) {
	logger.error(&quot;Error on &apos;Parse Data Enterer&apos;: &quot; + e);
}</script>
          </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.7.1">
            <name>Parse Authenticators</name>
            <sequenceNumber>6</sequenceNumber>
            <enabled>true</enabled>
            <script>// TODO Authenticators</script>
          </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.7.1">
            <name>Parse Participants</name>
            <sequenceNumber>7</sequenceNumber>
            <enabled>true</enabled>
            <script>try {
	// Participants
	tmp[&apos;participants&apos;] = [];
	for (var i = 0; i &lt; getArrayOrXmlLength(msg[&apos;participant&apos;]); i++) {
		var participant = {};

		participant[&apos;typeCode&apos;] = msg[&apos;participant&apos;][i][&apos;@typeCode&apos;].toString();
		participant[&apos;functionCode&apos;] = msg[&apos;participant&apos;][i][&apos;functionCode&apos;][&apos;@code&apos;].toString();
		
		var associatedEntity = msg[&apos;participant&apos;][i][&apos;associatedEntity&apos;];

		participant[&apos;ids&apos;] = [];
		for (var j = 0; j &lt; getArrayOrXmlLength(associatedEntity[&apos;id&apos;]); j++) {
			participant[&apos;ids&apos;][j] = parseCDAId(associatedEntity[&apos;id&apos;][j]);
		}

		if (getArrayOrXmlLength(associatedEntity[&apos;addr&apos;]) &gt; 0) {
			participant[&apos;addresses&apos;] = [];
			for (var j = 0; j &lt; getArrayOrXmlLength(associatedEntity[&apos;addr&apos;]); j++) {
				participant[&apos;addresses&apos;][j] = parseCDAAddress(associatedEntity[&apos;addr&apos;][j]);
			}
		}

		if (getArrayOrXmlLength(associatedEntity[&apos;telecom&apos;]) &gt; 0) {
			participant[&apos;telecoms&apos;] = [];
			for (var j = 0; j &lt; getArrayOrXmlLength(associatedEntity[&apos;telecom&apos;]); j++) {
				participant[&apos;telecoms&apos;][j] = parseCDATelecom(associatedEntity[&apos;telecom&apos;][j]);
			}
		}
		
		participant[&apos;name&apos;] = parseCDAName(associatedEntity[&apos;associatedPerson&apos;][&apos;name&apos;]);

		tmp[&apos;participants&apos;][i] = participant;
	}
} catch(e) {
	logger.error(&quot;Error on &apos;Parse Participants&apos;: &quot; + e);
}</script>
          </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.7.1">
            <name>Parse Orders (inFulfillmentOf)</name>
            <sequenceNumber>8</sequenceNumber>
            <enabled>true</enabled>
            <script>try {
	// Orders
	tmp[&apos;orders&apos;] = [];
	for (var i = 0; i &lt; getArrayOrXmlLength(msg[&apos;inFulfillmentOf&apos;]); i++) {
		var order = {};

		var inFulfillmentOfOrder = msg[&apos;inFulfillmentOf&apos;][i][&apos;order&apos;];

		order[&apos;ids&apos;] = [];
		for (var j = 0; j &lt; getArrayOrXmlLength(inFulfillmentOfOrder[&apos;id&apos;]); j++) {
			order[&apos;ids&apos;][j] = parseCDAId(inFulfillmentOfOrder[&apos;id&apos;][j]);
		}

		if (getArrayOrXmlLength(inFulfillmentOfOrder[&apos;code&apos;]) &gt; 0) {
			order[&apos;statusCode&apos;] = inFulfillmentOfOrder[&apos;code&apos;][&apos;@code&apos;].toString();
		}

		tmp[&apos;orders&apos;][i] = order;
	}
} catch(e) {
	logger.error(&quot;Error on &apos;Parse Orders&apos;: &quot; + e);
}</script>
          </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.7.1">
            <name>Parse ServiceEvents (documentationOf)</name>
            <sequenceNumber>9</sequenceNumber>
            <enabled>true</enabled>
            <script>try {
	// ServiceEvents
	tmp[&apos;serviceEvents&apos;] = [];
	for (var i = 0; i &lt; getArrayOrXmlLength(msg[&apos;documentationOf&apos;]); i++) {
		var serviceEvent = {};

		var documentationOfServiceEvent = msg[&apos;documentationOf&apos;][i][&apos;serviceEvent&apos;];

		if (getArrayOrXmlLength(documentationOfServiceEvent.*::[&apos;statusCode&apos;]) &gt; 0) {
			serviceEvent[&apos;statusCode&apos;] = documentationOfServiceEvent.*::[&apos;statusCode&apos;][&apos;@code&apos;].toString();
		}

		if (getArrayOrXmlLength(documentationOfServiceEvent[&apos;effectiveTime&apos;]) &gt; 0) {
			serviceEvent[&apos;effectiveTime&apos;] = parseCDADateTime(documentationOfServiceEvent[&apos;effectiveTime&apos;][&apos;@value&apos;].toString());
		}

		// Performers
		serviceEvent[&apos;performers&apos;] = [];
		for (var j = 0; j &lt; getArrayOrXmlLength(documentationOfServiceEvent[&apos;performer&apos;]); j++) {
			var performer = {};

			performer[&apos;typeCode&apos;] = documentationOfServiceEvent[&apos;performer&apos;][j][&apos;@typeCode&apos;].toString()

			var assignedEntity = documentationOfServiceEvent[&apos;performer&apos;][j][&apos;assignedEntity&apos;];

			performer[&apos;code&apos;] = assignedEntity[&apos;code&apos;].toString();

			performer[&apos;ids&apos;] = [];
			for (var k = 0; k &lt; getArrayOrXmlLength(assignedEntity[&apos;id&apos;]); k++) {
				performer[&apos;ids&apos;][k] = parseCDAId(assignedEntity[&apos;id&apos;][k]);
			}

			if (getArrayOrXmlLength(assignedEntity[&apos;assignedPerson&apos;]) &gt; 0) {
				performer[&apos;name&apos;] = parseCDAName(assignedEntity[&apos;assignedPerson&apos;][&apos;name&apos;]);
			}

			if (getArrayOrXmlLength(assignedEntity[&apos;addr&apos;]) &gt; 0) {
				performer[&apos;addresses&apos;] = [];
				for (var k = 0; k &lt; getArrayOrXmlLength(assignedEntity[&apos;addr&apos;]); k++) {
					performer[&apos;addresses&apos;][k] = parseCDAAddress(assignedEntity[&apos;addr&apos;][k]);
				}
			}
			
			if (getArrayOrXmlLength(assignedEntity[&apos;telecom&apos;]) &gt; 0) {
				performer[&apos;telecoms&apos;] = [];
				for (var k = 0; k &lt; getArrayOrXmlLength(assignedEntity[&apos;telecom&apos;]); k++) {
					performer[&apos;telecoms&apos;][k] = parseCDATelecom(assignedEntity[&apos;telecom&apos;][k]);
				}
			}
			
			serviceEvent[&apos;performers&apos;][j] = performer;
		}
		
		tmp[&apos;serviceEvents&apos;][i] = serviceEvent;
	}
} catch(e) {
	logger.error(&quot;Error on &apos;Parse ServiceEvents&apos;: &quot; + e);
}</script>
          </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.7.1">
            <name>Parse ParentDocuments (relatedDocument)</name>
            <sequenceNumber>10</sequenceNumber>
            <enabled>true</enabled>
            <script>try {
	// ParentDocument
	tmp[&apos;parentDocuments&apos;] = [];
	for (var i = 0; i &lt; getArrayOrXmlLength(msg[&apos;relatedDocument&apos;]); i++) {
		var parentDocument = {};

		parentDocument[&apos;typeCode&apos;] = msg[&apos;relatedDocument&apos;][i][&apos;@typeCode&apos;].toString();
		
		var relatedParendDocument = msg[&apos;relatedDocument&apos;][i][&apos;parentDocument&apos;];

		parentDocument[&apos;id&apos;] = parseCDAId(relatedParendDocument[&apos;id&apos;]);

		if (getArrayOrXmlLength(relatedParendDocument[&apos;setId&apos;]) &gt; 0) {
			parentDocument[&apos;setId&apos;] = parseCDAId(relatedParendDocument[&apos;setId&apos;]);
		}

		if (getArrayOrXmlLength(relatedParendDocument[&apos;versionNumber&apos;]) &gt; 0) {
			parentDocument[&apos;versionNumber&apos;] = relatedParendDocument[&apos;versionNumber&apos;].toString();
		}

		if (getArrayOrXmlLength(relatedParendDocument[&apos;text&apos;]) &gt; 0) {
			parentDocument[&apos;mediaType&apos;] = relatedParendDocument[&apos;text&apos;][&apos;@mediaType&apos;].toString();
		}
				
		tmp[&apos;parentDocuments&apos;][i] = parentDocument;
	}
} catch(e) {
	logger.error(&quot;Error on &apos;Parse ParentDocuments&apos;: &quot; + e);
}</script>
          </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
          <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.7.1">
            <name>Parse Text</name>
            <sequenceNumber>11</sequenceNumber>
            <enabled>true</enabled>
            <script>try {
	// Text
	var text = msg[&apos;component&apos;][&apos;nonXMLBody&apos;][&apos;text&apos;];

	tmp[&apos;nonXMLBody&apos;] = {};
	tmp[&apos;nonXMLBody&apos;][&apos;mediaType&apos;] = text[&apos;@mediaType&apos;].toString();
	
	if (text[&apos;@representation&apos;] &amp;&amp; text[&apos;@representation&apos;].toString() === &apos;TXT&apos;) { 
		// Plain Text
		tmp[&apos;nonXMLBody&apos;][&apos;content&apos;] = text.toString();
	} else { 
		// Attachment reference
		tmp[&apos;nonXMLBody&apos;][&apos;content&apos;] = text[&apos;reference&apos;][&apos;@value&apos;].toString();
	}
} catch(e) {
	logger.error(&quot;Error on &apos;Parse Text&apos;: &quot; + e);
}</script>
          </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
        </elements>
        <inboundTemplate encoding="base64">PD94bWwtc3R5bGVzaGVldCB0eXBlPSJ0ZXh0L3hzbCIgaHJlZj0iQ0RBLnhzbCI/PjxDbGluaWNh
bERvY3VtZW50IHhtbG5zPSJ1cm46aGw3LW9yZzp2MyIgeG1sbnM6eHNpPSJodHRwOi8vd3d3Lncz
Lm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSIgeG1sbnM6bnMwPSJodHRwOi8vbWljcm9zb2Z0
LmNvbS9IZWFsdGhDYXJlL0hMNy8yWCIgeG1sbnM6YmNjZGE9InVybjpiY2NkYSIgeG1sbnM6eGFs
YW49Imh0dHA6Ly94bWwuYXBhY2hlLm9yZy94c2x0IiBjbGFzc0NvZGU9IkRPQ0NMSU4iIG1vb2RD
b2RlPSJFVk4iPjwhLS0mIzEzOwoJCQkJKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKiomIzEzOwoJCQkJQ0RBIEhlYWRlciAtIElIQSBMYWIvTWlj
cm8gVHJhbnNmb3JtJiMxMzsKCQkJCSoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqJiMxMzsKCQkJCS0tPjxyZWFsbUNvZGUgY29kZT0iQ0EtQkMi
IC8+PHR5cGVJZCByb290PSIyLjE2Ljg0MC4xLjExMzg4My4xLjMiIGV4dGVuc2lvbj0iUE9DRF9I
RDAwMDA0MCIgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iSEw3IENEQSBSMiIgLz48dGVtcGxhdGVJ
ZCByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjUxLjYwLjIuMSIgYXNzaWduaW5nQXV0aG9yaXR5
TmFtZT0iR2VuZXJhbCBMYWIgUmVwb3J0IHRlbXBsYXRlIiAvPjxpZCByb290PSIyLjE2Ljg0MC4x
LjExMzg4My4zLjI3Ny4xMDAuMyIgZXh0ZW5zaW9uPSI0NGVjN2VjNC03NDc1LTRkMGMtODJkNC03
ZjJiYWQwZTJjZTkiIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkNEWCBDbGluaWNhbCBEb2N1bWVu
dCBJRCIgLz48Y29kZSBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My42LjEiIGNvZGU9IjEx
NTAyLTIiIGNvZGVTeXN0ZW1OYW1lPSJMT0lOQyBDb2RlIiBkaXNwbGF5TmFtZT0iR2VuZXJhbCBM
YWIgUmVwb3J0IiAvPjx0aXRsZT5HZW5lcmFsIExhYiBSZXBvcnQ8L3RpdGxlPjwhLS1NZXNzYWdl
IERhdGVUaW1lIChNU0guNyktLT48ZWZmZWN0aXZlVGltZSB2YWx1ZT0iMjAxOTAxMjQxMTE0LTA4
MDAiIC8+PGNvbmZpZGVudGlhbGl0eUNvZGUgY29kZT0iTiIgY29kZVN5c3RlbT0iMi4xNi44NDAu
MS4xMTM4ODMuNS4yNSIgY29kZVN5c3RlbU5hbWU9IkNvbmZpZGVudGlhbGl0eSIgLz48bGFuZ3Vh
Z2VDb2RlIGNvZGU9ImVuLUNBIiAvPjwhLS0gPT09PSBQYXRpZW50IEluZm9ybWF0aW9uID09PT0g
LS0+PHJlY29yZFRhcmdldCB0eXBlQ29kZT0iUkNUIiBjb250ZXh0Q29udHJvbENvZGU9Ik9QIj48
cGF0aWVudFJvbGUgY2xhc3NDb2RlPSJQQVQiPjxpZCByb290PSIyLjE2Ljg0MC4xLjExMzg4My40
LjUwIiBleHRlbnNpb249Ijk2OTg2NDk3MjEiIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkJDIFBh
dGllbnQgSGVhbHRoIE51bWJlciIgLz48aWQgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcu
MS43MyIgZXh0ZW5zaW9uPSJBMDIxNzA3NjEiIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IklIQSBQ
YXRpZW50IEVNUiBOdW1iZXIiIC8+PGlkIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEu
NzEiIGV4dGVuc2lvbj0iVkowMDM2NTkzMyIgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iSUhBIFBh
dGllbnQgVW5pdCBOdW1iZXIiIC8+PGFkZHIgdXNlPSJIIj4mIzEzOwoxMjA4IEdvcm1seSBGcm9u
dCBTdDxkZWxpbWl0ZXIgLz48Y2l0eT5EdW5jYW48L2NpdHk+PHN0YXRlPkNBLUJDPC9zdGF0ZT48
cG9zdGFsQ29kZT5WOUwgMUw2PC9wb3N0YWxDb2RlPjwvYWRkcj48dGVsZWNvbSB1c2U9IkgiIHZh
bHVlPSJ0ZWw6MjUwLTgzMi01ODIwIiAvPjxwYXRpZW50IGNsYXNzQ29kZT0iUFNOIiBkZXRlcm1p
bmVyQ29kZT0iSU5TVEFOQ0UiPjxuYW1lIHVzZT0iTCI+PGZhbWlseT5JaGFzaGJhY2hlcjwvZmFt
aWx5PjxnaXZlbj5QbGlzPC9naXZlbj48L25hbWU+PGFkbWluaXN0cmF0aXZlR2VuZGVyQ29kZSBj
b2RlPSJGIiAvPjxiaXJ0aFRpbWUgdmFsdWU9IjE5MTgwNDE3IiAvPjwvcGF0aWVudD48L3BhdGll
bnRSb2xlPjwvcmVjb3JkVGFyZ2V0PjwhLS0gPT09PSBBdXRob3I6IFBlcnNvbiBhbmQvb3Igc29m
dHdhcmUgdGhhdCBjcmVhdGVkIHRoaXMgZG9jdW1lbnQgPT09PSAtLT48YXV0aG9yIHR5cGVDb2Rl
PSJBVVQiIGNvbnRleHRDb250cm9sQ29kZT0iT1AiPjx0aW1lIHZhbHVlPSIyMDE5MDEyNDAyMDAt
MDgwMCIgLz48YXNzaWduZWRBdXRob3IgY2xhc3NDb2RlPSJBU1NJR05FRCI+PGlkIHJvb3Q9IjIu
MTYuODQwLjEuMTEzODgzLjMuMjc3LjEuODEiIGV4dGVuc2lvbj0iODA1NTY2IiBhc3NpZ25pbmdB
dXRob3JpdHlOYW1lPSJJSEEgTWVzc2FnZSBOdW1iZXIiIC8+PGFzc2lnbmVkQXV0aG9yaW5nRGV2
aWNlIGNsYXNzQ29kZT0iREVWIiBkZXRlcm1pbmVyQ29kZT0iSU5TVEFOQ0UiPjxzb2Z0d2FyZU5h
bWUgY29kZT0iTEFCX0lIVkpIIiBjb2RlU3lzdGVtPSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4x
LjEyIiBjb2RlU3lzdGVtTmFtZT0iSUhBIFNvZnR3YXJlIENvZGUiIGRpc3BsYXlOYW1lPSJJbnRl
cmlvciBIZWFsdGggTWVkaXRlY2giIC8+PC9hc3NpZ25lZEF1dGhvcmluZ0RldmljZT48L2Fzc2ln
bmVkQXV0aG9yPjwvYXV0aG9yPjwhLS0gID09PT0gQ3VzdG9kaWFuOiBvcmdhbml6YXRpb24gcmVz
cG9uc2libGUgZm9yIHRoaXMgZG9jdW1lbnQgPT09PSAtLT48Y3VzdG9kaWFuIHR5cGVDb2RlPSJD
U1QiPjxhc3NpZ25lZEN1c3RvZGlhbiBjbGFzc0NvZGU9IkFTU0lHTkVEIj48cmVwcmVzZW50ZWRD
dXN0b2RpYW5Pcmdhbml6YXRpb24gY2xhc3NDb2RlPSJPUkciIGRldGVybWluZXJDb2RlPSJJTlNU
QU5DRSI+PGlkIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEuNjIiIGV4dGVuc2lvbj0i
SUhWSkgiIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IklIQSBNZWRpdGVjaCBMb2NhdGlvbiBJZGVu
dGlmaWVyIiAvPjxuYW1lPkludGVyaW9yIEhlYWx0aCBBdXRob3JpdHk8L25hbWU+PC9yZXByZXNl
bnRlZEN1c3RvZGlhbk9yZ2FuaXphdGlvbj48L2Fzc2lnbmVkQ3VzdG9kaWFuPjwvY3VzdG9kaWFu
PjwhLS0gPT09PSBJbmZvcm1hdGlvbiBSZWNpcGllbnRzOiBQcm92aWRlcnMgd2hvIGhhdmUgcmVx
dWVzdGVkIGEgY29weSBvZiB0aGlzIGRvY3VtZW50ID09PT0gLS0+PGluZm9ybWF0aW9uUmVjaXBp
ZW50IHR5cGVDb2RlPSJQUkNQIj48aW50ZW5kZWRSZWNpcGllbnQgY2xhc3NDb2RlPSJBU1NJR05F
RCI+PGlkIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuNDAuMi4xMSIgZXh0ZW5zaW9uPSI2NzYx
NiIgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQkMgTVNQIFByb3ZpZGVyIExpY2Vuc2UgTnVtYmVy
IiAvPjxpZCByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xLjYxIiBleHRlbnNpb249IkhB
SE0iIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IklIQSBQcm92aWRlciBDb2RlOiBJSEEtTVQgUFZE
LUlEIiAvPjxpbmZvcm1hdGlvblJlY2lwaWVudCBjbGFzc0NvZGU9IlBTTiIgZGV0ZXJtaW5lckNv
ZGU9IklOU1RBTkNFIj48bmFtZSB1c2U9IkwiPjxmYW1pbHk+SGFobjwvZmFtaWx5PjxnaXZlbj5N
ZXJlZGl0aDwvZ2l2ZW4+PGdpdmVuPkU8L2dpdmVuPjwvbmFtZT48L2luZm9ybWF0aW9uUmVjaXBp
ZW50PjwvaW50ZW5kZWRSZWNpcGllbnQ+PC9pbmZvcm1hdGlvblJlY2lwaWVudD48aW5mb3JtYXRp
b25SZWNpcGllbnQgdHlwZUNvZGU9IlRSQyI+PGludGVuZGVkUmVjaXBpZW50IGNsYXNzQ29kZT0i
QVNTSUdORUQiPjxpZCByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjQwLjIuMTEiIGFzc2lnbmlu
Z0F1dGhvcml0eU5hbWU9IkJDIE1TUCBQcm92aWRlciBMaWNlbnNlIE51bWJlciIgbnVsbEZsYXZv
cj0iVU5LIiAvPjxpZCByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xLjYxIiBleHRlbnNp
b249IlBMSVNJSEFBIiBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJJSEEgUHJvdmlkZXIgQ29kZTog
SUhBLU1UIFBWRC1JRCIgLz48aW5mb3JtYXRpb25SZWNpcGllbnQgY2xhc3NDb2RlPSJQU04iIGRl
dGVybWluZXJDb2RlPSJJTlNUQU5DRSI+PG5hbWUgdXNlPSJMIj48cHJlZml4PkRyPC9wcmVmaXg+
PGZhbWlseT5QbGlzaWhkPC9mYW1pbHk+PGdpdmVuPkFhcm9uPC9naXZlbj48L25hbWU+PC9pbmZv
cm1hdGlvblJlY2lwaWVudD48L2ludGVuZGVkUmVjaXBpZW50PjwvaW5mb3JtYXRpb25SZWNpcGll
bnQ+PGluZm9ybWF0aW9uUmVjaXBpZW50IHR5cGVDb2RlPSJUUkMiPjxpbnRlbmRlZFJlY2lwaWVu
dCBjbGFzc0NvZGU9IkFTU0lHTkVEIj48aWQgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy40MC4y
LjExIiBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJCQyBNU1AgUHJvdmlkZXIgTGljZW5zZSBOdW1i
ZXIiIG51bGxGbGF2b3I9IlVOSyIgLz48aWQgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcu
MS42MSIgZXh0ZW5zaW9uPSJQTElTSUhEVSIgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iSUhBIFBy
b3ZpZGVyIENvZGU6IElIQS1NVCBQVkQtSUQiIC8+PGluZm9ybWF0aW9uUmVjaXBpZW50IGNsYXNz
Q29kZT0iUFNOIiBkZXRlcm1pbmVyQ29kZT0iSU5TVEFOQ0UiPjxuYW1lIHVzZT0iTCI+PHByZWZp
eD5EcjwvcHJlZml4PjxmYW1pbHk+UGxpc2loYTwvZmFtaWx5PjxnaXZlbj5EdXN0eTwvZ2l2ZW4+
PC9uYW1lPjwvaW5mb3JtYXRpb25SZWNpcGllbnQ+PC9pbnRlbmRlZFJlY2lwaWVudD48L2luZm9y
bWF0aW9uUmVjaXBpZW50PjxpbmZvcm1hdGlvblJlY2lwaWVudCB0eXBlQ29kZT0iVFJDIj48aW50
ZW5kZWRSZWNpcGllbnQgY2xhc3NDb2RlPSJBU1NJR05FRCI+PGlkIHJvb3Q9IjIuMTYuODQwLjEu
MTEzODgzLjMuNDAuMi4xMSIgZXh0ZW5zaW9uPSIxMTExNiIgYXNzaWduaW5nQXV0aG9yaXR5TmFt
ZT0iQkMgTVNQIFByb3ZpZGVyIExpY2Vuc2UgTnVtYmVyIiAvPjxpZCByb290PSIyLjE2Ljg0MC4x
LjExMzg4My4zLjI3Ny4xLjYxIiBleHRlbnNpb249IktJTlQ1IiBhc3NpZ25pbmdBdXRob3JpdHlO
YW1lPSJJSEEgUHJvdmlkZXIgQ29kZTogSUhBLU1UIFBWRC1JRCIgLz48aW5mb3JtYXRpb25SZWNp
cGllbnQgY2xhc3NDb2RlPSJQU04iIGRldGVybWluZXJDb2RlPSJJTlNUQU5DRSI+PG5hbWUgdXNl
PSJMIj48ZmFtaWx5Pktpbm5lZTwvZmFtaWx5PjxnaXZlbj5Ub2RkPC9naXZlbj48L25hbWU+PC9p
bmZvcm1hdGlvblJlY2lwaWVudD48L2ludGVuZGVkUmVjaXBpZW50PjwvaW5mb3JtYXRpb25SZWNp
cGllbnQ+PCEtLSA9PT09IFByaW1hcnkgcHJvdmlkZXI6IEZhbWlseSBwcm92aWRlciA9PT09IC0t
PjxwYXJ0aWNpcGFudCB0eXBlQ29kZT0iSU5EIiBjb250ZXh0Q29udHJvbENvZGU9Ik9QIj48ZnVu
Y3Rpb25Db2RlIGNvZGU9IlBDUCIgZGlzcGxheU5hbWU9IlByaW1hcnkgQ2FyZSBQaHlzaWNpYW4i
IGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjIuMjAuMy44NyIgY29kZVN5c3RlbU5hbWU9
IkhMN1BhcnRpY2lwYXRpb25GdW5jdGlvbiIgLz48YXNzb2NpYXRlZEVudGl0eSBjbGFzc0NvZGU9
IlBST1YiPjxpZCByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjQwLjIuMTEiIGFzc2lnbmluZ0F1
dGhvcml0eU5hbWU9IkJDIE1TUCBQcm92aWRlciBMaWNlbnNlIE51bWJlciIgbnVsbEZsYXZvcj0i
VU5LIiAvPjxpZCByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xLjYxIiBleHRlbnNpb249
IlBMSVNJSERVIiBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJJSEEgUHJvdmlkZXIgQ29kZTogSUhB
LU1UIFBWRC1JRCIgLz48YXNzb2NpYXRlZFBlcnNvbiBjbGFzc0NvZGU9IlBTTiIgZGV0ZXJtaW5l
ckNvZGU9IklOU1RBTkNFIj48bmFtZSB1c2U9IkwiPjxwcmVmaXg+RHI8L3ByZWZpeD48ZmFtaWx5
PlBsaXNpaGE8L2ZhbWlseT48Z2l2ZW4+RHVzdHk8L2dpdmVuPjwvbmFtZT48L2Fzc29jaWF0ZWRQ
ZXJzb24+PC9hc3NvY2lhdGVkRW50aXR5PjwvcGFydGljaXBhbnQ+PCEtLSA9PT09IE9yZGVyaW5n
IFBoeXNpY2lhbiA9PT09IC0tPjxwYXJ0aWNpcGFudCB0eXBlQ29kZT0iUkVGIiBjb250ZXh0Q29u
dHJvbENvZGU9Ik9QIj48ZnVuY3Rpb25Db2RlIGNvZGU9Ik9SRCIgZGlzcGxheU5hbWU9Ik9yZGVy
aW5nIFByb3ZpZGVyIiAvPjx0aW1lIHZhbHVlPSIyMDE5MDEyNDExMTQtMDgwMCIgLz48YXNzb2Np
YXRlZEVudGl0eSBjbGFzc0NvZGU9IlBST1YiPjxpZCByb290PSIyLjE2Ljg0MC4xLjExMzg4My4z
LjQwLjIuMTEiIGV4dGVuc2lvbj0iNjc2MTYiIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkJDIE1T
UCBQcm92aWRlciBMaWNlbnNlIE51bWJlciIgLz48aWQgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMu
My4yNzcuMS42MSIgZXh0ZW5zaW9uPSJIQUhNIiBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJJSEEg
UHJvdmlkZXIgQ29kZTogSUhBLU1UIFBWRC1JRCIgLz48YXNzb2NpYXRlZFBlcnNvbiBjbGFzc0Nv
ZGU9IlBTTiIgZGV0ZXJtaW5lckNvZGU9IklOU1RBTkNFIj48bmFtZSB1c2U9IkwiPjxmYW1pbHk+
SGFobjwvZmFtaWx5PjxnaXZlbj5NZXJlZGl0aDwvZ2l2ZW4+PGdpdmVuPkU8L2dpdmVuPjwvbmFt
ZT48L2Fzc29jaWF0ZWRQZXJzb24+PC9hc3NvY2lhdGVkRW50aXR5PjwvcGFydGljaXBhbnQ+PCEt
LSA9PT09IE9yZGVyIGluZm9ybWF0aW9uID09PT0gLS0+PGluRnVsZmlsbG1lbnRPZiB0eXBlQ29k
ZT0iRkxGUyI+PG9yZGVyIGNsYXNzQ29kZT0iRU5DIiBtb29kQ29kZT0iUlFPIj48aWQgcm9vdD0i
Mi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMS4yMiIgZXh0ZW5zaW9uPSJJSFZKSC0yMDE5MDEyNC0w
MDAyNzI3OCIgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iSUhBIE1lZGl0ZWNoIFJlcXVpc2l0aW9u
IE51bWJlciIgLz48Y29kZSBjb2RlPSJSRTpDTTpOIiBjb2RlU3lzdGVtTmFtZT0iT3JkZXIgU3Rh
dHVzIChPcmRlciBDb250cm9sWzpPcmRlciBTdGF0dXNdWzpSZXNwb25zZSBGbGFnXSkiIC8+PC9v
cmRlcj48L2luRnVsZmlsbG1lbnRPZj48aW5GdWxmaWxsbWVudE9mIHR5cGVDb2RlPSJGTEZTIj48
dGVtcGxhdGVJZCByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuNiIgYXNzaWduaW5n
QXV0aG9yaXR5TmFtZT0iT3JkZXIgQ29tcG9uZW50IFRlbXBsYXRlIiAvPjxvcmRlciBjbGFzc0Nv
ZGU9IkVOQyIgbW9vZENvZGU9IlJRTyI+PCEtLSA9PT09IFVuaXF1ZSBPcmRlciBDb21wb25lbnQg
TnVtYmVyIChSZXF1aXNpdGlvbiMgKyBTcGVjaW1lbiMpIC0gQmVjYXVzZSB0aGVyZSBtYXkgYmUg
bXVsdGlwbGUgZG9jdW1lbnRzIHRoYXQgZWFjaCByZXByZXNlbnQgdGhlIGZ1bGZpbGxtZW50IG9m
IHBhcnQgb2YgYW4gb3JkZXIvcmVxdWlzaXRpb24uJiMxMzsKCQkJCQkJQW55IGluZnVsZmlsbG1l
bnRPZiBlbGVtZW50cyB3aXRoIHRoaXMgdGVtcGxhdGVJZCBtZWFuIHRoYXQgdGhlIGlkZW50aWZp
ZXIgdW5pcXVlbHkgaWRlbnRpZmllcyB0aGUgcGFydCwgbm90IHRoZSB3aG9sZS4gTGFiIHJlcXVp
c2l0aW9ucyBtYXkgY29udGFpbiB0ZXN0cyBmb3IgbXVsdGlwbGUgc3BlY2ltZW5zIGFuZCBlYWNo
IHNwZWNpbWVuIHdpbGwgJiMxMzsKCQkJCQkJY29tZSBhY3Jvc3MgYXMgYSBwYXJ0IG9mIHRoZSB3
aG9sZSBSZXF1aXNpdGlvbi4gPT09PSYjMTM7CgkJCQkJCS0tPjxpZCByb290PSIyLjE2Ljg0MC4x
LjExMzg4My4zLjI3Ny4xLjIyLjEiIGV4dGVuc2lvbj0iSUhWSkgtMjAxOTAxMjQtMDAwMjcyNzhf
X1BUMjQwMTpIMDAwMTNSIiBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJJSEEgT3JkZXIgQ29tcG9u
ZW50IE51bWJlciIgLz48L29yZGVyPjwvaW5GdWxmaWxsbWVudE9mPjwhLS0gPT09PSBTZXJ2aWNl
IEV2ZW50OiBQcm9jZWR1cmUgPT09PSAtLT48ZG9jdW1lbnRhdGlvbk9mIHR5cGVDb2RlPSJET0Mi
PjxzZXJ2aWNlRXZlbnQgY2xhc3NDb2RlPSJBQ1QiIG1vb2RDb2RlPSJFVk4iPjxjb2RlIG51bGxG
bGF2b3I9IlVOSyIgLz48IS0tT2JzZXJ2YXRpb24gRGF0ZSAoT0JSLjcpLS0+PGVmZmVjdGl2ZVRp
bWUgdmFsdWU9IjIwMTkwMTI0MDIwMC0wODAwIiAvPjxwZXJmb3JtZXIgdHlwZUNvZGU9IlBQUkYi
Pjxhc3NpZ25lZEVudGl0eSBjbGFzc0NvZGU9IkFTU0lHTkVEIj48aWQgcm9vdD0iMi4xNi44NDAu
MS4xMTM4ODMuMy40MC4yLjExIiBleHRlbnNpb249IjY3NjE2IiBhc3NpZ25pbmdBdXRob3JpdHlO
YW1lPSJCQyBNU1AgUHJvdmlkZXIgTGljZW5zZSBOdW1iZXIiIC8+PGlkIHJvb3Q9IjIuMTYuODQw
LjEuMTEzODgzLjMuMjc3LjEuNjEiIGV4dGVuc2lvbj0iSEFITSIgYXNzaWduaW5nQXV0aG9yaXR5
TmFtZT0iSUhBIFByb3ZpZGVyIENvZGU6IElIQS1NVCBQVkQtSUQiIC8+PGFzc2lnbmVkUGVyc29u
IGNsYXNzQ29kZT0iUFNOIiBkZXRlcm1pbmVyQ29kZT0iSU5TVEFOQ0UiPjxuYW1lIHVzZT0iTCI+
PGZhbWlseT5IYWhuPC9mYW1pbHk+PGdpdmVuPk1lcmVkaXRoPC9naXZlbj48Z2l2ZW4+RTwvZ2l2
ZW4+PC9uYW1lPjwvYXNzaWduZWRQZXJzb24+PC9hc3NpZ25lZEVudGl0eT48L3BlcmZvcm1lcj48
YmNjZGE6c3RhdHVzQ29kZSBjb2RlPSJjb21wbGV0ZWQiIC8+PC9zZXJ2aWNlRXZlbnQ+PC9kb2N1
bWVudGF0aW9uT2Y+PCEtLSA9PT09IFBhcmVudCBEb2N1bWVudDogSEw3IHYyIG1lc3NhZ2UgZnJv
bSBNZWRpdGVjaCA9PT09IC0tPjxyZWxhdGVkRG9jdW1lbnQgdHlwZUNvZGU9IlhGUk0iPjxwYXJl
bnREb2N1bWVudCBjbGFzc0NvZGU9IkRPQ0NMSU4iIG1vb2RDb2RlPSJFVk4iPjxpZCByb290PSIy
LjE2Ljg0MC4xLjExMzg4My4zLjI3Ny4xLjgxIiBleHRlbnNpb249IjgwNTU2NiIgYXNzaWduaW5n
QXV0aG9yaXR5TmFtZT0iSUhBIE1lc3NhZ2UgTnVtYmVyIiAvPjwvcGFyZW50RG9jdW1lbnQ+PC9y
ZWxhdGVkRG9jdW1lbnQ+PCEtLSA9PT09IEVuY29tcGFzc2luZyBFbmNvdW50ZXI6IFBhdGllbnQg
VmlzaXQgPT09PSAtLT48Y29tcG9uZW50T2YgdHlwZUNvZGU9IkNPTVAiPjwhLS1QYXRpZW50IEFj
Y291bnQgTnVtYmVyIChQSURfMTgpLS0+PGVuY29tcGFzc2luZ0VuY291bnRlciBjbGFzc0NvZGU9
IkVOQyIgbW9vZENvZGU9IkVWTiI+PGlkIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEu
NzIiIGV4dGVuc2lvbj0iVkowNTUxNzQ3LzE4IiBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJJSEEg
UGF0aWVudCBBY2NvdW50IE51bWJlciIgLz48IS0tRW5jb3VudGVyIGhhcyBhbiBhZG1pc3Npb24g
ZGF0ZSBvbmx5LS0+PGVmZmVjdGl2ZVRpbWUgdmFsdWU9IjIwMTgwMjE1MTAzNi0wODAwIiAvPjxl
bmNvdW50ZXJQYXJ0aWNpcGFudCB0eXBlQ29kZT0iQVRORCI+PGFzc2lnbmVkRW50aXR5IGNsYXNz
Q29kZT0iQVNTSUdORUQiPjxpZCByb290PSIyLjE2Ljg0MC4xLjExMzg4My4zLjQwLjIuMTEiIGV4
dGVuc2lvbj0iNjc2MTYiIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkJDIE1TUCBQcm92aWRlciBM
aWNlbnNlIE51bWJlciIgLz48aWQgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMS42MSIg
ZXh0ZW5zaW9uPSJIQUhNIiBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJJSEEgUHJvdmlkZXIgQ29k
ZTogSUhBLU1UIFBWRC1JRCIgLz48YXNzaWduZWRQZXJzb24gY2xhc3NDb2RlPSJQU04iIGRldGVy
bWluZXJDb2RlPSJJTlNUQU5DRSI+PG5hbWUgdXNlPSJMIj48ZmFtaWx5PkhhaG48L2ZhbWlseT48
Z2l2ZW4+TWVyZWRpdGg8L2dpdmVuPjxnaXZlbj5FPC9naXZlbj48L25hbWU+PC9hc3NpZ25lZFBl
cnNvbj48L2Fzc2lnbmVkRW50aXR5PjwvZW5jb3VudGVyUGFydGljaXBhbnQ+PGVuY291bnRlclBh
cnRpY2lwYW50IHR5cGVDb2RlPSJDT04iPjxhc3NpZ25lZEVudGl0eSBjbGFzc0NvZGU9IkFTU0lH
TkVEIj48aWQgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy40MC4yLjExIiBhc3NpZ25pbmdBdXRo
b3JpdHlOYW1lPSJCQyBNU1AgUHJvdmlkZXIgTGljZW5zZSBOdW1iZXIiIG51bGxGbGF2b3I9IlVO
SyIgLz48aWQgcm9vdD0iMi4xNi44NDAuMS4xMTM4ODMuMy4yNzcuMS42MSIgZXh0ZW5zaW9uPSJQ
TElTSUhBQSIgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iSUhBIFByb3ZpZGVyIENvZGU6IElIQS1N
VCBQVkQtSUQiIC8+PGFzc2lnbmVkUGVyc29uIGNsYXNzQ29kZT0iUFNOIiBkZXRlcm1pbmVyQ29k
ZT0iSU5TVEFOQ0UiPjxuYW1lIHVzZT0iTCI+PHByZWZpeD5EcjwvcHJlZml4PjxmYW1pbHk+UGxp
c2loZDwvZmFtaWx5PjxnaXZlbj5BYXJvbjwvZ2l2ZW4+PC9uYW1lPjwvYXNzaWduZWRQZXJzb24+
PC9hc3NpZ25lZEVudGl0eT48L2VuY291bnRlclBhcnRpY2lwYW50Pjxsb2NhdGlvbj48aGVhbHRo
Q2FyZUZhY2lsaXR5IGNsYXNzQ29kZT0iU0RMT0MiPjxpZCByb290PSIyLjE2Ljg0MC4xLjExMzg4
My4zLjI3Ny4xLjYyIiBleHRlbnNpb249IklIVkpIIiBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJJ
SEEgTWVkaXRlY2ggTG9jYXRpb24gSWRlbnRpZmllciIgLz48IS0tY29kZSByZXByZXNlbnRzIHRo
ZSBwYXRpZW50IGxvY2F0aW9uLCBpbiB0aGUgZm9ybSAiUHQuVHlwZTpVbml0WzpSb29tWzpCZWRd
XSItLT48Y29kZSBjb2RlPSJSRUY6VkVSVkpITEIiIGNvZGVTeXN0ZW1OYW1lPSJQYXRpZW50IFR5
cGU6VW5pdCIgLz48L2hlYWx0aENhcmVGYWNpbGl0eT48L2xvY2F0aW9uPjwvZW5jb21wYXNzaW5n
RW5jb3VudGVyPjwvY29tcG9uZW50T2Y+PCEtLSAmIzEzOwoJCQkJKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiomIzEzOwoJCQkJQ0RBIEJvZHk6
IExldmVsIDMgLSBEaXNjcmV0ZSBMYWIgUmVzdWx0cyAgJiMxMzsKCQkJCSoqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqJiMxMzsKCQkJLS0+PGNv
bXBvbmVudCB0eXBlQ29kZT0iQ09NUCI+PHN0cnVjdHVyZWRCb2R5IGNsYXNzQ29kZT0iRE9DQk9E
WSIgbW9vZENvZGU9IkVWTiI+PGNvbXBvbmVudCB0eXBlQ29kZT0iQ09NUCI+PHNlY3Rpb24gY2xh
c3NDb2RlPSJET0NTRUNUIiBtb29kQ29kZT0iRVZOIj48dGVtcGxhdGVJZCByb290PSIxLjMuNi4x
LjQuMS4xOTM3Ni4xLjMuMy4yLjEiIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkxhYm9yYXRvcnkg
U3BlY2lhbHR5IFNlY3Rpb24iIC8+PGNvZGUgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMu
Ni4xIiBjb2RlU3lzdGVtTmFtZT0iTE9JTkMgQ29kZSIgY29kZT0iMjY0MzYtNiIgZGlzcGxheU5h
bWU9IkxhYm9yYXRvcnkgU3R1ZGllcyIgLz48dGl0bGU+TGFib3JhdG9yeSBTdHVkaWVzPC90aXRs
ZT48Y29tcG9uZW50IHR5cGVDb2RlPSJDT01QIj48c2VjdGlvbiBjbGFzc0NvZGU9IkRPQ1NFQ1Qi
IG1vb2RDb2RlPSJFVk4iPjx0ZW1wbGF0ZUlkIHJvb3Q9IjEuMy42LjEuNC4xLjE5Mzc2LjEuMy4z
LjIuMiIgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iTGFib3JhdG9yeSBSZXBvcnQgSXRlbSBTZWN0
aW9uIiAvPjxjb2RlIGNvZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjIuMjAuNS4xIiBjb2Rl
U3lzdGVtTmFtZT0icENMT0NEIiBjb2RlPSJYWFgtMTMzOSIgZGlzcGxheU5hbWU9Ik1hbGFyaWEg
UGFuZWwiIC8+PCEtLSA9PT09IERlcml2ZWQgVGV4dCBSZXByZXNlbnRhdGlvbiBvZiBEaXNjcmV0
ZSBMYWIgUmVzdWx0cyA9PT09IC0tPjx0aXRsZT5NYWxhcmlhIFBhbmVsPC90aXRsZT48dGV4dD48
dGFibGU+PGNhcHRpb24+U3BlY2ltZW4gSW5mb3JtYXRpb248L2NhcHRpb24+PHRib2R5Pjx0cj48
dGg+U3BlY2ltZW4gIzo8L3RoPjx0ZD5QVDI0MDE6SDAwMDEzUjwvdGQ+PC90cj48dHI+PHRoPkNv
bGxlY3RlZDo8L3RoPjx0ZD4yNC9KYW4vMjAxOSAwMjowMCBQU1Q8L3RkPjwvdHI+PHRyPjx0aD5S
ZWNlaXZlZDo8L3RoPjx0ZD4yNC9KYW4vMjAxOSAxMToxMyBQU1Q8L3RkPjwvdHI+PHRyPjx0aD5S
ZXF1aXNpdGlvbiAjOjwvdGg+PHRkPklIVkpILTIwMTkwMTI0LTAwMDI3Mjc4PC90ZD48L3RyPjwv
dGJvZHk+PC90YWJsZT48YnIgLz48dGFibGU+PGNhcHRpb24+WFhYLTEzMzkgTWFsYXJpYSBQYW5l
bDwvY2FwdGlvbj48dGJvZHk+PHRyPjx0aD5UZXN0IElEOjwvdGg+PHRoPlRlc3QgTmFtZTo8L3Ro
Pjx0aD5UZXN0IFJlc3VsdDo8L3RoPjx0aD5SZXN1bHQgRmxhZ3M6PC90aD48dGg+UmVmZXJlbmNl
IFJhbmdlOjwvdGg+PHRoPlJlc3VsdCBVbml0czo8L3RoPjx0aD5UaW1lIFJlc3VsdGVkOjwvdGg+
PHRoPlN0YXR1czo8L3RoPjwvdHI+PCEtLSAxIC0gTWFsYXJpYSBOQVQgLS0+PHRyIElEPSJwMzEy
LjAxMTBfMS0xIj48dGQ+MzEyLjAxMTA8L3RkPjx0ZD5NYWxhcmlhIE5BVDwvdGQ+PHRkPk5lZ2F0
aXZlPC90ZD48dGQgLz48dGQ+TmVnYXRpdmU8L3RkPjx0ZCAvPjx0ZD4yNC9KYW4vMjAxOSAxMTox
NCBQU1Q8L3RkPjx0ZD48Y29udGVudD5jb21wbGV0ZWQ8L2NvbnRlbnQ+PC90ZD48L3RyPjx0cj48
dGQgY29sc3Bhbj0iMiIgLz48dGQgY29sc3Bhbj0iOSI+PGNvbnRlbnQgc3R5bGVDb2RlPSJCb2xk
Ij5PYnNlcnZhdGlvbiBOb3Rlczo8L2NvbnRlbnQ+PGJyIC8+TWFsYXJpYSBpcyBuZWdhdGl2ZSBi
eSBtb2xlY3VsYXIgbWV0aG9kLjxiciAvPk5vIGZ1cnRoZXIgdGVzdGluZyB0byBiZSBwZXJmb3Jt
ZWQuPGJyIC8+PC90ZD48L3RyPjwvdGJvZHk+PC90YWJsZT48YnIgLz48YnIgLz48dGFibGU+PHRi
b2R5Pjx0cj48dGg+UmVzdWx0IEZsYWdzIExlZ2VuZDo8L3RoPjx0ZD48Y29udGVudD5OPC9jb250
ZW50PjxiciAvPjxjb250ZW50IHN0eWxlQ29kZT0iYWxlcnQiPkg8L2NvbnRlbnQ+Lzxjb250ZW50
IHN0eWxlQ29kZT0iYWxlcnQiPkw8L2NvbnRlbnQ+Lzxjb250ZW50IHN0eWxlQ29kZT0iYWxlcnQi
PkE8L2NvbnRlbnQ+PGJyIC8+PGNvbnRlbnQgc3R5bGVDb2RlPSJhbGVydCI+SEg8L2NvbnRlbnQ+
Lzxjb250ZW50IHN0eWxlQ29kZT0iYWxlcnQiPkxMPC9jb250ZW50Pi88Y29udGVudCBzdHlsZUNv
ZGU9ImFsZXJ0Ij5BQTwvY29udGVudD48L3RkPjx0ZD5Ob3JtYWw8YnIgLz5BYm5vcm1hbCBWYWx1
ZTxiciAvPkNyaXRpY2FsIFZhbHVlPC90ZD48L3RyPjx0cj48dGg+UGVyZm9ybWluZyBMYWI6PC90
aD48dGQgY29sc3Bhbj0iMiI+SUhLR0ggLSBLZWxvd25hIEdlbmVyYWwgSG9zcDwvdGQ+PC90cj48
dHI+PHRoPkNvbGxlY3RpbmcgTGFiOjwvdGg+PHRkIGNvbHNwYW49IjIiPklIVkpIIC0gSW50ZXJp
b3IgSGVhbHRoIEF1dGhvcml0eTwvdGQ+PC90cj48dHI+PHRoPlJlcG9ydCBTdGF0dXM6PC90aD48
dGQgY29sc3Bhbj0iMiI+Y29tcGxldGVkPC90ZD48L3RyPjwvdGJvZHk+PC90YWJsZT48Zm9vdG5v
dGU+PGJyIC8+PGJyIC8+PHBhcmFncmFwaD48Y29udGVudCBzdHlsZUNvZGU9IkJvbGQiPklOUVVJ
UklFUyAtIDwvY29udGVudD5QbGVhc2UgZGlyZWN0IGFsbCBpbnF1aXJpZXMgdG8gdGhlIENvbGxl
Y3RpbmcgTGFiLjwvcGFyYWdyYXBoPjxwYXJhZ3JhcGg+PGNvbnRlbnQgc3R5bGVDb2RlPSJCb2xk
Ij5DT05GSURFTlRJQUwgLSA8L2NvbnRlbnQ+VGhpcyBjbGluaWNhbCBkb2N1bWVudCBjb250YWlu
cyBjb25maWRlbnRpYWwgcGVyc29uYWwgaW5mb3JtYXRpb24gYW5kIGlzIGZvciBkaXJlY3QgY2Fy
ZSBwdXJwb3NlcyBvbmx5LiAgUGxlYXNlIHVzZSwgY29weSBhbmQgc2hhcmUgd2l0aCBhdXRob3Jp
emVkIGluZGl2aWR1YWxzIG9ubHkuPC9wYXJhZ3JhcGg+PHBhcmFncmFwaD48Y29udGVudCBzdHls
ZUNvZGU9IkNlbnRlciI+KioqIElmIHJlY2VpdmVkIGluIGVycm9yIGNhbGwgSUggSW5mb3JtYXRp
b24gUHJpdmFjeSAmYW1wO2FtcDsgU2VjdXJpdHkgdG9sbCBmcmVlIGF0IDEtODU1LTk4MC01MDIw
ICoqKjwvY29udGVudD48L3BhcmFncmFwaD48cGFyYWdyYXBoPjxjb250ZW50IHN0eWxlQ29kZT0i
Qm9sZCI+RU5EIE9GIFJFUE9SVDwvY29udGVudD48L3BhcmFncmFwaD48L2Zvb3Rub3RlPjwvdGV4
dD48IS0tID09PT0gTWFjaGluZSBSZWFkYWJsZSBITDcgVjMgUmVwcmVzZW50YXRpb24gb2YgRGlz
Y3JldGUgTGFiIFJlc3VsdHMgPT09PSAtLT48ZW50cnkgdHlwZUNvZGU9IkRSSVYiPjx0ZW1wbGF0
ZUlkIHJvb3Q9IjEuMy42LjEuNC4xLjE5Mzc2LjEuMy4xIiBhc3NpZ25pbmdBdXRob3JpdHlOYW1l
PSJMYWJvcmF0b3J5IFJlcG9ydCBEYXRhIFByb2Nlc3NpbmcgRW50cnkiIC8+PGFjdCBjbGFzc0Nv
ZGU9IkFDVCIgbW9vZENvZGU9IkVWTiI+PGNvZGUgbnVsbEZsYXZvcj0iTkEiIC8+PHN0YXR1c0Nv
ZGUgY29kZT0iY29tcGxldGVkIiAvPjwhLS1TcGVjaW1lbiBDb2xsZWN0aW9uOiBQVDI0MDE6SDAw
MDEzUi0tPjxlbnRyeVJlbGF0aW9uc2hpcCB0eXBlQ29kZT0iQ09NUCI+PHByb2NlZHVyZSBjbGFz
c0NvZGU9IlBST0MiIG1vb2RDb2RlPSJFVk4iPjx0ZW1wbGF0ZUlkIHJvb3Q9IjEuMy42LjEuNC4x
LjE5Mzc2LjEuMy4xLjIiIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IlNwZWNpbWVuIENvbGxlY3Rp
b24iIC8+PGNvZGUgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuNi4xIiBjb2RlU3lzdGVt
TmFtZT0iTE9JTkMgQ29kZSIgY29kZT0iMzM4ODItMiIgZGlzcGxheU5hbWU9IlNwZWNpbWVuIENv
bGxlY3Rpb24iIC8+PCEtLVNwZWNpbWVuIENvbGxlY3RlZCBEYXRlVGltZSAoT0JSLjcpLS0+PGVm
ZmVjdGl2ZVRpbWUgdmFsdWU9IjIwMTkwMTI0MDIwMC0wODAwIiAvPjwhLS1UYXJnZXQgU2l0ZSBm
cm9tIE9CUi4xNS0tPjwhLS1TcGVjaW1lbiBOdW1iZXIgKE9CUi4zKS0tPjxwYXJ0aWNpcGFudCB0
eXBlQ29kZT0iUFJEIj48cGFydGljaXBhbnRSb2xlIGNsYXNzQ29kZT0iU1BFQyI+PGlkIHJvb3Q9
IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEuMTEiIGV4dGVuc2lvbj0iUFQyNDAxOkgwMDAxM1Ii
IGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IklIQSBNZWRpdGVjaCBTcGVjaW1lbiBOdW1iZXIiIC8+
PHBsYXlpbmdFbnRpdHk+PGNvZGUgbnVsbEZsYXZvcj0iVU5LIiAvPjwvcGxheWluZ0VudGl0eT48
L3BhcnRpY2lwYW50Um9sZT48L3BhcnRpY2lwYW50PjwhLS1TcGVjaW1lbiBSZWNlaXZlZCBEYXRl
VGltZSAoT0JSLjE0KS0tPjxlbnRyeVJlbGF0aW9uc2hpcCB0eXBlQ29kZT0iQ09NUCI+PGFjdCBj
bGFzc0NvZGU9IkFDVCIgbW9vZENvZGU9IkVWTiI+PHRlbXBsYXRlSWQgcm9vdD0iMS4zLjYuMS40
LjEuMTkzNzYuMS4zLjEuMyIgLz48Y29kZSBjb2RlPSJTUFJFQ0VJVkUiIGNvZGVTeXN0ZW09IjEu
My41LjEuNC4xLjE5Mzc2LjEuNS4zLjIiIGNvZGVTeXN0ZW1OYW1lPSJJSEVBY3RDb2RlIiAvPjwh
LS1PQlIuMTQgU3BlY2ltZW4gRGF0ZSBSZWNlaXZlZC0tPjxlZmZlY3RpdmVUaW1lIHZhbHVlPSIy
MDE5MDEyNDExMTMtMDgwMCIgLz48L2FjdD48L2VudHJ5UmVsYXRpb25zaGlwPjwvcHJvY2VkdXJl
PjwvZW50cnlSZWxhdGlvbnNoaXA+PCEtLSBCYXR0ZXJ5OiBNYWxhcmlhIFBhbmVsIC0tPjxlbnRy
eVJlbGF0aW9uc2hpcCB0eXBlQ29kZT0iQ09NUCI+PG9yZ2FuaXplciBjbGFzc0NvZGU9IkJBVFRF
UlkiIG1vb2RDb2RlPSJFVk4iPjx0ZW1wbGF0ZUlkIHJvb3Q9IjEuMy42LjEuNC4xLjE5Mzc2LjEu
My4xLjQiIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkxhYm9yYXRvcnkgQmF0dGVyeSBPcmdhbml6
ZXIiIC8+PGlkIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3LjEuMTEiIGV4dGVuc2lvbj0i
UFQyNDAxOkgwMDAxM1IiIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IklIQSBNZWRpdGVjaCBTcGVj
aW1lbiBOdW1iZXIiIC8+PGNvZGUgY29kZVN5c3RlbT0iMi4xNi44NDAuMS4xMTM4ODMuMi4yMC41
LjEiIGNvZGVTeXN0ZW1OYW1lPSJwQ0xPQ0QiIGNvZGU9IlhYWC0xMzM5IiBkaXNwbGF5TmFtZT0i
TWFsYXJpYSBQYW5lbCIgLz48c3RhdHVzQ29kZSBjb2RlPSJjb21wbGV0ZWQiIC8+PCEtLVJlc3Vs
dHMgQ29tcG9zZWQgRGF0ZVRpbWUgKE9CUi4yMiktLT48ZWZmZWN0aXZlVGltZSB2YWx1ZT0iMjAx
OTAxMjQxMTE0LTA4MDAiIC8+PCEtLSAxIC0gTWFsYXJpYSBOQVQgLS0+PGNvbXBvbmVudCB0eXBl
Q29kZT0iQ09NUCI+PG9ic2VydmF0aW9uIGNsYXNzQ29kZT0iT0JTIiBtb29kQ29kZT0iRVZOIj48
dGVtcGxhdGVJZCByb290PSIxLjMuNi4xLjQuMS4xOTM3Ni4xLjMuMS42IiBhc3NpZ25pbmdBdXRo
b3JpdHlOYW1lPSJMYWJvcmF0b3J5IE9ic2VydmF0aW9uIiAvPjxjb2RlIGNvZGVTeXN0ZW09IjIu
MTYuODQwLjEuMTEzODgzLjIuMjAuNS4xIiBjb2RlU3lzdGVtTmFtZT0icENMT0NEIiBjb2RlPSIz
MTIuMDExMCIgZGlzcGxheU5hbWU9Ik1hbGFyaWEgTkFUIiAvPjxzdGF0dXNDb2RlIGNvZGU9ImNv
bXBsZXRlZCIgLz48IS0tUmVzdWx0ZWQgRGF0ZVRpbWUgKE9CWC4xNCktLT48ZWZmZWN0aXZlVGlt
ZSB2YWx1ZT0iMjAxOTAxMjQxMTE0LTA4MDAiIC8+PHZhbHVlIG1lZGlhVHlwZT0idGV4dC9wbGFp
biIgcmVwcmVzZW50YXRpb249IlRYVCIgeHNpOnR5cGU9IlNUIj5OZWdhdGl2ZTwvdmFsdWU+PHBl
cmZvcm1lciB0eXBlQ29kZT0iUFJGIj48YXNzaWduZWRFbnRpdHkgY2xhc3NDb2RlPSJBU1NJR05F
RCI+PGlkIG51bGxGbGF2b3I9Ik5JIiAvPjxyZXByZXNlbnRlZE9yZ2FuaXphdGlvbiBjbGFzc0Nv
ZGU9Ik9SRyIgZGV0ZXJtaW5lckNvZGU9IklOU1RBTkNFIj48aWQgcm9vdD0iMi4xNi44NDAuMS4x
MTM4ODMuMy4yNzcuMS42MiIgZXh0ZW5zaW9uPSJJSEtHSCIgYXNzaWduaW5nQXV0aG9yaXR5TmFt
ZT0iSUhBIExhYiBQcm92aWRlciIgLz48bmFtZT5LZWxvd25hIEdlbmVyYWwgSG9zcDwvbmFtZT48
L3JlcHJlc2VudGVkT3JnYW5pemF0aW9uPjwvYXNzaWduZWRFbnRpdHk+PC9wZXJmb3JtZXI+PGVu
dHJ5UmVsYXRpb25zaGlwIHR5cGVDb2RlPSJDT01QIj48YWN0IGNsYXNzQ29kZT0iQUNUIiBtb29k
Q29kZT0iRVZOIj48dGVtcGxhdGVJZCByb290PSIxLjMuNi4xLjQuMS4xOTM3Ni4xLjUuMy4xLjQu
MiIgYXNzaWduaW5nQXV0aG9yaXR5TmFtZT0iQW5ub3RhdGlvbiBDb21tZW50IiAvPjxjb2RlIGNv
ZGVTeXN0ZW09IjIuMTYuODQwLjEuMTEzODgzLjYuMSIgY29kZVN5c3RlbU5hbWU9IkxPSU5DIENv
ZGUiIGNvZGU9IjQ4NzY3LTgiIGRpc3BsYXlOYW1lPSJBbm5vdGF0aW9uIENvbW1lbnQiIC8+PHRl
eHQ+TWFsYXJpYSBpcyBuZWdhdGl2ZSBieSBtb2xlY3VsYXIgbWV0aG9kLiYjMTM7CgkJCU5vIGZ1
cnRoZXIgdGVzdGluZyB0byBiZSBwZXJmb3JtZWQuPC90ZXh0PjxzdGF0dXNDb2RlIGNvZGU9ImNv
bXBsZXRlZCIgLz48L2FjdD48L2VudHJ5UmVsYXRpb25zaGlwPjxyZWZlcmVuY2VSYW5nZT48b2Jz
ZXJ2YXRpb25SYW5nZT48dmFsdWUgbWVkaWFUeXBlPSJ0ZXh0L3BsYWluIiByZXByZXNlbnRhdGlv
bj0iVFhUIiB4c2k6dHlwZT0iU1QiPk5lZ2F0aXZlPC92YWx1ZT48L29ic2VydmF0aW9uUmFuZ2U+
PC9yZWZlcmVuY2VSYW5nZT48L29ic2VydmF0aW9uPjwvY29tcG9uZW50Pjwvb3JnYW5pemVyPjwv
ZW50cnlSZWxhdGlvbnNoaXA+PC9hY3Q+PC9lbnRyeT48L3NlY3Rpb24+PC9jb21wb25lbnQ+PC9z
ZWN0aW9uPjwvY29tcG9uZW50Pjxjb21wb25lbnQgdHlwZUNvZGU9IkNPTVAiPjxzZWN0aW9uIGNs
YXNzQ29kZT0iRE9DU0VDVCIgbW9vZENvZGU9IkVWTiI+PHRlbXBsYXRlSWQgcm9vdD0iMi4xNi44
NDAuMS4xMTM4ODMuMy4yNzcuMTAwLjQwIiBhc3NpZ25pbmdBdXRob3JpdHlOYW1lPSJJbnN0cnVj
dGlvbmFsIENvbnRlbnQgQ29tcG9uZW50IiAvPjx0ZXh0PiYjMTM7CiYjMTM7CkNvbGxlY3Rpbmcg
TGFiOiBJSFZKSCAtIEludGVyaW9yIEhlYWx0aCBBdXRob3JpdHkmIzEzOwpQZXJmb3JtaW5nIExh
YjogSUhLR0ggLSBLZWxvd25hIEdlbmVyYWwgSG9zcCYjMTM7CklOUVVJUklFUyAtIFBsZWFzZSBk
aXJlY3QgYWxsIGlucXVpcmllcyB0byB0aGUgQ29sbGVjdGluZyBMYWIuJiMxMzsKQ09ORklERU5U
SUFMIC0gVGhpcyBjbGluaWNhbCBkb2N1bWVudCBjb250YWlucyBjb25maWRlbnRpYWwgcGVyc29u
YWwgaW5mb3JtYXRpb24gYW5kIGlzIGZvciBkaXJlY3QgY2FyZSBwdXJwb3NlcyBvbmx5LiBQbGVh
c2UgdXNlLCBjb3B5IGFuZCBzaGFyZSB3aXRoIGF1dGhvcml6ZWQgaW5kaXZpZHVhbHMgb25seS4m
IzEzOwogICAgICAgICAgICAgICAgJiMxMzsKJiMxMzsKICAgICoqKiBJZiByZWNlaXZlZCBpbiBl
cnJvciBjYWxsIElIIEluZm9ybWF0aW9uIFByaXZhY3kgJmFtcDthbXA7IFNlY3VyaXR5IHRvbGwg
ZnJlZSBhdCAxLTg1NS05ODAtNTAyMCAqKiogICYjMTM7CiAgICAgICAgICAgICAgICAmIzEzOwo8
L3RleHQ+PC9zZWN0aW9uPjwvY29tcG9uZW50Pjwvc3RydWN0dXJlZEJvZHk+PC9jb21wb25lbnQ+
PC9DbGluaWNhbERvY3VtZW50Pg==</inboundTemplate>
        <outboundTemplate encoding="base64">e30=</outboundTemplate>
        <inboundDataType>HL7V3</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.7.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.7.1">
            <stripNamespaces>false</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.7.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.7.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.7.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.7.1">
        <elements/>
        <inboundTemplate encoding="base64">ewogICJ0ZW1wbGF0ZUlkIjogIiIsCiAgImVmZmVjdGl2ZVRpbWUiOiAiIiwNCiAgInBhdGllbnQi
OiB7CiAgICAiaWQiOiAiIiwKICAgICJhZGRyZXNzIjogW3sKICAgICAgInVzZSI6ICJIIiwNCiAg
ICAgICJzdHJlZXRBZGRyZXNzIjogIiIsDQogICAgICAiY2l0eSI6ICIiLA0KICAgICAgInByb3Zp
bmNlIjogIiIsDQogICAgICAicG9zdGFsQ29kZSI6ICIiLA0KICAgICAgImNvdW50cnkiOiAiIg0K
ICAgIH1dLA0KICAgICJ0ZWxlY29tIjogW3sKICAgICAgICAidXNlIjogIiIsCiAgICAgICAgInR5
cGUiOiAiIiwKICAgICAgICAidmFsdWUiOiAiIgogICAgICB9LHsKICAgICAgICAidXNlIjogIiIs
CiAgICAgICAgInR5cGUiOiAiIiwKICAgICAgICAidmFsdWUiOiAiIgogICAgfV0sCiAgICAibmFt
ZSI6IFt7CiAgICAgICJ1c2UiOiAiIiwNCiAgICAgICJnaXZlbiI6IFsiIl0sDQogICAgICAiZmFt
aWx5IjogIiIsCiAgICAgICJwcmVmaXgiOiAiIiwKICAgICAgInN1ZmZpeCI6ICIiDQogICAgfV0s
DQogICAgImdlbmRlciI6ICIiLA0KICAgICJkb2IiOiAiIg0KICB9LA0KICAiYXV0aG9yIjogW3sK
ICAgICJ0aW1lIjogIiIsDQogICAgImlkIjogIiIsCiAgICAiYWRkcmVzcyI6IFt7CiAgICAgICJ1
c2UiOiAiIiwNCiAgICAgICJzdHJlZXRBZGRyZXNzIjogIiIsDQogICAgICAiY2l0eSI6ICIiLA0K
ICAgICAgInByb3ZpbmNlIjogIiIsDQogICAgICAicG9zdGFsQ29kZSI6ICIiLA0KICAgICAgImNv
dW50cnkiOiAiIg0KICAgIH1dLA0KICAgICJ0ZWxlY29tIjogW3sKICAgICAgICAidXNlIjogIiIs
CiAgICAgICAgInR5cGUiOiAiIiwKICAgICAgICAidmFsdWUiOiAiIgogICAgfV0sCiAgICAibmFt
ZSI6IHsKICAgICAgInVzZSI6ICIiLA0KICAgICAgImdpdmVuIjogWyIiXSwNCiAgICAgICJmYW1p
bHkiOiAiIiwKICAgICAgInByZWZpeCI6ICIiLAogICAgICAic3VmZml4IjogIiINCiAgICB9DQog
IH1dLAogICJyZWNpcGllbnQiOiBbewogICAgImlkIjogIiIsCiAgICAiYWRkcmVzcyI6IFt7CiAg
ICAgICJ1c2UiOiAiIiwNCiAgICAgICJzdHJlZXRBZGRyZXNzIjogIiIsDQogICAgICAiY2l0eSI6
ICIiLA0KICAgICAgInByb3ZpbmNlIjogIiIsDQogICAgICAicG9zdGFsQ29kZSI6ICIiLA0KICAg
ICAgImNvdW50cnkiOiAiIg0KICAgIH1dLA0KICAgICJ0ZWxlY29tIjogW3sKICAgICAgICAidXNl
IjogIiIsCiAgICAgICAgInR5cGUiOiAiIiwKICAgICAgICAidmFsdWUiOiAiIgogICAgfV0sCiAg
ICAibmFtZSI6IHsKICAgICAgInVzZSI6ICIiLA0KICAgICAgImdpdmVuIjogWyIiXSwNCiAgICAg
ICJmYW1pbHkiOiAiIiwKICAgICAgInByZWZpeCI6ICIiLAogICAgICAic3VmZml4IjogIiINCiAg
ICB9LAogICAgInJlY2VpdmVkT3JnYW5pemF0aW9uIjp7CiAgICAgICJpZCI6ICIiLAogICAgICAi
bmFtZSI6ICIiCiAgICB9IA0KICB9XSwKICAiY3VzdG9kaWFuIjogew0KICAgICJpZCI6IFt7CiAg
ICAgICJ0eXBlIjoiIiwKICAgICAgImlkIjoiIgogICAgfV0sCiAgICAibmFtZSI6ICIiCiAgfSwK
ICAiZGF0YUVudGVyZXIiOiB7CiAgICAidGltZSI6ICIiLAogICAgImlkIjoiIiwNCiAgICAiYWRk
cmVzcyI6IFt7CiAgICAgICJ1c2UiOiAiIiwNCiAgICAgICJzdHJlZXRBZGRyZXNzIjogIiIsDQog
ICAgICAiY2l0eSI6ICIiLA0KICAgICAgInByb3ZpbmNlIjogIiIsDQogICAgICAicG9zdGFsQ29k
ZSI6ICIiLA0KICAgICAgImNvdW50cnkiOiAiIg0KICAgIH1dLA0KICAgICJ0ZWxlY29tIjogW3sK
ICAgICAgICAidXNlIjogIiIsCiAgICAgICAgInR5cGUiOiAiIiwKICAgICAgICAidmFsdWUiOiAi
IgogICAgfV0sCiAgICAibmFtZSI6IHsKICAgICAgInVzZSI6ICIiLA0KICAgICAgImdpdmVuIjog
WyIiXSwNCiAgICAgICJmYW1pbHkiOiAiIiwKICAgICAgInByZWZpeCI6ICIiLAogICAgICAic3Vm
Zml4IjogIiINCiAgICB9DQogIH0sDQogICJhdXRoZW50aWNhdG9yIjogW3sKICAgICJpZCI6IiIs
DQogICAgImFkZHJlc3MiOiBbewogICAgICAidXNlIjogIiIsDQogICAgICAic3RyZWV0QWRkcmVz
cyI6ICIiLA0KICAgICAgImNpdHkiOiAiIiwNCiAgICAgICJwcm92aW5jZSI6ICIiLA0KICAgICAg
InBvc3RhbENvZGUiOiAiIiwNCiAgICAgICJjb3VudHJ5IjogIiINCiAgICB9XSwNCiAgICAidGVs
ZWNvbSI6IFt7CiAgICAgICAgInVzZSI6ICIiLAogICAgICAgICJ0eXBlIjogIiIsCiAgICAgICAg
InZhbHVlIjogIiIKICAgIH1dLAogICAgIm5hbWUiOiB7CiAgICAgICJ1c2UiOiAiIiwNCiAgICAg
ICJnaXZlbiI6IFsiIl0sDQogICAgICAiZmFtaWx5IjogIiIsCiAgICAgICJwcmVmaXgiOiAiIiwK
ICAgICAgInN1ZmZpeCI6ICIiDQogICAgfQ0KICB9XSwKICAicGFydGljaXBhbnQiOiBbewogICAg
ImlkIjoiIiwNCiAgICAiYWRkcmVzcyI6IFt7CiAgICAgICJ1c2UiOiAiIiwNCiAgICAgICJzdHJl
ZXRBZGRyZXNzIjogIiIsDQogICAgICAiY2l0eSI6ICIiLA0KICAgICAgInByb3ZpbmNlIjogIiIs
DQogICAgICAicG9zdGFsQ29kZSI6ICIiLA0KICAgICAgImNvdW50cnkiOiAiIg0KICAgIH1dLA0K
ICAgICJ0ZWxlY29tIjogW3sKICAgICAgICAidXNlIjogIiIsCiAgICAgICAgInR5cGUiOiAiIiwK
ICAgICAgICAidmFsdWUiOiAiIgogICAgfV0sCiAgICAibmFtZSI6IHsKICAgICAgInVzZSI6ICIi
LA0KICAgICAgImdpdmVuIjogWyIiXSwNCiAgICAgICJmYW1pbHkiOiAiIiwKICAgICAgInByZWZp
eCI6ICIiLAogICAgICAic3VmZml4IjogIiINCiAgICB9DQogIH1dLA0KICAibm9uWE1MQm9keSI6
IHsKICAgICJtZWRpYVR5cGUiOiAidGV4dC9wbGFpbiIsCiAgICAiY29udGVudCI6ICIiCiAgfQ0K
fQ0=</inboundTemplate>
        <outboundTemplate encoding="base64">e30=</outboundTemplate>
        <inboundDataType>JSON</inboundDataType>
        <outboundDataType>JSON</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.7.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.7.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.7.1">
          <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.7.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.7.1">
        <elements/>
      </filter>
      <transportName>JavaScript Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
  </destinationConnectors>
  <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
  <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
  <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
  <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
  <properties version="3.7.1">
    <clearGlobalChannelMap>true</clearGlobalChannelMap>
    <messageStorageMode>DEVELOPMENT</messageStorageMode>
    <encryptData>false</encryptData>
    <removeContentOnCompletion>false</removeContentOnCompletion>
    <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
    <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
    <initialState>STARTED</initialState>
    <storeAttachments>true</storeAttachments>
    <metaDataColumns>
      <metaDataColumn>
        <name>SOURCE</name>
        <type>STRING</type>
        <mappingName>mirth_source</mappingName>
      </metaDataColumn>
      <metaDataColumn>
        <name>TYPE</name>
        <type>STRING</type>
        <mappingName>mirth_type</mappingName>
      </metaDataColumn>
    </metaDataColumns>
    <attachmentProperties version="3.7.1">
      <type>None</type>
      <properties/>
    </attachmentProperties>
    <resourceIds class="linked-hash-map">
      <entry>
        <string>Default Resource</string>
        <string>[Default Resource]</string>
      </entry>
    </resourceIds>
  </properties>
  <exportData>
    <metadata>
      <enabled>true</enabled>
      <lastModified>
        <time>1558492615145</time>
        <timezone>America/Vancouver</timezone>
      </lastModified>
      <pruningSettings>
        <archiveEnabled>true</archiveEnabled>
      </pruningSettings>
    </metadata>
    <codeTemplateLibraries>
      <codeTemplateLibrary version="3.7.1">
        <id>a689ef28-f6b5-43bf-95c0-3a7f0cfadaff</id>
        <name>CDA</name>
        <revision>8</revision>
        <lastModified>
          <time>1560190713848</time>
          <timezone>America/Vancouver</timezone>
        </lastModified>
        <description>Functions to build/format/parse CDA message fragments</description>
        <includeNewChannels>true</includeNewChannels>
        <enabledChannelIds>
          <string>e995ffe5-fe5f-4260-a385-98f81c8418fe</string>
          <string>b2f0c503-a881-4126-995e-844c3e7692fd</string>
          <string>f3a65b72-9187-42ef-88cd-1d7626887e2e</string>
          <string>2375f320-7fd5-48cd-b3bb-53c22dab182b</string>
        </enabledChannelIds>
        <disabledChannelIds/>
        <codeTemplates>
          <codeTemplate version="3.7.1">
            <id>9914a610-67bc-42b7-aa87-6a693ed1800c</id>
            <name>Build CDA Address</name>
            <revision>1</revision>
            <lastModified>
              <time>1558462439745</time>
              <timezone>Canada/Pacific</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Build a XML address tag based on &apos;4.2.1.2. Addresses&apos;

	@param {String} use - 
	@param {String} streetAddress - 
	@param {String} city - 
	@param {String} state - 
	@param {String} postalCode - 
	@param {String} country - 
	@return {Object} return the XML address tag
*/
function buildCDAAddress(use, streetAddress, city, state, postalCode, country) {
	var addr = new XML(&quot;&lt;addr&gt;&quot; + streetAddress + &quot;&lt;delimiter/&gt;&lt;/addr&gt;&quot;); // CONF-BC0039
  	addr[&apos;@use&apos;] = use; // CONF-BC0041
  	addr[&apos;city&apos;] = city 
  	addr[&apos;state&apos;] = state; // CONF-BC0045
  	addr[&apos;postalCode&apos;] = postalCode;
  	if (country) {
  		addr[&apos;country&apos;] = country; // CONF-BC0044
  	}
  	return addr;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.7.1">
            <id>d56207a8-0d51-40fb-9437-73815405b6a2</id>
            <name>Build CDA ID</name>
            <revision>1</revision>
            <lastModified>
              <time>1558462439988</time>
              <timezone>Canada/Pacific</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Build a XML id tag

	@param {String} root - 
	@param {String} extension - 
	@return {Object} return the XML id tag
*/
function buildCDAId(root, extension) {
	if (extension != null) {
		var id = new XML(&apos;&lt;id/&gt;&apos;);
	  	id[&apos;@extension&apos;] = extension;
		if (root != null) {
		  	id[&apos;@root&apos;] = root;
		  	// Get the authority name from the GlobalMap (loaded from database)
		  	var authName = globalMap.get(root);
		  	if (authName) {
		  		id[&apos;@assigningAuthorityName&apos;] = authName;
		  	}
		}
	  	return id;
	}
	return new XML(&apos;&lt;id nullFlavor=&quot;NA&quot; /&gt;&apos;);
}

</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.7.1">
            <id>aaee9682-0184-43e5-a80b-32615c89dae0</id>
            <name>Build CDA Name</name>
            <revision>1</revision>
            <lastModified>
              <time>1558462439951</time>
              <timezone>Canada/Pacific</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Build a XML name tag based on &apos;4.2.1.1. Person Names&apos;

	@param {String} use -
	@param {String} family -
	@param {String} given -
	@param {String} prefix -
	@param {String} suffix -
	@return {Object} return the XML name tag
*/
function buildCDAName(use, family, given, prefix, suffix) {
	var name = new XML(&quot;&lt;name/&gt;&quot;);
  	name[&apos;@use&apos;] = use; // CONF-BC0038
  	name[&apos;family&apos;] = family;
  	if (given instanceof Array) { // CONF-BC0031, CONF-BC0034
  		for (var i = 0; i &lt; given.length; i++) {
  			name[&apos;given&apos;][i] = given[i];
  		}
  	} else {
  		name[&apos;given&apos;] = given;
  	}
  	if (prefix) { // CONF-BC0035
  		name[&apos;prefix&apos;] = prefix;
  	}
  	if (suffix) { // CONF-BC0036
  		name[&apos;suffix&apos;] = suffix;
  	}
  	return name;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.7.1">
            <id>39f73e3c-ac8d-46ee-904c-32d6a73d93c0</id>
            <name>Build CDA Telecom</name>
            <revision>1</revision>
            <lastModified>
              <time>1558462439760</time>
              <timezone>Canada/Pacific</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Build a XML telecom tag

	@param {String} use - &apos;H&apos; = home, &apos;W&apos; = work, &apos;M&apos; = mobile
	@param {String} type - &apos;tel&apos; or &apos;email&apos;
	@param {String} value - number of telefone or email address
	@return {Object} return the XML telecom tag
*/
function buildCDATelecom(use, type, value) {
	var telecom = new XML(&quot;&lt;telecom/&gt;&quot;);
  	telecom[&apos;@use&apos;] = use;
  	telecom[&apos;@value&apos;] = type + &quot;:&quot; + value;
  	return telecom;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.7.1">
            <id>978d7943-1810-4652-a684-8f7b6bc3bc11</id>
            <name>Build CDA TemplateId</name>
            <revision>1</revision>
            <lastModified>
              <time>1558462439660</time>
              <timezone>Canada/Pacific</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Build a XML templateId tag

	@param {String} code - 
	@return {Object} return the XML template tag
*/
function buildCDATemplateId(code) {
	var templateId = new XML(&apos;&lt;templateId/&gt;&apos;);

	// Get the attributes from the GlobalMap (loaded from database)
  	var loinc_code = globalMap.get(code);
  	
  	templateId[&apos;@root&apos;] = loinc_code[&apos;template_id&apos;];
  	templateId[&apos;@assigningAuthorityName&apos;] = loinc_code[&apos;template_name&apos;];
		  	
  	return templateId;&#xd;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.7.1">
            <id>0b2ecd99-756c-4a93-9bba-230bf83b0c62</id>
            <name>Format CDA Date</name>
            <revision>1</revision>
            <lastModified>
              <time>1558462439911</time>
              <timezone>Canada/Pacific</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Format the date for the CDA format &apos;yyyyMMdd&apos;

	@param {Date/String} date -
	@return {String} return the formated date
*/
function formatCDADate(date) {
	return DateUtil.convertDate(&quot;yyyy-MM-dd&quot;, &quot;yyyyMMdd&quot;, date);
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.7.1">
            <id>07a8a226-a4d4-4248-b816-00011d888d0f</id>
            <name>Format CDA Date/Time</name>
            <revision>1</revision>
            <lastModified>
              <time>1558462439701</time>
              <timezone>Canada/Pacific</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Format the date/time for the CDA format &apos;yyyyMMddHHmmZZZ&apos;

	@param {Date/String} dateTime - 
	@return {String} return the formated dateTime
*/
function formatCDADateTime(dateTime) {
	return DateUtil.formatDate(&apos;yyyyMMddHHmmZZZ&apos;, new Date(dateTime));
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.7.1">
            <id>f4743440-d5d2-44f2-acd9-35746c48d9b3</id>
            <name>Parse CDA Address</name>
            <revision>2</revision>
            <lastModified>
              <time>1558485022981</time>
              <timezone>Canada/Pacific</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Parse the CDA Address to JSON Object

	@param {String} cdaAddress - 
	@return {String} return the parsed Address object
*/
function parseCDAAddress(cdaAddress) {
	var addr = {};
	addr[&apos;use&apos;] = cdaAddress[&apos;@use&apos;].toString();
	// Try to get the street address from the body of the tag &lt;addr&gt; (Document format)
	var strtAddr = cdaAddress.toString().match(/&lt;addr.*&gt;(.+?)(?=&lt;delimiter\/&gt;)/); // return array of matchs
	if (strtAddr) {
		addr[&apos;streetAddress&apos;] = strtAddr[1]; //.replace(/(&lt;\/?[^&gt;]+&gt;)/gi, &apos;&apos;); // strip xml tags?
	}
	// Try to append the list of &apos;delimiters&apos; (List clinics/providers format)
	if (getArrayOrXmlLength(cdaAddress[&apos;delimiter&apos;]) &gt; 0) {
		for (var i = 0; i &lt; getArrayOrXmlLength(cdaAddress[&apos;delimiter&apos;]); i++) {
			addr[&apos;streetAddress&apos;] = (addr[&apos;streetAddress&apos;] ? addr[&apos;streetAddress&apos;] + &apos; &apos; : &apos;&apos;) + cdaAddress[&apos;delimiter&apos;][i].toString();
		}
		addr[&apos;streetAddress&apos;] = addr[&apos;streetAddress&apos;].trim(); // trim any whitespace from both side of the address
	}
	if (getArrayOrXmlLength(cdaAddress[&apos;city&apos;]) &gt; 0) {
		addr[&apos;city&apos;] = cdaAddress[&apos;city&apos;].toString();
	}
	if (getArrayOrXmlLength(cdaAddress[&apos;province&apos;]) &gt; 0) {
		addr[&apos;province&apos;] = cdaAddress[&apos;state&apos;].toString();
	}
	if (getArrayOrXmlLength(cdaAddress[&apos;postalCode&apos;]) &gt; 0) {
		addr[&apos;postalCode&apos;] = cdaAddress[&apos;postalCode&apos;].toString();
	}
	if (getArrayOrXmlLength(cdaAddress[&apos;country&apos;]) &gt; 0) {
		addr[&apos;country&apos;] = cdaAddress[&apos;country&apos;].toString();
	}
	return addr;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.7.1">
            <id>41f1daa2-e22b-439a-b0b5-16bc108c007e</id>
            <name>Parse CDA Date/Time</name>
            <revision>2</revision>
            <lastModified>
              <time>1559605931391</time>
              <timezone>Canada/Pacific</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Parse the CDA Date/Time to Date object

	@param {String} cdaDateTime - 
	@return {String} return the Date object
*/
function parseCDADateTime(cdaDateTime) {
	if (!cdaDateTime || cdaDateTime.length == 0) {
		return null;
	}
	if (cdaDateTime.length &lt;= 8) {
		return DateUtil.convertDate(&quot;yyyyMMdd&quot;, &quot;yyyy-MM-dd&quot;, cdaDateTime);
	}
	return DateUtil.convertDate(&quot;yyyyMMddHHmmZZZ&quot;, &quot;yyyy-MM-dd\&apos;T\&apos;HH:mm:ssZ&quot;, cdaDateTime);
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.7.1">
            <id>1dc8b8fe-b046-4292-a7c2-218c37bd0d2d</id>
            <name>Parse CDA Date/TIme to DB format</name>
            <revision>2</revision>
            <lastModified>
              <time>1559605899144</time>
              <timezone>Canada/Pacific</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Parse the CDA Date/Time to Date in DB format

	@param {String} cdaDateTime - 
	@return {String} return the Date in DB format
*/
function parseCDADateTimeToDB(cdaDateTime) {
	if (!cdaDateTime || cdaDateTime.length == 0) {
		return null;
	}
	if (cdaDateTime.length &lt;= 8) {
		return DateUtil.convertDate(&quot;yyyyMMdd&quot;, &quot;yyyy-MM-dd&quot;, cdaDateTime);
	}
	return DateUtil.convertDate(&quot;yyyyMMddHHmmZZZ&quot;, &quot;yyyy-MM-dd hh:mm:ss&quot;, cdaDateTime);
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.7.1">
            <id>a2f73260-eb70-4dcc-8b8a-9350c3bec9fd</id>
            <name>Parse CDA ID</name>
            <revision>1</revision>
            <lastModified>
              <time>1558462439596</time>
              <timezone>Canada/Pacific</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Parse the CDA Id to JSON object

	@param {String} cdaID - 
	@return {String} return the parsed ID object
*/
function parseCDAId(cdaID) {
	var id = {};
	if (cdaID[&apos;@extension&apos;]) {
		id[&apos;code&apos;] = cdaID[&apos;@extension&apos;].toString();
	}
	if (cdaID[&apos;@root&apos;]) {
		id[&apos;type&apos;] = cdaID[&apos;@root&apos;].toString();
	}
	return id;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.7.1">
            <id>a0354d90-ffa8-47c5-9776-e41927d2f0d0</id>
            <name>Parse CDA Name</name>
            <revision>2</revision>
            <lastModified>
              <time>1558485070479</time>
              <timezone>Canada/Pacific</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Parse the CDA Name to JSON object

	@param {String} cdaName - 
	@return {String} return the parsed Name object
*/
function parseCDAName(cdaName) {
	var name = {};
	name[&apos;use&apos;] = cdaName[&apos;@use&apos;].toString();
	name[&apos;family&apos;] = cdaName[&apos;family&apos;].toString();
	name[&apos;given&apos;] = [];
	for (var i = 0; i &lt; getArrayOrXmlLength(cdaName[&apos;given&apos;]); i++) {
		name[&apos;given&apos;][i] = cdaName[&apos;given&apos;][i].toString();
	}
	if (getArrayOrXmlLength(cdaName[&apos;prefix&apos;]) &gt; 0) {
		name[&apos;prefix&apos;] = cdaName[&apos;prefix&apos;].toString();
	}
	if (getArrayOrXmlLength(cdaName[&apos;suffix&apos;]) &gt; 0) {
		name[&apos;suffix&apos;] = cdaName[&apos;suffix&apos;].toString();
	}
	return name;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.7.1">
            <id>407e6d63-57cf-42f8-b555-5d6c575f4f55</id>
            <name>Parse CDA Telecom</name>
            <revision>1</revision>
            <lastModified>
              <time>1558462440017</time>
              <timezone>Canada/Pacific</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Parse the CDA Telecom to JSON object

	@param {String} telecom - 
	@return {String} return the parsed Telecom object
*/
function parseCDATelecom(cdaTelecom) {
	var telecom = {};
	telecom[&apos;use&apos;] = cdaTelecom[&apos;@use&apos;].toString();
	var telParts = cdaTelecom[&apos;@value&apos;].split(&apos;:&apos;);
	telecom[&apos;type&apos;] = telParts[0];	
	telecom[&apos;value&apos;] = telParts[1];
	return telecom;
}</code>
            </properties>
          </codeTemplate>
        </codeTemplates>
      </codeTemplateLibrary>
      <codeTemplateLibrary version="3.7.1">
        <id>5d2a129c-da07-49cc-950c-d941a93cd271</id>
        <name>OBIB</name>
        <revision>8</revision>
        <lastModified>
          <time>1560190713725</time>
          <timezone>America/Vancouver</timezone>
        </lastModified>
        <description></description>
        <includeNewChannels>true</includeNewChannels>
        <enabledChannelIds>
          <string>e995ffe5-fe5f-4260-a385-98f81c8418fe</string>
          <string>b2f0c503-a881-4126-995e-844c3e7692fd</string>
          <string>f3a65b72-9187-42ef-88cd-1d7626887e2e</string>
          <string>2375f320-7fd5-48cd-b3bb-53c22dab182b</string>
        </enabledChannelIds>
        <disabledChannelIds/>
        <codeTemplates>
          <codeTemplate version="3.7.1">
            <id>0d5c946b-11fe-4dde-8c69-7d9296ea32a0</id>
            <name>Build Document Storage Message</name>
            <revision>1</revision>
            <lastModified>
              <time>1558462439830</time>
              <timezone>Canada/Pacific</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Build a Document Storage Message.

	@param {String} locationId - 
	@param {String} receiverId - 
	@param {String} documentId - 
	@param {String} messageType - DOCUMENT, RESPONSE or ATTACHMENT
	@param {String} content - 
	@return {String} return the Document Storage Message JSON object
*/
function buildDocumentStorageMessage(locationId, receiverId, documentId, messageType, messageContent) {
	var storageMsg = {};
	storageMsg[&apos;locationId&apos;] = locationId;
	storageMsg[&apos;receiverId&apos;] = receiverId;
	storageMsg[&apos;documentId&apos;] = documentId;
	storageMsg[&apos;messageType&apos;] = messageType;
	storageMsg[&apos;messageContent&apos;] = messageContent;
	return storageMsg;
}
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.7.1">
            <id>738d81a1-d04c-482e-a011-30c61a09b3d3</id>
            <name>Create Array of DocumentAttachment</name>
            <revision>1</revision>
            <lastModified>
              <time>1558462439680</time>
              <timezone>Canada/Pacific</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Create an Array of DocumentAttachment objects from a JSON object

	@param {Object[]} jsonAttachments - 
	@return {DocumentAttachment[]} return the Array of DocumentAttachment
*/
function createDocumentAttachmentArray(jsonAttachments) {
	var attachments = [];
	if (jsonAttachments != null) {
		for (var i = 0; i &lt; jsonAttachments.length; i++) {
			var attachment = jsonAttachments[i];
			attachments.push(new Packages.ca.uvic.leadlab.cdxconnector.messages.DocumentAttachment(
				attachment[&apos;mediaType&apos;],
				attachment[&apos;content&apos;],
				attachment[&apos;hash&apos;],
				attachment[&apos;reference&apos;]));
		}
	}
	return attachments;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.7.1">
            <id>bcd2a30d-111f-4fd3-9724-0e9a2e7dfe50</id>
            <name>Create DatabaseConnection</name>
            <revision>1</revision>
            <lastModified>
              <time>1558462439931</time>
              <timezone>Canada/Pacific</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>GLOBAL_UNDEPLOY</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>GLOBAL_POSTPROCESSOR</contextType>
                <contextType>GLOBAL_DEPLOY</contextType>
                <contextType>GLOBAL_PREPROCESSOR</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Get the DatabaseConnection object

	@return {DatabaseConnection} return the DatabaseConnection object
*/
function getDBConnection() {
	return DatabaseConnectionFactory.createDatabaseConnection(
			globalMap.get(&apos;obib.db.driver&apos;), 
			globalMap.get(&apos;obib.db.url&apos;), 
			globalMap.get(&apos;obib.db.username&apos;) , 
			globalMap.get(&apos;obib.db.password&apos;));
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.7.1">
            <id>60bfd3ac-552a-4d59-ac1d-48fbe4f430b2</id>
            <name>Create Error Message</name>
            <revision>1</revision>
            <lastModified>
              <time>1558462439851</time>
              <timezone>Canada/Pacific</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Create JSON error message

	@param {String} error - Error message
	@param {Object} obibErrors - Associative Array of errors
	@return {String} return the JSON response
*/
function createErrorMessage(error, obibErrors) {
	return JSON.stringify({&apos;status&apos;: &apos;ERROR&apos;, &apos;message&apos;: error, &apos;obibErrors&apos;: obibErrors})
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.7.1">
            <id>f1de696c-f547-49ae-8225-f7e40ed2c87c</id>
            <name>Create Segment Before</name>
            <revision>1</revision>
            <lastModified>
              <time>1558462439720</time>
              <timezone>Canada/Pacific</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Create a new segment and insert it before the target segment.
	
	@param {String} name - The name of the segment to create.
	@param {String} segment - The existing segment that the new segment will be inserted before.
	@return {String} return The existing segment that the new segment will be inserted after.
*/
function createSegmentBefore(name, segment) {
	var msgObj = segment;
   	while (msgObj.parent() != undefined) { 
		msgObj = msgObj.parent(); 
	}
     msgObj.insertChildBefore(segment[0], new XML(&apos;&lt;&apos; + name + &apos;&gt;&lt;/&apos; + name + &apos;&gt;&apos;));
   	return msgObj.child(segment[0].childIndex() - 1);
}
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.7.1">
            <id>e83b8bbf-433a-4c3d-88a2-16f4132b38af</id>
            <name>Handle Return Message</name>
            <revision>1</revision>
            <lastModified>
              <time>1558462439790</time>
              <timezone>Canada/Pacific</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Handle the return message creation.

	@param {Object} responseStatus - 
	@param {Object} responseStatusMessage - 
	@param {Object} responseMessage - 
	@param {Function} createMessage - Callback function responsible for creating and return the result message.
	@return {String} return the stringify json message
*/
function handleResponseMessage(responseStatus, responseStatusMessage, responseMessage, createMessage) {
	if (responseStatus === SENT) { // process only SENT messages
		return JSON.stringify(createMessage()); // Convert the json to string and return it
	} else if (responseStatus === ERROR) {
		throw &quot;Error Message: &apos;&quot; + responseStatusMessage.toString() 
			+ &quot;&apos;\n Original Message: &apos;&quot; + msg.toString() + &quot;&apos;&quot;;
	} else {
		throw &quot;Not able to handle the response code: &apos;&quot; + responseStatus 
		+ &quot;&apos; \n Error Message: &apos;&quot; + responseStatusMessage.toString() 
		+ &quot;&apos;\n Original Message: &apos;&quot; + msg.toString() + &quot;&apos;&quot;;
	}
}
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.7.1">
            <id>dfd86988-26e1-4d97-b81d-fee49e303272</id>
            <name>Store OBIB Error</name>
            <revision>1</revision>
            <lastModified>
              <time>1558462439811</time>
              <timezone>Canada/Pacific</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Store the error as an &apos;associative array&apos; in the channel map.
	To retrieve the array of errors use &apos;channelMap.get(&apos;obibErrors&apos;)&apos;

	@param {String} errorCode - the key of the associative array
	@param {String} errorMessage - the value of the associative array
*/
function storeOBIBError(errorCode, errorMessage) {
	var obibErrors = channelMap.get(&apos;obibErrors&apos;);
	if (obibErrors == null) {
		obibErrors = new Object();
	}
	obibErrors[errorCode] = errorMessage;
	channelMap.put(&apos;obibErrors&apos;, obibErrors);
}</code>
            </properties>
          </codeTemplate>
        </codeTemplates>
      </codeTemplateLibrary>
    </codeTemplateLibraries>
  </exportData>
</channel>