<channel version="3.7.1">
  <id>e995ffe5-fe5f-4260-a385-98f81c8418fe</id>
  <nextMetaDataId>5</nextMetaDataId>
  <name>Document Storage</name>
  <description></description>
  <revision>1</revision>
  <sourceConnector version="3.7.1">
    <metaDataId>0</metaDataId>
    <name>sourceConnector</name>
    <properties class="com.mirth.connect.connectors.vm.VmReceiverProperties" version="3.7.1">
      <pluginProperties/>
      <sourceConnectorProperties version="3.7.1">
        <responseVariable>None</responseVariable>
        <respondAfterProcessing>true</respondAfterProcessing>
        <processBatch>false</processBatch>
        <firstResponse>false</firstResponse>
        <processingThreads>1</processingThreads>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
        <queueBufferSize>1000</queueBufferSize>
      </sourceConnectorProperties>
    </properties>
    <transformer version="3.7.1">
      <elements>
        <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.7.1">
          <name>Document Storage Source</name>
          <sequenceNumber>0</sequenceNumber>
          <enabled>true</enabled>
          <script>logger.debug(&apos;Document Storage Source&apos;);

// Store the ids in the channel map
channelMap.put(&apos;locationId&apos;, msg[&apos;locationId&apos;]);
channelMap.put(&apos;documentId&apos;, msg[&apos;documentId&apos;]);

// Store the message content in the tmp message
if (msg[&apos;messageType&apos;] !== &apos;ATTACHMENT&apos;) { // DOCUMENT and RESONSE: uses the XML as template
	tmp = new XML(msg[&apos;messageContent&apos;]);
} else { // ATTACHMENT: convert the JSON to XML
	tmp = JsonUtil.toXml(msg[&apos;messageContent&apos;]);
}</script>
        </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
        <com.mirth.connect.plugins.destinationsetfilter.DestinationSetFilterStep version="3.7.1">
          <name>Filter destination(s) if &quot;msg[&apos;messageType&apos;]&quot; equals &quot;DOCUMENT&quot;</name>
          <sequenceNumber>1</sequenceNumber>
          <enabled>true</enabled>
          <behavior>REMOVE_ALL_EXCEPT</behavior>
          <metaDataIds>
            <int>1</int>
          </metaDataIds>
          <field>msg[&apos;messageType&apos;]</field>
          <condition>EQUALS</condition>
          <values>
            <string>&quot;DOCUMENT&quot;</string>
          </values>
        </com.mirth.connect.plugins.destinationsetfilter.DestinationSetFilterStep>
        <com.mirth.connect.plugins.destinationsetfilter.DestinationSetFilterStep version="3.7.1">
          <name>Filter destination(s) if &quot;msg[&apos;messageType&apos;]&quot; equals &quot;RESPONSE&quot;</name>
          <sequenceNumber>2</sequenceNumber>
          <enabled>true</enabled>
          <behavior>REMOVE_ALL_EXCEPT</behavior>
          <metaDataIds>
            <int>2</int>
          </metaDataIds>
          <field>msg[&apos;messageType&apos;]</field>
          <condition>EQUALS</condition>
          <values>
            <string>&quot;RESPONSE&quot;</string>
          </values>
        </com.mirth.connect.plugins.destinationsetfilter.DestinationSetFilterStep>
        <com.mirth.connect.plugins.destinationsetfilter.DestinationSetFilterStep version="3.7.1">
          <name>Filter destination(s) if &quot;msg[&apos;messageType&apos;]&quot; equals &quot;ATTACHMENT&quot;</name>
          <sequenceNumber>3</sequenceNumber>
          <enabled>true</enabled>
          <behavior>REMOVE_ALL_EXCEPT</behavior>
          <metaDataIds>
            <int>4</int>
          </metaDataIds>
          <field>msg[&apos;messageType&apos;]</field>
          <condition>EQUALS</condition>
          <values>
            <string>&quot;ATTACHMENT&quot;</string>
          </values>
        </com.mirth.connect.plugins.destinationsetfilter.DestinationSetFilterStep>
      </elements>
      <inboundTemplate encoding="base64">ewoJImxvY2F0aW9uSWQiOiAiIiwKCSJkb2N1bWVudElkIjogIiIsCgkibWVzc2FnZVR5cGUiOiAi
IiwKCSJtZXNzYWdlQ29udGVudCI6ICIiCn0=</inboundTemplate>
      <outboundTemplate encoding="base64">PGNvbnRlbnQvPg==</outboundTemplate>
      <inboundDataType>JSON</inboundDataType>
      <outboundDataType>HL7V3</outboundDataType>
      <inboundProperties class="com.mirth.connect.plugins.datatypes.json.JSONDataTypeProperties" version="3.7.1">
        <batchProperties class="com.mirth.connect.plugins.datatypes.json.JSONBatchProperties" version="3.7.1">
          <splitType>JavaScript</splitType>
          <batchScript></batchScript>
        </batchProperties>
      </inboundProperties>
      <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.7.1">
        <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.7.1">
          <stripNamespaces>false</stripNamespaces>
        </serializationProperties>
        <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.7.1">
          <splitType>JavaScript</splitType>
          <batchScript></batchScript>
        </batchProperties>
      </outboundProperties>
    </transformer>
    <filter version="3.7.1">
      <elements/>
    </filter>
    <transportName>Channel Reader</transportName>
    <mode>SOURCE</mode>
    <enabled>true</enabled>
    <waitForPrevious>true</waitForPrevious>
  </sourceConnector>
  <destinationConnectors>
    <connector version="3.7.1">
      <metaDataId>1</metaDataId>
      <name>Store CDA Document</name>
      <properties class="com.mirth.connect.connectors.jdbc.DatabaseDispatcherProperties" version="3.7.1">
        <pluginProperties/>
        <destinationConnectorProperties version="3.7.1">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
          <reattachAttachments>true</reattachAttachments>
        </destinationConnectorProperties>
        <driver>com.mysql.jdbc.Driver</driver>
        <url>jdbc:mysql://localhost:3306/OBIB_DB</url>
        <username></username>
        <password></password>
        <query>logger.debug(&apos;Store CDA Document&apos;);

try {
	// Get the Database Connection
	var dbConn = globalChannelMap.get(&apos;dbConnection&apos;);
	if (!dbConn) { // sanity check
		dbConn = getDBConnection();
		globalChannelMap.put(&apos;dbConnection&apos;, dbConn);
	}
	
	// Build the insert script
	var insertString = &quot;INSERT INTO document (document_id, document_date, document_content, location_id, destination_id) &quot; 
		+ &quot;VALUES (&apos;&quot; + $(&apos;documentId&apos;) + &quot;&apos;, &apos;&quot; + $(&apos;documentDate&apos;) + &quot;&apos;, &apos;&quot; + $(&apos;documentContent&apos;) + &quot;&apos;, &apos;&quot; + $(&apos;locationId&apos;) + &quot;&apos;, &apos;&quot; + $(&apos;destinationId&apos;) + &quot;&apos;)&quot;;

	// Execute the insertion
	try {
		var result = dbConn.executeUpdate(insertString);
	} catch(e) {
		logger.error(&apos;Error saving document &quot;&apos; + $(&apos;documentId&apos;) + &apos;&quot; into database: &apos; + e);
		dbConn.rollback();
	}
} catch(err) {
	logger.error(&apos;Error on &quot;Store CDA Document&quot;: &apos; + err);
}</query>
        <useScript>true</useScript>
      </properties>
      <transformer version="3.7.1">
        <elements>
          <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.7.1">
            <name>Get Document Metadata</name>
            <sequenceNumber>0</sequenceNumber>
            <enabled>true</enabled>
            <script>//channelMap.put(&apos;documentId&apos;, msg[&apos;id&apos;][&apos;@extension&apos;].toString()); //get on Source Transformer
channelMap.put(&apos;documentDate&apos;, parseCDADateTimeToDB(msg[&apos;effectiveTime&apos;][&apos;@value&apos;].toString()));
channelMap.put(&apos;documentContent&apos;, msg.toString());
//channelMap.put(&apos;locationId&apos;, &apos;&apos;); //get on Source Transformer
channelMap.put(&apos;destinationId&apos;, &apos;&apos;);</script>
          </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
        </elements>
        <inboundTemplate encoding="base64">PENsaW5pY2FsRG9jdW1lbnQgeG1sbnM9InVybjpobDctb3JnOnYzIiBjbGFzc0NvZGU9IkRPQ0NM
SU4iIG1vb2RDb2RlPSJFVk4iPgogICAgPGlkIGFzc2lnbmluZ0F1dGhvcml0eU5hbWU9IkNEWCBD
bGluaWNhbCBEb2N1bWVudCBJRCIgZXh0ZW5zaW9uPSIiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgz
LjMuMjc3LjEwMC4zIi8+CiAgICA8ZWZmZWN0aXZlVGltZSB2YWx1ZT0iIi8+CiAgICA8cmVjb3Jk
VGFyZ2V0IGNvbnRleHRDb250cm9sQ29kZT0iT1AiIHR5cGVDb2RlPSJSQ1QiPgogICAgICAgIDxw
YXRpZW50Um9sZSBjbGFzc0NvZGU9IlBBVCIvPgogICAgPC9yZWNvcmRUYXJnZXQ+CiAgICA8YXV0
aG9yIGNvbnRleHRDb250cm9sQ29kZT0iT1AiIHR5cGVDb2RlPSJBVVQiPgogICAgICAgIDx0aW1l
IHZhbHVlPSIiLz4KICAgICAgICA8YXNzaWduZWRBdXRob3IgY2xhc3NDb2RlPSJBU1NJR05FRCI+
CiAgICAgICAgICAgIDxpZCBudWxsRmxhdm9yPSJOQSIvPgogICAgICAgIDwvYXNzaWduZWRBdXRo
b3I+CiAgICA8L2F1dGhvcj4KICAgIDxhdXRob3IgY29udGV4dENvbnRyb2xDb2RlPSJPUCIgdHlw
ZUNvZGU9IkFVVCI+CiAgICAgICAgPHRpbWUgdmFsdWU9IiIvPgogICAgICAgIDxhc3NpZ25lZEF1
dGhvciBjbGFzc0NvZGU9IkFTU0lHTkVEIj4KICAgICAgICAgICAgPGlkIGV4dGVuc2lvbj0iIi8+
CiAgICAgICAgPC9hc3NpZ25lZEF1dGhvcj4KICAgIDwvYXV0aG9yPgogICAgPGluZm9ybWF0aW9u
UmVjaXBpZW50IHR5cGVDb2RlPSLigJxQUkNQ4oCdIj4KICAgICAgICA8aW50ZW5kZWRSZWNpcGll
bnQgY2xhc3NDb2RlPSJBU1NJR05FRCI+CiAgICAgICAgICAgIDxpZCBleHRlbnNpb249IiIvPgog
ICAgICAgIDwvaW50ZW5kZWRSZWNpcGllbnQ+CiAgICA8L2luZm9ybWF0aW9uUmVjaXBpZW50Pgo8
L0NsaW5pY2FsRG9jdW1lbnQ+Cg==</inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>HL7V3</inboundDataType>
        <outboundDataType>HL7V3</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.7.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.7.1">
            <stripNamespaces>false</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.7.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.7.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.7.1">
            <stripNamespaces>false</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.7.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.7.1">
        <elements/>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>HL7V3</inboundDataType>
        <outboundDataType>HL7V3</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.7.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.7.1">
            <stripNamespaces>false</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.7.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.7.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.7.1">
            <stripNamespaces>false</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.7.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.7.1">
        <elements/>
      </filter>
      <transportName>Database Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
    <connector version="3.7.1">
      <metaDataId>2</metaDataId>
      <name>Store CDA Response</name>
      <properties class="com.mirth.connect.connectors.jdbc.DatabaseDispatcherProperties" version="3.7.1">
        <pluginProperties/>
        <destinationConnectorProperties version="3.7.1">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
          <reattachAttachments>true</reattachAttachments>
        </destinationConnectorProperties>
        <driver>com.mysql.jdbc.Driver</driver>
        <url>jdbc:mysql://localhost:3306/OBIB_DB</url>
        <username></username>
        <password></password>
        <query>logger.debug(&apos;Store CDA Response&apos;);

try {
	// Get the Database Connection
	var dbConn = globalChannelMap.get(&apos;dbConnection&apos;);
	if (!dbConn) { // sanity check
		dbConn = getDBConnection();
		globalChannelMap.put(&apos;dbConnection&apos;, dbConn);
	}
	
	// Build the insert script
	var insertString = &quot;INSERT INTO document_response (response_id, response_date, response_status, response_content, document_id) &quot; 
		+ &quot;VALUES (&apos;&quot; + $(&apos;responseId&apos;) + &quot;&apos;, &apos;&quot; + $(&apos;responseDate&apos;) + &quot;&apos;, &apos;&quot; + $(&apos;responseStatus&apos;) + &quot;&apos;, &apos;&quot; + $(&apos;responseContent&apos;) + &quot;&apos;, &apos;&quot; + $(&apos;documentId&apos;) + &quot;&apos;)&quot;;

	// Execute the insertion
	try {
		var result = dbConn.executeUpdate(insertString);
	} catch(e) {
		logger.error(&apos;Error saving response for document &quot;&apos; + $(&apos;documentId&apos;) + &apos;&quot; into database: &apos; + e);
		dbConn.rollback();
	}
} catch(err) {
	logger.error(&apos;Error on &quot;Store CDA Response&quot;: &apos; + err);
}</query>
        <useScript>true</useScript>
      </properties>
      <transformer version="3.7.1">
        <elements>
          <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.7.1">
            <name>Get Response Metadata</name>
            <sequenceNumber>0</sequenceNumber>
            <enabled>true</enabled>
            <script>channelMap.put(&apos;responseId&apos;, msg[&apos;id&apos;][&apos;@extension&apos;].toString());
channelMap.put(&apos;responseDate&apos;, parseCDADateTimeToDB(msg[&apos;creationTime&apos;][&apos;@value&apos;].toString()));
channelMap.put(&apos;responseStatus&apos;, msg[&apos;acknowledgement&apos;][&apos;acknowledgementDetail&apos;][&apos;@typeCode&apos;].toString());
channelMap.put(&apos;responseContent&apos;, msg.toString());
//channelMap.put(&apos;documentId&apos;, &apos;&apos;); // get on Source Transformer</script>
          </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
        </elements>
        <inboundTemplate encoding="base64">PE1DQ0lfSU4wMDAwMDJVVjAxIHhtbG5zPSJ1cm46aGw3LW9yZzp2MyIgSVRTVmVyc2lvbj0iWE1M
XzEuMCI+CiAgICA8aWQgZXh0ZW5zaW9uPSIiIHJvb3Q9IjIuMTYuODQwLjEuMTEzODgzLjMuMjc3
LjEwMC4xIi8+CiAgICA8Y3JlYXRpb25UaW1lIHZhbHVlPSIiLz4KICAgIDxhY2NlcHRBY2tDb2Rl
IGNvZGU9IiIvPgogICAgPHJlY2VpdmVyPgogICAgICAgIDxkZXZpY2UgY2xhc3NDb2RlPSJERVYi
IGRldGVybWluZXJDb2RlPSJJTlNUQU5DRSI+CiAgICAgICAgICAgIDxpZCBudWxsRmxhdm9yPSJO
QSIvPgogICAgICAgICAgICA8YXNBZ2VudCBjbGFzc0NvZGU9IkFHTlQiPgogICAgICAgICAgICAg
ICAgPHJlcHJlc2VudGVkT3JnYW5pemF0aW9uIGNsYXNzQ29kZT0iT1JHIiBkZXRlcm1pbmVyQ29k
ZT0iSU5TVEFOQ0UiLz4KICAgICAgICAgICAgPC9hc0FnZW50PgogICAgICAgIDwvZGV2aWNlPgog
ICAgPC9yZWNlaXZlcj4KICAgIDxzZW5kZXI+CiAgICAgICAgPGRldmljZSBjbGFzc0NvZGU9IkRF
ViIgZGV0ZXJtaW5lckNvZGU9IklOU1RBTkNFIj4KICAgICAgICAgICAgPGlkIG51bGxGbGF2b3I9
Ik5BIi8+CiAgICAgICAgICAgIDxhc0FnZW50IGNsYXNzQ29kZT0iQUdOVCI+CiAgICAgICAgICAg
ICAgICA8cmVwcmVzZW50ZWRPcmdhbml6YXRpb24gY2xhc3NDb2RlPSJPUkciIGRldGVybWluZXJD
b2RlPSJJTlNUQU5DRSIvPgogICAgICAgICAgICA8L2FzQWdlbnQ+CiAgICAgICAgPC9kZXZpY2U+
CiAgICA8L3NlbmRlcj4KICAgIDxhY2tub3dsZWRnZW1lbnQgdHlwZUNvZGU9IkNBIj4KICAgICAg
ICA8dGFyZ2V0TWVzc2FnZT4KICAgICAgICAgICAgPGlkIGV4dGVuc2lvbj0iIiByb290PSIyLjE2
Ljg0MC4xLjExMzg4My4zLjI3Ny4xMDAuMSIvPgogICAgICAgIDwvdGFyZ2V0TWVzc2FnZT4KICAg
ICAgICA8YWNrbm93bGVkZ2VtZW50RGV0YWlsIHR5cGVDb2RlPSIiPgogICAgICAgICAgICA8dGV4
dC8+CiAgICAgICAgPC9hY2tub3dsZWRnZW1lbnREZXRhaWw+CiAgICA8L2Fja25vd2xlZGdlbWVu
dD4KPC9NQ0NJX0lOMDAwMDAyVVYwMT4K</inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>HL7V3</inboundDataType>
        <outboundDataType>HL7V3</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.7.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.7.1">
            <stripNamespaces>false</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.7.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.7.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.7.1">
            <stripNamespaces>false</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.7.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.7.1">
        <elements/>
        <inboundDataType>HL7V3</inboundDataType>
        <outboundDataType>HL7V3</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.7.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.7.1">
            <stripNamespaces>false</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.7.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.7.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.7.1">
            <stripNamespaces>false</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.7.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.7.1">
        <elements/>
      </filter>
      <transportName>Database Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>false</waitForPrevious>
    </connector>
    <connector version="3.7.1">
      <metaDataId>4</metaDataId>
      <name>Store CDA Attachment</name>
      <properties class="com.mirth.connect.connectors.jdbc.DatabaseDispatcherProperties" version="3.7.1">
        <pluginProperties/>
        <destinationConnectorProperties version="3.7.1">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>10000</retryIntervalMillis>
          <regenerateTemplate>false</regenerateTemplate>
          <retryCount>0</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>false</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
          <reattachAttachments>true</reattachAttachments>
        </destinationConnectorProperties>
        <driver>com.mysql.jdbc.Driver</driver>
        <url>jdbc:mysql://localhost:3306/OBIB_DB</url>
        <username></username>
        <password></password>
        <query>logger.debug(&apos;Store CDA Attachment&apos;);

try {
	// Get the Database Connection
	var dbConn = globalChannelMap.get(&apos;dbConnection&apos;);
	if (!dbConn) { // sanity check
		dbConn = getDBConnection();
		globalChannelMap.put(&apos;dbConnection&apos;, dbConn);
	}
	
	// Build the insert script
	var insertString = &quot;INSERT INTO document_attachment (document_id, media_type, reference_name, content, hash_value) &quot; 
		+ &quot;VALUES (&apos;&quot; + $(&apos;documentId&apos;) + &quot;&apos;, &apos;&quot; + $(&apos;mediaType&apos;) + &quot;&apos;, &apos;&quot; + $(&apos;referenceName&apos;) + &quot;&apos;, &apos;&quot; + $(&apos;content&apos;) + &quot;&apos;, &apos;&quot; + $(&apos;hashValue&apos;) + &quot;&apos;)&quot;;

	// Execute the insertion
	try {
		var result = dbConn.executeUpdate(insertString);
	} catch(e) {
		logger.error(&apos;Error saving attachment &quot;&apos; + $(&apos;documentId&apos;) + &apos;&quot; into database: &apos; + e);
		dbConn.rollback();
	}
} catch(err) {
	logger.error(&apos;Error on &quot;Store CDA Attachment&quot;: &apos; + err);
}</query>
        <useScript>true</useScript>
      </properties>
      <transformer version="3.7.1">
        <elements>
          <com.mirth.connect.plugins.javascriptstep.JavaScriptStep version="3.7.1">
            <name>Get Attachment Metadata</name>
            <sequenceNumber>0</sequenceNumber>
            <enabled>true</enabled>
            <script>channelMap.put(&apos;mediaType&apos;, msg[&apos;mediaType&apos;].toString());
channelMap.put(&apos;referenceName&apos;, msg[&apos;reference&apos;].toString());
channelMap.put(&apos;content&apos;, msg[&apos;content&apos;].toString());
channelMap.put(&apos;hashValue&apos;, msg[&apos;hash&apos;].toString());</script>
          </com.mirth.connect.plugins.javascriptstep.JavaScriptStep>
        </elements>
        <inboundTemplate encoding="base64">PGF0dGFjaG1lbnRzPgogIDxtZWRpYVR5cGUvPgogIDxyZWZlcmVuY2UvPgogIDxjb250ZW50Lz4K
ICA8aGFzaC8+CjwvYXR0YWNobWVudHM+</inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>HL7V3</inboundDataType>
        <outboundDataType>HL7V3</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.7.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.7.1">
            <stripNamespaces>false</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.7.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.7.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.7.1">
            <stripNamespaces>false</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.7.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.7.1">
        <elements/>
        <inboundDataType>HL7V3</inboundDataType>
        <outboundDataType>HL7V3</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.7.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.7.1">
            <stripNamespaces>false</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.7.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3DataTypeProperties" version="3.7.1">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3SerializationProperties" version="3.7.1">
            <stripNamespaces>false</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.hl7v3.HL7V3BatchProperties" version="3.7.1">
            <splitType>JavaScript</splitType>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.7.1">
        <elements/>
      </filter>
      <transportName>Database Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>false</waitForPrevious>
    </connector>
  </destinationConnectors>
  <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
  <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
  <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data

/******** Create a Database Connection ********/
dbConn = getDBConnection();
globalChannelMap.put(&apos;dbConnection&apos;, dbConn);

return;</deployScript>
  <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data

/******** Close the Database Connection ********/
var dbConn = globalChannelMap.get(&apos;dbConnection&apos;);
if (!dbConn) {
	dbConn.close();
}

return;</undeployScript>
  <properties version="3.7.1">
    <clearGlobalChannelMap>true</clearGlobalChannelMap>
    <messageStorageMode>DEVELOPMENT</messageStorageMode>
    <encryptData>false</encryptData>
    <removeContentOnCompletion>false</removeContentOnCompletion>
    <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
    <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
    <initialState>STARTED</initialState>
    <storeAttachments>true</storeAttachments>
    <metaDataColumns>
      <metaDataColumn>
        <name>SOURCE</name>
        <type>STRING</type>
        <mappingName>mirth_source</mappingName>
      </metaDataColumn>
      <metaDataColumn>
        <name>TYPE</name>
        <type>STRING</type>
        <mappingName>mirth_type</mappingName>
      </metaDataColumn>
    </metaDataColumns>
    <attachmentProperties version="3.7.1">
      <type>None</type>
      <properties/>
    </attachmentProperties>
    <resourceIds class="linked-hash-map">
      <entry>
        <string>Default Resource</string>
        <string>[Default Resource]</string>
      </entry>
    </resourceIds>
  </properties>
  <exportData>
    <metadata>
      <enabled>true</enabled>
      <lastModified>
        <time>1557261149089</time>
        <timezone>America/Vancouver</timezone>
      </lastModified>
      <pruningSettings>
        <archiveEnabled>true</archiveEnabled>
      </pruningSettings>
    </metadata>
    <codeTemplateLibraries>
      <codeTemplateLibrary version="3.7.1">
        <id>a689ef28-f6b5-43bf-95c0-3a7f0cfadaff</id>
        <name>CDA</name>
        <revision>8</revision>
        <lastModified>
          <time>1560190713848</time>
          <timezone>America/Vancouver</timezone>
        </lastModified>
        <description>Functions to build/format/parse CDA message fragments</description>
        <includeNewChannels>true</includeNewChannels>
        <enabledChannelIds>
          <string>e995ffe5-fe5f-4260-a385-98f81c8418fe</string>
          <string>b2f0c503-a881-4126-995e-844c3e7692fd</string>
          <string>f3a65b72-9187-42ef-88cd-1d7626887e2e</string>
          <string>2375f320-7fd5-48cd-b3bb-53c22dab182b</string>
        </enabledChannelIds>
        <disabledChannelIds/>
        <codeTemplates>
          <codeTemplate version="3.7.1">
            <id>9914a610-67bc-42b7-aa87-6a693ed1800c</id>
            <name>Build CDA Address</name>
            <revision>1</revision>
            <lastModified>
              <time>1558462439745</time>
              <timezone>Canada/Pacific</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Build a XML address tag based on &apos;4.2.1.2. Addresses&apos;

	@param {String} use - 
	@param {String} streetAddress - 
	@param {String} city - 
	@param {String} state - 
	@param {String} postalCode - 
	@param {String} country - 
	@return {Object} return the XML address tag
*/
function buildCDAAddress(use, streetAddress, city, state, postalCode, country) {
	var addr = new XML(&quot;&lt;addr&gt;&quot; + streetAddress + &quot;&lt;delimiter/&gt;&lt;/addr&gt;&quot;); // CONF-BC0039
  	addr[&apos;@use&apos;] = use; // CONF-BC0041
  	addr[&apos;city&apos;] = city 
  	addr[&apos;state&apos;] = state; // CONF-BC0045
  	addr[&apos;postalCode&apos;] = postalCode;
  	if (country) {
  		addr[&apos;country&apos;] = country; // CONF-BC0044
  	}
  	return addr;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.7.1">
            <id>d56207a8-0d51-40fb-9437-73815405b6a2</id>
            <name>Build CDA ID</name>
            <revision>1</revision>
            <lastModified>
              <time>1558462439988</time>
              <timezone>Canada/Pacific</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Build a XML id tag

	@param {String} root - 
	@param {String} extension - 
	@return {Object} return the XML id tag
*/
function buildCDAId(root, extension) {
	if (extension != null) {
		var id = new XML(&apos;&lt;id/&gt;&apos;);
	  	id[&apos;@extension&apos;] = extension;
		if (root != null) {
		  	id[&apos;@root&apos;] = root;
		  	// Get the authority name from the GlobalMap (loaded from database)
		  	var authName = globalMap.get(root);
		  	if (authName) {
		  		id[&apos;@assigningAuthorityName&apos;] = authName;
		  	}
		}
	  	return id;
	}
	return new XML(&apos;&lt;id nullFlavor=&quot;NA&quot; /&gt;&apos;);
}

</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.7.1">
            <id>aaee9682-0184-43e5-a80b-32615c89dae0</id>
            <name>Build CDA Name</name>
            <revision>1</revision>
            <lastModified>
              <time>1558462439951</time>
              <timezone>Canada/Pacific</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Build a XML name tag based on &apos;4.2.1.1. Person Names&apos;

	@param {String} use -
	@param {String} family -
	@param {String} given -
	@param {String} prefix -
	@param {String} suffix -
	@return {Object} return the XML name tag
*/
function buildCDAName(use, family, given, prefix, suffix) {
	var name = new XML(&quot;&lt;name/&gt;&quot;);
  	name[&apos;@use&apos;] = use; // CONF-BC0038
  	name[&apos;family&apos;] = family;
  	if (given instanceof Array) { // CONF-BC0031, CONF-BC0034
  		for (var i = 0; i &lt; given.length; i++) {
  			name[&apos;given&apos;][i] = given[i];
  		}
  	} else {
  		name[&apos;given&apos;] = given;
  	}
  	if (prefix) { // CONF-BC0035
  		name[&apos;prefix&apos;] = prefix;
  	}
  	if (suffix) { // CONF-BC0036
  		name[&apos;suffix&apos;] = suffix;
  	}
  	return name;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.7.1">
            <id>39f73e3c-ac8d-46ee-904c-32d6a73d93c0</id>
            <name>Build CDA Telecom</name>
            <revision>1</revision>
            <lastModified>
              <time>1558462439760</time>
              <timezone>Canada/Pacific</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Build a XML telecom tag

	@param {String} use - &apos;H&apos; = home, &apos;W&apos; = work, &apos;M&apos; = mobile
	@param {String} type - &apos;tel&apos; or &apos;email&apos;
	@param {String} value - number of telefone or email address
	@return {Object} return the XML telecom tag
*/
function buildCDATelecom(use, type, value) {
	var telecom = new XML(&quot;&lt;telecom/&gt;&quot;);
  	telecom[&apos;@use&apos;] = use;
  	telecom[&apos;@value&apos;] = type + &quot;:&quot; + value;
  	return telecom;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.7.1">
            <id>978d7943-1810-4652-a684-8f7b6bc3bc11</id>
            <name>Build CDA TemplateId</name>
            <revision>1</revision>
            <lastModified>
              <time>1558462439660</time>
              <timezone>Canada/Pacific</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Build a XML templateId tag

	@param {String} code - 
	@return {Object} return the XML template tag
*/
function buildCDATemplateId(code) {
	var templateId = new XML(&apos;&lt;templateId/&gt;&apos;);

	// Get the attributes from the GlobalMap (loaded from database)
  	var loinc_code = globalMap.get(code);
  	
  	templateId[&apos;@root&apos;] = loinc_code[&apos;template_id&apos;];
  	templateId[&apos;@assigningAuthorityName&apos;] = loinc_code[&apos;template_name&apos;];
		  	
  	return templateId;&#xd;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.7.1">
            <id>0b2ecd99-756c-4a93-9bba-230bf83b0c62</id>
            <name>Format CDA Date</name>
            <revision>1</revision>
            <lastModified>
              <time>1558462439911</time>
              <timezone>Canada/Pacific</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Format the date for the CDA format &apos;yyyyMMdd&apos;

	@param {Date/String} date -
	@return {String} return the formated date
*/
function formatCDADate(date) {
	return DateUtil.convertDate(&quot;yyyy-MM-dd&quot;, &quot;yyyyMMdd&quot;, date);
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.7.1">
            <id>07a8a226-a4d4-4248-b816-00011d888d0f</id>
            <name>Format CDA Date/Time</name>
            <revision>1</revision>
            <lastModified>
              <time>1558462439701</time>
              <timezone>Canada/Pacific</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Format the date/time for the CDA format &apos;yyyyMMddHHmmZZZ&apos;

	@param {Date/String} dateTime - 
	@return {String} return the formated dateTime
*/
function formatCDADateTime(dateTime) {
	return DateUtil.formatDate(&apos;yyyyMMddHHmmZZZ&apos;, new Date(dateTime));
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.7.1">
            <id>f4743440-d5d2-44f2-acd9-35746c48d9b3</id>
            <name>Parse CDA Address</name>
            <revision>2</revision>
            <lastModified>
              <time>1558485022981</time>
              <timezone>Canada/Pacific</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Parse the CDA Address to JSON Object

	@param {String} cdaAddress - 
	@return {String} return the parsed Address object
*/
function parseCDAAddress(cdaAddress) {
	var addr = {};
	addr[&apos;use&apos;] = cdaAddress[&apos;@use&apos;].toString();
	// Try to get the street address from the body of the tag &lt;addr&gt; (Document format)
	var strtAddr = cdaAddress.toString().match(/&lt;addr.*&gt;(.+?)(?=&lt;delimiter\/&gt;)/); // return array of matchs
	if (strtAddr) {
		addr[&apos;streetAddress&apos;] = strtAddr[1]; //.replace(/(&lt;\/?[^&gt;]+&gt;)/gi, &apos;&apos;); // strip xml tags?
	}
	// Try to append the list of &apos;delimiters&apos; (List clinics/providers format)
	if (getArrayOrXmlLength(cdaAddress[&apos;delimiter&apos;]) &gt; 0) {
		for (var i = 0; i &lt; getArrayOrXmlLength(cdaAddress[&apos;delimiter&apos;]); i++) {
			addr[&apos;streetAddress&apos;] = (addr[&apos;streetAddress&apos;] ? addr[&apos;streetAddress&apos;] + &apos; &apos; : &apos;&apos;) + cdaAddress[&apos;delimiter&apos;][i].toString();
		}
		addr[&apos;streetAddress&apos;] = addr[&apos;streetAddress&apos;].trim(); // trim any whitespace from both side of the address
	}
	if (getArrayOrXmlLength(cdaAddress[&apos;city&apos;]) &gt; 0) {
		addr[&apos;city&apos;] = cdaAddress[&apos;city&apos;].toString();
	}
	if (getArrayOrXmlLength(cdaAddress[&apos;province&apos;]) &gt; 0) {
		addr[&apos;province&apos;] = cdaAddress[&apos;state&apos;].toString();
	}
	if (getArrayOrXmlLength(cdaAddress[&apos;postalCode&apos;]) &gt; 0) {
		addr[&apos;postalCode&apos;] = cdaAddress[&apos;postalCode&apos;].toString();
	}
	if (getArrayOrXmlLength(cdaAddress[&apos;country&apos;]) &gt; 0) {
		addr[&apos;country&apos;] = cdaAddress[&apos;country&apos;].toString();
	}
	return addr;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.7.1">
            <id>41f1daa2-e22b-439a-b0b5-16bc108c007e</id>
            <name>Parse CDA Date/Time</name>
            <revision>2</revision>
            <lastModified>
              <time>1559605931391</time>
              <timezone>Canada/Pacific</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Parse the CDA Date/Time to Date object

	@param {String} cdaDateTime - 
	@return {String} return the Date object
*/
function parseCDADateTime(cdaDateTime) {
	if (!cdaDateTime || cdaDateTime.length == 0) {
		return null;
	}
	if (cdaDateTime.length &lt;= 8) {
		return DateUtil.convertDate(&quot;yyyyMMdd&quot;, &quot;yyyy-MM-dd&quot;, cdaDateTime);
	}
	return DateUtil.convertDate(&quot;yyyyMMddHHmmZZZ&quot;, &quot;yyyy-MM-dd\&apos;T\&apos;HH:mm:ssZ&quot;, cdaDateTime);
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.7.1">
            <id>1dc8b8fe-b046-4292-a7c2-218c37bd0d2d</id>
            <name>Parse CDA Date/TIme to DB format</name>
            <revision>2</revision>
            <lastModified>
              <time>1559605899144</time>
              <timezone>Canada/Pacific</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Parse the CDA Date/Time to Date in DB format

	@param {String} cdaDateTime - 
	@return {String} return the Date in DB format
*/
function parseCDADateTimeToDB(cdaDateTime) {
	if (!cdaDateTime || cdaDateTime.length == 0) {
		return null;
	}
	if (cdaDateTime.length &lt;= 8) {
		return DateUtil.convertDate(&quot;yyyyMMdd&quot;, &quot;yyyy-MM-dd&quot;, cdaDateTime);
	}
	return DateUtil.convertDate(&quot;yyyyMMddHHmmZZZ&quot;, &quot;yyyy-MM-dd hh:mm:ss&quot;, cdaDateTime);
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.7.1">
            <id>a2f73260-eb70-4dcc-8b8a-9350c3bec9fd</id>
            <name>Parse CDA ID</name>
            <revision>1</revision>
            <lastModified>
              <time>1558462439596</time>
              <timezone>Canada/Pacific</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Parse the CDA Id to JSON object

	@param {String} cdaID - 
	@return {String} return the parsed ID object
*/
function parseCDAId(cdaID) {
	var id = {};
	if (cdaID[&apos;@extension&apos;]) {
		id[&apos;code&apos;] = cdaID[&apos;@extension&apos;].toString();
	}
	if (cdaID[&apos;@root&apos;]) {
		id[&apos;type&apos;] = cdaID[&apos;@root&apos;].toString();
	}
	return id;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.7.1">
            <id>a0354d90-ffa8-47c5-9776-e41927d2f0d0</id>
            <name>Parse CDA Name</name>
            <revision>2</revision>
            <lastModified>
              <time>1558485070479</time>
              <timezone>Canada/Pacific</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Parse the CDA Name to JSON object

	@param {String} cdaName - 
	@return {String} return the parsed Name object
*/
function parseCDAName(cdaName) {
	var name = {};
	name[&apos;use&apos;] = cdaName[&apos;@use&apos;].toString();
	name[&apos;family&apos;] = cdaName[&apos;family&apos;].toString();
	name[&apos;given&apos;] = [];
	for (var i = 0; i &lt; getArrayOrXmlLength(cdaName[&apos;given&apos;]); i++) {
		name[&apos;given&apos;][i] = cdaName[&apos;given&apos;][i].toString();
	}
	if (getArrayOrXmlLength(cdaName[&apos;prefix&apos;]) &gt; 0) {
		name[&apos;prefix&apos;] = cdaName[&apos;prefix&apos;].toString();
	}
	if (getArrayOrXmlLength(cdaName[&apos;suffix&apos;]) &gt; 0) {
		name[&apos;suffix&apos;] = cdaName[&apos;suffix&apos;].toString();
	}
	return name;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.7.1">
            <id>407e6d63-57cf-42f8-b555-5d6c575f4f55</id>
            <name>Parse CDA Telecom</name>
            <revision>1</revision>
            <lastModified>
              <time>1558462440017</time>
              <timezone>Canada/Pacific</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Parse the CDA Telecom to JSON object

	@param {String} telecom - 
	@return {String} return the parsed Telecom object
*/
function parseCDATelecom(cdaTelecom) {
	var telecom = {};
	telecom[&apos;use&apos;] = cdaTelecom[&apos;@use&apos;].toString();
	var telParts = cdaTelecom[&apos;@value&apos;].split(&apos;:&apos;);
	telecom[&apos;type&apos;] = telParts[0];	
	telecom[&apos;value&apos;] = telParts[1];
	return telecom;
}</code>
            </properties>
          </codeTemplate>
        </codeTemplates>
      </codeTemplateLibrary>
      <codeTemplateLibrary version="3.7.1">
        <id>5d2a129c-da07-49cc-950c-d941a93cd271</id>
        <name>OBIB</name>
        <revision>8</revision>
        <lastModified>
          <time>1560190713725</time>
          <timezone>America/Vancouver</timezone>
        </lastModified>
        <description></description>
        <includeNewChannels>true</includeNewChannels>
        <enabledChannelIds>
          <string>e995ffe5-fe5f-4260-a385-98f81c8418fe</string>
          <string>b2f0c503-a881-4126-995e-844c3e7692fd</string>
          <string>f3a65b72-9187-42ef-88cd-1d7626887e2e</string>
          <string>2375f320-7fd5-48cd-b3bb-53c22dab182b</string>
        </enabledChannelIds>
        <disabledChannelIds/>
        <codeTemplates>
          <codeTemplate version="3.7.1">
            <id>0d5c946b-11fe-4dde-8c69-7d9296ea32a0</id>
            <name>Build Document Storage Message</name>
            <revision>1</revision>
            <lastModified>
              <time>1558462439830</time>
              <timezone>Canada/Pacific</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Build a Document Storage Message.

	@param {String} locationId - 
	@param {String} receiverId - 
	@param {String} documentId - 
	@param {String} messageType - DOCUMENT, RESPONSE or ATTACHMENT
	@param {String} content - 
	@return {String} return the Document Storage Message JSON object
*/
function buildDocumentStorageMessage(locationId, receiverId, documentId, messageType, messageContent) {
	var storageMsg = {};
	storageMsg[&apos;locationId&apos;] = locationId;
	storageMsg[&apos;receiverId&apos;] = receiverId;
	storageMsg[&apos;documentId&apos;] = documentId;
	storageMsg[&apos;messageType&apos;] = messageType;
	storageMsg[&apos;messageContent&apos;] = messageContent;
	return storageMsg;
}
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.7.1">
            <id>738d81a1-d04c-482e-a011-30c61a09b3d3</id>
            <name>Create Array of DocumentAttachment</name>
            <revision>1</revision>
            <lastModified>
              <time>1558462439680</time>
              <timezone>Canada/Pacific</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Create an Array of DocumentAttachment objects from a JSON object

	@param {Object[]} jsonAttachments - 
	@return {DocumentAttachment[]} return the Array of DocumentAttachment
*/
function createDocumentAttachmentArray(jsonAttachments) {
	var attachments = [];
	if (jsonAttachments != null) {
		for (var i = 0; i &lt; jsonAttachments.length; i++) {
			var attachment = jsonAttachments[i];
			attachments.push(new Packages.ca.uvic.leadlab.cdxconnector.messages.DocumentAttachment(
				attachment[&apos;mediaType&apos;],
				attachment[&apos;content&apos;],
				attachment[&apos;hash&apos;],
				attachment[&apos;reference&apos;]));
		}
	}
	return attachments;
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.7.1">
            <id>bcd2a30d-111f-4fd3-9724-0e9a2e7dfe50</id>
            <name>Create DatabaseConnection</name>
            <revision>1</revision>
            <lastModified>
              <time>1558462439931</time>
              <timezone>Canada/Pacific</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>CHANNEL_BATCH</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>CHANNEL_POSTPROCESSOR</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
                <contextType>CHANNEL_DEPLOY</contextType>
                <contextType>GLOBAL_UNDEPLOY</contextType>
                <contextType>CHANNEL_ATTACHMENT</contextType>
                <contextType>CHANNEL_UNDEPLOY</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>GLOBAL_POSTPROCESSOR</contextType>
                <contextType>GLOBAL_DEPLOY</contextType>
                <contextType>GLOBAL_PREPROCESSOR</contextType>
                <contextType>CHANNEL_PREPROCESSOR</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Get the DatabaseConnection object

	@return {DatabaseConnection} return the DatabaseConnection object
*/
function getDBConnection() {
	return DatabaseConnectionFactory.createDatabaseConnection(
			globalMap.get(&apos;obib.db.driver&apos;), 
			globalMap.get(&apos;obib.db.url&apos;), 
			globalMap.get(&apos;obib.db.username&apos;) , 
			globalMap.get(&apos;obib.db.password&apos;));
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.7.1">
            <id>60bfd3ac-552a-4d59-ac1d-48fbe4f430b2</id>
            <name>Create Error Message</name>
            <revision>1</revision>
            <lastModified>
              <time>1558462439851</time>
              <timezone>Canada/Pacific</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Create JSON error message

	@param {String} error - Error message
	@param {Object} obibErrors - Associative Array of errors
	@return {String} return the JSON response
*/
function createErrorMessage(error, obibErrors) {
	return JSON.stringify({&apos;status&apos;: &apos;ERROR&apos;, &apos;message&apos;: error, &apos;obibErrors&apos;: obibErrors})
}</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.7.1">
            <id>f1de696c-f547-49ae-8225-f7e40ed2c87c</id>
            <name>Create Segment Before</name>
            <revision>1</revision>
            <lastModified>
              <time>1558462439720</time>
              <timezone>Canada/Pacific</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Create a new segment and insert it before the target segment.
	
	@param {String} name - The name of the segment to create.
	@param {String} segment - The existing segment that the new segment will be inserted before.
	@return {String} return The existing segment that the new segment will be inserted after.
*/
function createSegmentBefore(name, segment) {
	var msgObj = segment;
   	while (msgObj.parent() != undefined) { 
		msgObj = msgObj.parent(); 
	}
     msgObj.insertChildBefore(segment[0], new XML(&apos;&lt;&apos; + name + &apos;&gt;&lt;/&apos; + name + &apos;&gt;&apos;));
   	return msgObj.child(segment[0].childIndex() - 1);
}
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.7.1">
            <id>e83b8bbf-433a-4c3d-88a2-16f4132b38af</id>
            <name>Handle Return Message</name>
            <revision>1</revision>
            <lastModified>
              <time>1558462439790</time>
              <timezone>Canada/Pacific</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Handle the return message creation.

	@param {Object} responseStatus - 
	@param {Object} responseStatusMessage - 
	@param {Object} responseMessage - 
	@param {Function} createMessage - Callback function responsible for creating and return the result message.
	@return {String} return the stringify json message
*/
function handleResponseMessage(responseStatus, responseStatusMessage, responseMessage, createMessage) {
	if (responseStatus === SENT) { // process only SENT messages
		return JSON.stringify(createMessage()); // Convert the json to string and return it
	} else if (responseStatus === ERROR) {
		throw &quot;Error Message: &apos;&quot; + responseStatusMessage.toString() 
			+ &quot;&apos;\n Original Message: &apos;&quot; + msg.toString() + &quot;&apos;&quot;;
	} else {
		throw &quot;Not able to handle the response code: &apos;&quot; + responseStatus 
		+ &quot;&apos; \n Error Message: &apos;&quot; + responseStatusMessage.toString() 
		+ &quot;&apos;\n Original Message: &apos;&quot; + msg.toString() + &quot;&apos;&quot;;
	}
}
</code>
            </properties>
          </codeTemplate>
          <codeTemplate version="3.7.1">
            <id>dfd86988-26e1-4d97-b81d-fee49e303272</id>
            <name>Store OBIB Error</name>
            <revision>1</revision>
            <lastModified>
              <time>1558462439811</time>
              <timezone>Canada/Pacific</timezone>
            </lastModified>
            <contextSet>
              <delegate>
                <contextType>DESTINATION_FILTER_TRANSFORMER</contextType>
                <contextType>DESTINATION_RESPONSE_TRANSFORMER</contextType>
                <contextType>DESTINATION_DISPATCHER</contextType>
                <contextType>SOURCE_FILTER_TRANSFORMER</contextType>
                <contextType>SOURCE_RECEIVER</contextType>
              </delegate>
            </contextSet>
            <properties class="com.mirth.connect.model.codetemplates.BasicCodeTemplateProperties">
              <type>FUNCTION</type>
              <code>/**
	Store the error as an &apos;associative array&apos; in the channel map.
	To retrieve the array of errors use &apos;channelMap.get(&apos;obibErrors&apos;)&apos;

	@param {String} errorCode - the key of the associative array
	@param {String} errorMessage - the value of the associative array
*/
function storeOBIBError(errorCode, errorMessage) {
	var obibErrors = channelMap.get(&apos;obibErrors&apos;);
	if (obibErrors == null) {
		obibErrors = new Object();
	}
	obibErrors[errorCode] = errorMessage;
	channelMap.put(&apos;obibErrors&apos;, obibErrors);
}</code>
            </properties>
          </codeTemplate>
        </codeTemplates>
      </codeTemplateLibrary>
    </codeTemplateLibraries>
  </exportData>
</channel>